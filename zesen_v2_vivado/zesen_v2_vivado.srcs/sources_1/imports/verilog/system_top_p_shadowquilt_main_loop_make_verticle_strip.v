// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_p_shadowquilt_main_loop_make_verticle_strip (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        points_address0,
        points_ce0,
        points_q0,
        points_address1,
        points_ce1,
        points_q1,
        num_points_address0,
        num_points_ce0,
        num_points_q0,
        num_points_address1,
        num_points_ce1,
        num_points_q1,
        patch_stream_V_din,
        patch_stream_V_full_n,
        patch_stream_V_write,
        patch_buffer_address0,
        patch_buffer_ce0,
        patch_buffer_we0,
        patch_buffer_d0,
        patch_buffer_q0,
        patch_buffer_address1,
        patch_buffer_ce1,
        patch_buffer_we1,
        patch_buffer_d1,
        patch_buffer_q1,
        patch_buffer_is_empty_address0,
        patch_buffer_is_empty_ce0,
        patch_buffer_is_empty_we0,
        patch_buffer_is_empty_d0,
        pSlope_address0,
        pSlope_ce0,
        pSlope_we0,
        pSlope_d0,
        shadow_bottomL_jR_address0,
        shadow_bottomL_jR_ce0,
        shadow_bottomL_jR_we0,
        shadow_bottomL_jR_d0,
        shadow_bottomL_jR_q0,
        shadow_bottomL_jR_address1,
        shadow_bottomL_jR_ce1,
        shadow_bottomL_jR_q1,
        shadow_bottomR_jR_address0,
        shadow_bottomR_jR_ce0,
        shadow_bottomR_jR_we0,
        shadow_bottomR_jR_d0,
        shadow_bottomR_jR_q0,
        shadow_bottomR_jR_address1,
        shadow_bottomR_jR_ce1,
        shadow_bottomR_jR_q1,
        shadow_bottomL_jL_address0,
        shadow_bottomL_jL_ce0,
        shadow_bottomL_jL_we0,
        shadow_bottomL_jL_d0,
        shadow_bottomL_jL_q0,
        shadow_bottomL_jL_address1,
        shadow_bottomL_jL_ce1,
        shadow_bottomL_jL_q1,
        shadow_bottomR_jL_address0,
        shadow_bottomR_jL_ce0,
        shadow_bottomR_jL_we0,
        shadow_bottomR_jL_d0,
        shadow_bottomR_jL_q0,
        shadow_bottomR_jL_address1,
        shadow_bottomR_jL_ce1,
        shadow_bottomR_jL_q1,
        shadow_fromTopToInnermost_topL_jL_address0,
        shadow_fromTopToInnermost_topL_jL_ce0,
        shadow_fromTopToInnermost_topL_jL_we0,
        shadow_fromTopToInnermost_topL_jL_d0,
        shadow_fromTopToInnermost_topL_jL_q0,
        shadow_fromTopToInnermost_topL_jR_address0,
        shadow_fromTopToInnermost_topL_jR_ce0,
        shadow_fromTopToInnermost_topL_jR_we0,
        shadow_fromTopToInnermost_topL_jR_d0,
        shadow_fromTopToInnermost_topL_jR_q0,
        shadow_fromTopToInnermost_topR_jL_address0,
        shadow_fromTopToInnermost_topR_jL_ce0,
        shadow_fromTopToInnermost_topR_jL_we0,
        shadow_fromTopToInnermost_topR_jL_d0,
        shadow_fromTopToInnermost_topR_jL_q0,
        shadow_fromTopToInnermost_topR_jR_address0,
        shadow_fromTopToInnermost_topR_jR_ce0,
        shadow_fromTopToInnermost_topR_jR_we0,
        shadow_fromTopToInnermost_topR_jR_d0,
        shadow_fromTopToInnermost_topR_jR_q0,
        z1_min_address0,
        z1_min_ce0,
        z1_min_we0,
        z1_min_d0,
        z1_min_q0,
        z1_max_address0,
        z1_max_ce0,
        z1_max_we0,
        z1_max_d0,
        z1_max_q0,
        a_corner_0_address0,
        a_corner_0_ce0,
        a_corner_0_we0,
        a_corner_0_d0,
        a_corner_1_address0,
        a_corner_1_ce0,
        a_corner_1_we0,
        a_corner_1_d0,
        a_corner_1_q0,
        b_corner_0_address0,
        b_corner_0_ce0,
        b_corner_0_we0,
        b_corner_0_d0,
        b_corner_1_address0,
        b_corner_1_ce0,
        b_corner_1_we0,
        b_corner_1_d0,
        b_corner_1_q0,
        c_corner_0_address0,
        c_corner_0_ce0,
        c_corner_0_we0,
        c_corner_0_d0,
        c_corner_0_q0,
        c_corner_1_address0,
        c_corner_1_ce0,
        c_corner_1_we0,
        c_corner_1_d0,
        c_corner_1_q0,
        d_corner_0_address0,
        d_corner_0_ce0,
        d_corner_0_we0,
        d_corner_0_d0,
        d_corner_1_address0,
        d_corner_1_ce0,
        d_corner_1_we0,
        d_corner_1_d0,
        d_corner_1_q0,
        squareAcceptance_address0,
        squareAcceptance_ce0,
        squareAcceptance_we0,
        squareAcceptance_d0,
        squareAcceptance_q0,
        flatTop_address0,
        flatTop_ce0,
        flatTop_we0,
        flatTop_d0,
        flatBottom_address0,
        flatBottom_ce0,
        flatBottom_we0,
        flatBottom_d0,
        flatBottom_q0,
        triangleAcceptance_address0,
        triangleAcceptance_ce0,
        triangleAcceptance_we0,
        triangleAcceptance_d0,
        triangleAcceptance_q0
);

parameter    ap_ST_fsm_state1 = 607'd1;
parameter    ap_ST_fsm_state2 = 607'd2;
parameter    ap_ST_fsm_state3 = 607'd4;
parameter    ap_ST_fsm_state4 = 607'd8;
parameter    ap_ST_fsm_state5 = 607'd16;
parameter    ap_ST_fsm_state6 = 607'd32;
parameter    ap_ST_fsm_state7 = 607'd64;
parameter    ap_ST_fsm_state8 = 607'd128;
parameter    ap_ST_fsm_state9 = 607'd256;
parameter    ap_ST_fsm_state10 = 607'd512;
parameter    ap_ST_fsm_state11 = 607'd1024;
parameter    ap_ST_fsm_state12 = 607'd2048;
parameter    ap_ST_fsm_state13 = 607'd4096;
parameter    ap_ST_fsm_state14 = 607'd8192;
parameter    ap_ST_fsm_state15 = 607'd16384;
parameter    ap_ST_fsm_state16 = 607'd32768;
parameter    ap_ST_fsm_state17 = 607'd65536;
parameter    ap_ST_fsm_state18 = 607'd131072;
parameter    ap_ST_fsm_state19 = 607'd262144;
parameter    ap_ST_fsm_state20 = 607'd524288;
parameter    ap_ST_fsm_state21 = 607'd1048576;
parameter    ap_ST_fsm_state22 = 607'd2097152;
parameter    ap_ST_fsm_state23 = 607'd4194304;
parameter    ap_ST_fsm_state24 = 607'd8388608;
parameter    ap_ST_fsm_state25 = 607'd16777216;
parameter    ap_ST_fsm_state26 = 607'd33554432;
parameter    ap_ST_fsm_state27 = 607'd67108864;
parameter    ap_ST_fsm_state28 = 607'd134217728;
parameter    ap_ST_fsm_state29 = 607'd268435456;
parameter    ap_ST_fsm_state30 = 607'd536870912;
parameter    ap_ST_fsm_state31 = 607'd1073741824;
parameter    ap_ST_fsm_state32 = 607'd2147483648;
parameter    ap_ST_fsm_state33 = 607'd4294967296;
parameter    ap_ST_fsm_state34 = 607'd8589934592;
parameter    ap_ST_fsm_state35 = 607'd17179869184;
parameter    ap_ST_fsm_state36 = 607'd34359738368;
parameter    ap_ST_fsm_state37 = 607'd68719476736;
parameter    ap_ST_fsm_state38 = 607'd137438953472;
parameter    ap_ST_fsm_state39 = 607'd274877906944;
parameter    ap_ST_fsm_state40 = 607'd549755813888;
parameter    ap_ST_fsm_state41 = 607'd1099511627776;
parameter    ap_ST_fsm_state42 = 607'd2199023255552;
parameter    ap_ST_fsm_state43 = 607'd4398046511104;
parameter    ap_ST_fsm_state44 = 607'd8796093022208;
parameter    ap_ST_fsm_state45 = 607'd17592186044416;
parameter    ap_ST_fsm_state46 = 607'd35184372088832;
parameter    ap_ST_fsm_state47 = 607'd70368744177664;
parameter    ap_ST_fsm_state48 = 607'd140737488355328;
parameter    ap_ST_fsm_state49 = 607'd281474976710656;
parameter    ap_ST_fsm_state50 = 607'd562949953421312;
parameter    ap_ST_fsm_state51 = 607'd1125899906842624;
parameter    ap_ST_fsm_state52 = 607'd2251799813685248;
parameter    ap_ST_fsm_state53 = 607'd4503599627370496;
parameter    ap_ST_fsm_state54 = 607'd9007199254740992;
parameter    ap_ST_fsm_state55 = 607'd18014398509481984;
parameter    ap_ST_fsm_state56 = 607'd36028797018963968;
parameter    ap_ST_fsm_state57 = 607'd72057594037927936;
parameter    ap_ST_fsm_state58 = 607'd144115188075855872;
parameter    ap_ST_fsm_state59 = 607'd288230376151711744;
parameter    ap_ST_fsm_state60 = 607'd576460752303423488;
parameter    ap_ST_fsm_state61 = 607'd1152921504606846976;
parameter    ap_ST_fsm_pp0_stage0 = 607'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 607'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 607'd9223372036854775808;
parameter    ap_ST_fsm_pp1_stage0 = 607'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 607'd36893488147419103232;
parameter    ap_ST_fsm_pp2_stage0 = 607'd73786976294838206464;
parameter    ap_ST_fsm_state71 = 607'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 607'd295147905179352825856;
parameter    ap_ST_fsm_state73 = 607'd590295810358705651712;
parameter    ap_ST_fsm_state74 = 607'd1180591620717411303424;
parameter    ap_ST_fsm_state75 = 607'd2361183241434822606848;
parameter    ap_ST_fsm_state76 = 607'd4722366482869645213696;
parameter    ap_ST_fsm_state77 = 607'd9444732965739290427392;
parameter    ap_ST_fsm_state78 = 607'd18889465931478580854784;
parameter    ap_ST_fsm_state79 = 607'd37778931862957161709568;
parameter    ap_ST_fsm_state80 = 607'd75557863725914323419136;
parameter    ap_ST_fsm_state81 = 607'd151115727451828646838272;
parameter    ap_ST_fsm_state82 = 607'd302231454903657293676544;
parameter    ap_ST_fsm_state83 = 607'd604462909807314587353088;
parameter    ap_ST_fsm_state84 = 607'd1208925819614629174706176;
parameter    ap_ST_fsm_state85 = 607'd2417851639229258349412352;
parameter    ap_ST_fsm_state86 = 607'd4835703278458516698824704;
parameter    ap_ST_fsm_state87 = 607'd9671406556917033397649408;
parameter    ap_ST_fsm_state88 = 607'd19342813113834066795298816;
parameter    ap_ST_fsm_state89 = 607'd38685626227668133590597632;
parameter    ap_ST_fsm_state90 = 607'd77371252455336267181195264;
parameter    ap_ST_fsm_state91 = 607'd154742504910672534362390528;
parameter    ap_ST_fsm_state92 = 607'd309485009821345068724781056;
parameter    ap_ST_fsm_state93 = 607'd618970019642690137449562112;
parameter    ap_ST_fsm_state94 = 607'd1237940039285380274899124224;
parameter    ap_ST_fsm_state95 = 607'd2475880078570760549798248448;
parameter    ap_ST_fsm_state96 = 607'd4951760157141521099596496896;
parameter    ap_ST_fsm_state97 = 607'd9903520314283042199192993792;
parameter    ap_ST_fsm_state98 = 607'd19807040628566084398385987584;
parameter    ap_ST_fsm_state99 = 607'd39614081257132168796771975168;
parameter    ap_ST_fsm_state100 = 607'd79228162514264337593543950336;
parameter    ap_ST_fsm_state101 = 607'd158456325028528675187087900672;
parameter    ap_ST_fsm_state102 = 607'd316912650057057350374175801344;
parameter    ap_ST_fsm_state103 = 607'd633825300114114700748351602688;
parameter    ap_ST_fsm_state104 = 607'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state105 = 607'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state106 = 607'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state107 = 607'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state108 = 607'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state109 = 607'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state110 = 607'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state111 = 607'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state112 = 607'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state113 = 607'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state114 = 607'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state115 = 607'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state116 = 607'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state117 = 607'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state118 = 607'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state119 = 607'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state120 = 607'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state121 = 607'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state122 = 607'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state123 = 607'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state124 = 607'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state125 = 607'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state126 = 607'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state127 = 607'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state128 = 607'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state129 = 607'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state130 = 607'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state131 = 607'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state132 = 607'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state133 = 607'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state134 = 607'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state135 = 607'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state136 = 607'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state137 = 607'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_pp3_stage0 = 607'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state140 = 607'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state141 = 607'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_pp4_stage0 = 607'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state144 = 607'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_pp5_stage0 = 607'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state147 = 607'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_pp6_stage0 = 607'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state151 = 607'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_pp7_stage0 = 607'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state154 = 607'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_pp8_stage0 = 607'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state159 = 607'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_pp9_stage0 = 607'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state215 = 607'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_pp10_stage0 = 607'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state219 = 607'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state220 = 607'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state221 = 607'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state222 = 607'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state223 = 607'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state224 = 607'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state225 = 607'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state226 = 607'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state227 = 607'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state228 = 607'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state229 = 607'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state230 = 607'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state231 = 607'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state232 = 607'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state233 = 607'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state234 = 607'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state235 = 607'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state236 = 607'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state237 = 607'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state238 = 607'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state239 = 607'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state240 = 607'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state241 = 607'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state242 = 607'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state243 = 607'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state244 = 607'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state245 = 607'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state246 = 607'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state247 = 607'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state248 = 607'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state249 = 607'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state250 = 607'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state251 = 607'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state252 = 607'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state253 = 607'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state254 = 607'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state255 = 607'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state256 = 607'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state257 = 607'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state258 = 607'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state259 = 607'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state260 = 607'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state261 = 607'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state262 = 607'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state263 = 607'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state264 = 607'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state265 = 607'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state266 = 607'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state267 = 607'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state268 = 607'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state269 = 607'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state270 = 607'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state271 = 607'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state272 = 607'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state273 = 607'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state274 = 607'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state275 = 607'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state276 = 607'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state277 = 607'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state278 = 607'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state279 = 607'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state280 = 607'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state281 = 607'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state282 = 607'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state283 = 607'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state284 = 607'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state285 = 607'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state286 = 607'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state287 = 607'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state288 = 607'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state289 = 607'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state290 = 607'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state291 = 607'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state292 = 607'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state293 = 607'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state294 = 607'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state295 = 607'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state296 = 607'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state297 = 607'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state298 = 607'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state299 = 607'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state300 = 607'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state301 = 607'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state302 = 607'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state303 = 607'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state304 = 607'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state305 = 607'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state306 = 607'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state307 = 607'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state308 = 607'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state309 = 607'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state310 = 607'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state311 = 607'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state312 = 607'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state313 = 607'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state314 = 607'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state315 = 607'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state316 = 607'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state317 = 607'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state318 = 607'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state319 = 607'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state320 = 607'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state321 = 607'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state322 = 607'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state323 = 607'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state324 = 607'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state325 = 607'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state326 = 607'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state327 = 607'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state328 = 607'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state329 = 607'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state330 = 607'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state331 = 607'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state332 = 607'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state333 = 607'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state334 = 607'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state335 = 607'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state336 = 607'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state337 = 607'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state338 = 607'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state339 = 607'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state340 = 607'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state341 = 607'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state342 = 607'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state343 = 607'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state344 = 607'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state345 = 607'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state346 = 607'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state347 = 607'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state348 = 607'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state349 = 607'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state350 = 607'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state351 = 607'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state352 = 607'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state353 = 607'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state354 = 607'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state355 = 607'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state356 = 607'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state357 = 607'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state358 = 607'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state359 = 607'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state360 = 607'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state361 = 607'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    ap_ST_fsm_state362 = 607'd15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792;
parameter    ap_ST_fsm_state363 = 607'd31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584;
parameter    ap_ST_fsm_state364 = 607'd63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168;
parameter    ap_ST_fsm_state365 = 607'd127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336;
parameter    ap_ST_fsm_state366 = 607'd254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672;
parameter    ap_ST_fsm_state367 = 607'd509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344;
parameter    ap_ST_fsm_state368 = 607'd1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688;
parameter    ap_ST_fsm_state369 = 607'd2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376;
parameter    ap_ST_fsm_state370 = 607'd4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752;
parameter    ap_ST_fsm_state371 = 607'd8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504;
parameter    ap_ST_fsm_state372 = 607'd16296287810675888690147565507275025288411747149327490005089123594835050398106693649467179008;
parameter    ap_ST_fsm_state373 = 607'd32592575621351777380295131014550050576823494298654980010178247189670100796213387298934358016;
parameter    ap_ST_fsm_state374 = 607'd65185151242703554760590262029100101153646988597309960020356494379340201592426774597868716032;
parameter    ap_ST_fsm_state375 = 607'd130370302485407109521180524058200202307293977194619920040712988758680403184853549195737432064;
parameter    ap_ST_fsm_state376 = 607'd260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128;
parameter    ap_ST_fsm_state377 = 607'd521481209941628438084722096232800809229175908778479680162851955034721612739414196782949728256;
parameter    ap_ST_fsm_state378 = 607'd1042962419883256876169444192465601618458351817556959360325703910069443225478828393565899456512;
parameter    ap_ST_fsm_state379 = 607'd2085924839766513752338888384931203236916703635113918720651407820138886450957656787131798913024;
parameter    ap_ST_fsm_state380 = 607'd4171849679533027504677776769862406473833407270227837441302815640277772901915313574263597826048;
parameter    ap_ST_fsm_state381 = 607'd8343699359066055009355553539724812947666814540455674882605631280555545803830627148527195652096;
parameter    ap_ST_fsm_state382 = 607'd16687398718132110018711107079449625895333629080911349765211262561111091607661254297054391304192;
parameter    ap_ST_fsm_state383 = 607'd33374797436264220037422214158899251790667258161822699530422525122222183215322508594108782608384;
parameter    ap_ST_fsm_state384 = 607'd66749594872528440074844428317798503581334516323645399060845050244444366430645017188217565216768;
parameter    ap_ST_fsm_state385 = 607'd133499189745056880149688856635597007162669032647290798121690100488888732861290034376435130433536;
parameter    ap_ST_fsm_state386 = 607'd266998379490113760299377713271194014325338065294581596243380200977777465722580068752870260867072;
parameter    ap_ST_fsm_state387 = 607'd533996758980227520598755426542388028650676130589163192486760401955554931445160137505740521734144;
parameter    ap_ST_fsm_state388 = 607'd1067993517960455041197510853084776057301352261178326384973520803911109862890320275011481043468288;
parameter    ap_ST_fsm_state389 = 607'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936576;
parameter    ap_ST_fsm_state390 = 607'd4271974071841820164790043412339104229205409044713305539894083215644439451561281100045924173873152;
parameter    ap_ST_fsm_state391 = 607'd8543948143683640329580086824678208458410818089426611079788166431288878903122562200091848347746304;
parameter    ap_ST_fsm_state392 = 607'd17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608;
parameter    ap_ST_fsm_state393 = 607'd34175792574734561318320347298712833833643272357706444319152665725155515612490248800367393390985216;
parameter    ap_ST_fsm_state394 = 607'd68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432;
parameter    ap_ST_fsm_state395 = 607'd136703170298938245273281389194851335334573089430825777276610662900622062449960995201469573563940864;
parameter    ap_ST_fsm_state396 = 607'd273406340597876490546562778389702670669146178861651554553221325801244124899921990402939147127881728;
parameter    ap_ST_fsm_state397 = 607'd546812681195752981093125556779405341338292357723303109106442651602488249799843980805878294255763456;
parameter    ap_ST_fsm_state398 = 607'd1093625362391505962186251113558810682676584715446606218212885303204976499599687961611756588511526912;
parameter    ap_ST_fsm_state399 = 607'd2187250724783011924372502227117621365353169430893212436425770606409952999199375923223513177023053824;
parameter    ap_ST_fsm_state400 = 607'd4374501449566023848745004454235242730706338861786424872851541212819905998398751846447026354046107648;
parameter    ap_ST_fsm_state401 = 607'd8749002899132047697490008908470485461412677723572849745703082425639811996797503692894052708092215296;
parameter    ap_ST_fsm_state402 = 607'd17498005798264095394980017816940970922825355447145699491406164851279623993595007385788105416184430592;
parameter    ap_ST_fsm_state403 = 607'd34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184;
parameter    ap_ST_fsm_state404 = 607'd69992023193056381579920071267763883691301421788582797965624659405118495974380029543152421664737722368;
parameter    ap_ST_fsm_state405 = 607'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444736;
parameter    ap_ST_fsm_state406 = 607'd279968092772225526319680285071055534765205687154331191862498637620473983897520118172609686658950889472;
parameter    ap_ST_fsm_state407 = 607'd559936185544451052639360570142111069530411374308662383724997275240947967795040236345219373317901778944;
parameter    ap_ST_fsm_state408 = 607'd1119872371088902105278721140284222139060822748617324767449994550481895935590080472690438746635803557888;
parameter    ap_ST_fsm_state409 = 607'd2239744742177804210557442280568444278121645497234649534899989100963791871180160945380877493271607115776;
parameter    ap_ST_fsm_state410 = 607'd4479489484355608421114884561136888556243290994469299069799978201927583742360321890761754986543214231552;
parameter    ap_ST_fsm_state411 = 607'd8958978968711216842229769122273777112486581988938598139599956403855167484720643781523509973086428463104;
parameter    ap_ST_fsm_state412 = 607'd17917957937422433684459538244547554224973163977877196279199912807710334969441287563047019946172856926208;
parameter    ap_ST_fsm_state413 = 607'd35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852416;
parameter    ap_ST_fsm_state414 = 607'd71671831749689734737838152978190216899892655911508785116799651230841339877765150252188079784691427704832;
parameter    ap_ST_fsm_state415 = 607'd143343663499379469475676305956380433799785311823017570233599302461682679755530300504376159569382855409664;
parameter    ap_ST_fsm_state416 = 607'd286687326998758938951352611912760867599570623646035140467198604923365359511060601008752319138765710819328;
parameter    ap_ST_fsm_state417 = 607'd573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656;
parameter    ap_ST_fsm_state418 = 607'd1146749307995035755805410447651043470398282494584140561868794419693461438044242404035009276555062843277312;
parameter    ap_ST_fsm_state419 = 607'd2293498615990071511610820895302086940796564989168281123737588839386922876088484808070018553110125686554624;
parameter    ap_ST_fsm_state420 = 607'd4586997231980143023221641790604173881593129978336562247475177678773845752176969616140037106220251373109248;
parameter    ap_ST_fsm_state421 = 607'd9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496;
parameter    ap_ST_fsm_state422 = 607'd18347988927920572092886567162416695526372519913346248989900710715095383008707878464560148424881005492436992;
parameter    ap_ST_fsm_state423 = 607'd36695977855841144185773134324833391052745039826692497979801421430190766017415756929120296849762010984873984;
parameter    ap_ST_fsm_state424 = 607'd73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968;
parameter    ap_ST_fsm_state425 = 607'd146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936;
parameter    ap_ST_fsm_state426 = 607'd293567822846729153486185074598667128421960318613539983838411371441526128139326055432962374798096087878991872;
parameter    ap_ST_fsm_state427 = 607'd587135645693458306972370149197334256843920637227079967676822742883052256278652110865924749596192175757983744;
parameter    ap_ST_fsm_state428 = 607'd1174271291386916613944740298394668513687841274454159935353645485766104512557304221731849499192384351515967488;
parameter    ap_ST_fsm_state429 = 607'd2348542582773833227889480596789337027375682548908319870707290971532209025114608443463698998384768703031934976;
parameter    ap_ST_fsm_state430 = 607'd4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952;
parameter    ap_ST_fsm_state431 = 607'd9394170331095332911557922387157348109502730195633279482829163886128836100458433773854795993539074812127739904;
parameter    ap_ST_fsm_state432 = 607'd18788340662190665823115844774314696219005460391266558965658327772257672200916867547709591987078149624255479808;
parameter    ap_ST_fsm_state433 = 607'd37576681324381331646231689548629392438010920782533117931316655544515344401833735095419183974156299248510959616;
parameter    ap_ST_fsm_state434 = 607'd75153362648762663292463379097258784876021841565066235862633311089030688803667470190838367948312598497021919232;
parameter    ap_ST_fsm_state435 = 607'd150306725297525326584926758194517569752043683130132471725266622178061377607334940381676735896625196994043838464;
parameter    ap_ST_fsm_state436 = 607'd300613450595050653169853516389035139504087366260264943450533244356122755214669880763353471793250393988087676928;
parameter    ap_ST_fsm_state437 = 607'd601226901190101306339707032778070279008174732520529886901066488712245510429339761526706943586500787976175353856;
parameter    ap_ST_fsm_state438 = 607'd1202453802380202612679414065556140558016349465041059773802132977424491020858679523053413887173001575952350707712;
parameter    ap_ST_fsm_state439 = 607'd2404907604760405225358828131112281116032698930082119547604265954848982041717359046106827774346003151904701415424;
parameter    ap_ST_fsm_state440 = 607'd4809815209520810450717656262224562232065397860164239095208531909697964083434718092213655548692006303809402830848;
parameter    ap_ST_fsm_state441 = 607'd9619630419041620901435312524449124464130795720328478190417063819395928166869436184427311097384012607618805661696;
parameter    ap_ST_fsm_state442 = 607'd19239260838083241802870625048898248928261591440656956380834127638791856333738872368854622194768025215237611323392;
parameter    ap_ST_fsm_state443 = 607'd38478521676166483605741250097796497856523182881313912761668255277583712667477744737709244389536050430475222646784;
parameter    ap_ST_fsm_state444 = 607'd76957043352332967211482500195592995713046365762627825523336510555167425334955489475418488779072100860950445293568;
parameter    ap_ST_fsm_state445 = 607'd153914086704665934422965000391185991426092731525255651046673021110334850669910978950836977558144201721900890587136;
parameter    ap_ST_fsm_state446 = 607'd307828173409331868845930000782371982852185463050511302093346042220669701339821957901673955116288403443801781174272;
parameter    ap_ST_fsm_state447 = 607'd615656346818663737691860001564743965704370926101022604186692084441339402679643915803347910232576806887603562348544;
parameter    ap_ST_fsm_state448 = 607'd1231312693637327475383720003129487931408741852202045208373384168882678805359287831606695820465153613775207124697088;
parameter    ap_ST_fsm_state449 = 607'd2462625387274654950767440006258975862817483704404090416746768337765357610718575663213391640930307227550414249394176;
parameter    ap_ST_fsm_state450 = 607'd4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455100828498788352;
parameter    ap_ST_fsm_state451 = 607'd9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576704;
parameter    ap_ST_fsm_state452 = 607'd19701003098197239606139520050071806902539869635232723333974146702122860885748605305707133127442457820403313995153408;
parameter    ap_ST_fsm_state453 = 607'd39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816;
parameter    ap_ST_fsm_state454 = 607'd78804012392788958424558080200287227610159478540930893335896586808491443542994421222828532509769831281613255980613632;
parameter    ap_ST_fsm_state455 = 607'd157608024785577916849116160400574455220318957081861786671793173616982887085988842445657065019539662563226511961227264;
parameter    ap_ST_fsm_state456 = 607'd315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528;
parameter    ap_ST_fsm_state457 = 607'd630432099142311667396464641602297820881275828327447146687172694467931548343955369782628260078158650252906047844909056;
parameter    ap_ST_fsm_state458 = 607'd1260864198284623334792929283204595641762551656654894293374345388935863096687910739565256520156317300505812095689818112;
parameter    ap_ST_fsm_state459 = 607'd2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224;
parameter    ap_ST_fsm_state460 = 607'd5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448;
parameter    ap_ST_fsm_state461 = 607'd10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896;
parameter    ap_ST_fsm_state462 = 607'd20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792;
parameter    ap_ST_fsm_state463 = 607'd40347654345107946713373737062547060536401653012956617387979052445947619094013143666088208645002153616185987062074179584;
parameter    ap_ST_fsm_state464 = 607'd80695308690215893426747474125094121072803306025913234775958104891895238188026287332176417290004307232371974124148359168;
parameter    ap_ST_fsm_state465 = 607'd161390617380431786853494948250188242145606612051826469551916209783790476376052574664352834580008614464743948248296718336;
parameter    ap_ST_fsm_state466 = 607'd322781234760863573706989896500376484291213224103652939103832419567580952752105149328705669160017228929487896496593436672;
parameter    ap_ST_fsm_state467 = 607'd645562469521727147413979793000752968582426448207305878207664839135161905504210298657411338320034457858975792993186873344;
parameter    ap_ST_fsm_state468 = 607'd1291124939043454294827959586001505937164852896414611756415329678270323811008420597314822676640068915717951585986373746688;
parameter    ap_ST_fsm_state469 = 607'd2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493376;
parameter    ap_ST_fsm_state470 = 607'd5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752;
parameter    ap_ST_fsm_state471 = 607'd10328999512347634358623676688012047497318823171316894051322637426162590488067364778518581413120551325743612687890989973504;
parameter    ap_ST_fsm_state472 = 607'd20657999024695268717247353376024094994637646342633788102645274852325180976134729557037162826241102651487225375781979947008;
parameter    ap_ST_fsm_state473 = 607'd41315998049390537434494706752048189989275292685267576205290549704650361952269459114074325652482205302974450751563959894016;
parameter    ap_ST_fsm_state474 = 607'd82631996098781074868989413504096379978550585370535152410581099409300723904538918228148651304964410605948901503127919788032;
parameter    ap_ST_fsm_state475 = 607'd165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064;
parameter    ap_ST_fsm_state476 = 607'd330527984395124299475957654016385519914202341482140609642324397637202895618155672912594605219857642423795606012511679152128;
parameter    ap_ST_fsm_state477 = 607'd661055968790248598951915308032771039828404682964281219284648795274405791236311345825189210439715284847591212025023358304256;
parameter    ap_ST_fsm_state478 = 607'd1322111937580497197903830616065542079656809365928562438569297590548811582472622691650378420879430569695182424050046716608512;
parameter    ap_ST_fsm_state479 = 607'd2644223875160994395807661232131084159313618731857124877138595181097623164945245383300756841758861139390364848100093433217024;
parameter    ap_ST_fsm_state480 = 607'd5288447750321988791615322464262168318627237463714249754277190362195246329890490766601513683517722278780729696200186866434048;
parameter    ap_ST_fsm_state481 = 607'd10576895500643977583230644928524336637254474927428499508554380724390492659780981533203027367035444557561459392400373732868096;
parameter    ap_ST_fsm_state482 = 607'd21153791001287955166461289857048673274508949854856999017108761448780985319561963066406054734070889115122918784800747465736192;
parameter    ap_ST_fsm_state483 = 607'd42307582002575910332922579714097346549017899709713998034217522897561970639123926132812109468141778230245837569601494931472384;
parameter    ap_ST_fsm_state484 = 607'd84615164005151820665845159428194693098035799419427996068435045795123941278247852265624218936283556460491675139202989862944768;
parameter    ap_ST_fsm_state485 = 607'd169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536;
parameter    ap_ST_fsm_state486 = 607'd338460656020607282663380637712778772392143197677711984273740183180495765112991409062496875745134225841966700556811959451779072;
parameter    ap_ST_fsm_state487 = 607'd676921312041214565326761275425557544784286395355423968547480366360991530225982818124993751490268451683933401113623918903558144;
parameter    ap_ST_fsm_state488 = 607'd1353842624082429130653522550851115089568572790710847937094960732721983060451965636249987502980536903367866802227247837807116288;
parameter    ap_ST_fsm_state489 = 607'd2707685248164858261307045101702230179137145581421695874189921465443966120903931272499975005961073806735733604454495675614232576;
parameter    ap_ST_fsm_state490 = 607'd5415370496329716522614090203404460358274291162843391748379842930887932241807862544999950011922147613471467208908991351228465152;
parameter    ap_ST_fsm_state491 = 607'd10830740992659433045228180406808920716548582325686783496759685861775864483615725089999900023844295226942934417817982702456930304;
parameter    ap_ST_fsm_state492 = 607'd21661481985318866090456360813617841433097164651373566993519371723551728967231450179999800047688590453885868835635965404913860608;
parameter    ap_ST_fsm_state493 = 607'd43322963970637732180912721627235682866194329302747133987038743447103457934462900359999600095377180907771737671271930809827721216;
parameter    ap_ST_fsm_state494 = 607'd86645927941275464361825443254471365732388658605494267974077486894206915868925800719999200190754361815543475342543861619655442432;
parameter    ap_ST_fsm_state495 = 607'd173291855882550928723650886508942731464777317210988535948154973788413831737851601439998400381508723631086950685087723239310884864;
parameter    ap_ST_fsm_state496 = 607'd346583711765101857447301773017885462929554634421977071896309947576827663475703202879996800763017447262173901370175446478621769728;
parameter    ap_ST_fsm_state497 = 607'd693167423530203714894603546035770925859109268843954143792619895153655326951406405759993601526034894524347802740350892957243539456;
parameter    ap_ST_fsm_state498 = 607'd1386334847060407429789207092071541851718218537687908287585239790307310653902812811519987203052069789048695605480701785914487078912;
parameter    ap_ST_fsm_state499 = 607'd2772669694120814859578414184143083703436437075375816575170479580614621307805625623039974406104139578097391210961403571828974157824;
parameter    ap_ST_fsm_state500 = 607'd5545339388241629719156828368286167406872874150751633150340959161229242615611251246079948812208279156194782421922807143657948315648;
parameter    ap_ST_fsm_state501 = 607'd11090678776483259438313656736572334813745748301503266300681918322458485231222502492159897624416558312389564843845614287315896631296;
parameter    ap_ST_fsm_state502 = 607'd22181357552966518876627313473144669627491496603006532601363836644916970462445004984319795248833116624779129687691228574631793262592;
parameter    ap_ST_fsm_state503 = 607'd44362715105933037753254626946289339254982993206013065202727673289833940924890009968639590497666233249558259375382457149263586525184;
parameter    ap_ST_fsm_state504 = 607'd88725430211866075506509253892578678509965986412026130405455346579667881849780019937279180995332466499116518750764914298527173050368;
parameter    ap_ST_fsm_state505 = 607'd177450860423732151013018507785157357019931972824052260810910693159335763699560039874558361990664932998233037501529828597054346100736;
parameter    ap_ST_fsm_state506 = 607'd354901720847464302026037015570314714039863945648104521621821386318671527399120079749116723981329865996466075003059657194108692201472;
parameter    ap_ST_fsm_state507 = 607'd709803441694928604052074031140629428079727891296209043243642772637343054798240159498233447962659731992932150006119314388217384402944;
parameter    ap_ST_fsm_state508 = 607'd1419606883389857208104148062281258856159455782592418086487285545274686109596480318996466895925319463985864300012238628776434768805888;
parameter    ap_ST_fsm_state509 = 607'd2839213766779714416208296124562517712318911565184836172974571090549372219192960637992933791850638927971728600024477257552869537611776;
parameter    ap_ST_fsm_state510 = 607'd5678427533559428832416592249125035424637823130369672345949142181098744438385921275985867583701277855943457200048954515105739075223552;
parameter    ap_ST_fsm_state511 = 607'd11356855067118857664833184498250070849275646260739344691898284362197488876771842551971735167402555711886914400097909030211478150447104;
parameter    ap_ST_fsm_state512 = 607'd22713710134237715329666368996500141698551292521478689383796568724394977753543685103943470334805111423773828800195818060422956300894208;
parameter    ap_ST_fsm_state513 = 607'd45427420268475430659332737993000283397102585042957378767593137448789955507087370207886940669610222847547657600391636120845912601788416;
parameter    ap_ST_fsm_state514 = 607'd90854840536950861318665475986000566794205170085914757535186274897579911014174740415773881339220445695095315200783272241691825203576832;
parameter    ap_ST_fsm_state515 = 607'd181709681073901722637330951972001133588410340171829515070372549795159822028349480831547762678440891390190630401566544483383650407153664;
parameter    ap_ST_fsm_state516 = 607'd363419362147803445274661903944002267176820680343659030140745099590319644056698961663095525356881782780381260803133088966767300814307328;
parameter    ap_ST_fsm_state517 = 607'd726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656;
parameter    ap_ST_fsm_state518 = 607'd1453677448591213781098647615776009068707282721374636120562980398361278576226795846652382101427527131121525043212532355867069203257229312;
parameter    ap_ST_fsm_state519 = 607'd2907354897182427562197295231552018137414565442749272241125960796722557152453591693304764202855054262243050086425064711734138406514458624;
parameter    ap_ST_fsm_state520 = 607'd5814709794364855124394590463104036274829130885498544482251921593445114304907183386609528405710108524486100172850129423468276813028917248;
parameter    ap_ST_fsm_state521 = 607'd11629419588729710248789180926208072549658261770997088964503843186890228609814366773219056811420217048972200345700258846936553626057834496;
parameter    ap_ST_fsm_state522 = 607'd23258839177459420497578361852416145099316523541994177929007686373780457219628733546438113622840434097944400691400517693873107252115668992;
parameter    ap_ST_fsm_state523 = 607'd46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984;
parameter    ap_ST_fsm_state524 = 607'd93035356709837681990313447409664580397266094167976711716030745495121828878514934185752454491361736391777602765602070775492429008462675968;
parameter    ap_ST_fsm_state525 = 607'd186070713419675363980626894819329160794532188335953423432061490990243657757029868371504908982723472783555205531204141550984858016925351936;
parameter    ap_ST_fsm_state526 = 607'd372141426839350727961253789638658321589064376671906846864122981980487315514059736743009817965446945567110411062408283101969716033850703872;
parameter    ap_ST_fsm_state527 = 607'd744282853678701455922507579277316643178128753343813693728245963960974631028119473486019635930893891134220822124816566203939432067701407744;
parameter    ap_ST_fsm_state528 = 607'd1488565707357402911845015158554633286356257506687627387456491927921949262056238946972039271861787782268441644249633132407878864135402815488;
parameter    ap_ST_fsm_state529 = 607'd2977131414714805823690030317109266572712515013375254774912983855843898524112477893944078543723575564536883288499266264815757728270805630976;
parameter    ap_ST_fsm_state530 = 607'd5954262829429611647380060634218533145425030026750509549825967711687797048224955787888157087447151129073766576998532529631515456541611261952;
parameter    ap_ST_fsm_state531 = 607'd11908525658859223294760121268437066290850060053501019099651935423375594096449911575776314174894302258147533153997065059263030913083222523904;
parameter    ap_ST_fsm_state532 = 607'd23817051317718446589520242536874132581700120107002038199303870846751188192899823151552628349788604516295066307994130118526061826166445047808;
parameter    ap_ST_fsm_state533 = 607'd47634102635436893179040485073748265163400240214004076398607741693502376385799646303105256699577209032590132615988260237052123652332890095616;
parameter    ap_ST_fsm_state534 = 607'd95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232;
parameter    ap_ST_fsm_state535 = 607'd190536410541747572716161940294993060653600960856016305594430966774009505543198585212421026798308836130360530463953040948208494609331560382464;
parameter    ap_ST_fsm_state536 = 607'd381072821083495145432323880589986121307201921712032611188861933548019011086397170424842053596617672260721060927906081896416989218663120764928;
parameter    ap_ST_fsm_state537 = 607'd762145642166990290864647761179972242614403843424065222377723867096038022172794340849684107193235344521442121855812163792833978437326241529856;
parameter    ap_ST_fsm_state538 = 607'd1524291284333980581729295522359944485228807686848130444755447734192076044345588681699368214386470689042884243711624327585667956874652483059712;
parameter    ap_ST_fsm_state539 = 607'd3048582568667961163458591044719888970457615373696260889510895468384152088691177363398736428772941378085768487423248655171335913749304966119424;
parameter    ap_ST_fsm_state540 = 607'd6097165137335922326917182089439777940915230747392521779021790936768304177382354726797472857545882756171536974846497310342671827498609932238848;
parameter    ap_ST_fsm_state541 = 607'd12194330274671844653834364178879555881830461494785043558043581873536608354764709453594945715091765512343073949692994620685343654997219864477696;
parameter    ap_ST_fsm_state542 = 607'd24388660549343689307668728357759111763660922989570087116087163747073216709529418907189891430183531024686147899385989241370687309994439728955392;
parameter    ap_ST_fsm_state543 = 607'd48777321098687378615337456715518223527321845979140174232174327494146433419058837814379782860367062049372295798771978482741374619988879457910784;
parameter    ap_ST_fsm_state544 = 607'd97554642197374757230674913431036447054643691958280348464348654988292866838117675628759565720734124098744591597543956965482749239977758915821568;
parameter    ap_ST_fsm_state545 = 607'd195109284394749514461349826862072894109287383916560696928697309976585733676235351257519131441468248197489183195087913930965498479955517831643136;
parameter    ap_ST_fsm_state546 = 607'd390218568789499028922699653724145788218574767833121393857394619953171467352470702515038262882936496394978366390175827861930996959911035663286272;
parameter    ap_ST_fsm_state547 = 607'd780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544;
parameter    ap_ST_fsm_state548 = 607'd1560874275157996115690798614896583152874299071332485575429578479812685869409882810060153051531745985579913465560703311447723987839644142653145088;
parameter    ap_ST_fsm_state549 = 607'd3121748550315992231381597229793166305748598142664971150859156959625371738819765620120306103063491971159826931121406622895447975679288285306290176;
parameter    ap_ST_fsm_state550 = 607'd6243497100631984462763194459586332611497196285329942301718313919250743477639531240240612206126983942319653862242813245790895951358576570612580352;
parameter    ap_ST_fsm_state551 = 607'd12486994201263968925526388919172665222994392570659884603436627838501486955279062480481224412253967884639307724485626491581791902717153141225160704;
parameter    ap_ST_fsm_state552 = 607'd24973988402527937851052777838345330445988785141319769206873255677002973910558124960962448824507935769278615448971252983163583805434306282450321408;
parameter    ap_ST_fsm_state553 = 607'd49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816;
parameter    ap_ST_fsm_state554 = 607'd99895953610111751404211111353381321783955140565279076827493022708011895642232499843849795298031743077114461795885011932654335221737225129801285632;
parameter    ap_ST_fsm_state555 = 607'd199791907220223502808422222706762643567910281130558153654986045416023791284464999687699590596063486154228923591770023865308670443474450259602571264;
parameter    ap_ST_fsm_state556 = 607'd399583814440447005616844445413525287135820562261116307309972090832047582568929999375399181192126972308457847183540047730617340886948900519205142528;
parameter    ap_ST_fsm_state557 = 607'd799167628880894011233688890827050574271641124522232614619944181664095165137859998750798362384253944616915694367080095461234681773897801038410285056;
parameter    ap_ST_fsm_state558 = 607'd1598335257761788022467377781654101148543282249044465229239888363328190330275719997501596724768507889233831388734160190922469363547795602076820570112;
parameter    ap_ST_fsm_state559 = 607'd3196670515523576044934755563308202297086564498088930458479776726656380660551439995003193449537015778467662777468320381844938727095591204153641140224;
parameter    ap_ST_fsm_state560 = 607'd6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448;
parameter    ap_ST_fsm_state561 = 607'd12786682062094304179739022253232809188346257992355721833919106906625522642205759980012773798148063113870651109873281527379754908382364816614564560896;
parameter    ap_ST_fsm_state562 = 607'd25573364124188608359478044506465618376692515984711443667838213813251045284411519960025547596296126227741302219746563054759509816764729633229129121792;
parameter    ap_ST_fsm_state563 = 607'd51146728248377216718956089012931236753385031969422887335676427626502090568823039920051095192592252455482604439493126109519019633529459266458258243584;
parameter    ap_ST_fsm_state564 = 607'd102293456496754433437912178025862473506770063938845774671352855253004181137646079840102190385184504910965208878986252219038039267058918532916516487168;
parameter    ap_ST_fsm_state565 = 607'd204586912993508866875824356051724947013540127877691549342705710506008362275292159680204380770369009821930417757972504438076078534117837065833032974336;
parameter    ap_ST_fsm_state566 = 607'd409173825987017733751648712103449894027080255755383098685411421012016724550584319360408761540738019643860835515945008876152157068235674131666065948672;
parameter    ap_ST_fsm_state567 = 607'd818347651974035467503297424206899788054160511510766197370822842024033449101168638720817523081476039287721671031890017752304314136471348263332131897344;
parameter    ap_ST_fsm_state568 = 607'd1636695303948070935006594848413799576108321023021532394741645684048066898202337277441635046162952078575443342063780035504608628272942696526664263794688;
parameter    ap_ST_fsm_state569 = 607'd3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545885393053328527589376;
parameter    ap_ST_fsm_state570 = 607'd6546781215792283740026379393655198304433284092086129578966582736192267592809349109766540184651808314301773368255120142018434513091770786106657055178752;
parameter    ap_ST_fsm_state571 = 607'd13093562431584567480052758787310396608866568184172259157933165472384535185618698219533080369303616628603546736510240284036869026183541572213314110357504;
parameter    ap_ST_fsm_state572 = 607'd26187124863169134960105517574620793217733136368344518315866330944769070371237396439066160738607233257207093473020480568073738052367083144426628220715008;
parameter    ap_ST_fsm_state573 = 607'd52374249726338269920211035149241586435466272736689036631732661889538140742474792878132321477214466514414186946040961136147476104734166288853256441430016;
parameter    ap_ST_fsm_state574 = 607'd104748499452676539840422070298483172870932545473378073263465323779076281484949585756264642954428933028828373892081922272294952209468332577706512882860032;
parameter    ap_ST_fsm_state575 = 607'd209496998905353079680844140596966345741865090946756146526930647558152562969899171512529285908857866057656747784163844544589904418936665155413025765720064;
parameter    ap_ST_fsm_state576 = 607'd418993997810706159361688281193932691483730181893512293053861295116305125939798343025058571817715732115313495568327689089179808837873330310826051531440128;
parameter    ap_ST_fsm_state577 = 607'd837987995621412318723376562387865382967460363787024586107722590232610251879596686050117143635431464230626991136655378178359617675746660621652103062880256;
parameter    ap_ST_fsm_state578 = 607'd1675975991242824637446753124775730765934920727574049172215445180465220503759193372100234287270862928461253982273310756356719235351493321243304206125760512;
parameter    ap_ST_fsm_state579 = 607'd3351951982485649274893506249551461531869841455148098344430890360930441007518386744200468574541725856922507964546621512713438470702986642486608412251521024;
parameter    ap_ST_fsm_state580 = 607'd6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048;
parameter    ap_ST_fsm_state581 = 607'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096;
parameter    ap_ST_fsm_state582 = 607'd26815615859885194199148049996411692254958731641184786755447122887443528060147093953603748596333806855380063716372972101707507765623893139892867298012168192;
parameter    ap_ST_fsm_state583 = 607'd53631231719770388398296099992823384509917463282369573510894245774887056120294187907207497192667613710760127432745944203415015531247786279785734596024336384;
parameter    ap_ST_fsm_state584 = 607'd107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768;
parameter    ap_ST_fsm_state585 = 607'd214524926879081553593184399971293538039669853129478294043576983099548224481176751628829988770670454843040509730983776813660062124991145119142938384097345536;
parameter    ap_ST_fsm_state586 = 607'd429049853758163107186368799942587076079339706258956588087153966199096448962353503257659977541340909686081019461967553627320124249982290238285876768194691072;
parameter    ap_ST_fsm_state587 = 607'd858099707516326214372737599885174152158679412517913176174307932398192897924707006515319955082681819372162038923935107254640248499964580476571753536389382144;
parameter    ap_ST_fsm_state588 = 607'd1716199415032652428745475199770348304317358825035826352348615864796385795849414013030639910165363638744324077847870214509280496999929160953143507072778764288;
parameter    ap_ST_fsm_state589 = 607'd3432398830065304857490950399540696608634717650071652704697231729592771591698828026061279820330727277488648155695740429018560993999858321906287014145557528576;
parameter    ap_ST_fsm_state590 = 607'd6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057152;
parameter    ap_ST_fsm_state591 = 607'd13729595320261219429963801598162786434538870600286610818788926918371086366795312104245119281322909109954592622782961716074243975999433287625148056582230114304;
parameter    ap_ST_fsm_state592 = 607'd27459190640522438859927603196325572869077741200573221637577853836742172733590624208490238562645818219909185245565923432148487951998866575250296113164460228608;
parameter    ap_ST_fsm_state593 = 607'd54918381281044877719855206392651145738155482401146443275155707673484345467181248416980477125291636439818370491131846864296975903997733150500592226328920457216;
parameter    ap_ST_fsm_state594 = 607'd109836762562089755439710412785302291476310964802292886550311415346968690934362496833960954250583272879636740982263693728593951807995466301001184452657840914432;
parameter    ap_ST_fsm_state595 = 607'd219673525124179510879420825570604582952621929604585773100622830693937381868724993667921908501166545759273481964527387457187903615990932602002368905315681828864;
parameter    ap_ST_fsm_state596 = 607'd439347050248359021758841651141209165905243859209171546201245661387874763737449987335843817002333091518546963929054774914375807231981865204004737810631363657728;
parameter    ap_ST_fsm_state597 = 607'd878694100496718043517683302282418331810487718418343092402491322775749527474899974671687634004666183037093927858109549828751614463963730408009475621262727315456;
parameter    ap_ST_fsm_state598 = 607'd1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912;
parameter    ap_ST_fsm_state599 = 607'd3514776401986872174070733209129673327241950873673372369609965291102998109899599898686750536018664732148375711432438199315006457855854921632037902485050909261824;
parameter    ap_ST_fsm_state600 = 607'd7029552803973744348141466418259346654483901747346744739219930582205996219799199797373501072037329464296751422864876398630012915711709843264075804970101818523648;
parameter    ap_ST_fsm_state601 = 607'd14059105607947488696282932836518693308967803494693489478439861164411992439598399594747002144074658928593502845729752797260025831423419686528151609940203637047296;
parameter    ap_ST_fsm_state602 = 607'd28118211215894977392565865673037386617935606989386978956879722328823984879196799189494004288149317857187005691459505594520051662846839373056303219880407274094592;
parameter    ap_ST_fsm_state603 = 607'd56236422431789954785131731346074773235871213978773957913759444657647969758393598378988008576298635714374011382919011189040103325693678746112606439760814548189184;
parameter    ap_ST_fsm_state604 = 607'd112472844863579909570263462692149546471742427957547915827518889315295939516787196757976017152597271428748022765838022378080206651387357492225212879521629096378368;
parameter    ap_ST_fsm_state605 = 607'd224945689727159819140526925384299092943484855915095831655037778630591879033574393515952034305194542857496045531676044756160413302774714984450425759043258192756736;
parameter    ap_ST_fsm_state606 = 607'd449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472;
parameter    ap_ST_fsm_state607 = 607'd899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944;
parameter    ap_ST_fsm_state608 = 607'd1799565517817278553124215403074392743547878847320766653240302229044735032268595148127616274441556342859968364253408358049283306422197719875603406072346065542053888;
parameter    ap_ST_fsm_state609 = 607'd3599131035634557106248430806148785487095757694641533306480604458089470064537190296255232548883112685719936728506816716098566612844395439751206812144692131084107776;
parameter    ap_ST_fsm_state610 = 607'd7198262071269114212496861612297570974191515389283066612961208916178940129074380592510465097766225371439873457013633432197133225688790879502413624289384262168215552;
parameter    ap_ST_fsm_state611 = 607'd14396524142538228424993723224595141948383030778566133225922417832357880258148761185020930195532450742879746914027266864394266451377581759004827248578768524336431104;
parameter    ap_ST_fsm_state612 = 607'd28793048285076456849987446449190283896766061557132266451844835664715760516297522370041860391064901485759493828054533728788532902755163518009654497157537048672862208;
parameter    ap_ST_fsm_state613 = 607'd57586096570152913699974892898380567793532123114264532903689671329431521032595044740083720782129802971518987656109067457577065805510327036019308994315074097345724416;
parameter    ap_ST_fsm_state614 = 607'd115172193140305827399949785796761135587064246228529065807379342658863042065190089480167441564259605943037975312218134915154131611020654072038617988630148194691448832;
parameter    ap_ST_fsm_state615 = 607'd230344386280611654799899571593522271174128492457058131614758685317726084130380178960334883128519211886075950624436269830308263222041308144077235977260296389382897664;
parameter    ap_ST_fsm_state616 = 607'd460688772561223309599799143187044542348256984914116263229517370635452168260760357920669766257038423772151901248872539660616526444082616288154471954520592778765795328;
parameter    ap_ST_fsm_state617 = 607'd921377545122446619199598286374089084696513969828232526459034741270904336521520715841339532514076847544303802497745079321233052888165232576308943909041185557531590656;
parameter    ap_ST_fsm_state618 = 607'd1842755090244893238399196572748178169393027939656465052918069482541808673043041431682679065028153695088607604995490158642466105776330465152617887818082371115063181312;
parameter    ap_ST_fsm_state619 = 607'd3685510180489786476798393145496356338786055879312930105836138965083617346086082863365358130056307390177215209990980317284932211552660930305235775636164742230126362624;
parameter    ap_ST_fsm_state620 = 607'd7371020360979572953596786290992712677572111758625860211672277930167234692172165726730716260112614780354430419981960634569864423105321860610471551272329484460252725248;
parameter    ap_ST_fsm_state621 = 607'd14742040721959145907193572581985425355144223517251720423344555860334469384344331453461432520225229560708860839963921269139728846210643721220943102544658968920505450496;
parameter    ap_ST_fsm_state622 = 607'd29484081443918291814387145163970850710288447034503440846689111720668938768688662906922865040450459121417721679927842538279457692421287442441886205089317937841010900992;
parameter    ap_ST_fsm_state623 = 607'd58968162887836583628774290327941701420576894069006881693378223441337877537377325813845730080900918242835443359855685076558915384842574884883772410178635875682021801984;
parameter    ap_ST_fsm_state624 = 607'd117936325775673167257548580655883402841153788138013763386756446882675755074754651627691460161801836485670886719711370153117830769685149769767544820357271751364043603968;
parameter    ap_ST_fsm_state625 = 607'd235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936;
parameter    ap_ST_fsm_state626 = 607'd471745303102692669030194322623533611364615152552055053547025787530703020299018606510765840647207345942683546878845480612471323078740599079070179281429087005456174415872;
parameter    ap_ST_fsm_state627 = 607'd943490606205385338060388645247067222729230305104110107094051575061406040598037213021531681294414691885367093757690961224942646157481198158140358562858174010912348831744;
parameter    ap_ST_fsm_state628 = 607'd1886981212410770676120777290494134445458460610208220214188103150122812081196074426043063362588829383770734187515381922449885292314962396316280717125716348021824697663488;
parameter    ap_ST_fsm_state629 = 607'd3773962424821541352241554580988268890916921220416440428376206300245624162392148852086126725177658767541468375030763844899770584629924792632561434251432696043649395326976;
parameter    ap_ST_fsm_state630 = 607'd7547924849643082704483109161976537781833842440832880856752412600491248324784297704172253450355317535082936750061527689799541169259849585265122868502865392087298790653952;
parameter    ap_ST_fsm_state631 = 607'd15095849699286165408966218323953075563667684881665761713504825200982496649568595408344506900710635070165873500123055379599082338519699170530245737005730784174597581307904;
parameter    ap_ST_fsm_state632 = 607'd30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808;
parameter    ap_ST_fsm_state633 = 607'd60383398797144661635864873295812302254670739526663046854019300803929986598274381633378027602842540280663494000492221518396329354078796682120982948022923136698390325231616;
parameter    ap_ST_fsm_state634 = 607'd120766797594289323271729746591624604509341479053326093708038601607859973196548763266756055205685080561326988000984443036792658708157593364241965896045846273396780650463232;
parameter    ap_ST_fsm_state635 = 607'd241533595188578646543459493183249209018682958106652187416077203215719946393097526533512110411370161122653976001968886073585317416315186728483931792091692546793561300926464;
parameter    ap_ST_fsm_state636 = 607'd483067190377157293086918986366498418037365916213304374832154406431439892786195053067024220822740322245307952003937772147170634832630373456967863584183385093587122601852928;
parameter    ap_ST_fsm_state637 = 607'd966134380754314586173837972732996836074731832426608749664308812862879785572390106134048441645480644490615904007875544294341269665260746913935727168366770187174245203705856;
parameter    ap_ST_fsm_state638 = 607'd1932268761508629172347675945465993672149463664853217499328617625725759571144780212268096883290961288981231808015751088588682539330521493827871454336733540374348490407411712;
parameter    ap_ST_fsm_state639 = 607'd3864537523017258344695351890931987344298927329706434998657235251451519142289560424536193766581922577962463616031502177177365078661042987655742908673467080748696980814823424;
parameter    ap_ST_fsm_state640 = 607'd7729075046034516689390703781863974688597854659412869997314470502903038284579120849072387533163845155924927232063004354354730157322085975311485817346934161497393961629646848;
parameter    ap_ST_fsm_state641 = 607'd15458150092069033378781407563727949377195709318825739994628941005806076569158241698144775066327690311849854464126008708709460314644171950622971634693868322994787923259293696;
parameter    ap_ST_fsm_state642 = 607'd30916300184138066757562815127455898754391418637651479989257882011612153138316483396289550132655380623699708928252017417418920629288343901245943269387736645989575846518587392;
parameter    ap_ST_fsm_state643 = 607'd61832600368276133515125630254911797508782837275302959978515764023224306276632966792579100265310761247399417856504034834837841258576687802491886538775473291979151693037174784;
parameter    ap_ST_fsm_state644 = 607'd123665200736552267030251260509823595017565674550605919957031528046448612553265933585158200530621522494798835713008069669675682517153375604983773077550946583958303386074349568;
parameter    ap_ST_fsm_state645 = 607'd247330401473104534060502521019647190035131349101211839914063056092897225106531867170316401061243044989597671426016139339351365034306751209967546155101893167916606772148699136;
parameter    ap_ST_fsm_state646 = 607'd494660802946209068121005042039294380070262698202423679828126112185794450213063734340632802122486089979195342852032278678702730068613502419935092310203786335833213544297398272;
parameter    ap_ST_fsm_state647 = 607'd989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544;
parameter    ap_ST_fsm_state648 = 607'd1978643211784836272484020168157177520281050792809694719312504448743177800852254937362531208489944359916781371408129114714810920274454009679740369240815145343332854177189593088;
parameter    ap_ST_fsm_state649 = 607'd3957286423569672544968040336314355040562101585619389438625008897486355601704509874725062416979888719833562742816258229429621840548908019359480738481630290686665708354379186176;
parameter    ap_ST_fsm_state650 = 607'd7914572847139345089936080672628710081124203171238778877250017794972711203409019749450124833959777439667125485632516458859243681097816038718961476963260581373331416708758372352;
parameter    ap_ST_fsm_state651 = 607'd15829145694278690179872161345257420162248406342477557754500035589945422406818039498900249667919554879334250971265032917718487362195632077437922953926521162746662833417516744704;
parameter    ap_ST_fsm_state652 = 607'd31658291388557380359744322690514840324496812684955115509000071179890844813636078997800499335839109758668501942530065835436974724391264154875845907853042325493325666835033489408;
parameter    ap_ST_fsm_state653 = 607'd63316582777114760719488645381029680648993625369910231018000142359781689627272157995600998671678219517337003885060131670873949448782528309751691815706084650986651333670066978816;
parameter    ap_ST_fsm_state654 = 607'd126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133957632;
parameter    ap_ST_fsm_state655 = 607'd253266331108459042877954581524118722595974501479640924072000569439126758509088631982403994686712878069348015540240526683495797795130113239006767262824338603946605334680267915264;
parameter    ap_ST_fsm_state656 = 607'd506532662216918085755909163048237445191949002959281848144001138878253517018177263964807989373425756138696031080481053366991595590260226478013534525648677207893210669360535830528;
parameter    ap_ST_fsm_state657 = 607'd1013065324433836171511818326096474890383898005918563696288002277756507034036354527929615978746851512277392062160962106733983191180520452956027069051297354415786421338721071661056;
parameter    ap_ST_fsm_state658 = 607'd2026130648867672343023636652192949780767796011837127392576004555513014068072709055859231957493703024554784124321924213467966382361040905912054138102594708831572842677442143322112;
parameter    ap_ST_fsm_state659 = 607'd4052261297735344686047273304385899561535592023674254785152009111026028136145418111718463914987406049109568248643848426935932764722081811824108276205189417663145685354884286644224;
parameter    ap_ST_fsm_state660 = 607'd8104522595470689372094546608771799123071184047348509570304018222052056272290836223436927829974812098219136497287696853871865529444163623648216552410378835326291370709768573288448;
parameter    ap_ST_fsm_state661 = 607'd16209045190941378744189093217543598246142368094697019140608036444104112544581672446873855659949624196438272994575393707743731058888327247296433104820757670652582741419537146576896;
parameter    ap_ST_fsm_state662 = 607'd32418090381882757488378186435087196492284736189394038281216072888208225089163344893747711319899248392876545989150787415487462117776654494592866209641515341305165482839074293153792;
parameter    ap_ST_fsm_state663 = 607'd64836180763765514976756372870174392984569472378788076562432145776416450178326689787495422639798496785753091978301574830974924235553308989185732419283030682610330965678148586307584;
parameter    ap_ST_fsm_state664 = 607'd129672361527531029953512745740348785969138944757576153124864291552832900356653379574990845279596993571506183956603149661949848471106617978371464838566061365220661931356297172615168;
parameter    ap_ST_fsm_state665 = 607'd259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929677132122730441323862712594345230336;
parameter    ap_ST_fsm_state666 = 607'd518689446110124119814050982961395143876555779030304612499457166211331601426613518299963381118387974286024735826412598647799393884426471913485859354264245460882647725425188690460672;
parameter    ap_ST_fsm_state667 = 607'd1037378892220248239628101965922790287753111558060609224998914332422663202853227036599926762236775948572049471652825197295598787768852943826971718708528490921765295450850377380921344;
parameter    ap_ST_fsm_state668 = 607'd2074757784440496479256203931845580575506223116121218449997828664845326405706454073199853524473551897144098943305650394591197575537705887653943437417056981843530590901700754761842688;
parameter    ap_ST_fsm_state669 = 607'd4149515568880992958512407863691161151012446232242436899995657329690652811412908146399707048947103794288197886611300789182395151075411775307886874834113963687061181803401509523685376;
parameter    ap_ST_fsm_state670 = 607'd8299031137761985917024815727382322302024892464484873799991314659381305622825816292799414097894207588576395773222601578364790302150823550615773749668227927374122363606803019047370752;
parameter    ap_ST_fsm_state671 = 607'd16598062275523971834049631454764644604049784928969747599982629318762611245651632585598828195788415177152791546445203156729580604301647101231547499336455854748244727213606038094741504;
parameter    ap_ST_fsm_state672 = 607'd33196124551047943668099262909529289208099569857939495199965258637525222491303265171197656391576830354305583092890406313459161208603294202463094998672911709496489454427212076189483008;
parameter    ap_ST_fsm_state673 = 607'd66392249102095887336198525819058578416199139715878990399930517275050444982606530342395312783153660708611166185780812626918322417206588404926189997345823418992978908854424152378966016;
parameter    ap_ST_fsm_state674 = 607'd132784498204191774672397051638117156832398279431757980799861034550100889965213060684790625566307321417222332371561625253836644834413176809852379994691646837985957817708848304757932032;
parameter    ap_ST_fsm_state675 = 607'd265568996408383549344794103276234313664796558863515961599722069100201779930426121369581251132614642834444664743123250507673289668826353619704759989383293675971915635417696609515864064;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] points_address0;
output   points_ce0;
input  [127:0] points_q0;
output  [11:0] points_address1;
output   points_ce1;
input  [127:0] points_q1;
output  [2:0] num_points_address0;
output   num_points_ce0;
input  [31:0] num_points_q0;
output  [2:0] num_points_address1;
output   num_points_ce1;
input  [31:0] num_points_q1;
output  [95:0] patch_stream_V_din;
input   patch_stream_V_full_n;
output   patch_stream_V_write;
output  [7:0] patch_buffer_address0;
output   patch_buffer_ce0;
output   patch_buffer_we0;
output  [31:0] patch_buffer_d0;
input  [31:0] patch_buffer_q0;
output  [7:0] patch_buffer_address1;
output   patch_buffer_ce1;
output   patch_buffer_we1;
output  [31:0] patch_buffer_d1;
input  [31:0] patch_buffer_q1;
output  [1:0] patch_buffer_is_empty_address0;
output   patch_buffer_is_empty_ce0;
output   patch_buffer_is_empty_we0;
output  [0:0] patch_buffer_is_empty_d0;
output  [3:0] pSlope_address0;
output   pSlope_ce0;
output   pSlope_we0;
output  [31:0] pSlope_d0;
output  [3:0] shadow_bottomL_jR_address0;
output   shadow_bottomL_jR_ce0;
output   shadow_bottomL_jR_we0;
output  [31:0] shadow_bottomL_jR_d0;
input  [31:0] shadow_bottomL_jR_q0;
output  [3:0] shadow_bottomL_jR_address1;
output   shadow_bottomL_jR_ce1;
input  [31:0] shadow_bottomL_jR_q1;
output  [3:0] shadow_bottomR_jR_address0;
output   shadow_bottomR_jR_ce0;
output   shadow_bottomR_jR_we0;
output  [31:0] shadow_bottomR_jR_d0;
input  [31:0] shadow_bottomR_jR_q0;
output  [3:0] shadow_bottomR_jR_address1;
output   shadow_bottomR_jR_ce1;
input  [31:0] shadow_bottomR_jR_q1;
output  [3:0] shadow_bottomL_jL_address0;
output   shadow_bottomL_jL_ce0;
output   shadow_bottomL_jL_we0;
output  [31:0] shadow_bottomL_jL_d0;
input  [31:0] shadow_bottomL_jL_q0;
output  [3:0] shadow_bottomL_jL_address1;
output   shadow_bottomL_jL_ce1;
input  [31:0] shadow_bottomL_jL_q1;
output  [3:0] shadow_bottomR_jL_address0;
output   shadow_bottomR_jL_ce0;
output   shadow_bottomR_jL_we0;
output  [31:0] shadow_bottomR_jL_d0;
input  [31:0] shadow_bottomR_jL_q0;
output  [3:0] shadow_bottomR_jL_address1;
output   shadow_bottomR_jL_ce1;
input  [31:0] shadow_bottomR_jL_q1;
output  [1:0] shadow_fromTopToInnermost_topL_jL_address0;
output   shadow_fromTopToInnermost_topL_jL_ce0;
output   shadow_fromTopToInnermost_topL_jL_we0;
output  [31:0] shadow_fromTopToInnermost_topL_jL_d0;
input  [31:0] shadow_fromTopToInnermost_topL_jL_q0;
output  [1:0] shadow_fromTopToInnermost_topL_jR_address0;
output   shadow_fromTopToInnermost_topL_jR_ce0;
output   shadow_fromTopToInnermost_topL_jR_we0;
output  [31:0] shadow_fromTopToInnermost_topL_jR_d0;
input  [31:0] shadow_fromTopToInnermost_topL_jR_q0;
output  [1:0] shadow_fromTopToInnermost_topR_jL_address0;
output   shadow_fromTopToInnermost_topR_jL_ce0;
output   shadow_fromTopToInnermost_topR_jL_we0;
output  [31:0] shadow_fromTopToInnermost_topR_jL_d0;
input  [31:0] shadow_fromTopToInnermost_topR_jL_q0;
output  [1:0] shadow_fromTopToInnermost_topR_jR_address0;
output   shadow_fromTopToInnermost_topR_jR_ce0;
output   shadow_fromTopToInnermost_topR_jR_we0;
output  [31:0] shadow_fromTopToInnermost_topR_jR_d0;
input  [31:0] shadow_fromTopToInnermost_topR_jR_q0;
output  [3:0] z1_min_address0;
output   z1_min_ce0;
output   z1_min_we0;
output  [31:0] z1_min_d0;
input  [31:0] z1_min_q0;
output  [3:0] z1_max_address0;
output   z1_max_ce0;
output   z1_max_we0;
output  [31:0] z1_max_d0;
input  [31:0] z1_max_q0;
output  [1:0] a_corner_0_address0;
output   a_corner_0_ce0;
output   a_corner_0_we0;
output  [31:0] a_corner_0_d0;
output  [1:0] a_corner_1_address0;
output   a_corner_1_ce0;
output   a_corner_1_we0;
output  [31:0] a_corner_1_d0;
input  [31:0] a_corner_1_q0;
output  [1:0] b_corner_0_address0;
output   b_corner_0_ce0;
output   b_corner_0_we0;
output  [31:0] b_corner_0_d0;
output  [1:0] b_corner_1_address0;
output   b_corner_1_ce0;
output   b_corner_1_we0;
output  [31:0] b_corner_1_d0;
input  [31:0] b_corner_1_q0;
output  [1:0] c_corner_0_address0;
output   c_corner_0_ce0;
output   c_corner_0_we0;
output  [31:0] c_corner_0_d0;
input  [31:0] c_corner_0_q0;
output  [1:0] c_corner_1_address0;
output   c_corner_1_ce0;
output   c_corner_1_we0;
output  [31:0] c_corner_1_d0;
input  [31:0] c_corner_1_q0;
output  [1:0] d_corner_0_address0;
output   d_corner_0_ce0;
output   d_corner_0_we0;
output  [31:0] d_corner_0_d0;
output  [1:0] d_corner_1_address0;
output   d_corner_1_ce0;
output   d_corner_1_we0;
output  [31:0] d_corner_1_d0;
input  [31:0] d_corner_1_q0;
output  [1:0] squareAcceptance_address0;
output   squareAcceptance_ce0;
output   squareAcceptance_we0;
output  [0:0] squareAcceptance_d0;
input  [0:0] squareAcceptance_q0;
output  [1:0] flatTop_address0;
output   flatTop_ce0;
output   flatTop_we0;
output  [0:0] flatTop_d0;
output  [1:0] flatBottom_address0;
output   flatBottom_ce0;
output   flatBottom_we0;
output  [0:0] flatBottom_d0;
input  [0:0] flatBottom_q0;
output  [1:0] triangleAcceptance_address0;
output   triangleAcceptance_ce0;
output   triangleAcceptance_we0;
output  [0:0] triangleAcceptance_d0;
input  [0:0] triangleAcceptance_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] points_address0;
reg points_ce0;
reg points_ce1;
reg[2:0] num_points_address0;
reg num_points_ce0;
reg num_points_ce1;
reg patch_stream_V_write;
reg[7:0] patch_buffer_address0;
reg patch_buffer_ce0;
reg patch_buffer_we0;
reg[7:0] patch_buffer_address1;
reg patch_buffer_ce1;
reg patch_buffer_we1;
reg[1:0] patch_buffer_is_empty_address0;
reg patch_buffer_is_empty_ce0;
reg patch_buffer_is_empty_we0;
reg[0:0] patch_buffer_is_empty_d0;
reg pSlope_ce0;
reg pSlope_we0;
reg[3:0] shadow_bottomL_jR_address0;
reg shadow_bottomL_jR_ce0;
reg shadow_bottomL_jR_we0;
reg shadow_bottomL_jR_ce1;
reg[3:0] shadow_bottomR_jR_address0;
reg shadow_bottomR_jR_ce0;
reg shadow_bottomR_jR_we0;
reg shadow_bottomR_jR_ce1;
reg[3:0] shadow_bottomL_jL_address0;
reg shadow_bottomL_jL_ce0;
reg shadow_bottomL_jL_we0;
reg shadow_bottomL_jL_ce1;
reg[3:0] shadow_bottomR_jL_address0;
reg shadow_bottomR_jL_ce0;
reg shadow_bottomR_jL_we0;
reg shadow_bottomR_jL_ce1;
reg[1:0] shadow_fromTopToInnermost_topL_jL_address0;
reg shadow_fromTopToInnermost_topL_jL_ce0;
reg shadow_fromTopToInnermost_topL_jL_we0;
reg[1:0] shadow_fromTopToInnermost_topL_jR_address0;
reg shadow_fromTopToInnermost_topL_jR_ce0;
reg shadow_fromTopToInnermost_topL_jR_we0;
reg[1:0] shadow_fromTopToInnermost_topR_jL_address0;
reg shadow_fromTopToInnermost_topR_jL_ce0;
reg shadow_fromTopToInnermost_topR_jL_we0;
reg[1:0] shadow_fromTopToInnermost_topR_jR_address0;
reg shadow_fromTopToInnermost_topR_jR_ce0;
reg shadow_fromTopToInnermost_topR_jR_we0;
reg[3:0] z1_min_address0;
reg z1_min_ce0;
reg z1_min_we0;
reg[3:0] z1_max_address0;
reg z1_max_ce0;
reg z1_max_we0;
reg a_corner_0_ce0;
reg a_corner_0_we0;
reg[1:0] a_corner_1_address0;
reg a_corner_1_ce0;
reg a_corner_1_we0;
reg b_corner_0_ce0;
reg b_corner_0_we0;
reg[1:0] b_corner_1_address0;
reg b_corner_1_ce0;
reg b_corner_1_we0;
reg[1:0] c_corner_0_address0;
reg c_corner_0_ce0;
reg c_corner_0_we0;
reg[1:0] c_corner_1_address0;
reg c_corner_1_ce0;
reg c_corner_1_we0;
reg d_corner_0_ce0;
reg d_corner_0_we0;
reg[1:0] d_corner_1_address0;
reg d_corner_1_ce0;
reg d_corner_1_we0;
reg[1:0] squareAcceptance_address0;
reg squareAcceptance_ce0;
reg squareAcceptance_we0;
reg flatTop_ce0;
reg flatTop_we0;
reg[1:0] flatBottom_address0;
reg flatBottom_ce0;
reg flatBottom_we0;
reg[1:0] triangleAcceptance_address0;
reg triangleAcceptance_ce0;
reg triangleAcceptance_we0;

(* fsm_encoding = "none" *) reg   [606:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] i_reg_790;
reg   [31:0] shifted_Align_V_5_reg_801;
reg   [31:0] empty_reg_813;
reg   [4:0] i_4_reg_825;
reg   [31:0] min_z_V_2_reg_836;
reg   [31:0] empty_237_reg_848;
reg   [4:0] i_5_reg_860;
reg   [31:0] min_z_V_4_reg_871;
reg   [31:0] empty_239_reg_883;
reg   [2:0] i_7_reg_987;
reg   [2:0] i_9_reg_1008;
reg   [2:0] i_8_reg_1019;
reg   [2:0] i_10_reg_1040;
reg   [2:0] i_11_reg_1051;
reg   [2:0] i_12_reg_1062;
reg   [2:0] i_13_reg_1074;
reg   [2:0] i_14_reg_1085;
reg   [31:0] layerWithSmallestShift_reg_1096;
reg   [31:0] layerSMin_V_reg_1108;
reg   [31:0] reg_1570;
wire    ap_CS_fsm_state2;
wire    grp_makePatch_alignedToLine_fu_1322_ap_ready;
wire    grp_makePatch_alignedToLine_fu_1322_ap_done;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state618;
reg   [31:0] reg_1577;
wire    ap_CS_fsm_state80;
wire   [0:0] ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4;
wire    ap_CS_fsm_state260;
wire   [0:0] icmp_ln67_fu_2664_p2;
wire   [31:0] grp_fu_1521_p2;
reg   [31:0] reg_1588;
wire    ap_CS_fsm_state295;
wire    ap_CS_fsm_state339;
wire   [1:0] trunc_ln694_fu_1593_p1;
reg   [1:0] trunc_ln694_reg_3346;
wire   [3:0] trunc_ln52_fu_1597_p1;
reg   [3:0] trunc_ln52_reg_3360;
wire   [63:0] zext_ln697_fu_1601_p1;
reg   [63:0] zext_ln697_reg_3365;
wire    ap_CS_fsm_state7;
reg  signed [31:0] original_c_V_reg_3384;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state60;
wire   [7:0] add_ln52_fu_1621_p2;
reg   [7:0] add_ln52_reg_3411;
wire    ap_CS_fsm_state61;
wire   [7:0] add_ln52_5_fu_1627_p2;
reg   [7:0] add_ln52_5_reg_3416;
reg  signed [31:0] original_d_V_reg_3422;
wire   [0:0] notChoppedPatch_fu_1645_p2;
reg   [0:0] notChoppedPatch_reg_3428;
wire   [0:0] and_ln814_fu_1656_p2;
reg   [0:0] and_ln814_reg_3432;
wire   [4:0] add_ln51_fu_1662_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state62_pp0_stage0_iter0;
wire    ap_block_state63_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln51_fu_1668_p2;
reg   [0:0] icmp_ln51_reg_3441;
wire   [31:0] min_z_V_1_fu_1694_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] select_ln53_3_fu_1702_p3;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire   [4:0] add_ln51_1_fu_1710_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state66_pp1_stage0_iter0;
wire    ap_block_state67_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln51_1_fu_1716_p2;
reg   [0:0] icmp_ln51_1_reg_3474;
wire   [31:0] min_z_V_3_fu_1742_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] select_ln53_4_fu_1750_p3;
wire   [0:0] icmp_ln1494_11_fu_1758_p2;
wire    ap_CS_fsm_state68;
wire   [4:0] add_ln51_2_fu_1764_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state69_pp2_stage0_iter0;
wire    ap_block_state70_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln51_2_fu_1770_p2;
reg   [0:0] icmp_ln51_2_reg_3502;
wire   [31:0] min_z_V_5_fu_1796_p3;
reg    ap_enable_reg_pp2_iter1;
wire   [31:0] select_ln53_5_fu_1804_p3;
wire   [1:0] trunc_ln858_fu_1812_p1;
reg   [1:0] trunc_ln858_reg_3521;
reg   [31:0] num_patches_ret6_reg_3534;
wire    ap_CS_fsm_state78;
wire  signed [32:0] sext_ln703_fu_1822_p1;
reg  signed [32:0] sext_ln703_reg_3549;
wire    ap_CS_fsm_state79;
wire  signed [32:0] sext_ln703_4_fu_1835_p1;
reg  signed [32:0] sext_ln703_4_reg_3554;
wire   [31:0] white_space_height_V_fu_1862_p3;
wire   [31:0] grp_get_index_from_z_fu_1486_ap_return;
reg   [31:0] current_z_top_index_V_1_reg_3594;
wire    ap_CS_fsm_state81;
wire   [2:0] add_ln1001_fu_1870_p2;
reg   [2:0] add_ln1001_reg_3600;
wire    ap_CS_fsm_state82;
wire   [63:0] zext_ln999_fu_1876_p1;
reg   [63:0] zext_ln999_reg_3606;
wire   [0:0] icmp_ln999_fu_1880_p2;
wire   [0:0] icmp_ln1498_fu_1886_p2;
wire   [31:0] grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return;
reg   [31:0] z_value_tmp_V_reg_3619;
wire    ap_CS_fsm_state136;
wire   [2:0] add_ln1016_fu_1899_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state138_pp3_stage0_iter0;
wire    ap_block_state139_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln1016_fu_1905_p2;
reg   [0:0] icmp_ln1016_reg_3629;
wire   [63:0] i_8_cast_fu_1911_p1;
reg   [63:0] i_8_cast_reg_3633;
wire   [31:0] current_z_top_index_V_3_fu_1916_p2;
wire    ap_CS_fsm_state140;
wire   [0:0] tmp_41_fu_1921_p3;
reg   [0:0] tmp_41_reg_3648;
wire    ap_CS_fsm_state141;
wire   [2:0] add_ln1038_fu_1929_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state142_pp4_stage0_iter0;
wire    ap_block_state143_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln1038_fu_1935_p2;
reg   [0:0] icmp_ln1038_reg_3658;
wire   [63:0] i_10_cast_fu_1941_p1;
reg   [63:0] i_10_cast_reg_3662;
wire   [31:0] current_z_top_index_V_6_fu_1946_p2;
wire    ap_CS_fsm_state144;
wire   [31:0] current_z_top_index_V_4_fu_1952_p2;
wire   [2:0] add_ln1031_fu_1958_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state145_pp5_stage0_iter0;
wire    ap_block_state146_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln1031_fu_1964_p2;
reg   [0:0] icmp_ln1031_reg_3687;
wire   [63:0] i_9_cast_fu_1970_p1;
reg   [63:0] i_9_cast_reg_3691;
reg   [31:0] num_points_load_reg_3701;
wire    ap_CS_fsm_state147;
wire   [2:0] add_ln1054_fu_1982_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state148_pp6_stage0_iter0;
wire    ap_block_state149_pp6_stage0_iter1;
wire    ap_block_state150_pp6_stage0_iter2;
wire    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln1054_fu_1988_p2;
reg   [0:0] icmp_ln1054_reg_3712;
reg   [0:0] icmp_ln1054_reg_3712_pp6_iter1_reg;
reg   [2:0] new_z_i_index_V_addr_3_reg_3716;
reg   [2:0] new_z_i_index_V_addr_3_reg_3716_pp6_iter1_reg;
reg   [31:0] num_points_load_1_reg_3727;
reg    ap_enable_reg_pp6_iter1;
wire   [2:0] add_ln1068_fu_2026_p2;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter0;
wire    ap_block_state152_pp7_stage0_iter0;
wire    ap_block_state153_pp7_stage0_iter1;
wire    ap_block_pp7_stage0_11001;
wire   [0:0] icmp_ln1068_fu_2032_p2;
reg   [0:0] icmp_ln1068_reg_3737;
reg   [2:0] new_z_i_index_V_addr_4_reg_3741;
wire   [2:0] add_ln1076_fu_2066_p2;
reg   [2:0] add_ln1076_reg_3747;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter0;
wire    ap_block_state155_pp8_stage0_iter0;
wire    ap_block_state156_pp8_stage0_iter1;
wire    ap_block_state157_pp8_stage0_iter2;
wire    ap_block_state158_pp8_stage0_iter3;
wire    ap_block_pp8_stage0_11001;
wire   [0:0] icmp_ln1076_fu_2072_p2;
reg   [0:0] icmp_ln1076_reg_3752;
reg   [0:0] icmp_ln1076_reg_3752_pp8_iter1_reg;
reg   [0:0] icmp_ln1076_reg_3752_pp8_iter2_reg;
wire   [63:0] i_13_cast14_fu_2078_p1;
reg   [63:0] i_13_cast14_reg_3756;
reg   [63:0] i_13_cast14_reg_3756_pp8_iter1_reg;
reg   [63:0] i_13_cast14_reg_3756_pp8_iter2_reg;
reg   [2:0] lshr_ln_reg_3766;
wire   [8:0] trunc_ln1077_fu_2165_p1;
reg   [8:0] trunc_ln1077_reg_3771;
wire   [0:0] icmp_ln1087_fu_2185_p2;
reg   [0:0] icmp_ln1087_reg_3781;
wire    ap_CS_fsm_pp9_stage0;
wire    ap_block_state160_pp9_stage0_iter0;
wire    ap_block_state161_pp9_stage0_iter1;
wire    ap_block_state162_pp9_stage0_iter2;
wire    ap_block_state163_pp9_stage0_iter3;
wire    ap_block_state164_pp9_stage0_iter4;
wire    ap_block_state165_pp9_stage0_iter5;
wire    ap_block_state166_pp9_stage0_iter6;
wire    ap_block_state167_pp9_stage0_iter7;
wire    ap_block_state168_pp9_stage0_iter8;
wire    ap_block_state169_pp9_stage0_iter9;
wire    ap_block_state170_pp9_stage0_iter10;
wire    ap_block_state171_pp9_stage0_iter11;
wire    ap_block_state172_pp9_stage0_iter12;
wire    ap_block_state173_pp9_stage0_iter13;
wire    ap_block_state174_pp9_stage0_iter14;
wire    ap_block_state175_pp9_stage0_iter15;
wire    ap_block_state176_pp9_stage0_iter16;
wire    ap_block_state177_pp9_stage0_iter17;
wire    ap_block_state178_pp9_stage0_iter18;
wire    ap_block_state179_pp9_stage0_iter19;
wire    ap_block_state180_pp9_stage0_iter20;
wire    ap_block_state181_pp9_stage0_iter21;
wire    ap_block_state182_pp9_stage0_iter22;
wire    ap_block_state183_pp9_stage0_iter23;
wire    ap_block_state184_pp9_stage0_iter24;
wire    ap_block_state185_pp9_stage0_iter25;
wire    ap_block_state186_pp9_stage0_iter26;
wire    ap_block_state187_pp9_stage0_iter27;
wire    ap_block_state188_pp9_stage0_iter28;
wire    ap_block_state189_pp9_stage0_iter29;
wire    ap_block_state190_pp9_stage0_iter30;
wire    ap_block_state191_pp9_stage0_iter31;
wire    ap_block_state192_pp9_stage0_iter32;
wire    ap_block_state193_pp9_stage0_iter33;
wire    ap_block_state194_pp9_stage0_iter34;
wire    ap_block_state195_pp9_stage0_iter35;
wire    ap_block_state196_pp9_stage0_iter36;
wire    ap_block_state197_pp9_stage0_iter37;
wire    ap_block_state198_pp9_stage0_iter38;
wire    ap_block_state199_pp9_stage0_iter39;
wire    ap_block_state200_pp9_stage0_iter40;
wire    ap_block_state201_pp9_stage0_iter41;
wire    ap_block_state202_pp9_stage0_iter42;
wire    ap_block_state203_pp9_stage0_iter43;
wire    ap_block_state204_pp9_stage0_iter44;
wire    ap_block_state205_pp9_stage0_iter45;
wire    ap_block_state206_pp9_stage0_iter46;
wire    ap_block_state207_pp9_stage0_iter47;
wire    ap_block_state208_pp9_stage0_iter48;
wire    ap_block_state209_pp9_stage0_iter49;
wire    ap_block_state210_pp9_stage0_iter50;
wire    ap_block_state211_pp9_stage0_iter51;
wire    ap_block_state212_pp9_stage0_iter52;
wire    ap_block_state213_pp9_stage0_iter53;
wire    ap_block_state214_pp9_stage0_iter54;
wire    ap_block_pp9_stage0_11001;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter1_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter2_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter3_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter4_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter5_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter6_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter7_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter8_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter9_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter10_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter11_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter12_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter13_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter14_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter15_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter16_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter17_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter18_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter19_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter20_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter21_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter22_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter23_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter24_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter25_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter26_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter27_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter28_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter29_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter30_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter31_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter32_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter33_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter34_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter35_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter36_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter37_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter38_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter39_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter40_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter41_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter42_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter43_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter44_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter45_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter46_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter47_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter48_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter49_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter50_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter51_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter52_reg;
reg   [0:0] icmp_ln1087_reg_3781_pp9_iter53_reg;
wire   [2:0] add_ln1089_fu_2191_p2;
reg   [2:0] add_ln1089_reg_3785;
reg    ap_enable_reg_pp9_iter0;
wire   [2:0] add_ln1088_fu_2202_p2;
reg   [2:0] add_ln1088_reg_3796;
reg   [2:0] add_ln1088_reg_3796_pp9_iter1_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter2_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter3_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter4_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter5_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter6_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter7_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter8_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter9_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter10_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter11_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter12_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter13_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter14_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter15_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter16_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter17_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter18_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter19_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter20_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter21_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter22_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter23_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter24_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter25_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter26_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter27_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter28_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter29_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter30_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter31_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter32_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter33_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter34_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter35_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter36_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter37_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter38_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter39_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter40_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter41_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter42_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter43_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter44_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter45_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter46_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter47_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter48_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter49_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter50_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter51_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter52_reg;
reg   [2:0] add_ln1088_reg_3796_pp9_iter53_reg;
wire  signed [32:0] rhs_6_fu_2212_p1;
reg  signed [32:0] rhs_6_reg_3801;
wire    ap_CS_fsm_state215;
wire   [2:0] add_ln1102_fu_2216_p2;
wire    ap_CS_fsm_pp10_stage0;
reg    ap_enable_reg_pp10_iter0;
wire    ap_block_state216_pp10_stage0_iter0;
wire    ap_block_state217_pp10_stage0_iter1;
wire    ap_block_state218_pp10_stage0_iter2;
wire    ap_block_pp10_stage0_11001;
wire   [0:0] icmp_ln1102_fu_2222_p2;
reg   [0:0] icmp_ln1102_reg_3811;
reg   [0:0] icmp_ln1102_reg_3811_pp10_iter1_reg;
wire   [1:0] trunc_ln1106_fu_2233_p1;
reg   [1:0] trunc_ln1106_reg_3820;
reg   [1:0] trunc_ln1106_reg_3820_pp10_iter1_reg;
wire   [31:0] sub_ln703_13_fu_2237_p2;
reg   [31:0] sub_ln703_13_reg_3825;
reg   [0:0] tmp_51_reg_3832;
wire   [31:0] layerSMin_V_1_fu_2303_p3;
reg    ap_enable_reg_pp10_iter2;
wire   [31:0] layerWithSmallestShift_1_fu_2311_p3;
wire   [0:0] icmp_ln878_fu_2327_p2;
reg   [0:0] icmp_ln878_reg_3848;
wire    ap_CS_fsm_state219;
reg   [2:0] trunc_ln_reg_3858;
wire   [8:0] trunc_ln1136_fu_2366_p1;
reg   [8:0] trunc_ln1136_reg_3863;
reg   [2:0] lshr_ln4_reg_3870;
reg   [2:0] lshr_ln5_reg_3875;
wire   [0:0] icmp_ln886_fu_2410_p2;
reg   [0:0] icmp_ln886_reg_3880;
wire   [31:0] new_z_i_atTop_V_q0;
reg   [31:0] z_top_min_V_2_reg_3884;
wire    ap_CS_fsm_state220;
wire   [31:0] z_top_min_V_4_fu_2478_p3;
reg   [31:0] z_top_min_V_4_reg_3895;
wire    ap_CS_fsm_state221;
wire   [31:0] z_top_min_V_6_fu_2541_p3;
reg   [31:0] z_top_min_V_6_reg_3906;
wire    ap_CS_fsm_state222;
wire  signed [31:0] z_top_min_V_12_fu_2604_p3;
reg  signed [31:0] z_top_min_V_12_reg_3917;
wire    ap_CS_fsm_state223;
wire   [32:0] ret_V_19_fu_2614_p2;
reg  signed [32:0] ret_V_19_reg_3923;
wire    ap_CS_fsm_state224;
wire   [31:0] z_top_min_V_10_fu_2640_p3;
reg   [31:0] z_top_min_V_10_reg_3928;
wire    ap_CS_fsm_state225;
wire   [31:0] add_ln51_3_fu_2653_p2;
reg   [31:0] add_ln51_3_reg_3934;
reg   [31:0] latest_patch_index_ret8_reg_3943;
wire    ap_CS_fsm_state297;
wire   [1:0] trunc_ln1204_fu_2670_p1;
reg   [1:0] trunc_ln1204_reg_3949;
reg   [31:0] num_patches_ret9_reg_3962;
wire    ap_CS_fsm_state302;
wire   [32:0] ret_V_17_fu_2684_p2;
reg   [32:0] ret_V_17_reg_3982;
wire    ap_CS_fsm_state303;
wire   [32:0] ret_V_18_fu_2693_p2;
reg   [32:0] ret_V_18_reg_3988;
wire   [0:0] icmp_ln1494_21_fu_2698_p2;
reg   [0:0] icmp_ln1494_21_reg_3994;
wire   [31:0] white_space_height_V_2_fu_2714_p1;
wire    ap_CS_fsm_state304;
wire   [0:0] cond_loop_adjust_complementary_patch_1_fu_2793_p2;
wire   [1:0] trunc_ln1288_fu_2799_p1;
reg   [1:0] trunc_ln1288_reg_4009;
wire    ap_CS_fsm_state337;
reg   [1:0] shadow_fromTopToInnermost_topL_jL_addr_reg_4014;
wire    ap_CS_fsm_state338;
reg   [1:0] shadow_fromTopToInnermost_topL_jR_addr_reg_4019;
reg   [1:0] shadow_fromTopToInnermost_topR_jL_addr_reg_4024;
reg   [1:0] shadow_fromTopToInnermost_topR_jR_addr_reg_4029;
wire   [1:0] trunc_ln1305_fu_2812_p1;
reg   [1:0] trunc_ln1305_reg_4034;
reg   [31:0] original_topL_jL_V_reg_4039;
wire    ap_CS_fsm_state340;
reg   [31:0] original_topL_jR_V_reg_4048;
reg   [31:0] original_topR_jL_V_reg_4053;
reg   [31:0] original_topR_jR_V_reg_4060;
wire   [0:0] and_ln1362_fu_2843_p2;
reg   [0:0] and_ln1362_reg_4065;
wire   [0:0] phitmp_fu_2865_p2;
reg   [0:0] phitmp_reg_4069;
wire    ap_CS_fsm_state394;
wire   [0:0] and_ln1371_fu_2881_p2;
reg   [0:0] and_ln1371_reg_4074;
wire    ap_CS_fsm_state395;
wire   [0:0] phitmp6_fu_2903_p2;
reg   [0:0] phitmp6_reg_4078;
wire    ap_CS_fsm_state449;
reg   [31:0] complementary_topR_jR_V_reg_4083;
wire    ap_CS_fsm_state451;
wire   [0:0] and_ln1379_fu_2921_p2;
reg   [0:0] and_ln1379_reg_4090;
wire   [0:0] phitmp5_fu_2943_p2;
reg   [0:0] phitmp5_reg_4094;
wire    ap_CS_fsm_state505;
reg   [31:0] complementary_topL_jR_V_reg_4099;
wire    ap_CS_fsm_state507;
wire   [0:0] and_ln1388_fu_2961_p2;
reg   [0:0] and_ln1388_reg_4106;
wire   [0:0] phitmp7_fu_2983_p2;
reg   [0:0] phitmp7_reg_4110;
wire    ap_CS_fsm_state561;
wire   [0:0] or_ln1487_fu_2989_p2;
reg   [0:0] or_ln1487_reg_4129;
wire    ap_CS_fsm_state562;
wire   [0:0] or_ln1489_fu_3005_p2;
reg   [0:0] or_ln1489_reg_4134;
wire    ap_CS_fsm_state563;
wire   [31:0] horizontalShiftTop_fu_3011_p2;
wire    ap_CS_fsm_state615;
wire   [31:0] horizontalShiftBottom_fu_3015_p2;
wire   [31:0] shifted_Align_V_2_fu_3041_p3;
wire   [0:0] shiftOriginal_fu_3055_p2;
reg   [0:0] shiftOriginal_reg_4164;
wire   [0:0] lnot633_fu_3067_p2;
reg   [0:0] lnot633_reg_4177;
wire   [31:0] newZtop_V_1_fu_3073_p3;
reg   [31:0] newZtop_V_1_reg_4182;
wire   [31:0] shifted_Align_V_4_fu_3161_p3;
reg   [31:0] shifted_Align_V_4_reg_4196;
wire    ap_CS_fsm_state616;
wire   [0:0] or_ln1487_1_fu_3087_p2;
wire   [0:0] and_ln1489_1_fu_3129_p2;
wire   [0:0] and_ln1491_fu_3100_p2;
wire   [1:0] trunc_ln1520_fu_3168_p1;
reg   [1:0] trunc_ln1520_reg_4202;
wire  signed [31:0] complementary_topL_jL_V_6_fu_3180_p3;
reg  signed [31:0] complementary_topL_jL_V_6_reg_4235;
wire    ap_CS_fsm_state619;
wire  signed [31:0] complementary_topL_jL_V_7_fu_3187_p3;
reg  signed [31:0] complementary_topL_jL_V_7_reg_4241;
wire  signed [31:0] complementary_topR_jR_V_5_fu_3194_p3;
reg  signed [31:0] complementary_topR_jR_V_5_reg_4247;
wire  signed [31:0] complementary_topL_jR_V_5_fu_3201_p3;
reg  signed [31:0] complementary_topL_jR_V_5_reg_4253;
wire  signed [31:0] complementary_topR_jL_V_4_fu_3208_p3;
reg  signed [31:0] complementary_topR_jL_V_4_reg_4259;
wire  signed [31:0] complementary_topL_jL_V_8_fu_3215_p3;
reg  signed [31:0] complementary_topL_jL_V_8_reg_4265;
wire  signed [31:0] complementary_topR_jR_V_6_fu_3222_p3;
reg  signed [31:0] complementary_topR_jR_V_6_reg_4271;
wire  signed [31:0] complementary_topL_jR_V_6_fu_3229_p3;
reg  signed [31:0] complementary_topL_jR_V_6_reg_4278;
wire   [31:0] horizontalShiftTop_1_fu_3236_p2;
reg   [31:0] horizontalShiftTop_1_reg_4284;
wire   [31:0] horizontalShiftBottom_1_fu_3242_p2;
reg   [31:0] horizontalShiftBottom_1_reg_4289;
wire  signed [32:0] sext_ln703_6_fu_3248_p1;
reg  signed [32:0] sext_ln703_6_reg_4294;
wire    ap_CS_fsm_state622;
wire  signed [32:0] sext_ln703_7_fu_3251_p1;
reg  signed [32:0] sext_ln703_7_reg_4299;
wire  signed [32:0] sext_ln703_8_fu_3254_p1;
reg  signed [32:0] sext_ln703_8_reg_4304;
wire  signed [32:0] sext_ln703_9_fu_3257_p1;
reg  signed [32:0] sext_ln703_9_reg_4309;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state62;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state66;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state69;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state138;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state142;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state145;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state148;
reg    ap_enable_reg_pp6_iter2;
wire    ap_CS_fsm_state151;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state152;
reg    ap_enable_reg_pp7_iter1;
wire    ap_CS_fsm_state154;
wire    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state155;
reg    ap_enable_reg_pp8_iter1;
reg    ap_enable_reg_pp8_iter2;
reg    ap_enable_reg_pp8_iter3;
wire    ap_CS_fsm_state159;
wire    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_exit_iter0_state160;
reg    ap_enable_reg_pp9_iter1;
reg    ap_enable_reg_pp9_iter2;
reg    ap_enable_reg_pp9_iter3;
reg    ap_enable_reg_pp9_iter4;
reg    ap_enable_reg_pp9_iter5;
reg    ap_enable_reg_pp9_iter6;
reg    ap_enable_reg_pp9_iter7;
reg    ap_enable_reg_pp9_iter8;
reg    ap_enable_reg_pp9_iter9;
reg    ap_enable_reg_pp9_iter10;
reg    ap_enable_reg_pp9_iter11;
reg    ap_enable_reg_pp9_iter12;
reg    ap_enable_reg_pp9_iter13;
reg    ap_enable_reg_pp9_iter14;
reg    ap_enable_reg_pp9_iter15;
reg    ap_enable_reg_pp9_iter16;
reg    ap_enable_reg_pp9_iter17;
reg    ap_enable_reg_pp9_iter18;
reg    ap_enable_reg_pp9_iter19;
reg    ap_enable_reg_pp9_iter20;
reg    ap_enable_reg_pp9_iter21;
reg    ap_enable_reg_pp9_iter22;
reg    ap_enable_reg_pp9_iter23;
reg    ap_enable_reg_pp9_iter24;
reg    ap_enable_reg_pp9_iter25;
reg    ap_enable_reg_pp9_iter26;
reg    ap_enable_reg_pp9_iter27;
reg    ap_enable_reg_pp9_iter28;
reg    ap_enable_reg_pp9_iter29;
reg    ap_enable_reg_pp9_iter30;
reg    ap_enable_reg_pp9_iter31;
reg    ap_enable_reg_pp9_iter32;
reg    ap_enable_reg_pp9_iter33;
reg    ap_enable_reg_pp9_iter34;
reg    ap_enable_reg_pp9_iter35;
reg    ap_enable_reg_pp9_iter36;
reg    ap_enable_reg_pp9_iter37;
reg    ap_enable_reg_pp9_iter38;
reg    ap_enable_reg_pp9_iter39;
reg    ap_enable_reg_pp9_iter40;
reg    ap_enable_reg_pp9_iter41;
reg    ap_enable_reg_pp9_iter42;
reg    ap_enable_reg_pp9_iter43;
reg    ap_enable_reg_pp9_iter44;
reg    ap_enable_reg_pp9_iter45;
reg    ap_enable_reg_pp9_iter46;
reg    ap_enable_reg_pp9_iter47;
reg    ap_enable_reg_pp9_iter48;
reg    ap_enable_reg_pp9_iter49;
reg    ap_enable_reg_pp9_iter50;
reg    ap_enable_reg_pp9_iter51;
reg    ap_enable_reg_pp9_iter52;
reg    ap_enable_reg_pp9_iter53;
reg    ap_enable_reg_pp9_iter54;
wire    ap_block_pp10_stage0_subdone;
reg    ap_condition_pp10_flush_enable;
reg    ap_enable_reg_pp10_iter1;
reg   [2:0] current_z_i_index_V_address0;
reg    current_z_i_index_V_ce0;
reg    current_z_i_index_V_we0;
reg   [31:0] current_z_i_index_V_d0;
wire   [31:0] current_z_i_index_V_q0;
reg   [2:0] new_z_i_index_V_address0;
reg    new_z_i_index_V_ce0;
reg    new_z_i_index_V_we0;
reg   [31:0] new_z_i_index_V_d0;
wire   [31:0] new_z_i_index_V_q0;
reg   [2:0] new_z_i_index_V_address1;
reg    new_z_i_index_V_ce1;
reg    new_z_i_index_V_we1;
wire   [31:0] new_z_i_index_V_d1;
wire   [31:0] new_z_i_index_V_q1;
reg   [2:0] new_z_i_V_address0;
reg    new_z_i_V_ce0;
reg    new_z_i_V_we0;
reg   [31:0] new_z_i_V_d0;
wire   [31:0] new_z_i_V_q0;
reg   [2:0] new_z_i_atTop_V_address0;
reg    new_z_i_atTop_V_ce0;
reg    new_z_i_atTop_V_we0;
reg   [31:0] new_z_i_atTop_V_d0;
wire    grp_makePatch_alignedToLine_fu_1322_ap_start;
wire    grp_makePatch_alignedToLine_fu_1322_ap_idle;
wire   [11:0] grp_makePatch_alignedToLine_fu_1322_points_address0;
wire    grp_makePatch_alignedToLine_fu_1322_points_ce0;
wire   [11:0] grp_makePatch_alignedToLine_fu_1322_points_address1;
wire    grp_makePatch_alignedToLine_fu_1322_points_ce1;
wire   [2:0] grp_makePatch_alignedToLine_fu_1322_num_points_address0;
wire    grp_makePatch_alignedToLine_fu_1322_num_points_ce0;
wire   [2:0] grp_makePatch_alignedToLine_fu_1322_num_points_address1;
wire    grp_makePatch_alignedToLine_fu_1322_num_points_ce1;
wire   [95:0] grp_makePatch_alignedToLine_fu_1322_patch_stream_V_din;
wire    grp_makePatch_alignedToLine_fu_1322_patch_stream_V_write;
reg   [31:0] grp_makePatch_alignedToLine_fu_1322_p_read;
reg   [31:0] grp_makePatch_alignedToLine_fu_1322_z_top;
reg   [0:0] grp_makePatch_alignedToLine_fu_1322_leftRight;
wire   [7:0] grp_makePatch_alignedToLine_fu_1322_patch_buffer_address0;
wire    grp_makePatch_alignedToLine_fu_1322_patch_buffer_ce0;
wire    grp_makePatch_alignedToLine_fu_1322_patch_buffer_we0;
wire   [31:0] grp_makePatch_alignedToLine_fu_1322_patch_buffer_d0;
wire   [7:0] grp_makePatch_alignedToLine_fu_1322_patch_buffer_address1;
wire    grp_makePatch_alignedToLine_fu_1322_patch_buffer_ce1;
wire    grp_makePatch_alignedToLine_fu_1322_patch_buffer_we1;
wire   [31:0] grp_makePatch_alignedToLine_fu_1322_patch_buffer_d1;
wire   [1:0] grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_address0;
wire    grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_ce0;
wire    grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_we0;
wire   [0:0] grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_d0;
reg   [31:0] grp_makePatch_alignedToLine_fu_1322_p_read1;
reg   [31:0] grp_makePatch_alignedToLine_fu_1322_p_read2;
wire   [31:0] grp_makePatch_alignedToLine_fu_1322_ap_return_0;
wire   [31:0] grp_makePatch_alignedToLine_fu_1322_ap_return_1;
wire    grp_getParallelograms_fu_1361_ap_start;
wire    grp_getParallelograms_fu_1361_ap_done;
wire    grp_getParallelograms_fu_1361_ap_idle;
wire    grp_getParallelograms_fu_1361_ap_ready;
wire   [7:0] grp_getParallelograms_fu_1361_superpoints_V_address0;
wire    grp_getParallelograms_fu_1361_superpoints_V_ce0;
wire   [7:0] grp_getParallelograms_fu_1361_superpoints_V_address1;
wire    grp_getParallelograms_fu_1361_superpoints_V_ce1;
reg   [1:0] grp_getParallelograms_fu_1361_superpoints_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_pSlope_V_address0;
wire    grp_getParallelograms_fu_1361_pSlope_V_ce0;
wire    grp_getParallelograms_fu_1361_pSlope_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_pSlope_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_pSlope_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_address0;
wire    grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_ce0;
wire    grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_address0;
wire    grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_ce0;
wire    grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_address0;
wire    grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_ce0;
wire    grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_address0;
wire    grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_ce0;
wire    grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_z1_min_V_address0;
wire    grp_getParallelograms_fu_1361_z1_min_V_ce0;
wire    grp_getParallelograms_fu_1361_z1_min_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_z1_min_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_z1_min_V_offset;
wire   [3:0] grp_getParallelograms_fu_1361_z1_max_V_address0;
wire    grp_getParallelograms_fu_1361_z1_max_V_ce0;
wire    grp_getParallelograms_fu_1361_z1_max_V_we0;
wire   [31:0] grp_getParallelograms_fu_1361_z1_max_V_d0;
reg   [1:0] grp_getParallelograms_fu_1361_z1_max_V_offset;
wire    grp_getShadows_fu_1393_ap_start;
wire    grp_getShadows_fu_1393_ap_done;
wire    grp_getShadows_fu_1393_ap_idle;
wire    grp_getShadows_fu_1393_ap_ready;
wire   [7:0] grp_getShadows_fu_1393_patch_address0;
wire    grp_getShadows_fu_1393_patch_ce0;
wire   [7:0] grp_getShadows_fu_1393_patch_address1;
wire    grp_getShadows_fu_1393_patch_ce1;
reg   [1:0] grp_getShadows_fu_1393_patch_offset;
wire   [31:0] grp_getShadows_fu_1393_ap_return_0;
wire   [31:0] grp_getShadows_fu_1393_ap_return_1;
wire   [31:0] grp_getShadows_fu_1393_ap_return_2;
wire   [31:0] grp_getShadows_fu_1393_ap_return_3;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_done;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_idle;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ready;
reg    grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ce;
reg   [31:0] grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i;
reg   [31:0] grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j;
reg   [2:0] grp_straightLineProjectorFromLayerIJtoK_fu_1404_i;
reg   [2:0] grp_straightLineProjectorFromLayerIJtoK_fu_1404_j;
reg   [2:0] grp_straightLineProjectorFromLayerIJtoK_fu_1404_k;
wire    ap_CS_fsm_state83;
wire    ap_block_state160_pp9_stage0_iter0_ignore_call5;
wire    ap_block_state161_pp9_stage0_iter1_ignore_call5;
wire    ap_block_state162_pp9_stage0_iter2_ignore_call5;
wire    ap_block_state163_pp9_stage0_iter3_ignore_call5;
wire    ap_block_state164_pp9_stage0_iter4_ignore_call5;
wire    ap_block_state165_pp9_stage0_iter5_ignore_call5;
wire    ap_block_state166_pp9_stage0_iter6_ignore_call5;
wire    ap_block_state167_pp9_stage0_iter7_ignore_call5;
wire    ap_block_state168_pp9_stage0_iter8_ignore_call5;
wire    ap_block_state169_pp9_stage0_iter9_ignore_call5;
wire    ap_block_state170_pp9_stage0_iter10_ignore_call5;
wire    ap_block_state171_pp9_stage0_iter11_ignore_call5;
wire    ap_block_state172_pp9_stage0_iter12_ignore_call5;
wire    ap_block_state173_pp9_stage0_iter13_ignore_call5;
wire    ap_block_state174_pp9_stage0_iter14_ignore_call5;
wire    ap_block_state175_pp9_stage0_iter15_ignore_call5;
wire    ap_block_state176_pp9_stage0_iter16_ignore_call5;
wire    ap_block_state177_pp9_stage0_iter17_ignore_call5;
wire    ap_block_state178_pp9_stage0_iter18_ignore_call5;
wire    ap_block_state179_pp9_stage0_iter19_ignore_call5;
wire    ap_block_state180_pp9_stage0_iter20_ignore_call5;
wire    ap_block_state181_pp9_stage0_iter21_ignore_call5;
wire    ap_block_state182_pp9_stage0_iter22_ignore_call5;
wire    ap_block_state183_pp9_stage0_iter23_ignore_call5;
wire    ap_block_state184_pp9_stage0_iter24_ignore_call5;
wire    ap_block_state185_pp9_stage0_iter25_ignore_call5;
wire    ap_block_state186_pp9_stage0_iter26_ignore_call5;
wire    ap_block_state187_pp9_stage0_iter27_ignore_call5;
wire    ap_block_state188_pp9_stage0_iter28_ignore_call5;
wire    ap_block_state189_pp9_stage0_iter29_ignore_call5;
wire    ap_block_state190_pp9_stage0_iter30_ignore_call5;
wire    ap_block_state191_pp9_stage0_iter31_ignore_call5;
wire    ap_block_state192_pp9_stage0_iter32_ignore_call5;
wire    ap_block_state193_pp9_stage0_iter33_ignore_call5;
wire    ap_block_state194_pp9_stage0_iter34_ignore_call5;
wire    ap_block_state195_pp9_stage0_iter35_ignore_call5;
wire    ap_block_state196_pp9_stage0_iter36_ignore_call5;
wire    ap_block_state197_pp9_stage0_iter37_ignore_call5;
wire    ap_block_state198_pp9_stage0_iter38_ignore_call5;
wire    ap_block_state199_pp9_stage0_iter39_ignore_call5;
wire    ap_block_state200_pp9_stage0_iter40_ignore_call5;
wire    ap_block_state201_pp9_stage0_iter41_ignore_call5;
wire    ap_block_state202_pp9_stage0_iter42_ignore_call5;
wire    ap_block_state203_pp9_stage0_iter43_ignore_call5;
wire    ap_block_state204_pp9_stage0_iter44_ignore_call5;
wire    ap_block_state205_pp9_stage0_iter45_ignore_call5;
wire    ap_block_state206_pp9_stage0_iter46_ignore_call5;
wire    ap_block_state207_pp9_stage0_iter47_ignore_call5;
wire    ap_block_state208_pp9_stage0_iter48_ignore_call5;
wire    ap_block_state209_pp9_stage0_iter49_ignore_call5;
wire    ap_block_state210_pp9_stage0_iter50_ignore_call5;
wire    ap_block_state211_pp9_stage0_iter51_ignore_call5;
wire    ap_block_state212_pp9_stage0_iter52_ignore_call5;
wire    ap_block_state213_pp9_stage0_iter53_ignore_call5;
wire    ap_block_state214_pp9_stage0_iter54_ignore_call5;
wire    ap_block_pp9_stage0_11001_ignoreCallOp1109;
wire    ap_CS_fsm_state341;
wire    ap_CS_fsm_state396;
wire    ap_CS_fsm_state452;
wire    ap_CS_fsm_state508;
wire    ap_CS_fsm_state614;
wire    grp_get_acceptanceCorners_fu_1445_ap_ready;
wire    grp_get_acceptanceCorners_fu_1445_ap_done;
wire    ap_CS_fsm_state675;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state137;
wire    ap_CS_fsm_state226;
wire    ap_CS_fsm_state227;
wire    ap_CS_fsm_state228;
wire    ap_CS_fsm_state229;
wire    ap_CS_fsm_state230;
wire    ap_CS_fsm_state231;
wire    ap_CS_fsm_state232;
wire    ap_CS_fsm_state233;
wire    ap_CS_fsm_state234;
wire    ap_CS_fsm_state235;
wire    ap_CS_fsm_state236;
wire    ap_CS_fsm_state237;
wire    ap_CS_fsm_state238;
wire    ap_CS_fsm_state239;
wire    ap_CS_fsm_state240;
wire    ap_CS_fsm_state241;
wire    ap_CS_fsm_state242;
wire    ap_CS_fsm_state243;
wire    ap_CS_fsm_state244;
wire    ap_CS_fsm_state245;
wire    ap_CS_fsm_state246;
wire    ap_CS_fsm_state247;
wire    ap_CS_fsm_state248;
wire    ap_CS_fsm_state249;
wire    ap_CS_fsm_state250;
wire    ap_CS_fsm_state251;
wire    ap_CS_fsm_state252;
wire    ap_CS_fsm_state253;
wire    ap_CS_fsm_state254;
wire    ap_CS_fsm_state255;
wire    ap_CS_fsm_state256;
wire    ap_CS_fsm_state257;
wire    ap_CS_fsm_state258;
wire    ap_CS_fsm_state259;
wire    ap_CS_fsm_state261;
wire    ap_CS_fsm_state262;
wire    ap_CS_fsm_state263;
wire    ap_CS_fsm_state264;
wire    ap_CS_fsm_state265;
wire    ap_CS_fsm_state266;
wire    ap_CS_fsm_state267;
wire    ap_CS_fsm_state268;
wire    ap_CS_fsm_state269;
wire    ap_CS_fsm_state270;
wire    ap_CS_fsm_state271;
wire    ap_CS_fsm_state272;
wire    ap_CS_fsm_state273;
wire    ap_CS_fsm_state274;
wire    ap_CS_fsm_state275;
wire    ap_CS_fsm_state276;
wire    ap_CS_fsm_state277;
wire    ap_CS_fsm_state278;
wire    ap_CS_fsm_state279;
wire    ap_CS_fsm_state280;
wire    ap_CS_fsm_state281;
wire    ap_CS_fsm_state282;
wire    ap_CS_fsm_state283;
wire    ap_CS_fsm_state284;
wire    ap_CS_fsm_state285;
wire    ap_CS_fsm_state286;
wire    ap_CS_fsm_state287;
wire    ap_CS_fsm_state288;
wire    ap_CS_fsm_state289;
wire    ap_CS_fsm_state290;
wire    ap_CS_fsm_state291;
wire    ap_CS_fsm_state292;
wire    ap_CS_fsm_state293;
wire    ap_CS_fsm_state294;
wire    ap_CS_fsm_state296;
wire    ap_CS_fsm_state298;
wire    ap_CS_fsm_state299;
wire    ap_CS_fsm_state300;
wire    ap_CS_fsm_state301;
wire    ap_CS_fsm_state305;
wire    ap_CS_fsm_state306;
wire    ap_CS_fsm_state307;
wire    ap_CS_fsm_state308;
wire    ap_CS_fsm_state309;
wire    ap_CS_fsm_state310;
wire    ap_CS_fsm_state311;
wire    ap_CS_fsm_state312;
wire    ap_CS_fsm_state313;
wire    ap_CS_fsm_state314;
wire    ap_CS_fsm_state315;
wire    ap_CS_fsm_state316;
wire    ap_CS_fsm_state317;
wire    ap_CS_fsm_state318;
wire    ap_CS_fsm_state319;
wire    ap_CS_fsm_state320;
wire    ap_CS_fsm_state321;
wire    ap_CS_fsm_state322;
wire    ap_CS_fsm_state323;
wire    ap_CS_fsm_state324;
wire    ap_CS_fsm_state325;
wire    ap_CS_fsm_state326;
wire    ap_CS_fsm_state327;
wire    ap_CS_fsm_state328;
wire    ap_CS_fsm_state329;
wire    ap_CS_fsm_state330;
wire    ap_CS_fsm_state331;
wire    ap_CS_fsm_state332;
wire    ap_CS_fsm_state333;
wire    ap_CS_fsm_state334;
wire    ap_CS_fsm_state335;
wire    ap_CS_fsm_state336;
wire    ap_CS_fsm_state450;
wire    ap_CS_fsm_state506;
wire    ap_CS_fsm_state617;
wire    ap_CS_fsm_state620;
wire    ap_CS_fsm_state621;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_done;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_idle;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_ready;
wire   [31:0] grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_return;
wire    grp_get_acceptanceCorners_fu_1445_ap_start;
wire    grp_get_acceptanceCorners_fu_1445_ap_idle;
reg   [1:0] grp_get_acceptanceCorners_fu_1445_p_read;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_address0;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_ce0;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_address1;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_ce1;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_address0;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_ce0;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_address1;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_ce1;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_address0;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_ce0;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_address1;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_ce1;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_address0;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_ce0;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_address1;
wire    grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_ce1;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_z1_min_address0;
wire    grp_get_acceptanceCorners_fu_1445_z1_min_ce0;
wire   [3:0] grp_get_acceptanceCorners_fu_1445_z1_max_address0;
wire    grp_get_acceptanceCorners_fu_1445_z1_max_ce0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_a_corner_0_address0;
wire    grp_get_acceptanceCorners_fu_1445_a_corner_0_ce0;
wire    grp_get_acceptanceCorners_fu_1445_a_corner_0_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_a_corner_0_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_a_corner_1_address0;
wire    grp_get_acceptanceCorners_fu_1445_a_corner_1_ce0;
wire    grp_get_acceptanceCorners_fu_1445_a_corner_1_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_a_corner_1_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_b_corner_0_address0;
wire    grp_get_acceptanceCorners_fu_1445_b_corner_0_ce0;
wire    grp_get_acceptanceCorners_fu_1445_b_corner_0_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_b_corner_0_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_b_corner_1_address0;
wire    grp_get_acceptanceCorners_fu_1445_b_corner_1_ce0;
wire    grp_get_acceptanceCorners_fu_1445_b_corner_1_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_b_corner_1_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_c_corner_0_address0;
wire    grp_get_acceptanceCorners_fu_1445_c_corner_0_ce0;
wire    grp_get_acceptanceCorners_fu_1445_c_corner_0_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_c_corner_0_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_c_corner_1_address0;
wire    grp_get_acceptanceCorners_fu_1445_c_corner_1_ce0;
wire    grp_get_acceptanceCorners_fu_1445_c_corner_1_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_c_corner_1_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_d_corner_0_address0;
wire    grp_get_acceptanceCorners_fu_1445_d_corner_0_ce0;
wire    grp_get_acceptanceCorners_fu_1445_d_corner_0_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_d_corner_0_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_d_corner_1_address0;
wire    grp_get_acceptanceCorners_fu_1445_d_corner_1_ce0;
wire    grp_get_acceptanceCorners_fu_1445_d_corner_1_we0;
wire   [31:0] grp_get_acceptanceCorners_fu_1445_d_corner_1_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_squareAcceptance_address0;
wire    grp_get_acceptanceCorners_fu_1445_squareAcceptance_ce0;
wire    grp_get_acceptanceCorners_fu_1445_squareAcceptance_we0;
wire   [0:0] grp_get_acceptanceCorners_fu_1445_squareAcceptance_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_flatTop_address0;
wire    grp_get_acceptanceCorners_fu_1445_flatTop_ce0;
wire    grp_get_acceptanceCorners_fu_1445_flatTop_we0;
wire   [0:0] grp_get_acceptanceCorners_fu_1445_flatTop_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_flatBottom_address0;
wire    grp_get_acceptanceCorners_fu_1445_flatBottom_ce0;
wire    grp_get_acceptanceCorners_fu_1445_flatBottom_we0;
wire   [0:0] grp_get_acceptanceCorners_fu_1445_flatBottom_d0;
wire   [1:0] grp_get_acceptanceCorners_fu_1445_triangleAcceptance_address0;
wire    grp_get_acceptanceCorners_fu_1445_triangleAcceptance_ce0;
wire    grp_get_acceptanceCorners_fu_1445_triangleAcceptance_we0;
wire   [0:0] grp_get_acceptanceCorners_fu_1445_triangleAcceptance_d0;
wire    grp_get_index_from_z_fu_1486_ap_start;
wire    grp_get_index_from_z_fu_1486_ap_done;
wire    grp_get_index_from_z_fu_1486_ap_idle;
wire    grp_get_index_from_z_fu_1486_ap_ready;
wire   [11:0] grp_get_index_from_z_fu_1486_points_address0;
wire    grp_get_index_from_z_fu_1486_points_ce0;
wire   [2:0] grp_get_index_from_z_fu_1486_num_points_address0;
wire    grp_get_index_from_z_fu_1486_num_points_ce0;
reg   [2:0] grp_get_index_from_z_fu_1486_layer;
reg   [31:0] grp_get_index_from_z_fu_1486_z_value;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0;
wire    ap_block_pp2_stage0;
reg   [31:0] z_top_min_V_reg_895;
wire   [31:0] ap_phi_mux_latest_patch_index_0_phi_fu_913_p4;
reg   [31:0] latest_patch_index_0_reg_910;
reg   [31:0] nPatchesAtComplementary_reg_920;
reg   [31:0] z_top_min_V_11_reg_930;
reg  signed [31:0] white_space_height_V_3_reg_941;
reg   [31:0] previous_z_top_min_V_reg_951;
reg   [0:0] cond_loop_adjust_complementary_patch_reg_964;
reg   [2:0] i_6_reg_975;
reg   [31:0] current_z_top_index_V_2_reg_998;
reg   [31:0] current_z_top_index_V_5_reg_1030;
reg   [2:0] ap_phi_mux_i_12_phi_fu_1066_p4;
wire    ap_block_pp8_stage0;
reg   [2:0] ap_phi_mux_i_13_phi_fu_1078_p4;
wire    ap_block_pp9_stage0;
reg   [31:0] latest_patch_index_1_reg_1119;
reg   [31:0] num_patches_1_reg_1133;
reg   [0:0] empty_251_reg_1146;
reg   [0:0] empty_252_reg_1158;
reg   [0:0] empty_253_reg_1170;
reg   [0:0] empty_254_reg_1182;
reg   [31:0] latest_patch_index_2_reg_1193;
reg   [31:0] num_patches_2_reg_1204;
reg   [31:0] empty_255_reg_1215;
reg   [31:0] empty_256_reg_1224;
reg   [31:0] empty_257_reg_1233;
reg   [31:0] original_topR_jL_V_1_reg_1242;
reg   [31:0] original_topL_jL_V_1_reg_1252;
reg   [31:0] complementary_topR_jR_V_1_reg_1262;
reg   [31:0] complementary_topL_jR_V_1_reg_1272;
reg   [31:0] complementary_topR_jL_V_1_reg_1282;
reg   [31:0] complementary_topL_jL_V_1_reg_1292;
reg   [31:0] original_topR_jR_V_1_reg_1302;
reg   [31:0] original_topL_jR_V_1_reg_1312;
reg    grp_makePatch_alignedToLine_fu_1322_ap_start_reg;
reg    grp_getParallelograms_fu_1361_ap_start_reg;
reg    grp_getShadows_fu_1393_ap_start_reg;
reg    grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start_reg;
reg   [606:0] ap_NS_fsm;
wire    ap_NS_fsm_state8;
wire    ap_NS_fsm_state83;
wire    ap_NS_fsm_state341;
wire    ap_NS_fsm_state396;
wire    ap_NS_fsm_state452;
wire    ap_NS_fsm_state508;
wire    ap_NS_fsm_state562;
wire    ap_NS_fsm_state622;
reg    grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start_reg;
reg    grp_get_acceptanceCorners_fu_1445_ap_start_reg;
reg    grp_get_index_from_z_fu_1486_ap_start_reg;
wire   [63:0] zext_ln52_40_fu_1683_p1;
wire   [63:0] zext_ln52_42_fu_1731_p1;
wire   [63:0] zext_ln52_44_fu_1785_p1;
wire   [63:0] zext_ln861_fu_1816_p1;
wire    ap_block_pp3_stage0;
wire    ap_block_pp4_stage0;
wire    ap_block_pp5_stage0;
wire   [63:0] i_11_cast_fu_1994_p1;
wire    ap_block_pp6_stage0;
wire   [63:0] i_12_cast_fu_2038_p1;
wire    ap_block_pp7_stage0;
wire   [63:0] zext_ln1077_fu_2175_p1;
wire   [63:0] trunc_ln1089_cast_fu_2197_p1;
wire   [63:0] zext_ln1088_fu_2208_p1;
wire   [63:0] i_15_cast_fu_2228_p1;
wire    ap_block_pp10_stage0;
wire   [63:0] zext_ln1130_fu_2351_p1;
wire   [63:0] zext_ln1136_fu_2428_p1;
wire   [63:0] zext_ln1143_fu_2491_p1;
wire   [63:0] zext_ln1150_fu_2554_p1;
wire   [63:0] zext_ln64_fu_2659_p1;
wire   [63:0] zext_ln1208_fu_2674_p1;
wire   [63:0] zext_ln1288_fu_2804_p1;
wire   [63:0] zext_ln1304_fu_2817_p1;
wire   [63:0] zext_ln1524_fu_3172_p1;
reg   [31:0] horizontalOverlapBottom_V_fu_262;
wire   [31:0] horizontalOverlapBottom_V_1_fu_3328_p3;
wire   [0:0] grp_fu_1508_p2;
reg   [31:0] horizontalOverlapTop_V_fu_266;
wire   [31:0] horizontalOverlapTop_V_1_fu_3290_p3;
wire   [31:0] shl_ln731_fu_1892_p2;
wire   [31:0] grp_fu_1527_p2;
wire   [31:0] add_ln703_1_fu_1975_p2;
wire   [31:0] select_ln1058_fu_2017_p3;
wire   [31:0] z_bits_fu_2180_p1;
reg   [31:0] grp_fu_1514_p0;
wire   [31:0] grp_fu_1521_p0;
wire   [2:0] grp_fu_1521_p1;
wire   [7:0] tmp_cast_fu_1607_p3;
wire   [7:0] tmp_102_cast_fu_1614_p3;
wire   [0:0] icmp_ln1494_fu_1633_p2;
wire   [0:0] and_ln1494_fu_1639_p2;
wire   [0:0] icmp_ln1494_10_fu_1651_p2;
wire   [7:0] zext_ln52_fu_1674_p1;
wire   [7:0] add_ln52_6_fu_1678_p2;
wire   [0:0] icmp_ln1495_11_fu_1688_p2;
wire   [7:0] zext_ln52_41_fu_1722_p1;
wire   [7:0] add_ln52_7_fu_1726_p2;
wire   [0:0] icmp_ln1495_12_fu_1736_p2;
wire   [7:0] zext_ln52_43_fu_1776_p1;
wire   [7:0] add_ln52_8_fu_1780_p2;
wire   [0:0] icmp_ln1495_13_fu_1790_p2;
wire  signed [32:0] sext_ln703_3_fu_1825_p1;
wire  signed [32:0] sext_ln703_5_fu_1838_p1;
wire   [32:0] ret_V_fu_1829_p2;
wire   [32:0] ret_V_8_fu_1842_p2;
wire   [0:0] icmp_ln1494_12_fu_1848_p2;
wire   [31:0] trunc_ln949_fu_1854_p1;
wire   [31:0] trunc_ln949_1_fu_1858_p1;
wire   [31:0] shl_ln731_1_fu_2000_p2;
wire   [31:0] add_ln731_fu_2005_p2;
wire   [0:0] icmp_ln1495_20_fu_2011_p2;
wire   [0:0] icmp_ln1494_16_fu_2047_p2;
wire   [30:0] empty_247_fu_2043_p1;
wire   [30:0] select_ln1070_fu_2053_p3;
wire   [19:0] trunc_ln851_fu_2101_p1;
wire   [11:0] ret_V_13_fu_2083_p4;
wire   [0:0] icmp_ln851_fu_2105_p2;
wire   [11:0] ret_V_14_fu_2111_p2;
wire   [0:0] p_Result_s_fu_2093_p3;
wire   [11:0] select_ln850_fu_2117_p3;
wire   [11:0] ret_V_15_fu_2125_p3;
wire   [15:0] shl_ln1077_1_fu_2141_p3;
wire   [15:0] shl_ln4_fu_2133_p3;
wire   [15:0] add_ln1077_fu_2149_p2;
wire   [11:0] tmp_81_fu_2169_p3;
wire   [31:0] sub_ln703_14_fu_2251_p2;
wire   [31:0] select_ln1106_fu_2256_p3;
wire   [0:0] icmp_ln1106_fu_2262_p2;
wire   [0:0] xor_ln1106_1_fu_2268_p2;
wire   [0:0] xor_ln1106_fu_2274_p2;
wire   [31:0] zext_ln1106_fu_2292_p1;
wire   [0:0] or_ln1106_fu_2279_p2;
wire   [31:0] select_ln1106_1_fu_2285_p3;
wire   [31:0] select_ln1106_2_fu_2295_p3;
wire   [31:0] x_fu_2322_p2;
wire   [11:0] trunc_ln1049_fu_2319_p1;
wire   [11:0] trunc_ln1051_fu_2333_p1;
wire   [11:0] add_ln1051_fu_2337_p2;
wire   [11:0] current_z_top_index_V_fu_2343_p3;
wire   [15:0] shl_ln6_fu_2370_p3;
wire   [15:0] add_ln1143_fu_2378_p2;
wire   [15:0] add_ln1150_fu_2394_p2;
wire   [2:0] xor_ln1136_fu_2416_p2;
wire   [11:0] tmp_82_fu_2421_p3;
wire   [31:0] sub_ln703_11_fu_2433_p2;
wire   [0:0] tmp_44_fu_2438_p3;
wire   [31:0] sub_ln703_12_fu_2446_p2;
wire   [31:0] select_ln1134_fu_2452_p3;
wire   [51:0] shl_ln5_fu_2460_p3;
wire   [0:0] icmp_ln1495_25_fu_2468_p2;
wire   [31:0] z_bits_1_fu_2474_p1;
wire   [11:0] tmp_83_fu_2485_p3;
wire   [31:0] sub_ln703_15_fu_2496_p2;
wire   [0:0] tmp_46_fu_2501_p3;
wire   [31:0] sub_ln703_16_fu_2509_p2;
wire   [31:0] select_ln1141_fu_2515_p3;
wire   [51:0] shl_ln728_1_fu_2523_p3;
wire   [0:0] icmp_ln1495_28_fu_2531_p2;
wire   [31:0] z_bits_2_fu_2537_p1;
wire   [11:0] tmp_84_fu_2548_p3;
wire   [31:0] sub_ln703_17_fu_2559_p2;
wire   [0:0] tmp_48_fu_2564_p3;
wire   [31:0] sub_ln703_18_fu_2572_p2;
wire   [31:0] select_ln1148_fu_2578_p3;
wire   [51:0] shl_ln728_2_fu_2586_p3;
wire   [0:0] icmp_ln1495_30_fu_2594_p2;
wire   [31:0] z_bits_3_fu_2600_p1;
wire  signed [32:0] sext_ln703_14_fu_2611_p1;
wire   [63:0] r_V_3_fu_2626_p2;
wire   [0:0] tmp_50_fu_2632_p3;
wire   [2:0] grp_fu_2647_p1;
wire   [31:0] grp_fu_2647_p2;
wire  signed [32:0] sext_ln703_15_fu_2680_p1;
wire  signed [32:0] sext_ln703_16_fu_2689_p1;
wire   [0:0] icmp_ln1494_19_fu_2704_p2;
wire   [32:0] select_ln1244_fu_2708_p3;
wire   [31:0] sub_ln703_19_fu_2726_p2;
wire   [0:0] tmp_52_fu_2718_p3;
wire   [30:0] tmp_53_fu_2732_p4;
wire   [30:0] tmp_54_fu_2742_p4;
wire   [30:0] select_ln1279_fu_2752_p3;
wire   [0:0] icmp_ln1494_22_fu_2766_p2;
wire   [0:0] icmp_ln1494_37_fu_2760_p2;
wire   [0:0] or_ln1277_fu_2777_p2;
wire   [0:0] or_ln1282_fu_2772_p2;
wire   [0:0] and_ln1494_2_fu_2788_p2;
wire   [0:0] and_ln1494_1_fu_2782_p2;
wire   [0:0] icmp_ln1496_fu_2825_p2;
wire   [0:0] xor_ln1496_fu_2831_p2;
wire   [0:0] icmp_ln1497_fu_2837_p2;
wire   [0:0] tmp_fu_2849_p3;
wire   [31:0] grp_fu_1554_p2;
wire   [31:0] select_ln1364_fu_2857_p3;
wire   [0:0] icmp_ln1494_13_fu_2871_p2;
wire   [0:0] icmp_ln1495_15_fu_2876_p2;
wire   [0:0] tmp_37_fu_2887_p3;
wire   [31:0] select_ln1373_fu_2895_p3;
wire   [0:0] icmp_ln1494_14_fu_2909_p2;
wire   [0:0] icmp_ln1495_18_fu_2915_p2;
wire   [0:0] tmp_38_fu_2927_p3;
wire   [31:0] select_ln1381_fu_2935_p3;
wire   [0:0] icmp_ln1494_15_fu_2949_p2;
wire   [0:0] icmp_ln1495_21_fu_2955_p2;
wire   [0:0] tmp_39_fu_2967_p3;
wire   [31:0] select_ln1390_fu_2975_p3;
wire   [0:0] tmp_40_fu_3019_p3;
wire   [0:0] icmp_ln1494_17_fu_3035_p2;
wire   [31:0] select_ln1461_fu_3027_p3;
wire   [0:0] xor_ln1466_fu_3049_p2;
wire   [0:0] icmp_ln1494_17_not_fu_3061_p2;
wire   [0:0] icmp_ln1487_fu_3081_p2;
wire   [0:0] grp_fu_1560_p2;
wire   [0:0] grp_fu_1565_p2;
wire   [0:0] icmp_ln1489_fu_3106_p2;
wire   [0:0] or_ln1489_1_fu_3112_p2;
wire   [0:0] xor_ln1489_fu_3117_p2;
wire   [0:0] and_ln1489_fu_3123_p2;
wire   [0:0] icmp_ln1494_18_fu_3135_p2;
wire   [31:0] select_ln703_fu_3141_p3;
wire   [31:0] shifted_Align_V_fu_3155_p2;
wire   [31:0] shifted_Align_V_3_fu_3149_p2;
wire  signed [32:0] sext_ln703_10_fu_3260_p1;
wire  signed [32:0] sext_ln703_11_fu_3268_p1;
wire   [32:0] ret_V_9_fu_3263_p2;
wire   [32:0] ret_V_10_fu_3271_p2;
wire   [0:0] icmp_ln1494_23_fu_3276_p2;
wire   [31:0] trunc_ln1561_fu_3282_p1;
wire   [31:0] trunc_ln1561_1_fu_3286_p1;
wire  signed [32:0] sext_ln703_12_fu_3298_p1;
wire  signed [32:0] sext_ln703_13_fu_3306_p1;
wire   [32:0] ret_V_11_fu_3301_p2;
wire   [32:0] ret_V_12_fu_3309_p2;
wire   [0:0] icmp_ln1494_24_fu_3314_p2;
wire   [31:0] trunc_ln1564_fu_3320_p1;
wire   [31:0] trunc_ln1564_1_fu_3324_p1;
reg    grp_fu_1521_ap_start;
wire    grp_fu_1521_ap_done;
reg    grp_fu_1521_ce;
reg    grp_fu_2647_ap_start;
wire    grp_fu_2647_ap_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
reg    ap_idle_pp10;
wire    ap_enable_pp10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 607'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp10_iter0 = 1'b0;
#0 ap_enable_reg_pp10_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter3 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter3 = 1'b0;
#0 ap_enable_reg_pp9_iter4 = 1'b0;
#0 ap_enable_reg_pp9_iter5 = 1'b0;
#0 ap_enable_reg_pp9_iter6 = 1'b0;
#0 ap_enable_reg_pp9_iter7 = 1'b0;
#0 ap_enable_reg_pp9_iter8 = 1'b0;
#0 ap_enable_reg_pp9_iter9 = 1'b0;
#0 ap_enable_reg_pp9_iter10 = 1'b0;
#0 ap_enable_reg_pp9_iter11 = 1'b0;
#0 ap_enable_reg_pp9_iter12 = 1'b0;
#0 ap_enable_reg_pp9_iter13 = 1'b0;
#0 ap_enable_reg_pp9_iter14 = 1'b0;
#0 ap_enable_reg_pp9_iter15 = 1'b0;
#0 ap_enable_reg_pp9_iter16 = 1'b0;
#0 ap_enable_reg_pp9_iter17 = 1'b0;
#0 ap_enable_reg_pp9_iter18 = 1'b0;
#0 ap_enable_reg_pp9_iter19 = 1'b0;
#0 ap_enable_reg_pp9_iter20 = 1'b0;
#0 ap_enable_reg_pp9_iter21 = 1'b0;
#0 ap_enable_reg_pp9_iter22 = 1'b0;
#0 ap_enable_reg_pp9_iter23 = 1'b0;
#0 ap_enable_reg_pp9_iter24 = 1'b0;
#0 ap_enable_reg_pp9_iter25 = 1'b0;
#0 ap_enable_reg_pp9_iter26 = 1'b0;
#0 ap_enable_reg_pp9_iter27 = 1'b0;
#0 ap_enable_reg_pp9_iter28 = 1'b0;
#0 ap_enable_reg_pp9_iter29 = 1'b0;
#0 ap_enable_reg_pp9_iter30 = 1'b0;
#0 ap_enable_reg_pp9_iter31 = 1'b0;
#0 ap_enable_reg_pp9_iter32 = 1'b0;
#0 ap_enable_reg_pp9_iter33 = 1'b0;
#0 ap_enable_reg_pp9_iter34 = 1'b0;
#0 ap_enable_reg_pp9_iter35 = 1'b0;
#0 ap_enable_reg_pp9_iter36 = 1'b0;
#0 ap_enable_reg_pp9_iter37 = 1'b0;
#0 ap_enable_reg_pp9_iter38 = 1'b0;
#0 ap_enable_reg_pp9_iter39 = 1'b0;
#0 ap_enable_reg_pp9_iter40 = 1'b0;
#0 ap_enable_reg_pp9_iter41 = 1'b0;
#0 ap_enable_reg_pp9_iter42 = 1'b0;
#0 ap_enable_reg_pp9_iter43 = 1'b0;
#0 ap_enable_reg_pp9_iter44 = 1'b0;
#0 ap_enable_reg_pp9_iter45 = 1'b0;
#0 ap_enable_reg_pp9_iter46 = 1'b0;
#0 ap_enable_reg_pp9_iter47 = 1'b0;
#0 ap_enable_reg_pp9_iter48 = 1'b0;
#0 ap_enable_reg_pp9_iter49 = 1'b0;
#0 ap_enable_reg_pp9_iter50 = 1'b0;
#0 ap_enable_reg_pp9_iter51 = 1'b0;
#0 ap_enable_reg_pp9_iter52 = 1'b0;
#0 ap_enable_reg_pp9_iter53 = 1'b0;
#0 ap_enable_reg_pp9_iter54 = 1'b0;
#0 ap_enable_reg_pp10_iter1 = 1'b0;
#0 grp_makePatch_alignedToLine_fu_1322_ap_start_reg = 1'b0;
#0 grp_getParallelograms_fu_1361_ap_start_reg = 1'b0;
#0 grp_getShadows_fu_1393_ap_start_reg = 1'b0;
#0 grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start_reg = 1'b0;
#0 grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start_reg = 1'b0;
#0 grp_get_acceptanceCorners_fu_1445_ap_start_reg = 1'b0;
#0 grp_get_index_from_z_fu_1486_ap_start_reg = 1'b0;
end

system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
current_z_i_index_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_z_i_index_V_address0),
    .ce0(current_z_i_index_V_ce0),
    .we0(current_z_i_index_V_we0),
    .d0(current_z_i_index_V_d0),
    .q0(current_z_i_index_V_q0)
);

system_top_p_shadowquilt_main_loop_make_verticle_strip_new_z_i_index_V #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
new_z_i_index_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_z_i_index_V_address0),
    .ce0(new_z_i_index_V_ce0),
    .we0(new_z_i_index_V_we0),
    .d0(new_z_i_index_V_d0),
    .q0(new_z_i_index_V_q0),
    .address1(new_z_i_index_V_address1),
    .ce1(new_z_i_index_V_ce1),
    .we1(new_z_i_index_V_we1),
    .d1(new_z_i_index_V_d1),
    .q1(new_z_i_index_V_q1)
);

system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
new_z_i_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_z_i_V_address0),
    .ce0(new_z_i_V_ce0),
    .we0(new_z_i_V_we0),
    .d0(new_z_i_V_d0),
    .q0(new_z_i_V_q0)
);

system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
new_z_i_atTop_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_z_i_atTop_V_address0),
    .ce0(new_z_i_atTop_V_ce0),
    .we0(new_z_i_atTop_V_we0),
    .d0(new_z_i_atTop_V_d0),
    .q0(new_z_i_atTop_V_q0)
);

system_top_makePatch_alignedToLine grp_makePatch_alignedToLine_fu_1322(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_makePatch_alignedToLine_fu_1322_ap_start),
    .ap_done(grp_makePatch_alignedToLine_fu_1322_ap_done),
    .ap_idle(grp_makePatch_alignedToLine_fu_1322_ap_idle),
    .ap_ready(grp_makePatch_alignedToLine_fu_1322_ap_ready),
    .points_address0(grp_makePatch_alignedToLine_fu_1322_points_address0),
    .points_ce0(grp_makePatch_alignedToLine_fu_1322_points_ce0),
    .points_q0(points_q0),
    .points_address1(grp_makePatch_alignedToLine_fu_1322_points_address1),
    .points_ce1(grp_makePatch_alignedToLine_fu_1322_points_ce1),
    .points_q1(points_q1),
    .num_points_address0(grp_makePatch_alignedToLine_fu_1322_num_points_address0),
    .num_points_ce0(grp_makePatch_alignedToLine_fu_1322_num_points_ce0),
    .num_points_q0(num_points_q0),
    .num_points_address1(grp_makePatch_alignedToLine_fu_1322_num_points_address1),
    .num_points_ce1(grp_makePatch_alignedToLine_fu_1322_num_points_ce1),
    .num_points_q1(num_points_q1),
    .patch_stream_V_din(grp_makePatch_alignedToLine_fu_1322_patch_stream_V_din),
    .patch_stream_V_full_n(patch_stream_V_full_n),
    .patch_stream_V_write(grp_makePatch_alignedToLine_fu_1322_patch_stream_V_write),
    .p_read(grp_makePatch_alignedToLine_fu_1322_p_read),
    .z_top(grp_makePatch_alignedToLine_fu_1322_z_top),
    .leftRight(grp_makePatch_alignedToLine_fu_1322_leftRight),
    .patch_buffer_address0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_address0),
    .patch_buffer_ce0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_ce0),
    .patch_buffer_we0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_we0),
    .patch_buffer_d0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_d0),
    .patch_buffer_address1(grp_makePatch_alignedToLine_fu_1322_patch_buffer_address1),
    .patch_buffer_ce1(grp_makePatch_alignedToLine_fu_1322_patch_buffer_ce1),
    .patch_buffer_we1(grp_makePatch_alignedToLine_fu_1322_patch_buffer_we1),
    .patch_buffer_d1(grp_makePatch_alignedToLine_fu_1322_patch_buffer_d1),
    .patch_buffer_is_empty_address0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_address0),
    .patch_buffer_is_empty_ce0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_ce0),
    .patch_buffer_is_empty_we0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_we0),
    .patch_buffer_is_empty_d0(grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_d0),
    .p_read1(grp_makePatch_alignedToLine_fu_1322_p_read1),
    .p_read2(grp_makePatch_alignedToLine_fu_1322_p_read2),
    .ap_return_0(grp_makePatch_alignedToLine_fu_1322_ap_return_0),
    .ap_return_1(grp_makePatch_alignedToLine_fu_1322_ap_return_1)
);

system_top_getParallelograms grp_getParallelograms_fu_1361(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getParallelograms_fu_1361_ap_start),
    .ap_done(grp_getParallelograms_fu_1361_ap_done),
    .ap_idle(grp_getParallelograms_fu_1361_ap_idle),
    .ap_ready(grp_getParallelograms_fu_1361_ap_ready),
    .superpoints_V_address0(grp_getParallelograms_fu_1361_superpoints_V_address0),
    .superpoints_V_ce0(grp_getParallelograms_fu_1361_superpoints_V_ce0),
    .superpoints_V_q0(patch_buffer_q0),
    .superpoints_V_address1(grp_getParallelograms_fu_1361_superpoints_V_address1),
    .superpoints_V_ce1(grp_getParallelograms_fu_1361_superpoints_V_ce1),
    .superpoints_V_q1(patch_buffer_q1),
    .superpoints_V_offset(grp_getParallelograms_fu_1361_superpoints_V_offset),
    .pSlope_V_address0(grp_getParallelograms_fu_1361_pSlope_V_address0),
    .pSlope_V_ce0(grp_getParallelograms_fu_1361_pSlope_V_ce0),
    .pSlope_V_we0(grp_getParallelograms_fu_1361_pSlope_V_we0),
    .pSlope_V_d0(grp_getParallelograms_fu_1361_pSlope_V_d0),
    .pSlope_V_offset(grp_getParallelograms_fu_1361_pSlope_V_offset),
    .shadow_bottomL_jR_V_address0(grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_address0),
    .shadow_bottomL_jR_V_ce0(grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_ce0),
    .shadow_bottomL_jR_V_we0(grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_we0),
    .shadow_bottomL_jR_V_d0(grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_d0),
    .shadow_bottomL_jR_V_offset(grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset),
    .shadow_bottomR_jR_V_address0(grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_address0),
    .shadow_bottomR_jR_V_ce0(grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_ce0),
    .shadow_bottomR_jR_V_we0(grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_we0),
    .shadow_bottomR_jR_V_d0(grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_d0),
    .shadow_bottomR_jR_V_offset(grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset),
    .shadow_bottomL_jL_V_address0(grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_address0),
    .shadow_bottomL_jL_V_ce0(grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_ce0),
    .shadow_bottomL_jL_V_we0(grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_we0),
    .shadow_bottomL_jL_V_d0(grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_d0),
    .shadow_bottomL_jL_V_offset(grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset),
    .shadow_bottomR_jL_V_address0(grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_address0),
    .shadow_bottomR_jL_V_ce0(grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_ce0),
    .shadow_bottomR_jL_V_we0(grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_we0),
    .shadow_bottomR_jL_V_d0(grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_d0),
    .shadow_bottomR_jL_V_offset(grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset),
    .z1_min_V_address0(grp_getParallelograms_fu_1361_z1_min_V_address0),
    .z1_min_V_ce0(grp_getParallelograms_fu_1361_z1_min_V_ce0),
    .z1_min_V_we0(grp_getParallelograms_fu_1361_z1_min_V_we0),
    .z1_min_V_d0(grp_getParallelograms_fu_1361_z1_min_V_d0),
    .z1_min_V_offset(grp_getParallelograms_fu_1361_z1_min_V_offset),
    .z1_max_V_address0(grp_getParallelograms_fu_1361_z1_max_V_address0),
    .z1_max_V_ce0(grp_getParallelograms_fu_1361_z1_max_V_ce0),
    .z1_max_V_we0(grp_getParallelograms_fu_1361_z1_max_V_we0),
    .z1_max_V_d0(grp_getParallelograms_fu_1361_z1_max_V_d0),
    .z1_max_V_offset(grp_getParallelograms_fu_1361_z1_max_V_offset)
);

system_top_getShadows grp_getShadows_fu_1393(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getShadows_fu_1393_ap_start),
    .ap_done(grp_getShadows_fu_1393_ap_done),
    .ap_idle(grp_getShadows_fu_1393_ap_idle),
    .ap_ready(grp_getShadows_fu_1393_ap_ready),
    .zTopMin(z_top_min_V_11_reg_930),
    .patch_address0(grp_getShadows_fu_1393_patch_address0),
    .patch_ce0(grp_getShadows_fu_1393_patch_ce0),
    .patch_q0(patch_buffer_q0),
    .patch_address1(grp_getShadows_fu_1393_patch_address1),
    .patch_ce1(grp_getShadows_fu_1393_patch_ce1),
    .patch_q1(patch_buffer_q1),
    .patch_offset(grp_getShadows_fu_1393_patch_offset),
    .ap_return_0(grp_getShadows_fu_1393_ap_return_0),
    .ap_return_1(grp_getShadows_fu_1393_ap_return_1),
    .ap_return_2(grp_getShadows_fu_1393_ap_return_2),
    .ap_return_3(grp_getShadows_fu_1393_ap_return_3)
);

system_top_straightLineProjectorFromLayerIJtoK grp_straightLineProjectorFromLayerIJtoK_fu_1404(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start),
    .ap_done(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_done),
    .ap_idle(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_idle),
    .ap_ready(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ready),
    .ap_ce(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ce),
    .z_i(grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i),
    .z_j(grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j),
    .i(grp_straightLineProjectorFromLayerIJtoK_fu_1404_i),
    .j(grp_straightLineProjectorFromLayerIJtoK_fu_1404_j),
    .k(grp_straightLineProjectorFromLayerIJtoK_fu_1404_k),
    .ap_return(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return)
);

system_top_straightLineProjectorFromLayerIJtoK grp_straightLineProjectorFromLayerIJtoK_fu_1429(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start),
    .ap_done(grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_done),
    .ap_idle(grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_idle),
    .ap_ready(grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_ready),
    .ap_ce(1'b1),
    .z_i(shifted_Align_V_5_reg_801),
    .z_j(z_top_min_V_11_reg_930),
    .i(3'd1),
    .j(3'd5),
    .k(3'd0),
    .ap_return(grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_return)
);

system_top_get_acceptanceCorners grp_get_acceptanceCorners_fu_1445(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_get_acceptanceCorners_fu_1445_ap_start),
    .ap_done(grp_get_acceptanceCorners_fu_1445_ap_done),
    .ap_idle(grp_get_acceptanceCorners_fu_1445_ap_idle),
    .ap_ready(grp_get_acceptanceCorners_fu_1445_ap_ready),
    .p_read(grp_get_acceptanceCorners_fu_1445_p_read),
    .shadow_bottomL_jR_address0(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_address0),
    .shadow_bottomL_jR_ce0(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_ce0),
    .shadow_bottomL_jR_q0(shadow_bottomL_jR_q0),
    .shadow_bottomL_jR_address1(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_address1),
    .shadow_bottomL_jR_ce1(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_ce1),
    .shadow_bottomL_jR_q1(shadow_bottomL_jR_q1),
    .shadow_bottomR_jR_address0(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_address0),
    .shadow_bottomR_jR_ce0(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_ce0),
    .shadow_bottomR_jR_q0(shadow_bottomR_jR_q0),
    .shadow_bottomR_jR_address1(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_address1),
    .shadow_bottomR_jR_ce1(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_ce1),
    .shadow_bottomR_jR_q1(shadow_bottomR_jR_q1),
    .shadow_bottomL_jL_address0(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_address0),
    .shadow_bottomL_jL_ce0(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_ce0),
    .shadow_bottomL_jL_q0(shadow_bottomL_jL_q0),
    .shadow_bottomL_jL_address1(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_address1),
    .shadow_bottomL_jL_ce1(grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_ce1),
    .shadow_bottomL_jL_q1(shadow_bottomL_jL_q1),
    .shadow_bottomR_jL_address0(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_address0),
    .shadow_bottomR_jL_ce0(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_ce0),
    .shadow_bottomR_jL_q0(shadow_bottomR_jL_q0),
    .shadow_bottomR_jL_address1(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_address1),
    .shadow_bottomR_jL_ce1(grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_ce1),
    .shadow_bottomR_jL_q1(shadow_bottomR_jL_q1),
    .z1_min_address0(grp_get_acceptanceCorners_fu_1445_z1_min_address0),
    .z1_min_ce0(grp_get_acceptanceCorners_fu_1445_z1_min_ce0),
    .z1_min_q0(z1_min_q0),
    .z1_max_address0(grp_get_acceptanceCorners_fu_1445_z1_max_address0),
    .z1_max_ce0(grp_get_acceptanceCorners_fu_1445_z1_max_ce0),
    .z1_max_q0(z1_max_q0),
    .a_corner_0_address0(grp_get_acceptanceCorners_fu_1445_a_corner_0_address0),
    .a_corner_0_ce0(grp_get_acceptanceCorners_fu_1445_a_corner_0_ce0),
    .a_corner_0_we0(grp_get_acceptanceCorners_fu_1445_a_corner_0_we0),
    .a_corner_0_d0(grp_get_acceptanceCorners_fu_1445_a_corner_0_d0),
    .a_corner_1_address0(grp_get_acceptanceCorners_fu_1445_a_corner_1_address0),
    .a_corner_1_ce0(grp_get_acceptanceCorners_fu_1445_a_corner_1_ce0),
    .a_corner_1_we0(grp_get_acceptanceCorners_fu_1445_a_corner_1_we0),
    .a_corner_1_d0(grp_get_acceptanceCorners_fu_1445_a_corner_1_d0),
    .b_corner_0_address0(grp_get_acceptanceCorners_fu_1445_b_corner_0_address0),
    .b_corner_0_ce0(grp_get_acceptanceCorners_fu_1445_b_corner_0_ce0),
    .b_corner_0_we0(grp_get_acceptanceCorners_fu_1445_b_corner_0_we0),
    .b_corner_0_d0(grp_get_acceptanceCorners_fu_1445_b_corner_0_d0),
    .b_corner_1_address0(grp_get_acceptanceCorners_fu_1445_b_corner_1_address0),
    .b_corner_1_ce0(grp_get_acceptanceCorners_fu_1445_b_corner_1_ce0),
    .b_corner_1_we0(grp_get_acceptanceCorners_fu_1445_b_corner_1_we0),
    .b_corner_1_d0(grp_get_acceptanceCorners_fu_1445_b_corner_1_d0),
    .c_corner_0_address0(grp_get_acceptanceCorners_fu_1445_c_corner_0_address0),
    .c_corner_0_ce0(grp_get_acceptanceCorners_fu_1445_c_corner_0_ce0),
    .c_corner_0_we0(grp_get_acceptanceCorners_fu_1445_c_corner_0_we0),
    .c_corner_0_d0(grp_get_acceptanceCorners_fu_1445_c_corner_0_d0),
    .c_corner_1_address0(grp_get_acceptanceCorners_fu_1445_c_corner_1_address0),
    .c_corner_1_ce0(grp_get_acceptanceCorners_fu_1445_c_corner_1_ce0),
    .c_corner_1_we0(grp_get_acceptanceCorners_fu_1445_c_corner_1_we0),
    .c_corner_1_d0(grp_get_acceptanceCorners_fu_1445_c_corner_1_d0),
    .d_corner_0_address0(grp_get_acceptanceCorners_fu_1445_d_corner_0_address0),
    .d_corner_0_ce0(grp_get_acceptanceCorners_fu_1445_d_corner_0_ce0),
    .d_corner_0_we0(grp_get_acceptanceCorners_fu_1445_d_corner_0_we0),
    .d_corner_0_d0(grp_get_acceptanceCorners_fu_1445_d_corner_0_d0),
    .d_corner_1_address0(grp_get_acceptanceCorners_fu_1445_d_corner_1_address0),
    .d_corner_1_ce0(grp_get_acceptanceCorners_fu_1445_d_corner_1_ce0),
    .d_corner_1_we0(grp_get_acceptanceCorners_fu_1445_d_corner_1_we0),
    .d_corner_1_d0(grp_get_acceptanceCorners_fu_1445_d_corner_1_d0),
    .squareAcceptance_address0(grp_get_acceptanceCorners_fu_1445_squareAcceptance_address0),
    .squareAcceptance_ce0(grp_get_acceptanceCorners_fu_1445_squareAcceptance_ce0),
    .squareAcceptance_we0(grp_get_acceptanceCorners_fu_1445_squareAcceptance_we0),
    .squareAcceptance_d0(grp_get_acceptanceCorners_fu_1445_squareAcceptance_d0),
    .flatTop_address0(grp_get_acceptanceCorners_fu_1445_flatTop_address0),
    .flatTop_ce0(grp_get_acceptanceCorners_fu_1445_flatTop_ce0),
    .flatTop_we0(grp_get_acceptanceCorners_fu_1445_flatTop_we0),
    .flatTop_d0(grp_get_acceptanceCorners_fu_1445_flatTop_d0),
    .flatBottom_address0(grp_get_acceptanceCorners_fu_1445_flatBottom_address0),
    .flatBottom_ce0(grp_get_acceptanceCorners_fu_1445_flatBottom_ce0),
    .flatBottom_we0(grp_get_acceptanceCorners_fu_1445_flatBottom_we0),
    .flatBottom_d0(grp_get_acceptanceCorners_fu_1445_flatBottom_d0),
    .triangleAcceptance_address0(grp_get_acceptanceCorners_fu_1445_triangleAcceptance_address0),
    .triangleAcceptance_ce0(grp_get_acceptanceCorners_fu_1445_triangleAcceptance_ce0),
    .triangleAcceptance_we0(grp_get_acceptanceCorners_fu_1445_triangleAcceptance_we0),
    .triangleAcceptance_d0(grp_get_acceptanceCorners_fu_1445_triangleAcceptance_d0)
);

system_top_get_index_from_z grp_get_index_from_z_fu_1486(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_get_index_from_z_fu_1486_ap_start),
    .ap_done(grp_get_index_from_z_fu_1486_ap_done),
    .ap_idle(grp_get_index_from_z_fu_1486_ap_idle),
    .ap_ready(grp_get_index_from_z_fu_1486_ap_ready),
    .points_address0(grp_get_index_from_z_fu_1486_points_address0),
    .points_ce0(grp_get_index_from_z_fu_1486_points_ce0),
    .points_q0(points_q0),
    .num_points_address0(grp_get_index_from_z_fu_1486_num_points_address0),
    .num_points_ce0(grp_get_index_from_z_fu_1486_num_points_ce0),
    .num_points_q0(num_points_q0),
    .layer(grp_get_index_from_z_fu_1486_layer),
    .z_value(grp_get_index_from_z_fu_1486_z_value),
    .ap_return(grp_get_index_from_z_fu_1486_ap_return)
);

system_top_urem_32ns_3ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
urem_32ns_3ns_32_36_seq_1_U129(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1521_ap_start),
    .done(grp_fu_1521_ap_done),
    .din0(grp_fu_1521_p0),
    .din1(grp_fu_1521_p1),
    .ce(grp_fu_1521_ce),
    .dout(grp_fu_1521_p2)
);

system_top_mul_33s_32s_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_33s_32s_64_1_1_U130(
    .din0(ret_V_19_reg_3923),
    .din1(white_space_height_V_3_reg_941),
    .dout(r_V_3_fu_2626_p2)
);

system_top_urem_32ns_3ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
urem_32ns_3ns_32_36_seq_1_U131(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_2647_ap_start),
    .done(grp_fu_2647_ap_done),
    .din0(latest_patch_index_0_reg_910),
    .din1(grp_fu_2647_p1),
    .ce(1'b1),
    .dout(grp_fu_2647_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state62) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'd1 == and_ln814_fu_1656_p2) & (1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state62) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state62);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'd1 == and_ln814_fu_1656_p2) & (1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp10_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp10_flush_enable)) begin
            ap_enable_reg_pp10_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state215)) begin
            ap_enable_reg_pp10_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp10_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp10_stage0_subdone)) begin
            ap_enable_reg_pp10_iter1 <= ap_enable_reg_pp10_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp10_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp10_stage0_subdone)) begin
            ap_enable_reg_pp10_iter2 <= ap_enable_reg_pp10_iter1;
        end else if ((1'b1 == ap_CS_fsm_state215)) begin
            ap_enable_reg_pp10_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state66) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((triangleAcceptance_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state66) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state66);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((triangleAcceptance_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state69) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state69) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state69);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state138) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state82) & (icmp_ln1498_fu_1886_p2 == 1'd1) & (icmp_ln999_fu_1880_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state138) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state138);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state82) & (icmp_ln1498_fu_1886_p2 == 1'd1) & (icmp_ln999_fu_1880_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state142) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state142) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state142);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd0))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state145) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd1))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state145) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state145);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd1))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp6_exit_iter0_state148) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state147)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state148)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state148);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state147)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp7_exit_iter0_state152) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state151)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp7_exit_iter0_state152) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state152);
        end else if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
        end else if ((1'b1 == ap_CS_fsm_state151)) begin
            ap_enable_reg_pp7_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp8_exit_iter0_state155) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state154)) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state155)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state155);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp8_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
        end else if ((1'b1 == ap_CS_fsm_state154)) begin
            ap_enable_reg_pp8_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp9_exit_iter0_state160) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_subdone))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state159)) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter0_state160)) begin
                ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state160);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter10 <= ap_enable_reg_pp9_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter11 <= ap_enable_reg_pp9_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter12 <= ap_enable_reg_pp9_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter13 <= ap_enable_reg_pp9_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter14 <= ap_enable_reg_pp9_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter15 <= ap_enable_reg_pp9_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter16 <= ap_enable_reg_pp9_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter17 <= ap_enable_reg_pp9_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter18 <= ap_enable_reg_pp9_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter19 <= ap_enable_reg_pp9_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter20 <= ap_enable_reg_pp9_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter21 <= ap_enable_reg_pp9_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter22 <= ap_enable_reg_pp9_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter23 <= ap_enable_reg_pp9_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter24 <= ap_enable_reg_pp9_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter25 <= ap_enable_reg_pp9_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter26 <= ap_enable_reg_pp9_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter27 <= ap_enable_reg_pp9_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter28 <= ap_enable_reg_pp9_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter29 <= ap_enable_reg_pp9_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter3 <= ap_enable_reg_pp9_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter30 <= ap_enable_reg_pp9_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter31 <= ap_enable_reg_pp9_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter32 <= ap_enable_reg_pp9_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter33 <= ap_enable_reg_pp9_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter34 <= ap_enable_reg_pp9_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter35 <= ap_enable_reg_pp9_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter36 <= ap_enable_reg_pp9_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter37 <= ap_enable_reg_pp9_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter38 <= ap_enable_reg_pp9_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter39 <= ap_enable_reg_pp9_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter4 <= ap_enable_reg_pp9_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter40 <= ap_enable_reg_pp9_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter41 <= ap_enable_reg_pp9_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter42 <= ap_enable_reg_pp9_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter43 <= ap_enable_reg_pp9_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter44 <= ap_enable_reg_pp9_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter45 <= ap_enable_reg_pp9_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter46 <= ap_enable_reg_pp9_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter47 <= ap_enable_reg_pp9_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter48 <= ap_enable_reg_pp9_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter49 <= ap_enable_reg_pp9_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter5 <= ap_enable_reg_pp9_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter50 <= ap_enable_reg_pp9_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter51 <= ap_enable_reg_pp9_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter52 <= ap_enable_reg_pp9_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter53 <= ap_enable_reg_pp9_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter54 <= ap_enable_reg_pp9_iter53;
        end else if ((1'b1 == ap_CS_fsm_state159)) begin
            ap_enable_reg_pp9_iter54 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter6 <= ap_enable_reg_pp9_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter7 <= ap_enable_reg_pp9_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter8 <= ap_enable_reg_pp9_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp9_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter9 <= ap_enable_reg_pp9_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getParallelograms_fu_1361_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state298) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state619))) begin
            grp_getParallelograms_fu_1361_ap_start_reg <= 1'b1;
        end else if ((grp_getParallelograms_fu_1361_ap_ready == 1'b1)) begin
            grp_getParallelograms_fu_1361_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getShadows_fu_1393_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state339) | (1'b1 == ap_CS_fsm_state337))) begin
            grp_getShadows_fu_1393_ap_start_reg <= 1'b1;
        end else if ((grp_getShadows_fu_1393_ap_ready == 1'b1)) begin
            grp_getShadows_fu_1393_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_get_acceptanceCorners_fu_1445_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state621) | (1'b1 == ap_CS_fsm_state300) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_get_acceptanceCorners_fu_1445_ap_start_reg <= 1'b1;
        end else if ((grp_get_acceptanceCorners_fu_1445_ap_ready == 1'b1)) begin
            grp_get_acceptanceCorners_fu_1445_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_get_index_from_z_fu_1486_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state136) | ((ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state80)))) begin
            grp_get_index_from_z_fu_1486_ap_start_reg <= 1'b1;
        end else if ((grp_get_index_from_z_fu_1486_ap_ready == 1'b1)) begin
            grp_get_index_from_z_fu_1486_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_makePatch_alignedToLine_fu_1322_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state617) | (1'b1 == ap_CS_fsm_state296) | (1'b1 == ap_CS_fsm_state72) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_makePatch_alignedToLine_fu_1322_ap_start_reg <= 1'b1;
        end else if ((grp_makePatch_alignedToLine_fu_1322_ap_ready == 1'b1)) begin
            grp_makePatch_alignedToLine_fu_1322_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_NS_fsm_state8)) | ((1'b1 == ap_NS_fsm_state622) & (1'b1 == ap_CS_fsm_state621) & (shiftOriginal_reg_4164 == 1'd1)) | ((1'b1 == ap_NS_fsm_state562) & ((1'b1 == ap_CS_fsm_state561) | (1'b1 == ap_CS_fsm_state507))) | ((1'b1 == ap_NS_fsm_state508) & (1'b1 == ap_CS_fsm_state507)) | ((1'b1 == ap_NS_fsm_state452) & (1'b1 == ap_CS_fsm_state451)) | ((1'd1 == and_ln1371_fu_2881_p2) & (1'b1 == ap_NS_fsm_state396) & (1'b1 == ap_CS_fsm_state395)) | ((1'b1 == ap_NS_fsm_state341) & (1'b1 == ap_CS_fsm_state340)) | ((1'b1 == ap_NS_fsm_state83) & (1'b1 == ap_CS_fsm_state82)) | ((1'b1 == ap_CS_fsm_pp9_stage0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln1087_fu_2185_p2 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001)))) begin
            grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start_reg <= 1'b1;
        end else if ((grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ready == 1'b1)) begin
            grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state562) & ((1'b1 == ap_CS_fsm_state561) | (1'b1 == ap_CS_fsm_state507)))) begin
            grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start_reg <= 1'b1;
        end else if ((grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_ready == 1'b1)) begin
            grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        complementary_topL_jL_V_1_reg_1292 <= complementary_topL_jL_V_8_reg_4265;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        complementary_topL_jL_V_1_reg_1292 <= shadow_fromTopToInnermost_topL_jL_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        complementary_topL_jR_V_1_reg_1272 <= complementary_topL_jR_V_5_reg_4253;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        complementary_topL_jR_V_1_reg_1272 <= complementary_topL_jR_V_reg_4099;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        complementary_topR_jL_V_1_reg_1282 <= complementary_topR_jL_V_4_reg_4259;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        complementary_topR_jL_V_1_reg_1282 <= shadow_fromTopToInnermost_topR_jL_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        complementary_topR_jR_V_1_reg_1262 <= complementary_topR_jR_V_5_reg_4247;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        complementary_topR_jR_V_1_reg_1262 <= complementary_topR_jR_V_reg_4083;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state304)) begin
        cond_loop_adjust_complementary_patch_reg_964 <= cond_loop_adjust_complementary_patch_1_fu_2793_p2;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        cond_loop_adjust_complementary_patch_reg_964 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (icmp_ln1498_fu_1886_p2 == 1'd0) & (icmp_ln999_fu_1880_p2 == 1'd1))) begin
        current_z_top_index_V_2_reg_998 <= current_z_top_index_V_1_reg_3594;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        current_z_top_index_V_2_reg_998 <= current_z_top_index_V_3_fu_1916_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        if ((tmp_41_reg_3648 == 1'd0)) begin
            current_z_top_index_V_5_reg_1030 <= current_z_top_index_V_6_fu_1946_p2;
        end else if ((tmp_41_reg_3648 == 1'd1)) begin
            current_z_top_index_V_5_reg_1030 <= current_z_top_index_V_4_fu_1952_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((triangleAcceptance_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
        empty_237_reg_848 <= 32'd1073741824;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_1_reg_3474 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_237_reg_848 <= select_ln53_4_fu_1750_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd0))) begin
        empty_239_reg_883 <= 32'd1073741824;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln51_2_reg_3502 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_239_reg_883 <= select_ln53_5_fu_1804_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln1362_fu_2843_p2) & (grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340))) begin
        empty_251_reg_1146 <= 1'd1;
    end else if (((1'd1 == and_ln1362_reg_4065) & (1'b1 == ap_CS_fsm_state395))) begin
        empty_251_reg_1146 <= phitmp_reg_4069;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396))) begin
        empty_252_reg_1158 <= 1'd1;
    end else if (((1'd1 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state450))) begin
        empty_252_reg_1158 <= phitmp6_reg_4078;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln1379_fu_2921_p2) & (1'b1 == ap_CS_fsm_state451))) begin
        empty_253_reg_1170 <= 1'd1;
    end else if (((1'd1 == and_ln1379_reg_4090) & (1'b1 == ap_CS_fsm_state506))) begin
        empty_253_reg_1170 <= phitmp5_reg_4094;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln1388_fu_2961_p2) & (1'b1 == ap_CS_fsm_state507))) begin
        empty_254_reg_1182 <= 1'd1;
    end else if (((1'd1 == and_ln1388_reg_4106) & (1'b1 == ap_CS_fsm_state562))) begin
        empty_254_reg_1182 <= phitmp7_reg_4110;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        empty_255_reg_1215 <= shifted_Align_V_4_reg_4196;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        empty_255_reg_1215 <= shifted_Align_V_2_fu_3041_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        empty_256_reg_1224 <= horizontalShiftBottom_1_reg_4289;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        empty_256_reg_1224 <= horizontalShiftBottom_fu_3015_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        empty_257_reg_1233 <= horizontalShiftTop_1_reg_4284;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        empty_257_reg_1233 <= horizontalShiftTop_fu_3011_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln814_fu_1656_p2) & (1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
        empty_reg_813 <= 32'd1073741824;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln51_reg_3441 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_813 <= select_ln53_3_fu_1702_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state562)) begin
        horizontalOverlapBottom_V_fu_262 <= 32'd4293918720;
    end else if (((grp_fu_1508_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state675) & (shiftOriginal_reg_4164 == 1'd1))) begin
        horizontalOverlapBottom_V_fu_262 <= horizontalOverlapBottom_V_1_fu_3328_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state562)) begin
        horizontalOverlapTop_V_fu_266 <= 32'd4293918720;
    end else if (((grp_fu_1508_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state675) & (shiftOriginal_reg_4164 == 1'd1))) begin
        horizontalOverlapTop_V_fu_266 <= horizontalOverlapTop_V_1_fu_3290_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln1054_fu_1988_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        i_10_reg_1040 <= add_ln1054_fu_1982_p2;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        i_10_reg_1040 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        i_11_reg_1051 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln1068_fu_2032_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        i_11_reg_1051 <= add_ln1068_fu_2026_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln1076_reg_3752 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        i_12_reg_1062 <= add_ln1076_reg_3747;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        i_12_reg_1062 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        i_13_reg_1074 <= add_ln1089_reg_3785;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        i_13_reg_1074 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp10_stage0) & (icmp_ln1102_fu_2222_p2 == 1'd0) & (ap_enable_reg_pp10_iter0 == 1'b1) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        i_14_reg_1085 <= add_ln1102_fu_2216_p2;
    end else if ((1'b1 == ap_CS_fsm_state215)) begin
        i_14_reg_1085 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((triangleAcceptance_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
        i_4_reg_825 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln51_1_fu_1716_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_4_reg_825 <= add_ln51_1_fu_1710_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd0))) begin
        i_5_reg_860 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln51_2_fu_1770_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_5_reg_860 <= add_ln51_2_fu_1764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_get_index_from_z_fu_1486_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state137)) begin
            i_6_reg_975 <= add_ln1001_reg_3600;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            i_6_reg_975 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (icmp_ln1498_fu_1886_p2 == 1'd1) & (icmp_ln999_fu_1880_p2 == 1'd1))) begin
        i_7_reg_987 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln1016_fu_1905_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_7_reg_987 <= add_ln1016_fu_1899_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd1))) begin
        i_8_reg_1019 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln1031_fu_1964_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_8_reg_1019 <= add_ln1031_fu_1958_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd0))) begin
        i_9_reg_1008 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln1038_fu_1935_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_9_reg_1008 <= add_ln1038_fu_1929_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln814_fu_1656_p2) & (1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
        i_reg_790 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_fu_1668_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_790 <= add_ln51_fu_1662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state304)) begin
        latest_patch_index_0_reg_910 <= latest_patch_index_ret8_reg_3943;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        latest_patch_index_0_reg_910 <= reg_1570;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln67_fu_2664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state260)) | ((1'b1 == ap_CS_fsm_state225) & (icmp_ln886_reg_3880 == 1'd0)))) begin
        latest_patch_index_1_reg_1119 <= latest_patch_index_0_reg_910;
    end else if ((1'b1 == ap_CS_fsm_state295)) begin
        latest_patch_index_1_reg_1119 <= grp_fu_1521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        latest_patch_index_2_reg_1193 <= reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        latest_patch_index_2_reg_1193 <= latest_patch_index_0_reg_910;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp10_iter2 == 1'b1) & (icmp_ln1102_reg_3811_pp10_iter1_reg == 1'd0) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        layerSMin_V_reg_1108 <= layerSMin_V_1_fu_2303_p3;
    end else if ((1'b1 == ap_CS_fsm_state215)) begin
        layerSMin_V_reg_1108 <= 32'd2146435072;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp10_iter2 == 1'b1) & (icmp_ln1102_reg_3811_pp10_iter1_reg == 1'd0) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        layerWithSmallestShift_reg_1096 <= layerWithSmallestShift_1_fu_2311_p3;
    end else if ((1'b1 == ap_CS_fsm_state215)) begin
        layerWithSmallestShift_reg_1096 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((triangleAcceptance_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
        min_z_V_2_reg_836 <= 32'd1073741824;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_1_reg_3474 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        min_z_V_2_reg_836 <= min_z_V_3_fu_1742_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd0))) begin
        min_z_V_4_reg_871 <= 32'd1073741824;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln51_2_reg_3502 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        min_z_V_4_reg_871 <= min_z_V_5_fu_1796_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state304)) begin
        nPatchesAtComplementary_reg_920 <= num_patches_ret9_reg_3962;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        nPatchesAtComplementary_reg_920 <= num_patches_ret6_reg_3534;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state225) & (icmp_ln886_reg_3880 == 1'd0))) begin
        num_patches_1_reg_1133 <= nPatchesAtComplementary_reg_920;
    end else if (((icmp_ln67_fu_2664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state260))) begin
        num_patches_1_reg_1133 <= add_ln51_3_fu_2653_p2;
    end else if ((1'b1 == ap_CS_fsm_state295)) begin
        num_patches_1_reg_1133 <= add_ln51_3_reg_3934;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        num_patches_2_reg_1204 <= reg_1577;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        num_patches_2_reg_1204 <= nPatchesAtComplementary_reg_920;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        original_topL_jL_V_1_reg_1252 <= complementary_topL_jL_V_7_reg_4241;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        original_topL_jL_V_1_reg_1252 <= original_topL_jL_V_reg_4039;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        original_topL_jR_V_1_reg_1312 <= complementary_topL_jR_V_6_reg_4278;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        original_topL_jR_V_1_reg_1312 <= original_topL_jR_V_reg_4048;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        original_topR_jL_V_1_reg_1242 <= complementary_topL_jL_V_6_reg_4235;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        original_topR_jL_V_1_reg_1242 <= original_topR_jL_V_reg_4053;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state675)) begin
        original_topR_jR_V_1_reg_1302 <= complementary_topR_jR_V_6_reg_4271;
    end else if ((1'b1 == ap_CS_fsm_state615)) begin
        original_topR_jR_V_1_reg_1302 <= original_topR_jR_V_reg_4060;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state304)) begin
        previous_z_top_min_V_reg_951 <= z_top_min_V_11_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        previous_z_top_min_V_reg_951 <= 32'd2147483648;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln814_fu_1656_p2) & (1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
        shifted_Align_V_5_reg_801 <= 32'd1073741824;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln51_reg_3441 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shifted_Align_V_5_reg_801 <= min_z_V_1_fu_1694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state304)) begin
        white_space_height_V_3_reg_941 <= white_space_height_V_2_fu_2714_p1;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        white_space_height_V_3_reg_941 <= white_space_height_V_fu_1862_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state304)) begin
        z_top_min_V_11_reg_930 <= z_top_min_V_10_reg_3928;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        z_top_min_V_11_reg_930 <= z_top_min_V_reg_895;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        z_top_min_V_reg_895 <= min_z_V_4_reg_871;
    end else if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd1))) begin
        z_top_min_V_reg_895 <= 32'd4242538496;
    end else if (((triangleAcceptance_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
        z_top_min_V_reg_895 <= original_d_V_reg_3422;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        add_ln1001_reg_3600 <= add_ln1001_fu_1870_p2;
        zext_ln999_reg_3606[2 : 0] <= zext_ln999_fu_1876_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        add_ln1076_reg_3747 <= add_ln1076_fu_2066_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_fu_2185_p2 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        add_ln1088_reg_3796 <= add_ln1088_fu_2202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp9_stage0_11001)) begin
        add_ln1088_reg_3796_pp9_iter10_reg <= add_ln1088_reg_3796_pp9_iter9_reg;
        add_ln1088_reg_3796_pp9_iter11_reg <= add_ln1088_reg_3796_pp9_iter10_reg;
        add_ln1088_reg_3796_pp9_iter12_reg <= add_ln1088_reg_3796_pp9_iter11_reg;
        add_ln1088_reg_3796_pp9_iter13_reg <= add_ln1088_reg_3796_pp9_iter12_reg;
        add_ln1088_reg_3796_pp9_iter14_reg <= add_ln1088_reg_3796_pp9_iter13_reg;
        add_ln1088_reg_3796_pp9_iter15_reg <= add_ln1088_reg_3796_pp9_iter14_reg;
        add_ln1088_reg_3796_pp9_iter16_reg <= add_ln1088_reg_3796_pp9_iter15_reg;
        add_ln1088_reg_3796_pp9_iter17_reg <= add_ln1088_reg_3796_pp9_iter16_reg;
        add_ln1088_reg_3796_pp9_iter18_reg <= add_ln1088_reg_3796_pp9_iter17_reg;
        add_ln1088_reg_3796_pp9_iter19_reg <= add_ln1088_reg_3796_pp9_iter18_reg;
        add_ln1088_reg_3796_pp9_iter20_reg <= add_ln1088_reg_3796_pp9_iter19_reg;
        add_ln1088_reg_3796_pp9_iter21_reg <= add_ln1088_reg_3796_pp9_iter20_reg;
        add_ln1088_reg_3796_pp9_iter22_reg <= add_ln1088_reg_3796_pp9_iter21_reg;
        add_ln1088_reg_3796_pp9_iter23_reg <= add_ln1088_reg_3796_pp9_iter22_reg;
        add_ln1088_reg_3796_pp9_iter24_reg <= add_ln1088_reg_3796_pp9_iter23_reg;
        add_ln1088_reg_3796_pp9_iter25_reg <= add_ln1088_reg_3796_pp9_iter24_reg;
        add_ln1088_reg_3796_pp9_iter26_reg <= add_ln1088_reg_3796_pp9_iter25_reg;
        add_ln1088_reg_3796_pp9_iter27_reg <= add_ln1088_reg_3796_pp9_iter26_reg;
        add_ln1088_reg_3796_pp9_iter28_reg <= add_ln1088_reg_3796_pp9_iter27_reg;
        add_ln1088_reg_3796_pp9_iter29_reg <= add_ln1088_reg_3796_pp9_iter28_reg;
        add_ln1088_reg_3796_pp9_iter2_reg <= add_ln1088_reg_3796_pp9_iter1_reg;
        add_ln1088_reg_3796_pp9_iter30_reg <= add_ln1088_reg_3796_pp9_iter29_reg;
        add_ln1088_reg_3796_pp9_iter31_reg <= add_ln1088_reg_3796_pp9_iter30_reg;
        add_ln1088_reg_3796_pp9_iter32_reg <= add_ln1088_reg_3796_pp9_iter31_reg;
        add_ln1088_reg_3796_pp9_iter33_reg <= add_ln1088_reg_3796_pp9_iter32_reg;
        add_ln1088_reg_3796_pp9_iter34_reg <= add_ln1088_reg_3796_pp9_iter33_reg;
        add_ln1088_reg_3796_pp9_iter35_reg <= add_ln1088_reg_3796_pp9_iter34_reg;
        add_ln1088_reg_3796_pp9_iter36_reg <= add_ln1088_reg_3796_pp9_iter35_reg;
        add_ln1088_reg_3796_pp9_iter37_reg <= add_ln1088_reg_3796_pp9_iter36_reg;
        add_ln1088_reg_3796_pp9_iter38_reg <= add_ln1088_reg_3796_pp9_iter37_reg;
        add_ln1088_reg_3796_pp9_iter39_reg <= add_ln1088_reg_3796_pp9_iter38_reg;
        add_ln1088_reg_3796_pp9_iter3_reg <= add_ln1088_reg_3796_pp9_iter2_reg;
        add_ln1088_reg_3796_pp9_iter40_reg <= add_ln1088_reg_3796_pp9_iter39_reg;
        add_ln1088_reg_3796_pp9_iter41_reg <= add_ln1088_reg_3796_pp9_iter40_reg;
        add_ln1088_reg_3796_pp9_iter42_reg <= add_ln1088_reg_3796_pp9_iter41_reg;
        add_ln1088_reg_3796_pp9_iter43_reg <= add_ln1088_reg_3796_pp9_iter42_reg;
        add_ln1088_reg_3796_pp9_iter44_reg <= add_ln1088_reg_3796_pp9_iter43_reg;
        add_ln1088_reg_3796_pp9_iter45_reg <= add_ln1088_reg_3796_pp9_iter44_reg;
        add_ln1088_reg_3796_pp9_iter46_reg <= add_ln1088_reg_3796_pp9_iter45_reg;
        add_ln1088_reg_3796_pp9_iter47_reg <= add_ln1088_reg_3796_pp9_iter46_reg;
        add_ln1088_reg_3796_pp9_iter48_reg <= add_ln1088_reg_3796_pp9_iter47_reg;
        add_ln1088_reg_3796_pp9_iter49_reg <= add_ln1088_reg_3796_pp9_iter48_reg;
        add_ln1088_reg_3796_pp9_iter4_reg <= add_ln1088_reg_3796_pp9_iter3_reg;
        add_ln1088_reg_3796_pp9_iter50_reg <= add_ln1088_reg_3796_pp9_iter49_reg;
        add_ln1088_reg_3796_pp9_iter51_reg <= add_ln1088_reg_3796_pp9_iter50_reg;
        add_ln1088_reg_3796_pp9_iter52_reg <= add_ln1088_reg_3796_pp9_iter51_reg;
        add_ln1088_reg_3796_pp9_iter53_reg <= add_ln1088_reg_3796_pp9_iter52_reg;
        add_ln1088_reg_3796_pp9_iter5_reg <= add_ln1088_reg_3796_pp9_iter4_reg;
        add_ln1088_reg_3796_pp9_iter6_reg <= add_ln1088_reg_3796_pp9_iter5_reg;
        add_ln1088_reg_3796_pp9_iter7_reg <= add_ln1088_reg_3796_pp9_iter6_reg;
        add_ln1088_reg_3796_pp9_iter8_reg <= add_ln1088_reg_3796_pp9_iter7_reg;
        add_ln1088_reg_3796_pp9_iter9_reg <= add_ln1088_reg_3796_pp9_iter8_reg;
        icmp_ln1087_reg_3781_pp9_iter10_reg <= icmp_ln1087_reg_3781_pp9_iter9_reg;
        icmp_ln1087_reg_3781_pp9_iter11_reg <= icmp_ln1087_reg_3781_pp9_iter10_reg;
        icmp_ln1087_reg_3781_pp9_iter12_reg <= icmp_ln1087_reg_3781_pp9_iter11_reg;
        icmp_ln1087_reg_3781_pp9_iter13_reg <= icmp_ln1087_reg_3781_pp9_iter12_reg;
        icmp_ln1087_reg_3781_pp9_iter14_reg <= icmp_ln1087_reg_3781_pp9_iter13_reg;
        icmp_ln1087_reg_3781_pp9_iter15_reg <= icmp_ln1087_reg_3781_pp9_iter14_reg;
        icmp_ln1087_reg_3781_pp9_iter16_reg <= icmp_ln1087_reg_3781_pp9_iter15_reg;
        icmp_ln1087_reg_3781_pp9_iter17_reg <= icmp_ln1087_reg_3781_pp9_iter16_reg;
        icmp_ln1087_reg_3781_pp9_iter18_reg <= icmp_ln1087_reg_3781_pp9_iter17_reg;
        icmp_ln1087_reg_3781_pp9_iter19_reg <= icmp_ln1087_reg_3781_pp9_iter18_reg;
        icmp_ln1087_reg_3781_pp9_iter20_reg <= icmp_ln1087_reg_3781_pp9_iter19_reg;
        icmp_ln1087_reg_3781_pp9_iter21_reg <= icmp_ln1087_reg_3781_pp9_iter20_reg;
        icmp_ln1087_reg_3781_pp9_iter22_reg <= icmp_ln1087_reg_3781_pp9_iter21_reg;
        icmp_ln1087_reg_3781_pp9_iter23_reg <= icmp_ln1087_reg_3781_pp9_iter22_reg;
        icmp_ln1087_reg_3781_pp9_iter24_reg <= icmp_ln1087_reg_3781_pp9_iter23_reg;
        icmp_ln1087_reg_3781_pp9_iter25_reg <= icmp_ln1087_reg_3781_pp9_iter24_reg;
        icmp_ln1087_reg_3781_pp9_iter26_reg <= icmp_ln1087_reg_3781_pp9_iter25_reg;
        icmp_ln1087_reg_3781_pp9_iter27_reg <= icmp_ln1087_reg_3781_pp9_iter26_reg;
        icmp_ln1087_reg_3781_pp9_iter28_reg <= icmp_ln1087_reg_3781_pp9_iter27_reg;
        icmp_ln1087_reg_3781_pp9_iter29_reg <= icmp_ln1087_reg_3781_pp9_iter28_reg;
        icmp_ln1087_reg_3781_pp9_iter2_reg <= icmp_ln1087_reg_3781_pp9_iter1_reg;
        icmp_ln1087_reg_3781_pp9_iter30_reg <= icmp_ln1087_reg_3781_pp9_iter29_reg;
        icmp_ln1087_reg_3781_pp9_iter31_reg <= icmp_ln1087_reg_3781_pp9_iter30_reg;
        icmp_ln1087_reg_3781_pp9_iter32_reg <= icmp_ln1087_reg_3781_pp9_iter31_reg;
        icmp_ln1087_reg_3781_pp9_iter33_reg <= icmp_ln1087_reg_3781_pp9_iter32_reg;
        icmp_ln1087_reg_3781_pp9_iter34_reg <= icmp_ln1087_reg_3781_pp9_iter33_reg;
        icmp_ln1087_reg_3781_pp9_iter35_reg <= icmp_ln1087_reg_3781_pp9_iter34_reg;
        icmp_ln1087_reg_3781_pp9_iter36_reg <= icmp_ln1087_reg_3781_pp9_iter35_reg;
        icmp_ln1087_reg_3781_pp9_iter37_reg <= icmp_ln1087_reg_3781_pp9_iter36_reg;
        icmp_ln1087_reg_3781_pp9_iter38_reg <= icmp_ln1087_reg_3781_pp9_iter37_reg;
        icmp_ln1087_reg_3781_pp9_iter39_reg <= icmp_ln1087_reg_3781_pp9_iter38_reg;
        icmp_ln1087_reg_3781_pp9_iter3_reg <= icmp_ln1087_reg_3781_pp9_iter2_reg;
        icmp_ln1087_reg_3781_pp9_iter40_reg <= icmp_ln1087_reg_3781_pp9_iter39_reg;
        icmp_ln1087_reg_3781_pp9_iter41_reg <= icmp_ln1087_reg_3781_pp9_iter40_reg;
        icmp_ln1087_reg_3781_pp9_iter42_reg <= icmp_ln1087_reg_3781_pp9_iter41_reg;
        icmp_ln1087_reg_3781_pp9_iter43_reg <= icmp_ln1087_reg_3781_pp9_iter42_reg;
        icmp_ln1087_reg_3781_pp9_iter44_reg <= icmp_ln1087_reg_3781_pp9_iter43_reg;
        icmp_ln1087_reg_3781_pp9_iter45_reg <= icmp_ln1087_reg_3781_pp9_iter44_reg;
        icmp_ln1087_reg_3781_pp9_iter46_reg <= icmp_ln1087_reg_3781_pp9_iter45_reg;
        icmp_ln1087_reg_3781_pp9_iter47_reg <= icmp_ln1087_reg_3781_pp9_iter46_reg;
        icmp_ln1087_reg_3781_pp9_iter48_reg <= icmp_ln1087_reg_3781_pp9_iter47_reg;
        icmp_ln1087_reg_3781_pp9_iter49_reg <= icmp_ln1087_reg_3781_pp9_iter48_reg;
        icmp_ln1087_reg_3781_pp9_iter4_reg <= icmp_ln1087_reg_3781_pp9_iter3_reg;
        icmp_ln1087_reg_3781_pp9_iter50_reg <= icmp_ln1087_reg_3781_pp9_iter49_reg;
        icmp_ln1087_reg_3781_pp9_iter51_reg <= icmp_ln1087_reg_3781_pp9_iter50_reg;
        icmp_ln1087_reg_3781_pp9_iter52_reg <= icmp_ln1087_reg_3781_pp9_iter51_reg;
        icmp_ln1087_reg_3781_pp9_iter53_reg <= icmp_ln1087_reg_3781_pp9_iter52_reg;
        icmp_ln1087_reg_3781_pp9_iter5_reg <= icmp_ln1087_reg_3781_pp9_iter4_reg;
        icmp_ln1087_reg_3781_pp9_iter6_reg <= icmp_ln1087_reg_3781_pp9_iter5_reg;
        icmp_ln1087_reg_3781_pp9_iter7_reg <= icmp_ln1087_reg_3781_pp9_iter6_reg;
        icmp_ln1087_reg_3781_pp9_iter8_reg <= icmp_ln1087_reg_3781_pp9_iter7_reg;
        icmp_ln1087_reg_3781_pp9_iter9_reg <= icmp_ln1087_reg_3781_pp9_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        add_ln1088_reg_3796_pp9_iter1_reg <= add_ln1088_reg_3796;
        icmp_ln1087_reg_3781 <= icmp_ln1087_fu_2185_p2;
        icmp_ln1087_reg_3781_pp9_iter1_reg <= icmp_ln1087_reg_3781;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln1087_fu_2185_p2 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        add_ln1089_reg_3785 <= add_ln1089_fu_2191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state260)) begin
        add_ln51_3_reg_3934 <= add_ln51_3_fu_2653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        add_ln52_5_reg_3416[7 : 4] <= add_ln52_5_fu_1627_p2[7 : 4];
        add_ln52_reg_3411[7 : 4] <= add_ln52_fu_1621_p2[7 : 4];
        notChoppedPatch_reg_3428 <= notChoppedPatch_fu_1645_p2;
        original_d_V_reg_3422 <= d_corner_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state340)) begin
        and_ln1362_reg_4065 <= and_ln1362_fu_2843_p2;
        original_topL_jL_V_reg_4039 <= grp_getShadows_fu_1393_ap_return_0;
        original_topL_jR_V_reg_4048 <= grp_getShadows_fu_1393_ap_return_1;
        original_topR_jL_V_reg_4053 <= grp_getShadows_fu_1393_ap_return_2;
        original_topR_jR_V_reg_4060 <= grp_getShadows_fu_1393_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state395)) begin
        and_ln1371_reg_4074 <= and_ln1371_fu_2881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state451)) begin
        and_ln1379_reg_4090 <= and_ln1379_fu_2921_p2;
        complementary_topR_jR_V_reg_4083 <= shadow_fromTopToInnermost_topR_jR_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state507)) begin
        and_ln1388_reg_4106 <= and_ln1388_fu_2961_p2;
        complementary_topL_jR_V_reg_4099 <= shadow_fromTopToInnermost_topL_jR_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
        and_ln814_reg_3432 <= and_ln814_fu_1656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state619)) begin
        complementary_topL_jL_V_6_reg_4235 <= complementary_topL_jL_V_6_fu_3180_p3;
        complementary_topL_jL_V_7_reg_4241 <= complementary_topL_jL_V_7_fu_3187_p3;
        complementary_topL_jL_V_8_reg_4265 <= complementary_topL_jL_V_8_fu_3215_p3;
        complementary_topL_jR_V_5_reg_4253 <= complementary_topL_jR_V_5_fu_3201_p3;
        complementary_topL_jR_V_6_reg_4278 <= complementary_topL_jR_V_6_fu_3229_p3;
        complementary_topR_jL_V_4_reg_4259 <= complementary_topR_jL_V_4_fu_3208_p3;
        complementary_topR_jR_V_5_reg_4247 <= complementary_topR_jR_V_5_fu_3194_p3;
        complementary_topR_jR_V_6_reg_4271 <= complementary_topR_jR_V_6_fu_3222_p3;
        horizontalShiftBottom_1_reg_4289 <= horizontalShiftBottom_1_fu_3242_p2;
        horizontalShiftTop_1_reg_4284 <= horizontalShiftTop_1_fu_3236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        current_z_top_index_V_1_reg_3594 <= grp_get_index_from_z_fu_1486_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln1038_fu_1935_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_10_cast_reg_3662[2 : 0] <= i_10_cast_fu_1941_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln1076_fu_2072_p2 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        i_13_cast14_reg_3756[2 : 0] <= i_13_cast14_fu_2078_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        i_13_cast14_reg_3756_pp8_iter1_reg[2 : 0] <= i_13_cast14_reg_3756[2 : 0];
        icmp_ln1076_reg_3752 <= icmp_ln1076_fu_2072_p2;
        icmp_ln1076_reg_3752_pp8_iter1_reg <= icmp_ln1076_reg_3752;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp8_stage0_11001)) begin
        i_13_cast14_reg_3756_pp8_iter2_reg[2 : 0] <= i_13_cast14_reg_3756_pp8_iter1_reg[2 : 0];
        icmp_ln1076_reg_3752_pp8_iter2_reg <= icmp_ln1076_reg_3752_pp8_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln1016_fu_1905_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_8_cast_reg_3633[2 : 0] <= i_8_cast_fu_1911_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln1031_fu_1964_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_9_cast_reg_3691[2 : 0] <= i_9_cast_fu_1970_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln1016_reg_3629 <= icmp_ln1016_fu_1905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        icmp_ln1031_reg_3687 <= icmp_ln1031_fu_1964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln1038_reg_3658 <= icmp_ln1038_fu_1935_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        icmp_ln1054_reg_3712 <= icmp_ln1054_fu_1988_p2;
        icmp_ln1054_reg_3712_pp6_iter1_reg <= icmp_ln1054_reg_3712;
        new_z_i_index_V_addr_3_reg_3716_pp6_iter1_reg <= new_z_i_index_V_addr_3_reg_3716;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        icmp_ln1068_reg_3737 <= icmp_ln1068_fu_2032_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp10_stage0) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        icmp_ln1102_reg_3811 <= icmp_ln1102_fu_2222_p2;
        icmp_ln1102_reg_3811_pp10_iter1_reg <= icmp_ln1102_reg_3811;
        trunc_ln1106_reg_3820_pp10_iter1_reg <= trunc_ln1106_reg_3820;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state303)) begin
        icmp_ln1494_21_reg_3994 <= icmp_ln1494_21_fu_2698_p2;
        ret_V_17_reg_3982 <= ret_V_17_fu_2684_p2;
        ret_V_18_reg_3988 <= ret_V_18_fu_2693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln51_1_reg_3474 <= icmp_ln51_1_fu_1716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln51_2_reg_3502 <= icmp_ln51_2_fu_1770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln51_reg_3441 <= icmp_ln51_fu_1668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state219)) begin
        icmp_ln878_reg_3848 <= icmp_ln878_fu_2327_p2;
        icmp_ln886_reg_3880 <= icmp_ln886_fu_2410_p2;
        lshr_ln4_reg_3870 <= {{add_ln1143_fu_2378_p2[15:13]}};
        lshr_ln5_reg_3875 <= {{add_ln1150_fu_2394_p2[15:13]}};
        trunc_ln1136_reg_3863 <= trunc_ln1136_fu_2366_p1;
        trunc_ln_reg_3858 <= {{current_z_top_index_V_fu_2343_p3[11:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state297)) begin
        latest_patch_index_ret8_reg_3943 <= grp_makePatch_alignedToLine_fu_1322_ap_return_0;
        num_patches_ret9_reg_3962 <= grp_makePatch_alignedToLine_fu_1322_ap_return_1;
        trunc_ln1204_reg_3949 <= trunc_ln1204_fu_2670_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state615)) begin
        lnot633_reg_4177 <= lnot633_fu_3067_p2;
        newZtop_V_1_reg_4182 <= newZtop_V_1_fu_3073_p3;
        shiftOriginal_reg_4164 <= shiftOriginal_fu_3055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln1076_reg_3752 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        lshr_ln_reg_3766 <= {{add_ln1077_fu_2149_p2[15:13]}};
        trunc_ln1077_reg_3771 <= trunc_ln1077_fu_2165_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln1054_fu_1988_p2 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        new_z_i_index_V_addr_3_reg_3716 <= i_11_cast_fu_1994_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln1068_fu_2032_p2 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        new_z_i_index_V_addr_4_reg_3741 <= i_12_cast_fu_2038_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        num_patches_ret6_reg_3534 <= grp_makePatch_alignedToLine_fu_1322_ap_return_1;
        trunc_ln858_reg_3521 <= trunc_ln858_fu_1812_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln1054_reg_3712 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        num_points_load_1_reg_3727 <= num_points_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        num_points_load_reg_3701 <= num_points_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state562)) begin
        or_ln1487_reg_4129 <= or_ln1487_fu_2989_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state563)) begin
        or_ln1489_reg_4134 <= or_ln1489_fu_3005_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        original_c_V_reg_3384 <= c_corner_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state505)) begin
        phitmp5_reg_4094 <= phitmp5_fu_2943_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state449)) begin
        phitmp6_reg_4078 <= phitmp6_fu_2903_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state561)) begin
        phitmp7_reg_4110 <= phitmp7_fu_2983_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state394)) begin
        phitmp_reg_4069 <= phitmp_fu_2865_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state618)) | ((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_1570 <= grp_makePatch_alignedToLine_fu_1322_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_1577 <= grp_makePatch_alignedToLine_fu_1322_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state339) | (1'b1 == ap_CS_fsm_state295))) begin
        reg_1588 <= grp_fu_1521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state224)) begin
        ret_V_19_reg_3923 <= ret_V_19_fu_2614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state215)) begin
        rhs_6_reg_3801 <= rhs_6_fu_2212_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        sext_ln703_4_reg_3554 <= sext_ln703_4_fu_1835_p1;
        sext_ln703_reg_3549 <= sext_ln703_fu_1822_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state622)) begin
        sext_ln703_6_reg_4294 <= sext_ln703_6_fu_3248_p1;
        sext_ln703_7_reg_4299 <= sext_ln703_7_fu_3251_p1;
        sext_ln703_8_reg_4304 <= sext_ln703_8_fu_3254_p1;
        sext_ln703_9_reg_4309 <= sext_ln703_9_fu_3257_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state338)) begin
        shadow_fromTopToInnermost_topL_jL_addr_reg_4014 <= zext_ln1288_fu_2804_p1;
        shadow_fromTopToInnermost_topL_jR_addr_reg_4019 <= zext_ln1288_fu_2804_p1;
        shadow_fromTopToInnermost_topR_jL_addr_reg_4024 <= zext_ln1288_fu_2804_p1;
        shadow_fromTopToInnermost_topR_jR_addr_reg_4029 <= zext_ln1288_fu_2804_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state616) & (((1'd1 == and_ln1491_fu_3100_p2) & (1'd1 == and_ln814_reg_3432) & (or_ln1487_1_fu_3087_p2 == 1'd0) & (notChoppedPatch_reg_3428 == 1'd0)) | ((1'd1 == and_ln1489_1_fu_3129_p2) & (1'd1 == and_ln814_reg_3432) & (or_ln1487_1_fu_3087_p2 == 1'd1) & (notChoppedPatch_reg_3428 == 1'd0))))) begin
        shifted_Align_V_4_reg_4196 <= shifted_Align_V_4_fu_3161_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp10_stage0) & (icmp_ln1102_reg_3811 == 1'd0) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        sub_ln703_13_reg_3825 <= sub_ln703_13_fu_2237_p2;
        tmp_51_reg_3832 <= sub_ln703_13_fu_2237_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        tmp_41_reg_3648 <= white_space_height_V_3_reg_941[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp10_stage0) & (icmp_ln1102_fu_2222_p2 == 1'd0) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        trunc_ln1106_reg_3820 <= trunc_ln1106_fu_2233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state337)) begin
        trunc_ln1288_reg_4009 <= trunc_ln1288_fu_2799_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state339)) begin
        trunc_ln1305_reg_4034 <= trunc_ln1305_fu_2812_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        trunc_ln1520_reg_4202 <= trunc_ln1520_fu_3168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln52_reg_3360 <= trunc_ln52_fu_1597_p1;
        trunc_ln694_reg_3346 <= trunc_ln694_fu_1593_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state225)) begin
        z_top_min_V_10_reg_3928 <= z_top_min_V_10_fu_2640_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state223)) begin
        z_top_min_V_12_reg_3917 <= z_top_min_V_12_fu_2604_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        z_top_min_V_2_reg_3884 <= new_z_i_atTop_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state221)) begin
        z_top_min_V_4_reg_3895 <= z_top_min_V_4_fu_2478_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state222)) begin
        z_top_min_V_6_reg_3906 <= z_top_min_V_6_fu_2541_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        z_value_tmp_V_reg_3619 <= grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        zext_ln697_reg_3365[31 : 0] <= zext_ln697_fu_1601_p1[31 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        a_corner_0_ce0 = grp_get_acceptanceCorners_fu_1445_a_corner_0_ce0;
    end else begin
        a_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        a_corner_0_we0 = grp_get_acceptanceCorners_fu_1445_a_corner_0_we0;
    end else begin
        a_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state302)) begin
        a_corner_1_address0 = zext_ln1208_fu_2674_p1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        a_corner_1_address0 = zext_ln861_fu_1816_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_corner_1_address0 = zext_ln697_reg_3365;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        a_corner_1_address0 = grp_get_acceptanceCorners_fu_1445_a_corner_1_address0;
    end else begin
        a_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state302) | (1'b1 == ap_CS_fsm_state78))) begin
        a_corner_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        a_corner_1_ce0 = grp_get_acceptanceCorners_fu_1445_a_corner_1_ce0;
    end else begin
        a_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        a_corner_1_we0 = grp_get_acceptanceCorners_fu_1445_a_corner_1_we0;
    end else begin
        a_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln51_fu_1668_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state62 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state62 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp10_stage0) & (icmp_ln1102_fu_2222_p2 == 1'd1) & (1'b0 == ap_block_pp10_stage0_subdone))) begin
        ap_condition_pp10_flush_enable = 1'b1;
    end else begin
        ap_condition_pp10_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln51_1_fu_1716_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state66 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state66 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln51_2_fu_1770_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state69 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state69 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1016_fu_1905_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state138 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state138 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1038_fu_1935_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state142 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state142 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1031_fu_1964_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state145 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state145 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1054_fu_1988_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state148 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state148 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1068_fu_2032_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state152 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state152 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1076_fu_2072_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state155 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state155 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1087_fu_2185_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state160 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state160 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state616) & ((notChoppedPatch_reg_3428 == 1'd1) | ((1'd0 == and_ln814_reg_3432) | (((1'd0 == and_ln1491_fu_3100_p2) & (or_ln1487_1_fu_3087_p2 == 1'd0)) | ((1'd0 == and_ln1489_1_fu_3129_p2) & (or_ln1487_1_fu_3087_p2 == 1'd1)))))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter2 == 1'b0) & (ap_enable_reg_pp10_iter0 == 1'b0))) begin
        ap_idle_pp10 = 1'b1;
    end else begin
        ap_idle_pp10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter3 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter54 == 1'b0) & (ap_enable_reg_pp9_iter53 == 1'b0) & (ap_enable_reg_pp9_iter52 == 1'b0) & (ap_enable_reg_pp9_iter51 == 1'b0) & (ap_enable_reg_pp9_iter50 == 1'b0) & (ap_enable_reg_pp9_iter49 == 1'b0) & (ap_enable_reg_pp9_iter48 == 1'b0) & (ap_enable_reg_pp9_iter47 == 1'b0) & (ap_enable_reg_pp9_iter46 == 1'b0) & (ap_enable_reg_pp9_iter45 == 1'b0) & (ap_enable_reg_pp9_iter44 == 1'b0) & (ap_enable_reg_pp9_iter43 == 1'b0) & (ap_enable_reg_pp9_iter42 == 1'b0) & (ap_enable_reg_pp9_iter41 == 1'b0) & (ap_enable_reg_pp9_iter40 == 1'b0) & (ap_enable_reg_pp9_iter39 == 1'b0) & (ap_enable_reg_pp9_iter38 == 1'b0) & (ap_enable_reg_pp9_iter37 == 1'b0) & (ap_enable_reg_pp9_iter36 == 1'b0) & (ap_enable_reg_pp9_iter35 == 1'b0) & (ap_enable_reg_pp9_iter34 == 1'b0) & (ap_enable_reg_pp9_iter33 == 1'b0) & (ap_enable_reg_pp9_iter32 == 1'b0) & (ap_enable_reg_pp9_iter31 == 1'b0) & (ap_enable_reg_pp9_iter30 == 1'b0) & (ap_enable_reg_pp9_iter29 == 1'b0) & (ap_enable_reg_pp9_iter28 == 1'b0) & (ap_enable_reg_pp9_iter27 == 1'b0) & (ap_enable_reg_pp9_iter26 == 1'b0) & (ap_enable_reg_pp9_iter25 == 1'b0) & (ap_enable_reg_pp9_iter24 == 1'b0) & (ap_enable_reg_pp9_iter23 == 1'b0) & (ap_enable_reg_pp9_iter22 == 1'b0) & (ap_enable_reg_pp9_iter21 == 1'b0) & (ap_enable_reg_pp9_iter20 == 1'b0) & (ap_enable_reg_pp9_iter19 == 1'b0) & (ap_enable_reg_pp9_iter18 == 1'b0) & (ap_enable_reg_pp9_iter17 == 1'b0) & (ap_enable_reg_pp9_iter16 == 1'b0) & (ap_enable_reg_pp9_iter15 == 1'b0) & (ap_enable_reg_pp9_iter14 == 1'b0) & (ap_enable_reg_pp9_iter13 == 1'b0) & (ap_enable_reg_pp9_iter12 == 1'b0) & (ap_enable_reg_pp9_iter11 == 1'b0) & (ap_enable_reg_pp9_iter10 == 1'b0) & (ap_enable_reg_pp9_iter9 == 1'b0) & (ap_enable_reg_pp9_iter8 == 1'b0) & (ap_enable_reg_pp9_iter7 == 1'b0) & (ap_enable_reg_pp9_iter6 == 1'b0) & (ap_enable_reg_pp9_iter5 == 1'b0) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter3 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b0) & (ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln1076_reg_3752 == 1'd0) & (1'b0 == ap_block_pp8_stage0))) begin
        ap_phi_mux_i_12_phi_fu_1066_p4 = add_ln1076_reg_3747;
    end else begin
        ap_phi_mux_i_12_phi_fu_1066_p4 = i_12_reg_1062;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0))) begin
        ap_phi_mux_i_13_phi_fu_1078_p4 = add_ln1089_reg_3785;
    end else begin
        ap_phi_mux_i_13_phi_fu_1078_p4 = i_13_reg_1074;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state616) & ((notChoppedPatch_reg_3428 == 1'd1) | ((1'd0 == and_ln814_reg_3432) | (((1'd0 == and_ln1491_fu_3100_p2) & (or_ln1487_1_fu_3087_p2 == 1'd0)) | ((1'd0 == and_ln1489_1_fu_3129_p2) & (or_ln1487_1_fu_3087_p2 == 1'd1))))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        b_corner_0_ce0 = grp_get_acceptanceCorners_fu_1445_b_corner_0_ce0;
    end else begin
        b_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        b_corner_0_we0 = grp_get_acceptanceCorners_fu_1445_b_corner_0_we0;
    end else begin
        b_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state302)) begin
        b_corner_1_address0 = zext_ln1208_fu_2674_p1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        b_corner_1_address0 = zext_ln861_fu_1816_p1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        b_corner_1_address0 = grp_get_acceptanceCorners_fu_1445_b_corner_1_address0;
    end else begin
        b_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state302) | (1'b1 == ap_CS_fsm_state78))) begin
        b_corner_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        b_corner_1_ce0 = grp_get_acceptanceCorners_fu_1445_b_corner_1_ce0;
    end else begin
        b_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        b_corner_1_we0 = grp_get_acceptanceCorners_fu_1445_b_corner_1_we0;
    end else begin
        b_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_0_address0 = zext_ln697_fu_1601_p1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        c_corner_0_address0 = grp_get_acceptanceCorners_fu_1445_c_corner_0_address0;
    end else begin
        c_corner_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        c_corner_0_ce0 = grp_get_acceptanceCorners_fu_1445_c_corner_0_ce0;
    end else begin
        c_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        c_corner_0_we0 = grp_get_acceptanceCorners_fu_1445_c_corner_0_we0;
    end else begin
        c_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state302)) begin
        c_corner_1_address0 = zext_ln1208_fu_2674_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_1_address0 = zext_ln697_fu_1601_p1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        c_corner_1_address0 = grp_get_acceptanceCorners_fu_1445_c_corner_1_address0;
    end else begin
        c_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state302))) begin
        c_corner_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        c_corner_1_ce0 = grp_get_acceptanceCorners_fu_1445_c_corner_1_ce0;
    end else begin
        c_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        c_corner_1_we0 = grp_get_acceptanceCorners_fu_1445_c_corner_1_we0;
    end else begin
        c_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0))) begin
        current_z_i_index_V_address0 = i_9_cast_fu_1970_p1;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        current_z_i_index_V_address0 = i_10_cast_fu_1941_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        current_z_i_index_V_address0 = i_8_cast_fu_1911_p1;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        current_z_i_index_V_address0 = zext_ln999_reg_3606;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        current_z_i_index_V_address0 = 64'd0;
    end else begin
        current_z_i_index_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((grp_get_index_from_z_fu_1486_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state137)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        current_z_i_index_V_ce0 = 1'b1;
    end else begin
        current_z_i_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        current_z_i_index_V_d0 = shl_ln731_fu_1892_p2;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        current_z_i_index_V_d0 = 32'd2146435072;
    end else begin
        current_z_i_index_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state80)) | ((grp_get_index_from_z_fu_1486_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state137)))) begin
        current_z_i_index_V_we0 = 1'b1;
    end else begin
        current_z_i_index_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        d_corner_0_ce0 = grp_get_acceptanceCorners_fu_1445_d_corner_0_ce0;
    end else begin
        d_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        d_corner_0_we0 = grp_get_acceptanceCorners_fu_1445_d_corner_0_we0;
    end else begin
        d_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        d_corner_1_address0 = zext_ln697_reg_3365;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        d_corner_1_address0 = grp_get_acceptanceCorners_fu_1445_d_corner_1_address0;
    end else begin
        d_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        d_corner_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        d_corner_1_ce0 = grp_get_acceptanceCorners_fu_1445_d_corner_1_ce0;
    end else begin
        d_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        d_corner_1_we0 = grp_get_acceptanceCorners_fu_1445_d_corner_1_we0;
    end else begin
        d_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        flatBottom_address0 = zext_ln697_reg_3365;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        flatBottom_address0 = grp_get_acceptanceCorners_fu_1445_flatBottom_address0;
    end else begin
        flatBottom_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        flatBottom_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        flatBottom_ce0 = grp_get_acceptanceCorners_fu_1445_flatBottom_ce0;
    end else begin
        flatBottom_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        flatBottom_we0 = grp_get_acceptanceCorners_fu_1445_flatBottom_we0;
    end else begin
        flatBottom_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        flatTop_ce0 = grp_get_acceptanceCorners_fu_1445_flatTop_ce0;
    end else begin
        flatTop_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        flatTop_we0 = grp_get_acceptanceCorners_fu_1445_flatTop_we0;
    end else begin
        flatTop_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state260)) begin
        grp_fu_1514_p0 = latest_patch_index_0_reg_910;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_1514_p0 = ap_phi_mux_latest_patch_index_0_phi_fu_913_p4;
    end else begin
        grp_fu_1514_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln67_fu_2664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state260)) | ((ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state80)))) begin
        grp_fu_1521_ap_start = 1'b1;
    end else begin
        grp_fu_1521_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state339) | (1'b1 == ap_CS_fsm_state295) | (1'b1 == ap_CS_fsm_state260) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state336) | (1'b1 == ap_CS_fsm_state335) | (1'b1 == ap_CS_fsm_state334) | (1'b1 == ap_CS_fsm_state333) | (1'b1 == ap_CS_fsm_state332) | (1'b1 == ap_CS_fsm_state331) | (1'b1 == ap_CS_fsm_state330) | (1'b1 == ap_CS_fsm_state329) | (1'b1 == ap_CS_fsm_state328) | (1'b1 == ap_CS_fsm_state327) | (1'b1 == ap_CS_fsm_state326) | (1'b1 == ap_CS_fsm_state325) | (1'b1 == ap_CS_fsm_state324) | (1'b1 == ap_CS_fsm_state323) | (1'b1 == ap_CS_fsm_state322) | (1'b1 == ap_CS_fsm_state321) | (1'b1 == ap_CS_fsm_state320) | (1'b1 == ap_CS_fsm_state319) | (1'b1 == ap_CS_fsm_state318) | (1'b1 == ap_CS_fsm_state317) | (1'b1 == ap_CS_fsm_state316) | (1'b1 == ap_CS_fsm_state315) | (1'b1 == ap_CS_fsm_state314) | (1'b1 == ap_CS_fsm_state313) | (1'b1 == ap_CS_fsm_state312) | (1'b1 == ap_CS_fsm_state311) | (1'b1 == ap_CS_fsm_state310) | (1'b1 == ap_CS_fsm_state309) | (1'b1 == ap_CS_fsm_state308) | (1'b1 == ap_CS_fsm_state307) | (1'b1 == ap_CS_fsm_state306) | (1'b1 == ap_CS_fsm_state305) | (1'b1 == ap_CS_fsm_state294) | (1'b1 == ap_CS_fsm_state293) | (1'b1 == ap_CS_fsm_state292) | (1'b1 == ap_CS_fsm_state291) | (1'b1 == ap_CS_fsm_state290) | (1'b1 == ap_CS_fsm_state289) | (1'b1 == ap_CS_fsm_state288) | (1'b1 == ap_CS_fsm_state287) | (1'b1 == ap_CS_fsm_state286) | (1'b1 == ap_CS_fsm_state285) | (1'b1 == ap_CS_fsm_state284) | (1'b1 == ap_CS_fsm_state283) | (1'b1 == ap_CS_fsm_state282) | (1'b1 == ap_CS_fsm_state281) | (1'b1 == ap_CS_fsm_state280) | (1'b1 == ap_CS_fsm_state279) | (1'b1 == ap_CS_fsm_state278) | (1'b1 == ap_CS_fsm_state277) | (1'b1 == ap_CS_fsm_state276) | (1'b1 == ap_CS_fsm_state275) | (1'b1 == ap_CS_fsm_state274) | (1'b1 == ap_CS_fsm_state273) | (1'b1 == ap_CS_fsm_state272) | (1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state270) | (1'b1 == ap_CS_fsm_state269) | (1'b1 == ap_CS_fsm_state268) | (1'b1 == ap_CS_fsm_state267) | (1'b1 == ap_CS_fsm_state266) | (1'b1 == ap_CS_fsm_state265) | (1'b1 == ap_CS_fsm_state264) | (1'b1 == ap_CS_fsm_state263) | (1'b1 == ap_CS_fsm_state262) | (1'b1 == ap_CS_fsm_state261) | (1'b1 == ap_CS_fsm_state338) | (1'b1 == ap_CS_fsm_state337))) begin
        grp_fu_1521_ce = 1'b1;
    end else begin
        grp_fu_1521_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state225) & (icmp_ln886_reg_3880 == 1'd1))) begin
        grp_fu_2647_ap_start = 1'b1;
    end else begin
        grp_fu_2647_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_pSlope_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_pSlope_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_pSlope_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_pSlope_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_pSlope_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_superpoints_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_superpoints_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_superpoints_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_superpoints_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_superpoints_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_z1_max_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_z1_max_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_z1_max_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_z1_max_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_z1_max_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state620)) begin
        grp_getParallelograms_fu_1361_z1_min_V_offset = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state299)) begin
        grp_getParallelograms_fu_1361_z1_min_V_offset = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_getParallelograms_fu_1361_z1_min_V_offset = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_getParallelograms_fu_1361_z1_min_V_offset = trunc_ln694_reg_3346;
    end else begin
        grp_getParallelograms_fu_1361_z1_min_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state340)) begin
        grp_getShadows_fu_1393_patch_offset = trunc_ln1305_reg_4034;
    end else if ((1'b1 == ap_CS_fsm_state338)) begin
        grp_getShadows_fu_1393_patch_offset = trunc_ln1288_reg_4009;
    end else begin
        grp_getShadows_fu_1393_patch_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state622)) begin
        grp_get_acceptanceCorners_fu_1445_p_read = trunc_ln1520_reg_4202;
    end else if ((1'b1 == ap_CS_fsm_state301)) begin
        grp_get_acceptanceCorners_fu_1445_p_read = trunc_ln1204_reg_3949;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_get_acceptanceCorners_fu_1445_p_read = trunc_ln858_reg_3521;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_get_acceptanceCorners_fu_1445_p_read = trunc_ln694_reg_3346;
    end else begin
        grp_get_acceptanceCorners_fu_1445_p_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_get_index_from_z_fu_1486_layer = i_6_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_get_index_from_z_fu_1486_layer = 3'd4;
    end else begin
        grp_get_index_from_z_fu_1486_layer = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_get_index_from_z_fu_1486_z_value = z_value_tmp_V_reg_3619;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_get_index_from_z_fu_1486_z_value = z_top_min_V_11_reg_930;
    end else begin
        grp_get_index_from_z_fu_1486_z_value = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        grp_makePatch_alignedToLine_fu_1322_leftRight = lnot633_reg_4177;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state297))) begin
        grp_makePatch_alignedToLine_fu_1322_leftRight = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_makePatch_alignedToLine_fu_1322_leftRight = 1'd0;
    end else begin
        grp_makePatch_alignedToLine_fu_1322_leftRight = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read = shifted_Align_V_4_reg_4196;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state297))) begin
        grp_makePatch_alignedToLine_fu_1322_p_read = shifted_Align_V_5_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read = 32'd23068776;
    end else begin
        grp_makePatch_alignedToLine_fu_1322_p_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read1 = latest_patch_index_2_reg_1193;
    end else if ((1'b1 == ap_CS_fsm_state297)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read1 = latest_patch_index_1_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read1 = reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read1 = 32'd0;
    end else begin
        grp_makePatch_alignedToLine_fu_1322_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read2 = num_patches_2_reg_1204;
    end else if ((1'b1 == ap_CS_fsm_state297)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read2 = num_patches_1_reg_1133;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read2 = reg_1577;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_makePatch_alignedToLine_fu_1322_p_read2 = 32'd0;
    end else begin
        grp_makePatch_alignedToLine_fu_1322_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        grp_makePatch_alignedToLine_fu_1322_z_top = newZtop_V_1_reg_4182;
    end else if ((1'b1 == ap_CS_fsm_state297)) begin
        grp_makePatch_alignedToLine_fu_1322_z_top = z_top_min_V_10_reg_3928;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_makePatch_alignedToLine_fu_1322_z_top = z_top_min_V_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_makePatch_alignedToLine_fu_1322_z_top = 32'd52428800;
    end else begin
        grp_makePatch_alignedToLine_fu_1322_z_top = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state339) | (1'b1 == ap_CS_fsm_state295) | (1'b1 == ap_CS_fsm_state260) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state621) | (1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state617) | (1'b1 == ap_CS_fsm_state506) | (1'b1 == ap_CS_fsm_state450) | (1'b1 == ap_CS_fsm_state336) | (1'b1 == ap_CS_fsm_state335) | (1'b1 == ap_CS_fsm_state334) | (1'b1 == ap_CS_fsm_state333) | (1'b1 == ap_CS_fsm_state332) | (1'b1 == ap_CS_fsm_state331) | (1'b1 == ap_CS_fsm_state330) | (1'b1 == ap_CS_fsm_state329) | (1'b1 == ap_CS_fsm_state328) | (1'b1 == ap_CS_fsm_state327) | (1'b1 == ap_CS_fsm_state326) | (1'b1 == ap_CS_fsm_state325) | (1'b1 == ap_CS_fsm_state324) | (1'b1 == ap_CS_fsm_state323) | (1'b1 == ap_CS_fsm_state322) | (1'b1 == ap_CS_fsm_state321) | (1'b1 == ap_CS_fsm_state320) | (1'b1 == ap_CS_fsm_state319) | (1'b1 == ap_CS_fsm_state318) | (1'b1 == ap_CS_fsm_state317) | (1'b1 == ap_CS_fsm_state316) | (1'b1 == ap_CS_fsm_state315) | (1'b1 == ap_CS_fsm_state314) | (1'b1 == ap_CS_fsm_state313) | (1'b1 == ap_CS_fsm_state312) | (1'b1 == ap_CS_fsm_state311) | (1'b1 == ap_CS_fsm_state310) | (1'b1 == ap_CS_fsm_state309) | (1'b1 == ap_CS_fsm_state308) | (1'b1 == ap_CS_fsm_state307) | (1'b1 == ap_CS_fsm_state306) | (1'b1 == ap_CS_fsm_state305) | (1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state300) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state298) | (1'b1 == ap_CS_fsm_state296) | (1'b1 == ap_CS_fsm_state294) | (1'b1 == ap_CS_fsm_state293) | (1'b1 == ap_CS_fsm_state292) | (1'b1 == ap_CS_fsm_state291) | (1'b1 == ap_CS_fsm_state290) | (1'b1 == ap_CS_fsm_state289) | (1'b1 == ap_CS_fsm_state288) | (1'b1 == ap_CS_fsm_state287) | (1'b1 == ap_CS_fsm_state286) | (1'b1 == ap_CS_fsm_state285) | (1'b1 == ap_CS_fsm_state284) | (1'b1 == ap_CS_fsm_state283) | (1'b1 == ap_CS_fsm_state282) | (1'b1 == ap_CS_fsm_state281) | (1'b1 == ap_CS_fsm_state280) | (1'b1 == ap_CS_fsm_state279) | (1'b1 == ap_CS_fsm_state278) | (1'b1 == ap_CS_fsm_state277) | (1'b1 == ap_CS_fsm_state276) | (1'b1 == ap_CS_fsm_state275) | (1'b1 == ap_CS_fsm_state274) | (1'b1 == ap_CS_fsm_state273) | (1'b1 == ap_CS_fsm_state272) | (1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state270) | (1'b1 == ap_CS_fsm_state269) | (1'b1 == ap_CS_fsm_state268) | (1'b1 == ap_CS_fsm_state267) | (1'b1 == ap_CS_fsm_state266) | (1'b1 == ap_CS_fsm_state265) | (1'b1 == ap_CS_fsm_state264) | (1'b1 == ap_CS_fsm_state263) | (1'b1 == ap_CS_fsm_state262) | (1'b1 == ap_CS_fsm_state261) | (1'b1 == ap_CS_fsm_state259) | (1'b1 == ap_CS_fsm_state258) | (1'b1 == ap_CS_fsm_state257) | (1'b1 == ap_CS_fsm_state256) | (1'b1 == ap_CS_fsm_state255) | (1'b1 == ap_CS_fsm_state254) | (1'b1 == ap_CS_fsm_state253) | (1'b1 == ap_CS_fsm_state252) | (1'b1 == ap_CS_fsm_state251) | (1'b1 == ap_CS_fsm_state250) | (1'b1 == ap_CS_fsm_state249) | (1'b1 == ap_CS_fsm_state248) | (1'b1 == ap_CS_fsm_state247) | (1'b1 == ap_CS_fsm_state246) | (1'b1 == ap_CS_fsm_state245) | (1'b1 == ap_CS_fsm_state244) | (1'b1 == ap_CS_fsm_state243) | (1'b1 == ap_CS_fsm_state242) | (1'b1 == ap_CS_fsm_state241) | (1'b1 == ap_CS_fsm_state240) | (1'b1 == ap_CS_fsm_state239) | (1'b1 == ap_CS_fsm_state238) | (1'b1 == ap_CS_fsm_state237) | (1'b1 == ap_CS_fsm_state236) | (1'b1 == ap_CS_fsm_state235) | (1'b1 == ap_CS_fsm_state234) | (1'b1 == ap_CS_fsm_state233) | (1'b1 == ap_CS_fsm_state232) | (1'b1 == ap_CS_fsm_state231) | (1'b1 == ap_CS_fsm_state230) | (1'b1 == ap_CS_fsm_state229) | (1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state227) | (1'b1 == ap_CS_fsm_state226) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state619) | (1'b1 == ap_CS_fsm_state616) | (1'b1 == ap_CS_fsm_state507) | (1'b1 == ap_CS_fsm_state451) | (1'b1 == ap_CS_fsm_state395) | (1'b1 == ap_CS_fsm_state340) | (1'b1 == ap_CS_fsm_state338) | (1'b1 == ap_CS_fsm_state337) | (1'b1 == ap_CS_fsm_state304) | (1'b1 == ap_CS_fsm_state303) | (1'b1 == ap_CS_fsm_state302) | (1'b1 == ap_CS_fsm_state297) | (1'b1 == ap_CS_fsm_state225) | (1'b1 == ap_CS_fsm_state224) | (1'b1 == ap_CS_fsm_state223) | (1'b1 == ap_CS_fsm_state222) | (1'b1 == ap_CS_fsm_state221) | (1'b1 == ap_CS_fsm_state220) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_pp10_stage0) | (1'b1 == ap_CS_fsm_state215) | (1'b1 == ap_CS_fsm_pp8_stage0) | (1'b1 == ap_CS_fsm_pp7_stage0) | (1'b1 == ap_CS_fsm_pp6_stage0) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_pp5_stage0) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_pp4_stage0) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_pp3_stage0) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_pp2_stage0) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_pp1_stage0) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((grp_get_acceptanceCorners_fu_1445_ap_done == 1'b0) & (1'b1 == ap_CS_fsm_state622)) | ((1'b1 == ap_block_pp9_stage0_11001_ignoreCallOp1109) & (1'b1 == ap_CS_fsm_pp9_stage0)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ce = 1'b0;
    end else begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state508) | (1'b1 == ap_CS_fsm_state452) | (1'b1 == ap_CS_fsm_state341) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state562) | ((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0)) | ((1'd1 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396)) | ((1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd1)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_i = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_i = 3'd5;
    end else begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_i = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_j = add_ln1089_reg_3785;
    end else if (((1'b1 == ap_CS_fsm_state508) | (1'b1 == ap_CS_fsm_state452) | (1'b1 == ap_CS_fsm_state341) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state562) | ((1'd1 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396)) | ((1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd1)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_j = 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_j = 3'd1;
    end else begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_j = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_k = 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_k = add_ln1001_reg_3600;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state508) | (1'b1 == ap_CS_fsm_state452) | (1'b1 == ap_CS_fsm_state341) | (1'b1 == ap_CS_fsm_state562) | ((1'd1 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396)) | ((1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd1)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_k = 3'd0;
    end else begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_k = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd1))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = complementary_topR_jR_V_6_reg_4271;
    end else if ((1'b1 == ap_CS_fsm_state562)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = 32'd23068776;
    end else if ((1'b1 == ap_CS_fsm_state508)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = complementary_topL_jR_V_reg_4099;
    end else if ((1'b1 == ap_CS_fsm_state452)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = complementary_topR_jR_V_reg_4083;
    end else if (((1'd1 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = original_topL_jL_V_reg_4039;
    end else if ((1'b1 == ap_CS_fsm_state341)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = original_topR_jL_V_reg_4053;
    end else if (((1'b1 == ap_CS_fsm_state83) | ((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = shifted_Align_V_5_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = c_corner_1_q0;
    end else begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_i = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state452) | (1'b1 == ap_CS_fsm_state341) | (1'b1 == ap_CS_fsm_state562) | ((1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd1)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j = 32'd52428800;
    end else if (((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln1087_reg_3781 == 1'd0) & (1'b0 == ap_block_pp9_stage0))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j = new_z_i_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state508) | (1'b1 == ap_CS_fsm_state83) | ((1'd1 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396)))) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j = z_top_min_V_11_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j = c_corner_0_q0;
    end else begin
        grp_straightLineProjectorFromLayerIJtoK_fu_1404_z_j = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0))) begin
        new_z_i_V_address0 = trunc_ln1089_cast_fu_2197_p1;
    end else if (((ap_enable_reg_pp8_iter3 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        new_z_i_V_address0 = i_13_cast14_reg_3756_pp8_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        new_z_i_V_address0 = 64'd0;
    end else begin
        new_z_i_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) | ((ap_enable_reg_pp8_iter3 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp9_stage0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001)))) begin
        new_z_i_V_ce0 = 1'b1;
    end else begin
        new_z_i_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter3 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        new_z_i_V_d0 = z_bits_fu_2180_p1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        new_z_i_V_d0 = 32'd2146435072;
    end else begin
        new_z_i_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) | ((ap_enable_reg_pp8_iter3 == 1'b1) & (icmp_ln1076_reg_3752_pp8_iter2_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001)))) begin
        new_z_i_V_we0 = 1'b1;
    end else begin
        new_z_i_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state224)) begin
        new_z_i_atTop_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state219)) begin
        new_z_i_atTop_V_address0 = zext_ln1130_fu_2351_p1;
    end else if (((1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1) & (1'b0 == ap_block_pp10_stage0))) begin
        new_z_i_atTop_V_address0 = i_15_cast_fu_2228_p1;
    end else if (((ap_enable_reg_pp9_iter54 == 1'b1) & (1'b0 == ap_block_pp9_stage0))) begin
        new_z_i_atTop_V_address0 = zext_ln1088_fu_2208_p1;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        new_z_i_atTop_V_address0 = 64'd0;
    end else begin
        new_z_i_atTop_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state224) | (1'b1 == ap_CS_fsm_state219) | ((ap_enable_reg_pp9_iter54 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1) & (1'b0 == ap_block_pp10_stage0_11001)))) begin
        new_z_i_atTop_V_ce0 = 1'b1;
    end else begin
        new_z_i_atTop_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter54 == 1'b1) & (1'b0 == ap_block_pp9_stage0))) begin
        new_z_i_atTop_V_d0 = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        new_z_i_atTop_V_d0 = 32'd2146435072;
    end else begin
        new_z_i_atTop_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | ((ap_enable_reg_pp9_iter54 == 1'b1) & (icmp_ln1087_reg_3781_pp9_iter53_reg == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001)))) begin
        new_z_i_atTop_V_we0 = 1'b1;
    end else begin
        new_z_i_atTop_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0))) begin
        new_z_i_index_V_address0 = i_12_cast_fu_2038_p1;
    end else if (((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        new_z_i_index_V_address0 = new_z_i_index_V_addr_3_reg_3716_pp6_iter1_reg;
    end else if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        new_z_i_index_V_address0 = i_9_cast_reg_3691;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        new_z_i_index_V_address0 = i_10_cast_reg_3662;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        new_z_i_index_V_address0 = i_8_cast_reg_3633;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        new_z_i_index_V_address0 = 64'd0;
    end else begin
        new_z_i_index_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        new_z_i_index_V_address1 = i_13_cast14_fu_2078_p1;
    end else if (((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        new_z_i_index_V_address1 = new_z_i_index_V_addr_4_reg_3741;
    end else if (((1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        new_z_i_index_V_address1 = new_z_i_index_V_addr_3_reg_3716;
    end else begin
        new_z_i_index_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)) | ((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001)))) begin
        new_z_i_index_V_ce0 = 1'b1;
    end else begin
        new_z_i_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        new_z_i_index_V_ce1 = 1'b1;
    end else begin
        new_z_i_index_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        new_z_i_index_V_d0 = select_ln1058_fu_2017_p3;
    end else if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        new_z_i_index_V_d0 = add_ln703_1_fu_1975_p2;
    end else if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        new_z_i_index_V_d0 = grp_fu_1527_p2;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        new_z_i_index_V_d0 = 32'd2146435072;
    end else begin
        new_z_i_index_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp6_iter2 == 1'b1) & (icmp_ln1054_reg_3712_pp6_iter1_reg == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001)) | ((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln1031_reg_3687 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln1038_reg_3658 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln1016_reg_3629 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state80)))) begin
        new_z_i_index_V_we0 = 1'b1;
    end else begin
        new_z_i_index_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln1068_reg_3737 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        new_z_i_index_V_we1 = 1'b1;
    end else begin
        new_z_i_index_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        num_points_address0 = i_11_cast_fu_1994_p1;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        num_points_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state81))) begin
        num_points_address0 = grp_get_index_from_z_fu_1486_num_points_address0;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        num_points_address0 = grp_makePatch_alignedToLine_fu_1322_num_points_address0;
    end else begin
        num_points_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) | ((1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        num_points_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state81))) begin
        num_points_ce0 = grp_get_index_from_z_fu_1486_num_points_ce0;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        num_points_ce0 = grp_makePatch_alignedToLine_fu_1322_num_points_ce0;
    end else begin
        num_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        num_points_ce1 = grp_makePatch_alignedToLine_fu_1322_num_points_ce1;
    end else begin
        num_points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        pSlope_ce0 = grp_getParallelograms_fu_1361_pSlope_V_ce0;
    end else begin
        pSlope_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        pSlope_we0 = grp_getParallelograms_fu_1361_pSlope_V_we0;
    end else begin
        pSlope_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        patch_buffer_address0 = zext_ln52_44_fu_1785_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        patch_buffer_address0 = zext_ln52_42_fu_1731_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patch_buffer_address0 = zext_ln52_40_fu_1683_p1;
    end else if (((1'b1 == ap_CS_fsm_state340) | (1'b1 == ap_CS_fsm_state338))) begin
        patch_buffer_address0 = grp_getShadows_fu_1393_patch_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        patch_buffer_address0 = grp_getParallelograms_fu_1361_superpoints_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_address0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_address0;
    end else begin
        patch_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state340) | (1'b1 == ap_CS_fsm_state338))) begin
        patch_buffer_address1 = grp_getShadows_fu_1393_patch_address1;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        patch_buffer_address1 = grp_getParallelograms_fu_1361_superpoints_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_address1 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_address1;
    end else begin
        patch_buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        patch_buffer_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state340) | (1'b1 == ap_CS_fsm_state338))) begin
        patch_buffer_ce0 = grp_getShadows_fu_1393_patch_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        patch_buffer_ce0 = grp_getParallelograms_fu_1361_superpoints_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_ce0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_ce0;
    end else begin
        patch_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state340) | (1'b1 == ap_CS_fsm_state338))) begin
        patch_buffer_ce1 = grp_getShadows_fu_1393_patch_ce1;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        patch_buffer_ce1 = grp_getParallelograms_fu_1361_superpoints_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_ce1 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_ce1;
    end else begin
        patch_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state260)) begin
        patch_buffer_is_empty_address0 = zext_ln64_fu_2659_p1;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_is_empty_address0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_address0;
    end else begin
        patch_buffer_is_empty_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state260)) begin
        patch_buffer_is_empty_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_is_empty_ce0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_ce0;
    end else begin
        patch_buffer_is_empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state260)) begin
        patch_buffer_is_empty_d0 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_is_empty_d0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_d0;
    end else begin
        patch_buffer_is_empty_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state260)) begin
        patch_buffer_is_empty_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_is_empty_we0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_is_empty_we0;
    end else begin
        patch_buffer_is_empty_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_we0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_we0;
    end else begin
        patch_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_buffer_we1 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_we1;
    end else begin
        patch_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        patch_stream_V_write = grp_makePatch_alignedToLine_fu_1322_patch_stream_V_write;
    end else begin
        patch_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state222)) begin
        points_address0 = zext_ln1150_fu_2554_p1;
    end else if ((1'b1 == ap_CS_fsm_state221)) begin
        points_address0 = zext_ln1143_fu_2491_p1;
    end else if ((1'b1 == ap_CS_fsm_state220)) begin
        points_address0 = zext_ln1136_fu_2428_p1;
    end else if (((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        points_address0 = zext_ln1077_fu_2175_p1;
    end else if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state81))) begin
        points_address0 = grp_get_index_from_z_fu_1486_points_address0;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        points_address0 = grp_makePatch_alignedToLine_fu_1322_points_address0;
    end else begin
        points_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state222) | (1'b1 == ap_CS_fsm_state221) | (1'b1 == ap_CS_fsm_state220) | ((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)))) begin
        points_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state81))) begin
        points_ce0 = grp_get_index_from_z_fu_1486_points_ce0;
    end else if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        points_ce0 = grp_makePatch_alignedToLine_fu_1322_points_ce0;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state618) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state297))) begin
        points_ce1 = grp_makePatch_alignedToLine_fu_1322_points_ce1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomL_jL_address0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomL_jL_address0 = grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_address0;
    end else begin
        shadow_bottomL_jL_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomL_jL_ce0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomL_jL_ce0 = grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_ce0;
    end else begin
        shadow_bottomL_jL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomL_jL_ce1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_ce1;
    end else begin
        shadow_bottomL_jL_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomL_jL_we0 = grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_we0;
    end else begin
        shadow_bottomL_jL_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomL_jR_address0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomL_jR_address0 = grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_address0;
    end else begin
        shadow_bottomL_jR_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomL_jR_ce0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomL_jR_ce0 = grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_ce0;
    end else begin
        shadow_bottomL_jR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomL_jR_ce1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_ce1;
    end else begin
        shadow_bottomL_jR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomL_jR_we0 = grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_we0;
    end else begin
        shadow_bottomL_jR_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomR_jL_address0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomR_jL_address0 = grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_address0;
    end else begin
        shadow_bottomR_jL_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomR_jL_ce0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomR_jL_ce0 = grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_ce0;
    end else begin
        shadow_bottomR_jL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomR_jL_ce1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_ce1;
    end else begin
        shadow_bottomR_jL_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomR_jL_we0 = grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_we0;
    end else begin
        shadow_bottomR_jL_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomR_jR_address0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomR_jR_address0 = grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_address0;
    end else begin
        shadow_bottomR_jR_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomR_jR_ce0 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomR_jR_ce0 = grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_ce0;
    end else begin
        shadow_bottomR_jR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        shadow_bottomR_jR_ce1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_ce1;
    end else begin
        shadow_bottomR_jR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        shadow_bottomR_jR_we0 = grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_we0;
    end else begin
        shadow_bottomR_jR_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        shadow_fromTopToInnermost_topL_jL_address0 = zext_ln1524_fu_3172_p1;
    end else if ((1'b1 == ap_CS_fsm_state614)) begin
        shadow_fromTopToInnermost_topL_jL_address0 = shadow_fromTopToInnermost_topL_jL_addr_reg_4014;
    end else if ((1'b1 == ap_CS_fsm_state340)) begin
        shadow_fromTopToInnermost_topL_jL_address0 = zext_ln1304_fu_2817_p1;
    end else if ((1'b1 == ap_CS_fsm_state338)) begin
        shadow_fromTopToInnermost_topL_jL_address0 = zext_ln1288_fu_2804_p1;
    end else begin
        shadow_fromTopToInnermost_topL_jL_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state614) | ((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state618)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topL_jL_ce0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topL_jL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topL_jL_we0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topL_jL_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        shadow_fromTopToInnermost_topL_jR_address0 = zext_ln1524_fu_3172_p1;
    end else if ((1'b1 == ap_CS_fsm_state506)) begin
        shadow_fromTopToInnermost_topL_jR_address0 = shadow_fromTopToInnermost_topL_jR_addr_reg_4019;
    end else if ((1'b1 == ap_CS_fsm_state340)) begin
        shadow_fromTopToInnermost_topL_jR_address0 = zext_ln1304_fu_2817_p1;
    end else if ((1'b1 == ap_CS_fsm_state338)) begin
        shadow_fromTopToInnermost_topL_jR_address0 = zext_ln1288_fu_2804_p1;
    end else begin
        shadow_fromTopToInnermost_topL_jR_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state506) | ((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state618)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topL_jR_ce0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topL_jR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topL_jR_we0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topL_jR_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        shadow_fromTopToInnermost_topR_jL_address0 = zext_ln1524_fu_3172_p1;
    end else if ((1'b1 == ap_CS_fsm_state614)) begin
        shadow_fromTopToInnermost_topR_jL_address0 = shadow_fromTopToInnermost_topR_jL_addr_reg_4024;
    end else if ((1'b1 == ap_CS_fsm_state340)) begin
        shadow_fromTopToInnermost_topR_jL_address0 = zext_ln1304_fu_2817_p1;
    end else if ((1'b1 == ap_CS_fsm_state338)) begin
        shadow_fromTopToInnermost_topR_jL_address0 = zext_ln1288_fu_2804_p1;
    end else begin
        shadow_fromTopToInnermost_topR_jL_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state614) | ((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state618)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topR_jL_ce0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topR_jL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topR_jL_we0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topR_jL_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state618)) begin
        shadow_fromTopToInnermost_topR_jR_address0 = zext_ln1524_fu_3172_p1;
    end else if ((1'b1 == ap_CS_fsm_state450)) begin
        shadow_fromTopToInnermost_topR_jR_address0 = shadow_fromTopToInnermost_topR_jR_addr_reg_4029;
    end else if ((1'b1 == ap_CS_fsm_state340)) begin
        shadow_fromTopToInnermost_topR_jR_address0 = zext_ln1304_fu_2817_p1;
    end else if ((1'b1 == ap_CS_fsm_state338)) begin
        shadow_fromTopToInnermost_topR_jR_address0 = zext_ln1288_fu_2804_p1;
    end else begin
        shadow_fromTopToInnermost_topR_jR_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state450) | ((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state618)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topR_jR_ce0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topR_jR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340)) | ((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338)))) begin
        shadow_fromTopToInnermost_topR_jR_we0 = 1'b1;
    end else begin
        shadow_fromTopToInnermost_topR_jR_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        squareAcceptance_address0 = zext_ln697_reg_3365;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        squareAcceptance_address0 = grp_get_acceptanceCorners_fu_1445_squareAcceptance_address0;
    end else begin
        squareAcceptance_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        squareAcceptance_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        squareAcceptance_ce0 = grp_get_acceptanceCorners_fu_1445_squareAcceptance_ce0;
    end else begin
        squareAcceptance_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        squareAcceptance_we0 = grp_get_acceptanceCorners_fu_1445_squareAcceptance_we0;
    end else begin
        squareAcceptance_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        triangleAcceptance_address0 = zext_ln697_reg_3365;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        triangleAcceptance_address0 = grp_get_acceptanceCorners_fu_1445_triangleAcceptance_address0;
    end else begin
        triangleAcceptance_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        triangleAcceptance_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        triangleAcceptance_ce0 = grp_get_acceptanceCorners_fu_1445_triangleAcceptance_ce0;
    end else begin
        triangleAcceptance_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        triangleAcceptance_we0 = grp_get_acceptanceCorners_fu_1445_triangleAcceptance_we0;
    end else begin
        triangleAcceptance_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        z1_max_address0 = grp_get_acceptanceCorners_fu_1445_z1_max_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        z1_max_address0 = grp_getParallelograms_fu_1361_z1_max_V_address0;
    end else begin
        z1_max_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        z1_max_ce0 = grp_get_acceptanceCorners_fu_1445_z1_max_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        z1_max_ce0 = grp_getParallelograms_fu_1361_z1_max_V_ce0;
    end else begin
        z1_max_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        z1_max_we0 = grp_getParallelograms_fu_1361_z1_max_V_we0;
    end else begin
        z1_max_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        z1_min_address0 = grp_get_acceptanceCorners_fu_1445_z1_min_address0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        z1_min_address0 = grp_getParallelograms_fu_1361_z1_min_V_address0;
    end else begin
        z1_min_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state301) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state622))) begin
        z1_min_ce0 = grp_get_acceptanceCorners_fu_1445_z1_min_ce0;
    end else if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        z1_min_ce0 = grp_getParallelograms_fu_1361_z1_min_V_ce0;
    end else begin
        z1_min_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state620) | (1'b1 == ap_CS_fsm_state299) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4))) begin
        z1_min_we0 = grp_getParallelograms_fu_1361_z1_min_V_we0;
    end else begin
        z1_min_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_getParallelograms_fu_1361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_get_acceptanceCorners_fu_1445_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((1'd1 == and_ln814_fu_1656_p2) & (1'b1 == ap_CS_fsm_state61) & (notChoppedPatch_fu_1645_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state616;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln51_fu_1668_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln51_fu_1668_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((triangleAcceptance_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln51_1_fu_1716_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln51_1_fu_1716_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1494_11_fu_1758_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln51_2_fu_1770_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln51_2_fu_1770_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((grp_getParallelograms_fu_1361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((grp_get_acceptanceCorners_fu_1445_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state305;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((grp_get_index_from_z_fu_1486_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (icmp_ln1498_fu_1886_p2 == 1'd1) & (icmp_ln999_fu_1880_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b1 == ap_CS_fsm_state82) & (icmp_ln1498_fu_1886_p2 == 1'd0) & (icmp_ln999_fu_1880_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            if (((grp_get_index_from_z_fu_1486_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state137))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((icmp_ln1016_fu_1905_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((icmp_ln1016_fu_1905_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            if (((1'b1 == ap_CS_fsm_state141) & (tmp_41_fu_1921_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((icmp_ln1038_fu_1935_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((icmp_ln1038_fu_1935_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((icmp_ln1031_fu_1964_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((icmp_ln1031_fu_1964_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln1054_fu_1988_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter2 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter2 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln1054_fu_1988_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if (~((icmp_ln1068_fu_2032_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((icmp_ln1068_fu_2032_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_pp8_stage0;
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter1 == 1'b0) & (icmp_ln1076_fu_2072_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter3 == 1'b1) & (ap_enable_reg_pp8_iter2 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter3 == 1'b1) & (ap_enable_reg_pp8_iter2 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (icmp_ln1076_fu_2072_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_pp9_stage0;
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln1087_fu_2185_p2 == 1'd1) & (1'b0 == ap_block_pp9_stage0_subdone)) & ~((ap_enable_reg_pp9_iter54 == 1'b1) & (ap_enable_reg_pp9_iter53 == 1'b0) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((ap_enable_reg_pp9_iter54 == 1'b1) & (ap_enable_reg_pp9_iter53 == 1'b0) & (1'b0 == ap_block_pp9_stage0_subdone)) | ((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln1087_fu_2185_p2 == 1'd1) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state215;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_pp10_stage0;
        end
        ap_ST_fsm_pp10_stage0 : begin
            if (~((ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end else if (((ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state219;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            if (((1'b1 == ap_CS_fsm_state225) & (icmp_ln886_reg_3880 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state296;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state226;
            end
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            if (((icmp_ln67_fu_2664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state260))) begin
                ap_NS_fsm = ap_ST_fsm_state296;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state261;
            end
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state276;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            ap_NS_fsm = ap_ST_fsm_state279;
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            ap_NS_fsm = ap_ST_fsm_state292;
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            ap_NS_fsm = ap_ST_fsm_state294;
        end
        ap_ST_fsm_state294 : begin
            ap_NS_fsm = ap_ST_fsm_state295;
        end
        ap_ST_fsm_state295 : begin
            ap_NS_fsm = ap_ST_fsm_state296;
        end
        ap_ST_fsm_state296 : begin
            ap_NS_fsm = ap_ST_fsm_state297;
        end
        ap_ST_fsm_state297 : begin
            if (((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state297))) begin
                ap_NS_fsm = ap_ST_fsm_state298;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state297;
            end
        end
        ap_ST_fsm_state298 : begin
            ap_NS_fsm = ap_ST_fsm_state299;
        end
        ap_ST_fsm_state299 : begin
            if (((grp_getParallelograms_fu_1361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state299))) begin
                ap_NS_fsm = ap_ST_fsm_state300;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state299;
            end
        end
        ap_ST_fsm_state300 : begin
            ap_NS_fsm = ap_ST_fsm_state301;
        end
        ap_ST_fsm_state301 : begin
            if (((grp_get_acceptanceCorners_fu_1445_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state301))) begin
                ap_NS_fsm = ap_ST_fsm_state302;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state301;
            end
        end
        ap_ST_fsm_state302 : begin
            ap_NS_fsm = ap_ST_fsm_state303;
        end
        ap_ST_fsm_state303 : begin
            ap_NS_fsm = ap_ST_fsm_state304;
        end
        ap_ST_fsm_state304 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state305 : begin
            ap_NS_fsm = ap_ST_fsm_state306;
        end
        ap_ST_fsm_state306 : begin
            ap_NS_fsm = ap_ST_fsm_state307;
        end
        ap_ST_fsm_state307 : begin
            ap_NS_fsm = ap_ST_fsm_state308;
        end
        ap_ST_fsm_state308 : begin
            ap_NS_fsm = ap_ST_fsm_state309;
        end
        ap_ST_fsm_state309 : begin
            ap_NS_fsm = ap_ST_fsm_state310;
        end
        ap_ST_fsm_state310 : begin
            ap_NS_fsm = ap_ST_fsm_state311;
        end
        ap_ST_fsm_state311 : begin
            ap_NS_fsm = ap_ST_fsm_state312;
        end
        ap_ST_fsm_state312 : begin
            ap_NS_fsm = ap_ST_fsm_state313;
        end
        ap_ST_fsm_state313 : begin
            ap_NS_fsm = ap_ST_fsm_state314;
        end
        ap_ST_fsm_state314 : begin
            ap_NS_fsm = ap_ST_fsm_state315;
        end
        ap_ST_fsm_state315 : begin
            ap_NS_fsm = ap_ST_fsm_state316;
        end
        ap_ST_fsm_state316 : begin
            ap_NS_fsm = ap_ST_fsm_state317;
        end
        ap_ST_fsm_state317 : begin
            ap_NS_fsm = ap_ST_fsm_state318;
        end
        ap_ST_fsm_state318 : begin
            ap_NS_fsm = ap_ST_fsm_state319;
        end
        ap_ST_fsm_state319 : begin
            ap_NS_fsm = ap_ST_fsm_state320;
        end
        ap_ST_fsm_state320 : begin
            ap_NS_fsm = ap_ST_fsm_state321;
        end
        ap_ST_fsm_state321 : begin
            ap_NS_fsm = ap_ST_fsm_state322;
        end
        ap_ST_fsm_state322 : begin
            ap_NS_fsm = ap_ST_fsm_state323;
        end
        ap_ST_fsm_state323 : begin
            ap_NS_fsm = ap_ST_fsm_state324;
        end
        ap_ST_fsm_state324 : begin
            ap_NS_fsm = ap_ST_fsm_state325;
        end
        ap_ST_fsm_state325 : begin
            ap_NS_fsm = ap_ST_fsm_state326;
        end
        ap_ST_fsm_state326 : begin
            ap_NS_fsm = ap_ST_fsm_state327;
        end
        ap_ST_fsm_state327 : begin
            ap_NS_fsm = ap_ST_fsm_state328;
        end
        ap_ST_fsm_state328 : begin
            ap_NS_fsm = ap_ST_fsm_state329;
        end
        ap_ST_fsm_state329 : begin
            ap_NS_fsm = ap_ST_fsm_state330;
        end
        ap_ST_fsm_state330 : begin
            ap_NS_fsm = ap_ST_fsm_state331;
        end
        ap_ST_fsm_state331 : begin
            ap_NS_fsm = ap_ST_fsm_state332;
        end
        ap_ST_fsm_state332 : begin
            ap_NS_fsm = ap_ST_fsm_state333;
        end
        ap_ST_fsm_state333 : begin
            ap_NS_fsm = ap_ST_fsm_state334;
        end
        ap_ST_fsm_state334 : begin
            ap_NS_fsm = ap_ST_fsm_state335;
        end
        ap_ST_fsm_state335 : begin
            ap_NS_fsm = ap_ST_fsm_state336;
        end
        ap_ST_fsm_state336 : begin
            ap_NS_fsm = ap_ST_fsm_state337;
        end
        ap_ST_fsm_state337 : begin
            ap_NS_fsm = ap_ST_fsm_state338;
        end
        ap_ST_fsm_state338 : begin
            if (((grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state338))) begin
                ap_NS_fsm = ap_ST_fsm_state339;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state338;
            end
        end
        ap_ST_fsm_state339 : begin
            ap_NS_fsm = ap_ST_fsm_state340;
        end
        ap_ST_fsm_state340 : begin
            if (((1'd0 == and_ln1362_fu_2843_p2) & (grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340))) begin
                ap_NS_fsm = ap_ST_fsm_state395;
            end else if (((1'd1 == and_ln1362_fu_2843_p2) & (grp_getShadows_fu_1393_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state340))) begin
                ap_NS_fsm = ap_ST_fsm_state341;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state340;
            end
        end
        ap_ST_fsm_state341 : begin
            ap_NS_fsm = ap_ST_fsm_state342;
        end
        ap_ST_fsm_state342 : begin
            ap_NS_fsm = ap_ST_fsm_state343;
        end
        ap_ST_fsm_state343 : begin
            ap_NS_fsm = ap_ST_fsm_state344;
        end
        ap_ST_fsm_state344 : begin
            ap_NS_fsm = ap_ST_fsm_state345;
        end
        ap_ST_fsm_state345 : begin
            ap_NS_fsm = ap_ST_fsm_state346;
        end
        ap_ST_fsm_state346 : begin
            ap_NS_fsm = ap_ST_fsm_state347;
        end
        ap_ST_fsm_state347 : begin
            ap_NS_fsm = ap_ST_fsm_state348;
        end
        ap_ST_fsm_state348 : begin
            ap_NS_fsm = ap_ST_fsm_state349;
        end
        ap_ST_fsm_state349 : begin
            ap_NS_fsm = ap_ST_fsm_state350;
        end
        ap_ST_fsm_state350 : begin
            ap_NS_fsm = ap_ST_fsm_state351;
        end
        ap_ST_fsm_state351 : begin
            ap_NS_fsm = ap_ST_fsm_state352;
        end
        ap_ST_fsm_state352 : begin
            ap_NS_fsm = ap_ST_fsm_state353;
        end
        ap_ST_fsm_state353 : begin
            ap_NS_fsm = ap_ST_fsm_state354;
        end
        ap_ST_fsm_state354 : begin
            ap_NS_fsm = ap_ST_fsm_state355;
        end
        ap_ST_fsm_state355 : begin
            ap_NS_fsm = ap_ST_fsm_state356;
        end
        ap_ST_fsm_state356 : begin
            ap_NS_fsm = ap_ST_fsm_state357;
        end
        ap_ST_fsm_state357 : begin
            ap_NS_fsm = ap_ST_fsm_state358;
        end
        ap_ST_fsm_state358 : begin
            ap_NS_fsm = ap_ST_fsm_state359;
        end
        ap_ST_fsm_state359 : begin
            ap_NS_fsm = ap_ST_fsm_state360;
        end
        ap_ST_fsm_state360 : begin
            ap_NS_fsm = ap_ST_fsm_state361;
        end
        ap_ST_fsm_state361 : begin
            ap_NS_fsm = ap_ST_fsm_state362;
        end
        ap_ST_fsm_state362 : begin
            ap_NS_fsm = ap_ST_fsm_state363;
        end
        ap_ST_fsm_state363 : begin
            ap_NS_fsm = ap_ST_fsm_state364;
        end
        ap_ST_fsm_state364 : begin
            ap_NS_fsm = ap_ST_fsm_state365;
        end
        ap_ST_fsm_state365 : begin
            ap_NS_fsm = ap_ST_fsm_state366;
        end
        ap_ST_fsm_state366 : begin
            ap_NS_fsm = ap_ST_fsm_state367;
        end
        ap_ST_fsm_state367 : begin
            ap_NS_fsm = ap_ST_fsm_state368;
        end
        ap_ST_fsm_state368 : begin
            ap_NS_fsm = ap_ST_fsm_state369;
        end
        ap_ST_fsm_state369 : begin
            ap_NS_fsm = ap_ST_fsm_state370;
        end
        ap_ST_fsm_state370 : begin
            ap_NS_fsm = ap_ST_fsm_state371;
        end
        ap_ST_fsm_state371 : begin
            ap_NS_fsm = ap_ST_fsm_state372;
        end
        ap_ST_fsm_state372 : begin
            ap_NS_fsm = ap_ST_fsm_state373;
        end
        ap_ST_fsm_state373 : begin
            ap_NS_fsm = ap_ST_fsm_state374;
        end
        ap_ST_fsm_state374 : begin
            ap_NS_fsm = ap_ST_fsm_state375;
        end
        ap_ST_fsm_state375 : begin
            ap_NS_fsm = ap_ST_fsm_state376;
        end
        ap_ST_fsm_state376 : begin
            ap_NS_fsm = ap_ST_fsm_state377;
        end
        ap_ST_fsm_state377 : begin
            ap_NS_fsm = ap_ST_fsm_state378;
        end
        ap_ST_fsm_state378 : begin
            ap_NS_fsm = ap_ST_fsm_state379;
        end
        ap_ST_fsm_state379 : begin
            ap_NS_fsm = ap_ST_fsm_state380;
        end
        ap_ST_fsm_state380 : begin
            ap_NS_fsm = ap_ST_fsm_state381;
        end
        ap_ST_fsm_state381 : begin
            ap_NS_fsm = ap_ST_fsm_state382;
        end
        ap_ST_fsm_state382 : begin
            ap_NS_fsm = ap_ST_fsm_state383;
        end
        ap_ST_fsm_state383 : begin
            ap_NS_fsm = ap_ST_fsm_state384;
        end
        ap_ST_fsm_state384 : begin
            ap_NS_fsm = ap_ST_fsm_state385;
        end
        ap_ST_fsm_state385 : begin
            ap_NS_fsm = ap_ST_fsm_state386;
        end
        ap_ST_fsm_state386 : begin
            ap_NS_fsm = ap_ST_fsm_state387;
        end
        ap_ST_fsm_state387 : begin
            ap_NS_fsm = ap_ST_fsm_state388;
        end
        ap_ST_fsm_state388 : begin
            ap_NS_fsm = ap_ST_fsm_state389;
        end
        ap_ST_fsm_state389 : begin
            ap_NS_fsm = ap_ST_fsm_state390;
        end
        ap_ST_fsm_state390 : begin
            ap_NS_fsm = ap_ST_fsm_state391;
        end
        ap_ST_fsm_state391 : begin
            ap_NS_fsm = ap_ST_fsm_state392;
        end
        ap_ST_fsm_state392 : begin
            ap_NS_fsm = ap_ST_fsm_state393;
        end
        ap_ST_fsm_state393 : begin
            ap_NS_fsm = ap_ST_fsm_state394;
        end
        ap_ST_fsm_state394 : begin
            ap_NS_fsm = ap_ST_fsm_state395;
        end
        ap_ST_fsm_state395 : begin
            ap_NS_fsm = ap_ST_fsm_state396;
        end
        ap_ST_fsm_state396 : begin
            if (((1'd0 == and_ln1371_reg_4074) & (1'b1 == ap_CS_fsm_state396))) begin
                ap_NS_fsm = ap_ST_fsm_state450;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state397;
            end
        end
        ap_ST_fsm_state397 : begin
            ap_NS_fsm = ap_ST_fsm_state398;
        end
        ap_ST_fsm_state398 : begin
            ap_NS_fsm = ap_ST_fsm_state399;
        end
        ap_ST_fsm_state399 : begin
            ap_NS_fsm = ap_ST_fsm_state400;
        end
        ap_ST_fsm_state400 : begin
            ap_NS_fsm = ap_ST_fsm_state401;
        end
        ap_ST_fsm_state401 : begin
            ap_NS_fsm = ap_ST_fsm_state402;
        end
        ap_ST_fsm_state402 : begin
            ap_NS_fsm = ap_ST_fsm_state403;
        end
        ap_ST_fsm_state403 : begin
            ap_NS_fsm = ap_ST_fsm_state404;
        end
        ap_ST_fsm_state404 : begin
            ap_NS_fsm = ap_ST_fsm_state405;
        end
        ap_ST_fsm_state405 : begin
            ap_NS_fsm = ap_ST_fsm_state406;
        end
        ap_ST_fsm_state406 : begin
            ap_NS_fsm = ap_ST_fsm_state407;
        end
        ap_ST_fsm_state407 : begin
            ap_NS_fsm = ap_ST_fsm_state408;
        end
        ap_ST_fsm_state408 : begin
            ap_NS_fsm = ap_ST_fsm_state409;
        end
        ap_ST_fsm_state409 : begin
            ap_NS_fsm = ap_ST_fsm_state410;
        end
        ap_ST_fsm_state410 : begin
            ap_NS_fsm = ap_ST_fsm_state411;
        end
        ap_ST_fsm_state411 : begin
            ap_NS_fsm = ap_ST_fsm_state412;
        end
        ap_ST_fsm_state412 : begin
            ap_NS_fsm = ap_ST_fsm_state413;
        end
        ap_ST_fsm_state413 : begin
            ap_NS_fsm = ap_ST_fsm_state414;
        end
        ap_ST_fsm_state414 : begin
            ap_NS_fsm = ap_ST_fsm_state415;
        end
        ap_ST_fsm_state415 : begin
            ap_NS_fsm = ap_ST_fsm_state416;
        end
        ap_ST_fsm_state416 : begin
            ap_NS_fsm = ap_ST_fsm_state417;
        end
        ap_ST_fsm_state417 : begin
            ap_NS_fsm = ap_ST_fsm_state418;
        end
        ap_ST_fsm_state418 : begin
            ap_NS_fsm = ap_ST_fsm_state419;
        end
        ap_ST_fsm_state419 : begin
            ap_NS_fsm = ap_ST_fsm_state420;
        end
        ap_ST_fsm_state420 : begin
            ap_NS_fsm = ap_ST_fsm_state421;
        end
        ap_ST_fsm_state421 : begin
            ap_NS_fsm = ap_ST_fsm_state422;
        end
        ap_ST_fsm_state422 : begin
            ap_NS_fsm = ap_ST_fsm_state423;
        end
        ap_ST_fsm_state423 : begin
            ap_NS_fsm = ap_ST_fsm_state424;
        end
        ap_ST_fsm_state424 : begin
            ap_NS_fsm = ap_ST_fsm_state425;
        end
        ap_ST_fsm_state425 : begin
            ap_NS_fsm = ap_ST_fsm_state426;
        end
        ap_ST_fsm_state426 : begin
            ap_NS_fsm = ap_ST_fsm_state427;
        end
        ap_ST_fsm_state427 : begin
            ap_NS_fsm = ap_ST_fsm_state428;
        end
        ap_ST_fsm_state428 : begin
            ap_NS_fsm = ap_ST_fsm_state429;
        end
        ap_ST_fsm_state429 : begin
            ap_NS_fsm = ap_ST_fsm_state430;
        end
        ap_ST_fsm_state430 : begin
            ap_NS_fsm = ap_ST_fsm_state431;
        end
        ap_ST_fsm_state431 : begin
            ap_NS_fsm = ap_ST_fsm_state432;
        end
        ap_ST_fsm_state432 : begin
            ap_NS_fsm = ap_ST_fsm_state433;
        end
        ap_ST_fsm_state433 : begin
            ap_NS_fsm = ap_ST_fsm_state434;
        end
        ap_ST_fsm_state434 : begin
            ap_NS_fsm = ap_ST_fsm_state435;
        end
        ap_ST_fsm_state435 : begin
            ap_NS_fsm = ap_ST_fsm_state436;
        end
        ap_ST_fsm_state436 : begin
            ap_NS_fsm = ap_ST_fsm_state437;
        end
        ap_ST_fsm_state437 : begin
            ap_NS_fsm = ap_ST_fsm_state438;
        end
        ap_ST_fsm_state438 : begin
            ap_NS_fsm = ap_ST_fsm_state439;
        end
        ap_ST_fsm_state439 : begin
            ap_NS_fsm = ap_ST_fsm_state440;
        end
        ap_ST_fsm_state440 : begin
            ap_NS_fsm = ap_ST_fsm_state441;
        end
        ap_ST_fsm_state441 : begin
            ap_NS_fsm = ap_ST_fsm_state442;
        end
        ap_ST_fsm_state442 : begin
            ap_NS_fsm = ap_ST_fsm_state443;
        end
        ap_ST_fsm_state443 : begin
            ap_NS_fsm = ap_ST_fsm_state444;
        end
        ap_ST_fsm_state444 : begin
            ap_NS_fsm = ap_ST_fsm_state445;
        end
        ap_ST_fsm_state445 : begin
            ap_NS_fsm = ap_ST_fsm_state446;
        end
        ap_ST_fsm_state446 : begin
            ap_NS_fsm = ap_ST_fsm_state447;
        end
        ap_ST_fsm_state447 : begin
            ap_NS_fsm = ap_ST_fsm_state448;
        end
        ap_ST_fsm_state448 : begin
            ap_NS_fsm = ap_ST_fsm_state449;
        end
        ap_ST_fsm_state449 : begin
            ap_NS_fsm = ap_ST_fsm_state450;
        end
        ap_ST_fsm_state450 : begin
            ap_NS_fsm = ap_ST_fsm_state451;
        end
        ap_ST_fsm_state451 : begin
            if (((1'd0 == and_ln1379_fu_2921_p2) & (1'b1 == ap_CS_fsm_state451))) begin
                ap_NS_fsm = ap_ST_fsm_state506;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state452;
            end
        end
        ap_ST_fsm_state452 : begin
            ap_NS_fsm = ap_ST_fsm_state453;
        end
        ap_ST_fsm_state453 : begin
            ap_NS_fsm = ap_ST_fsm_state454;
        end
        ap_ST_fsm_state454 : begin
            ap_NS_fsm = ap_ST_fsm_state455;
        end
        ap_ST_fsm_state455 : begin
            ap_NS_fsm = ap_ST_fsm_state456;
        end
        ap_ST_fsm_state456 : begin
            ap_NS_fsm = ap_ST_fsm_state457;
        end
        ap_ST_fsm_state457 : begin
            ap_NS_fsm = ap_ST_fsm_state458;
        end
        ap_ST_fsm_state458 : begin
            ap_NS_fsm = ap_ST_fsm_state459;
        end
        ap_ST_fsm_state459 : begin
            ap_NS_fsm = ap_ST_fsm_state460;
        end
        ap_ST_fsm_state460 : begin
            ap_NS_fsm = ap_ST_fsm_state461;
        end
        ap_ST_fsm_state461 : begin
            ap_NS_fsm = ap_ST_fsm_state462;
        end
        ap_ST_fsm_state462 : begin
            ap_NS_fsm = ap_ST_fsm_state463;
        end
        ap_ST_fsm_state463 : begin
            ap_NS_fsm = ap_ST_fsm_state464;
        end
        ap_ST_fsm_state464 : begin
            ap_NS_fsm = ap_ST_fsm_state465;
        end
        ap_ST_fsm_state465 : begin
            ap_NS_fsm = ap_ST_fsm_state466;
        end
        ap_ST_fsm_state466 : begin
            ap_NS_fsm = ap_ST_fsm_state467;
        end
        ap_ST_fsm_state467 : begin
            ap_NS_fsm = ap_ST_fsm_state468;
        end
        ap_ST_fsm_state468 : begin
            ap_NS_fsm = ap_ST_fsm_state469;
        end
        ap_ST_fsm_state469 : begin
            ap_NS_fsm = ap_ST_fsm_state470;
        end
        ap_ST_fsm_state470 : begin
            ap_NS_fsm = ap_ST_fsm_state471;
        end
        ap_ST_fsm_state471 : begin
            ap_NS_fsm = ap_ST_fsm_state472;
        end
        ap_ST_fsm_state472 : begin
            ap_NS_fsm = ap_ST_fsm_state473;
        end
        ap_ST_fsm_state473 : begin
            ap_NS_fsm = ap_ST_fsm_state474;
        end
        ap_ST_fsm_state474 : begin
            ap_NS_fsm = ap_ST_fsm_state475;
        end
        ap_ST_fsm_state475 : begin
            ap_NS_fsm = ap_ST_fsm_state476;
        end
        ap_ST_fsm_state476 : begin
            ap_NS_fsm = ap_ST_fsm_state477;
        end
        ap_ST_fsm_state477 : begin
            ap_NS_fsm = ap_ST_fsm_state478;
        end
        ap_ST_fsm_state478 : begin
            ap_NS_fsm = ap_ST_fsm_state479;
        end
        ap_ST_fsm_state479 : begin
            ap_NS_fsm = ap_ST_fsm_state480;
        end
        ap_ST_fsm_state480 : begin
            ap_NS_fsm = ap_ST_fsm_state481;
        end
        ap_ST_fsm_state481 : begin
            ap_NS_fsm = ap_ST_fsm_state482;
        end
        ap_ST_fsm_state482 : begin
            ap_NS_fsm = ap_ST_fsm_state483;
        end
        ap_ST_fsm_state483 : begin
            ap_NS_fsm = ap_ST_fsm_state484;
        end
        ap_ST_fsm_state484 : begin
            ap_NS_fsm = ap_ST_fsm_state485;
        end
        ap_ST_fsm_state485 : begin
            ap_NS_fsm = ap_ST_fsm_state486;
        end
        ap_ST_fsm_state486 : begin
            ap_NS_fsm = ap_ST_fsm_state487;
        end
        ap_ST_fsm_state487 : begin
            ap_NS_fsm = ap_ST_fsm_state488;
        end
        ap_ST_fsm_state488 : begin
            ap_NS_fsm = ap_ST_fsm_state489;
        end
        ap_ST_fsm_state489 : begin
            ap_NS_fsm = ap_ST_fsm_state490;
        end
        ap_ST_fsm_state490 : begin
            ap_NS_fsm = ap_ST_fsm_state491;
        end
        ap_ST_fsm_state491 : begin
            ap_NS_fsm = ap_ST_fsm_state492;
        end
        ap_ST_fsm_state492 : begin
            ap_NS_fsm = ap_ST_fsm_state493;
        end
        ap_ST_fsm_state493 : begin
            ap_NS_fsm = ap_ST_fsm_state494;
        end
        ap_ST_fsm_state494 : begin
            ap_NS_fsm = ap_ST_fsm_state495;
        end
        ap_ST_fsm_state495 : begin
            ap_NS_fsm = ap_ST_fsm_state496;
        end
        ap_ST_fsm_state496 : begin
            ap_NS_fsm = ap_ST_fsm_state497;
        end
        ap_ST_fsm_state497 : begin
            ap_NS_fsm = ap_ST_fsm_state498;
        end
        ap_ST_fsm_state498 : begin
            ap_NS_fsm = ap_ST_fsm_state499;
        end
        ap_ST_fsm_state499 : begin
            ap_NS_fsm = ap_ST_fsm_state500;
        end
        ap_ST_fsm_state500 : begin
            ap_NS_fsm = ap_ST_fsm_state501;
        end
        ap_ST_fsm_state501 : begin
            ap_NS_fsm = ap_ST_fsm_state502;
        end
        ap_ST_fsm_state502 : begin
            ap_NS_fsm = ap_ST_fsm_state503;
        end
        ap_ST_fsm_state503 : begin
            ap_NS_fsm = ap_ST_fsm_state504;
        end
        ap_ST_fsm_state504 : begin
            ap_NS_fsm = ap_ST_fsm_state505;
        end
        ap_ST_fsm_state505 : begin
            ap_NS_fsm = ap_ST_fsm_state506;
        end
        ap_ST_fsm_state506 : begin
            ap_NS_fsm = ap_ST_fsm_state507;
        end
        ap_ST_fsm_state507 : begin
            if (((1'd0 == and_ln1388_fu_2961_p2) & (1'b1 == ap_CS_fsm_state507))) begin
                ap_NS_fsm = ap_ST_fsm_state562;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state508;
            end
        end
        ap_ST_fsm_state508 : begin
            ap_NS_fsm = ap_ST_fsm_state509;
        end
        ap_ST_fsm_state509 : begin
            ap_NS_fsm = ap_ST_fsm_state510;
        end
        ap_ST_fsm_state510 : begin
            ap_NS_fsm = ap_ST_fsm_state511;
        end
        ap_ST_fsm_state511 : begin
            ap_NS_fsm = ap_ST_fsm_state512;
        end
        ap_ST_fsm_state512 : begin
            ap_NS_fsm = ap_ST_fsm_state513;
        end
        ap_ST_fsm_state513 : begin
            ap_NS_fsm = ap_ST_fsm_state514;
        end
        ap_ST_fsm_state514 : begin
            ap_NS_fsm = ap_ST_fsm_state515;
        end
        ap_ST_fsm_state515 : begin
            ap_NS_fsm = ap_ST_fsm_state516;
        end
        ap_ST_fsm_state516 : begin
            ap_NS_fsm = ap_ST_fsm_state517;
        end
        ap_ST_fsm_state517 : begin
            ap_NS_fsm = ap_ST_fsm_state518;
        end
        ap_ST_fsm_state518 : begin
            ap_NS_fsm = ap_ST_fsm_state519;
        end
        ap_ST_fsm_state519 : begin
            ap_NS_fsm = ap_ST_fsm_state520;
        end
        ap_ST_fsm_state520 : begin
            ap_NS_fsm = ap_ST_fsm_state521;
        end
        ap_ST_fsm_state521 : begin
            ap_NS_fsm = ap_ST_fsm_state522;
        end
        ap_ST_fsm_state522 : begin
            ap_NS_fsm = ap_ST_fsm_state523;
        end
        ap_ST_fsm_state523 : begin
            ap_NS_fsm = ap_ST_fsm_state524;
        end
        ap_ST_fsm_state524 : begin
            ap_NS_fsm = ap_ST_fsm_state525;
        end
        ap_ST_fsm_state525 : begin
            ap_NS_fsm = ap_ST_fsm_state526;
        end
        ap_ST_fsm_state526 : begin
            ap_NS_fsm = ap_ST_fsm_state527;
        end
        ap_ST_fsm_state527 : begin
            ap_NS_fsm = ap_ST_fsm_state528;
        end
        ap_ST_fsm_state528 : begin
            ap_NS_fsm = ap_ST_fsm_state529;
        end
        ap_ST_fsm_state529 : begin
            ap_NS_fsm = ap_ST_fsm_state530;
        end
        ap_ST_fsm_state530 : begin
            ap_NS_fsm = ap_ST_fsm_state531;
        end
        ap_ST_fsm_state531 : begin
            ap_NS_fsm = ap_ST_fsm_state532;
        end
        ap_ST_fsm_state532 : begin
            ap_NS_fsm = ap_ST_fsm_state533;
        end
        ap_ST_fsm_state533 : begin
            ap_NS_fsm = ap_ST_fsm_state534;
        end
        ap_ST_fsm_state534 : begin
            ap_NS_fsm = ap_ST_fsm_state535;
        end
        ap_ST_fsm_state535 : begin
            ap_NS_fsm = ap_ST_fsm_state536;
        end
        ap_ST_fsm_state536 : begin
            ap_NS_fsm = ap_ST_fsm_state537;
        end
        ap_ST_fsm_state537 : begin
            ap_NS_fsm = ap_ST_fsm_state538;
        end
        ap_ST_fsm_state538 : begin
            ap_NS_fsm = ap_ST_fsm_state539;
        end
        ap_ST_fsm_state539 : begin
            ap_NS_fsm = ap_ST_fsm_state540;
        end
        ap_ST_fsm_state540 : begin
            ap_NS_fsm = ap_ST_fsm_state541;
        end
        ap_ST_fsm_state541 : begin
            ap_NS_fsm = ap_ST_fsm_state542;
        end
        ap_ST_fsm_state542 : begin
            ap_NS_fsm = ap_ST_fsm_state543;
        end
        ap_ST_fsm_state543 : begin
            ap_NS_fsm = ap_ST_fsm_state544;
        end
        ap_ST_fsm_state544 : begin
            ap_NS_fsm = ap_ST_fsm_state545;
        end
        ap_ST_fsm_state545 : begin
            ap_NS_fsm = ap_ST_fsm_state546;
        end
        ap_ST_fsm_state546 : begin
            ap_NS_fsm = ap_ST_fsm_state547;
        end
        ap_ST_fsm_state547 : begin
            ap_NS_fsm = ap_ST_fsm_state548;
        end
        ap_ST_fsm_state548 : begin
            ap_NS_fsm = ap_ST_fsm_state549;
        end
        ap_ST_fsm_state549 : begin
            ap_NS_fsm = ap_ST_fsm_state550;
        end
        ap_ST_fsm_state550 : begin
            ap_NS_fsm = ap_ST_fsm_state551;
        end
        ap_ST_fsm_state551 : begin
            ap_NS_fsm = ap_ST_fsm_state552;
        end
        ap_ST_fsm_state552 : begin
            ap_NS_fsm = ap_ST_fsm_state553;
        end
        ap_ST_fsm_state553 : begin
            ap_NS_fsm = ap_ST_fsm_state554;
        end
        ap_ST_fsm_state554 : begin
            ap_NS_fsm = ap_ST_fsm_state555;
        end
        ap_ST_fsm_state555 : begin
            ap_NS_fsm = ap_ST_fsm_state556;
        end
        ap_ST_fsm_state556 : begin
            ap_NS_fsm = ap_ST_fsm_state557;
        end
        ap_ST_fsm_state557 : begin
            ap_NS_fsm = ap_ST_fsm_state558;
        end
        ap_ST_fsm_state558 : begin
            ap_NS_fsm = ap_ST_fsm_state559;
        end
        ap_ST_fsm_state559 : begin
            ap_NS_fsm = ap_ST_fsm_state560;
        end
        ap_ST_fsm_state560 : begin
            ap_NS_fsm = ap_ST_fsm_state561;
        end
        ap_ST_fsm_state561 : begin
            ap_NS_fsm = ap_ST_fsm_state562;
        end
        ap_ST_fsm_state562 : begin
            ap_NS_fsm = ap_ST_fsm_state563;
        end
        ap_ST_fsm_state563 : begin
            ap_NS_fsm = ap_ST_fsm_state564;
        end
        ap_ST_fsm_state564 : begin
            ap_NS_fsm = ap_ST_fsm_state565;
        end
        ap_ST_fsm_state565 : begin
            ap_NS_fsm = ap_ST_fsm_state566;
        end
        ap_ST_fsm_state566 : begin
            ap_NS_fsm = ap_ST_fsm_state567;
        end
        ap_ST_fsm_state567 : begin
            ap_NS_fsm = ap_ST_fsm_state568;
        end
        ap_ST_fsm_state568 : begin
            ap_NS_fsm = ap_ST_fsm_state569;
        end
        ap_ST_fsm_state569 : begin
            ap_NS_fsm = ap_ST_fsm_state570;
        end
        ap_ST_fsm_state570 : begin
            ap_NS_fsm = ap_ST_fsm_state571;
        end
        ap_ST_fsm_state571 : begin
            ap_NS_fsm = ap_ST_fsm_state572;
        end
        ap_ST_fsm_state572 : begin
            ap_NS_fsm = ap_ST_fsm_state573;
        end
        ap_ST_fsm_state573 : begin
            ap_NS_fsm = ap_ST_fsm_state574;
        end
        ap_ST_fsm_state574 : begin
            ap_NS_fsm = ap_ST_fsm_state575;
        end
        ap_ST_fsm_state575 : begin
            ap_NS_fsm = ap_ST_fsm_state576;
        end
        ap_ST_fsm_state576 : begin
            ap_NS_fsm = ap_ST_fsm_state577;
        end
        ap_ST_fsm_state577 : begin
            ap_NS_fsm = ap_ST_fsm_state578;
        end
        ap_ST_fsm_state578 : begin
            ap_NS_fsm = ap_ST_fsm_state579;
        end
        ap_ST_fsm_state579 : begin
            ap_NS_fsm = ap_ST_fsm_state580;
        end
        ap_ST_fsm_state580 : begin
            ap_NS_fsm = ap_ST_fsm_state581;
        end
        ap_ST_fsm_state581 : begin
            ap_NS_fsm = ap_ST_fsm_state582;
        end
        ap_ST_fsm_state582 : begin
            ap_NS_fsm = ap_ST_fsm_state583;
        end
        ap_ST_fsm_state583 : begin
            ap_NS_fsm = ap_ST_fsm_state584;
        end
        ap_ST_fsm_state584 : begin
            ap_NS_fsm = ap_ST_fsm_state585;
        end
        ap_ST_fsm_state585 : begin
            ap_NS_fsm = ap_ST_fsm_state586;
        end
        ap_ST_fsm_state586 : begin
            ap_NS_fsm = ap_ST_fsm_state587;
        end
        ap_ST_fsm_state587 : begin
            ap_NS_fsm = ap_ST_fsm_state588;
        end
        ap_ST_fsm_state588 : begin
            ap_NS_fsm = ap_ST_fsm_state589;
        end
        ap_ST_fsm_state589 : begin
            ap_NS_fsm = ap_ST_fsm_state590;
        end
        ap_ST_fsm_state590 : begin
            ap_NS_fsm = ap_ST_fsm_state591;
        end
        ap_ST_fsm_state591 : begin
            ap_NS_fsm = ap_ST_fsm_state592;
        end
        ap_ST_fsm_state592 : begin
            ap_NS_fsm = ap_ST_fsm_state593;
        end
        ap_ST_fsm_state593 : begin
            ap_NS_fsm = ap_ST_fsm_state594;
        end
        ap_ST_fsm_state594 : begin
            ap_NS_fsm = ap_ST_fsm_state595;
        end
        ap_ST_fsm_state595 : begin
            ap_NS_fsm = ap_ST_fsm_state596;
        end
        ap_ST_fsm_state596 : begin
            ap_NS_fsm = ap_ST_fsm_state597;
        end
        ap_ST_fsm_state597 : begin
            ap_NS_fsm = ap_ST_fsm_state598;
        end
        ap_ST_fsm_state598 : begin
            ap_NS_fsm = ap_ST_fsm_state599;
        end
        ap_ST_fsm_state599 : begin
            ap_NS_fsm = ap_ST_fsm_state600;
        end
        ap_ST_fsm_state600 : begin
            ap_NS_fsm = ap_ST_fsm_state601;
        end
        ap_ST_fsm_state601 : begin
            ap_NS_fsm = ap_ST_fsm_state602;
        end
        ap_ST_fsm_state602 : begin
            ap_NS_fsm = ap_ST_fsm_state603;
        end
        ap_ST_fsm_state603 : begin
            ap_NS_fsm = ap_ST_fsm_state604;
        end
        ap_ST_fsm_state604 : begin
            ap_NS_fsm = ap_ST_fsm_state605;
        end
        ap_ST_fsm_state605 : begin
            ap_NS_fsm = ap_ST_fsm_state606;
        end
        ap_ST_fsm_state606 : begin
            ap_NS_fsm = ap_ST_fsm_state607;
        end
        ap_ST_fsm_state607 : begin
            ap_NS_fsm = ap_ST_fsm_state608;
        end
        ap_ST_fsm_state608 : begin
            ap_NS_fsm = ap_ST_fsm_state609;
        end
        ap_ST_fsm_state609 : begin
            ap_NS_fsm = ap_ST_fsm_state610;
        end
        ap_ST_fsm_state610 : begin
            ap_NS_fsm = ap_ST_fsm_state611;
        end
        ap_ST_fsm_state611 : begin
            ap_NS_fsm = ap_ST_fsm_state612;
        end
        ap_ST_fsm_state612 : begin
            ap_NS_fsm = ap_ST_fsm_state613;
        end
        ap_ST_fsm_state613 : begin
            ap_NS_fsm = ap_ST_fsm_state614;
        end
        ap_ST_fsm_state614 : begin
            ap_NS_fsm = ap_ST_fsm_state615;
        end
        ap_ST_fsm_state615 : begin
            ap_NS_fsm = ap_ST_fsm_state616;
        end
        ap_ST_fsm_state616 : begin
            if (((1'b1 == ap_CS_fsm_state616) & ((notChoppedPatch_reg_3428 == 1'd1) | ((1'd0 == and_ln814_reg_3432) | (((1'd0 == and_ln1491_fu_3100_p2) & (or_ln1487_1_fu_3087_p2 == 1'd0)) | ((1'd0 == and_ln1489_1_fu_3129_p2) & (or_ln1487_1_fu_3087_p2 == 1'd1))))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state617;
            end
        end
        ap_ST_fsm_state617 : begin
            ap_NS_fsm = ap_ST_fsm_state618;
        end
        ap_ST_fsm_state618 : begin
            if (((grp_makePatch_alignedToLine_fu_1322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state618))) begin
                ap_NS_fsm = ap_ST_fsm_state619;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state618;
            end
        end
        ap_ST_fsm_state619 : begin
            ap_NS_fsm = ap_ST_fsm_state620;
        end
        ap_ST_fsm_state620 : begin
            if (((grp_getParallelograms_fu_1361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state620))) begin
                ap_NS_fsm = ap_ST_fsm_state621;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state620;
            end
        end
        ap_ST_fsm_state621 : begin
            ap_NS_fsm = ap_ST_fsm_state622;
        end
        ap_ST_fsm_state622 : begin
            if (((grp_get_acceptanceCorners_fu_1445_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state675;
            end else if (((grp_get_acceptanceCorners_fu_1445_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state622) & (shiftOriginal_reg_4164 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state623;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state622;
            end
        end
        ap_ST_fsm_state623 : begin
            ap_NS_fsm = ap_ST_fsm_state624;
        end
        ap_ST_fsm_state624 : begin
            ap_NS_fsm = ap_ST_fsm_state625;
        end
        ap_ST_fsm_state625 : begin
            ap_NS_fsm = ap_ST_fsm_state626;
        end
        ap_ST_fsm_state626 : begin
            ap_NS_fsm = ap_ST_fsm_state627;
        end
        ap_ST_fsm_state627 : begin
            ap_NS_fsm = ap_ST_fsm_state628;
        end
        ap_ST_fsm_state628 : begin
            ap_NS_fsm = ap_ST_fsm_state629;
        end
        ap_ST_fsm_state629 : begin
            ap_NS_fsm = ap_ST_fsm_state630;
        end
        ap_ST_fsm_state630 : begin
            ap_NS_fsm = ap_ST_fsm_state631;
        end
        ap_ST_fsm_state631 : begin
            ap_NS_fsm = ap_ST_fsm_state632;
        end
        ap_ST_fsm_state632 : begin
            ap_NS_fsm = ap_ST_fsm_state633;
        end
        ap_ST_fsm_state633 : begin
            ap_NS_fsm = ap_ST_fsm_state634;
        end
        ap_ST_fsm_state634 : begin
            ap_NS_fsm = ap_ST_fsm_state635;
        end
        ap_ST_fsm_state635 : begin
            ap_NS_fsm = ap_ST_fsm_state636;
        end
        ap_ST_fsm_state636 : begin
            ap_NS_fsm = ap_ST_fsm_state637;
        end
        ap_ST_fsm_state637 : begin
            ap_NS_fsm = ap_ST_fsm_state638;
        end
        ap_ST_fsm_state638 : begin
            ap_NS_fsm = ap_ST_fsm_state639;
        end
        ap_ST_fsm_state639 : begin
            ap_NS_fsm = ap_ST_fsm_state640;
        end
        ap_ST_fsm_state640 : begin
            ap_NS_fsm = ap_ST_fsm_state641;
        end
        ap_ST_fsm_state641 : begin
            ap_NS_fsm = ap_ST_fsm_state642;
        end
        ap_ST_fsm_state642 : begin
            ap_NS_fsm = ap_ST_fsm_state643;
        end
        ap_ST_fsm_state643 : begin
            ap_NS_fsm = ap_ST_fsm_state644;
        end
        ap_ST_fsm_state644 : begin
            ap_NS_fsm = ap_ST_fsm_state645;
        end
        ap_ST_fsm_state645 : begin
            ap_NS_fsm = ap_ST_fsm_state646;
        end
        ap_ST_fsm_state646 : begin
            ap_NS_fsm = ap_ST_fsm_state647;
        end
        ap_ST_fsm_state647 : begin
            ap_NS_fsm = ap_ST_fsm_state648;
        end
        ap_ST_fsm_state648 : begin
            ap_NS_fsm = ap_ST_fsm_state649;
        end
        ap_ST_fsm_state649 : begin
            ap_NS_fsm = ap_ST_fsm_state650;
        end
        ap_ST_fsm_state650 : begin
            ap_NS_fsm = ap_ST_fsm_state651;
        end
        ap_ST_fsm_state651 : begin
            ap_NS_fsm = ap_ST_fsm_state652;
        end
        ap_ST_fsm_state652 : begin
            ap_NS_fsm = ap_ST_fsm_state653;
        end
        ap_ST_fsm_state653 : begin
            ap_NS_fsm = ap_ST_fsm_state654;
        end
        ap_ST_fsm_state654 : begin
            ap_NS_fsm = ap_ST_fsm_state655;
        end
        ap_ST_fsm_state655 : begin
            ap_NS_fsm = ap_ST_fsm_state656;
        end
        ap_ST_fsm_state656 : begin
            ap_NS_fsm = ap_ST_fsm_state657;
        end
        ap_ST_fsm_state657 : begin
            ap_NS_fsm = ap_ST_fsm_state658;
        end
        ap_ST_fsm_state658 : begin
            ap_NS_fsm = ap_ST_fsm_state659;
        end
        ap_ST_fsm_state659 : begin
            ap_NS_fsm = ap_ST_fsm_state660;
        end
        ap_ST_fsm_state660 : begin
            ap_NS_fsm = ap_ST_fsm_state661;
        end
        ap_ST_fsm_state661 : begin
            ap_NS_fsm = ap_ST_fsm_state662;
        end
        ap_ST_fsm_state662 : begin
            ap_NS_fsm = ap_ST_fsm_state663;
        end
        ap_ST_fsm_state663 : begin
            ap_NS_fsm = ap_ST_fsm_state664;
        end
        ap_ST_fsm_state664 : begin
            ap_NS_fsm = ap_ST_fsm_state665;
        end
        ap_ST_fsm_state665 : begin
            ap_NS_fsm = ap_ST_fsm_state666;
        end
        ap_ST_fsm_state666 : begin
            ap_NS_fsm = ap_ST_fsm_state667;
        end
        ap_ST_fsm_state667 : begin
            ap_NS_fsm = ap_ST_fsm_state668;
        end
        ap_ST_fsm_state668 : begin
            ap_NS_fsm = ap_ST_fsm_state669;
        end
        ap_ST_fsm_state669 : begin
            ap_NS_fsm = ap_ST_fsm_state670;
        end
        ap_ST_fsm_state670 : begin
            ap_NS_fsm = ap_ST_fsm_state671;
        end
        ap_ST_fsm_state671 : begin
            ap_NS_fsm = ap_ST_fsm_state672;
        end
        ap_ST_fsm_state672 : begin
            ap_NS_fsm = ap_ST_fsm_state673;
        end
        ap_ST_fsm_state673 : begin
            ap_NS_fsm = ap_ST_fsm_state674;
        end
        ap_ST_fsm_state674 : begin
            ap_NS_fsm = ap_ST_fsm_state675;
        end
        ap_ST_fsm_state675 : begin
            ap_NS_fsm = ap_ST_fsm_state616;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_corner_0_address0 = grp_get_acceptanceCorners_fu_1445_a_corner_0_address0;

assign a_corner_0_d0 = grp_get_acceptanceCorners_fu_1445_a_corner_0_d0;

assign a_corner_1_d0 = grp_get_acceptanceCorners_fu_1445_a_corner_1_d0;

assign add_ln1001_fu_1870_p2 = (i_6_reg_975 + 3'd1);

assign add_ln1016_fu_1899_p2 = (i_7_reg_987 + 3'd1);

assign add_ln1031_fu_1958_p2 = (i_8_reg_1019 + 3'd1);

assign add_ln1038_fu_1929_p2 = (i_9_reg_1008 + 3'd1);

assign add_ln1051_fu_2337_p2 = ($signed(trunc_ln1049_fu_2319_p1) + $signed(12'd4095));

assign add_ln1054_fu_1982_p2 = (i_10_reg_1040 + 3'd1);

assign add_ln1068_fu_2026_p2 = (i_11_reg_1051 + 3'd1);

assign add_ln1076_fu_2066_p2 = (ap_phi_mux_i_12_phi_fu_1066_p4 + 3'd1);

assign add_ln1077_fu_2149_p2 = (shl_ln1077_1_fu_2141_p3 + shl_ln4_fu_2133_p3);

assign add_ln1088_fu_2202_p2 = ($signed(ap_phi_mux_i_13_phi_fu_1078_p4) + $signed(3'd7));

assign add_ln1089_fu_2191_p2 = (ap_phi_mux_i_13_phi_fu_1078_p4 + 3'd1);

assign add_ln1102_fu_2216_p2 = (i_14_reg_1085 + 3'd1);

assign add_ln1143_fu_2378_p2 = (shl_ln6_fu_2370_p3 + 16'd24576);

assign add_ln1150_fu_2394_p2 = (shl_ln6_fu_2370_p3 + 16'd16384);

assign add_ln51_1_fu_1710_p2 = (i_4_reg_825 + 5'd1);

assign add_ln51_2_fu_1764_p2 = (i_5_reg_860 + 5'd1);

assign add_ln51_3_fu_2653_p2 = ($signed(nPatchesAtComplementary_reg_920) + $signed(32'd4294967295));

assign add_ln51_fu_1662_p2 = (i_reg_790 + 5'd1);

assign add_ln52_5_fu_1627_p2 = (add_ln52_fu_1621_p2 + 8'd64);

assign add_ln52_6_fu_1678_p2 = (add_ln52_reg_3411 + zext_ln52_fu_1674_p1);

assign add_ln52_7_fu_1726_p2 = (add_ln52_5_reg_3416 + zext_ln52_41_fu_1722_p1);

assign add_ln52_8_fu_1780_p2 = (add_ln52_5_reg_3416 + zext_ln52_43_fu_1776_p1);

assign add_ln52_fu_1621_p2 = (tmp_cast_fu_1607_p3 + tmp_102_cast_fu_1614_p3);

assign add_ln703_1_fu_1975_p2 = ($signed(current_z_i_index_V_q0) + $signed(32'd4293918720));

assign add_ln731_fu_2005_p2 = ($signed(shl_ln731_1_fu_2000_p2) + $signed(32'd4293918720));

assign and_ln1362_fu_2843_p2 = (xor_ln1496_fu_2831_p2 & icmp_ln1497_fu_2837_p2);

assign and_ln1371_fu_2881_p2 = (icmp_ln1495_15_fu_2876_p2 & icmp_ln1494_13_fu_2871_p2);

assign and_ln1379_fu_2921_p2 = (icmp_ln1495_18_fu_2915_p2 & icmp_ln1494_14_fu_2909_p2);

assign and_ln1388_fu_2961_p2 = (icmp_ln1495_21_fu_2955_p2 & icmp_ln1494_15_fu_2949_p2);

assign and_ln1489_1_fu_3129_p2 = (grp_fu_1560_p2 & and_ln1489_fu_3123_p2);

assign and_ln1489_fu_3123_p2 = (xor_ln1489_fu_3117_p2 & grp_fu_1565_p2);

assign and_ln1491_fu_3100_p2 = (grp_fu_1565_p2 & grp_fu_1560_p2);

assign and_ln1494_1_fu_2782_p2 = (or_ln1277_fu_2777_p2 & icmp_ln1494_37_fu_2760_p2);

assign and_ln1494_2_fu_2788_p2 = (or_ln1282_fu_2772_p2 & icmp_ln878_reg_3848);

assign and_ln1494_fu_1639_p2 = (icmp_ln1494_fu_1633_p2 & flatBottom_q0);

assign and_ln814_fu_1656_p2 = (icmp_ln1494_10_fu_1651_p2 & grp_fu_1508_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp10_stage0 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state215 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state221 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state222 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state223 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state224 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state226 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state227 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state228 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state229 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state230 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state235 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state236 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state237 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state238 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state239 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state240 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state241 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state242 = ap_CS_fsm[32'd173];

assign ap_CS_fsm_state243 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state244 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state245 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state246 = ap_CS_fsm[32'd177];

assign ap_CS_fsm_state247 = ap_CS_fsm[32'd178];

assign ap_CS_fsm_state248 = ap_CS_fsm[32'd179];

assign ap_CS_fsm_state249 = ap_CS_fsm[32'd180];

assign ap_CS_fsm_state250 = ap_CS_fsm[32'd181];

assign ap_CS_fsm_state251 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state252 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state253 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state254 = ap_CS_fsm[32'd185];

assign ap_CS_fsm_state255 = ap_CS_fsm[32'd186];

assign ap_CS_fsm_state256 = ap_CS_fsm[32'd187];

assign ap_CS_fsm_state257 = ap_CS_fsm[32'd188];

assign ap_CS_fsm_state258 = ap_CS_fsm[32'd189];

assign ap_CS_fsm_state259 = ap_CS_fsm[32'd190];

assign ap_CS_fsm_state260 = ap_CS_fsm[32'd191];

assign ap_CS_fsm_state261 = ap_CS_fsm[32'd192];

assign ap_CS_fsm_state262 = ap_CS_fsm[32'd193];

assign ap_CS_fsm_state263 = ap_CS_fsm[32'd194];

assign ap_CS_fsm_state264 = ap_CS_fsm[32'd195];

assign ap_CS_fsm_state265 = ap_CS_fsm[32'd196];

assign ap_CS_fsm_state266 = ap_CS_fsm[32'd197];

assign ap_CS_fsm_state267 = ap_CS_fsm[32'd198];

assign ap_CS_fsm_state268 = ap_CS_fsm[32'd199];

assign ap_CS_fsm_state269 = ap_CS_fsm[32'd200];

assign ap_CS_fsm_state270 = ap_CS_fsm[32'd201];

assign ap_CS_fsm_state271 = ap_CS_fsm[32'd202];

assign ap_CS_fsm_state272 = ap_CS_fsm[32'd203];

assign ap_CS_fsm_state273 = ap_CS_fsm[32'd204];

assign ap_CS_fsm_state274 = ap_CS_fsm[32'd205];

assign ap_CS_fsm_state275 = ap_CS_fsm[32'd206];

assign ap_CS_fsm_state276 = ap_CS_fsm[32'd207];

assign ap_CS_fsm_state277 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state278 = ap_CS_fsm[32'd209];

assign ap_CS_fsm_state279 = ap_CS_fsm[32'd210];

assign ap_CS_fsm_state280 = ap_CS_fsm[32'd211];

assign ap_CS_fsm_state281 = ap_CS_fsm[32'd212];

assign ap_CS_fsm_state282 = ap_CS_fsm[32'd213];

assign ap_CS_fsm_state283 = ap_CS_fsm[32'd214];

assign ap_CS_fsm_state284 = ap_CS_fsm[32'd215];

assign ap_CS_fsm_state285 = ap_CS_fsm[32'd216];

assign ap_CS_fsm_state286 = ap_CS_fsm[32'd217];

assign ap_CS_fsm_state287 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state288 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state289 = ap_CS_fsm[32'd220];

assign ap_CS_fsm_state290 = ap_CS_fsm[32'd221];

assign ap_CS_fsm_state291 = ap_CS_fsm[32'd222];

assign ap_CS_fsm_state292 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state293 = ap_CS_fsm[32'd224];

assign ap_CS_fsm_state294 = ap_CS_fsm[32'd225];

assign ap_CS_fsm_state295 = ap_CS_fsm[32'd226];

assign ap_CS_fsm_state296 = ap_CS_fsm[32'd227];

assign ap_CS_fsm_state297 = ap_CS_fsm[32'd228];

assign ap_CS_fsm_state298 = ap_CS_fsm[32'd229];

assign ap_CS_fsm_state299 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state300 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state301 = ap_CS_fsm[32'd232];

assign ap_CS_fsm_state302 = ap_CS_fsm[32'd233];

assign ap_CS_fsm_state303 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state304 = ap_CS_fsm[32'd235];

assign ap_CS_fsm_state305 = ap_CS_fsm[32'd236];

assign ap_CS_fsm_state306 = ap_CS_fsm[32'd237];

assign ap_CS_fsm_state307 = ap_CS_fsm[32'd238];

assign ap_CS_fsm_state308 = ap_CS_fsm[32'd239];

assign ap_CS_fsm_state309 = ap_CS_fsm[32'd240];

assign ap_CS_fsm_state310 = ap_CS_fsm[32'd241];

assign ap_CS_fsm_state311 = ap_CS_fsm[32'd242];

assign ap_CS_fsm_state312 = ap_CS_fsm[32'd243];

assign ap_CS_fsm_state313 = ap_CS_fsm[32'd244];

assign ap_CS_fsm_state314 = ap_CS_fsm[32'd245];

assign ap_CS_fsm_state315 = ap_CS_fsm[32'd246];

assign ap_CS_fsm_state316 = ap_CS_fsm[32'd247];

assign ap_CS_fsm_state317 = ap_CS_fsm[32'd248];

assign ap_CS_fsm_state318 = ap_CS_fsm[32'd249];

assign ap_CS_fsm_state319 = ap_CS_fsm[32'd250];

assign ap_CS_fsm_state320 = ap_CS_fsm[32'd251];

assign ap_CS_fsm_state321 = ap_CS_fsm[32'd252];

assign ap_CS_fsm_state322 = ap_CS_fsm[32'd253];

assign ap_CS_fsm_state323 = ap_CS_fsm[32'd254];

assign ap_CS_fsm_state324 = ap_CS_fsm[32'd255];

assign ap_CS_fsm_state325 = ap_CS_fsm[32'd256];

assign ap_CS_fsm_state326 = ap_CS_fsm[32'd257];

assign ap_CS_fsm_state327 = ap_CS_fsm[32'd258];

assign ap_CS_fsm_state328 = ap_CS_fsm[32'd259];

assign ap_CS_fsm_state329 = ap_CS_fsm[32'd260];

assign ap_CS_fsm_state330 = ap_CS_fsm[32'd261];

assign ap_CS_fsm_state331 = ap_CS_fsm[32'd262];

assign ap_CS_fsm_state332 = ap_CS_fsm[32'd263];

assign ap_CS_fsm_state333 = ap_CS_fsm[32'd264];

assign ap_CS_fsm_state334 = ap_CS_fsm[32'd265];

assign ap_CS_fsm_state335 = ap_CS_fsm[32'd266];

assign ap_CS_fsm_state336 = ap_CS_fsm[32'd267];

assign ap_CS_fsm_state337 = ap_CS_fsm[32'd268];

assign ap_CS_fsm_state338 = ap_CS_fsm[32'd269];

assign ap_CS_fsm_state339 = ap_CS_fsm[32'd270];

assign ap_CS_fsm_state340 = ap_CS_fsm[32'd271];

assign ap_CS_fsm_state341 = ap_CS_fsm[32'd272];

assign ap_CS_fsm_state394 = ap_CS_fsm[32'd325];

assign ap_CS_fsm_state395 = ap_CS_fsm[32'd326];

assign ap_CS_fsm_state396 = ap_CS_fsm[32'd327];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state449 = ap_CS_fsm[32'd380];

assign ap_CS_fsm_state450 = ap_CS_fsm[32'd381];

assign ap_CS_fsm_state451 = ap_CS_fsm[32'd382];

assign ap_CS_fsm_state452 = ap_CS_fsm[32'd383];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state505 = ap_CS_fsm[32'd436];

assign ap_CS_fsm_state506 = ap_CS_fsm[32'd437];

assign ap_CS_fsm_state507 = ap_CS_fsm[32'd438];

assign ap_CS_fsm_state508 = ap_CS_fsm[32'd439];

assign ap_CS_fsm_state561 = ap_CS_fsm[32'd492];

assign ap_CS_fsm_state562 = ap_CS_fsm[32'd493];

assign ap_CS_fsm_state563 = ap_CS_fsm[32'd494];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state614 = ap_CS_fsm[32'd545];

assign ap_CS_fsm_state615 = ap_CS_fsm[32'd546];

assign ap_CS_fsm_state616 = ap_CS_fsm[32'd547];

assign ap_CS_fsm_state617 = ap_CS_fsm[32'd548];

assign ap_CS_fsm_state618 = ap_CS_fsm[32'd549];

assign ap_CS_fsm_state619 = ap_CS_fsm[32'd550];

assign ap_CS_fsm_state620 = ap_CS_fsm[32'd551];

assign ap_CS_fsm_state621 = ap_CS_fsm[32'd552];

assign ap_CS_fsm_state622 = ap_CS_fsm[32'd553];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state675 = ap_CS_fsm[32'd606];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd79];

assign ap_NS_fsm_state341 = ap_NS_fsm[32'd272];

assign ap_NS_fsm_state396 = ap_NS_fsm[32'd327];

assign ap_NS_fsm_state452 = ap_NS_fsm[32'd383];

assign ap_NS_fsm_state508 = ap_NS_fsm[32'd439];

assign ap_NS_fsm_state562 = ap_NS_fsm[32'd493];

assign ap_NS_fsm_state622 = ap_NS_fsm[32'd553];

assign ap_NS_fsm_state8 = ap_NS_fsm[32'd7];

assign ap_NS_fsm_state83 = ap_NS_fsm[32'd79];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp10_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp10_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp10_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_11001_ignoreCallOp1109 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state138_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state149_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state152_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state153_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state155_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp8_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp9_stage0_iter0_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp9_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp9_stage0_iter1_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp9_stage0_iter2_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp9_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp9_stage0_iter3_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state164_pp9_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state164_pp9_stage0_iter4_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state165_pp9_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state165_pp9_stage0_iter5_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state166_pp9_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state166_pp9_stage0_iter6_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state167_pp9_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state167_pp9_stage0_iter7_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state168_pp9_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state168_pp9_stage0_iter8_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state169_pp9_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state169_pp9_stage0_iter9_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state170_pp9_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state170_pp9_stage0_iter10_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state171_pp9_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state171_pp9_stage0_iter11_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state172_pp9_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state172_pp9_stage0_iter12_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state173_pp9_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state173_pp9_stage0_iter13_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state174_pp9_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state174_pp9_stage0_iter14_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state175_pp9_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state175_pp9_stage0_iter15_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state176_pp9_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state176_pp9_stage0_iter16_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state177_pp9_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state177_pp9_stage0_iter17_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state178_pp9_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state178_pp9_stage0_iter18_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state179_pp9_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state179_pp9_stage0_iter19_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state180_pp9_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state180_pp9_stage0_iter20_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state181_pp9_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state181_pp9_stage0_iter21_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state182_pp9_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state182_pp9_stage0_iter22_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state183_pp9_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state183_pp9_stage0_iter23_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state184_pp9_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state184_pp9_stage0_iter24_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state185_pp9_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state185_pp9_stage0_iter25_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state186_pp9_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state186_pp9_stage0_iter26_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state187_pp9_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state187_pp9_stage0_iter27_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state188_pp9_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state188_pp9_stage0_iter28_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state189_pp9_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state189_pp9_stage0_iter29_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state190_pp9_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state190_pp9_stage0_iter30_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state191_pp9_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state191_pp9_stage0_iter31_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state192_pp9_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state192_pp9_stage0_iter32_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state193_pp9_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state193_pp9_stage0_iter33_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state194_pp9_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state194_pp9_stage0_iter34_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state195_pp9_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state195_pp9_stage0_iter35_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state196_pp9_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state196_pp9_stage0_iter36_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state197_pp9_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state197_pp9_stage0_iter37_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state198_pp9_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state198_pp9_stage0_iter38_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state199_pp9_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state199_pp9_stage0_iter39_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state200_pp9_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state200_pp9_stage0_iter40_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state201_pp9_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state201_pp9_stage0_iter41_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state202_pp9_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state202_pp9_stage0_iter42_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state203_pp9_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state203_pp9_stage0_iter43_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state204_pp9_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state204_pp9_stage0_iter44_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state205_pp9_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state205_pp9_stage0_iter45_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state206_pp9_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state206_pp9_stage0_iter46_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state207_pp9_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state207_pp9_stage0_iter47_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state208_pp9_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state208_pp9_stage0_iter48_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state209_pp9_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state209_pp9_stage0_iter49_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state210_pp9_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state210_pp9_stage0_iter50_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state211_pp9_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state211_pp9_stage0_iter51_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state212_pp9_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state212_pp9_stage0_iter52_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state213_pp9_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state213_pp9_stage0_iter53_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state214_pp9_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state214_pp9_stage0_iter54_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state216_pp10_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state217_pp10_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state218_pp10_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp10 = (ap_idle_pp10 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

assign ap_phi_mux_cond_loop_adjust_complementary_patch_phi_fu_968_p4 = cond_loop_adjust_complementary_patch_reg_964;

assign ap_phi_mux_latest_patch_index_0_phi_fu_913_p4 = latest_patch_index_0_reg_910;

assign b_corner_0_address0 = grp_get_acceptanceCorners_fu_1445_b_corner_0_address0;

assign b_corner_0_d0 = grp_get_acceptanceCorners_fu_1445_b_corner_0_d0;

assign b_corner_1_d0 = grp_get_acceptanceCorners_fu_1445_b_corner_1_d0;

assign c_corner_0_d0 = grp_get_acceptanceCorners_fu_1445_c_corner_0_d0;

assign c_corner_1_d0 = grp_get_acceptanceCorners_fu_1445_c_corner_1_d0;

assign complementary_topL_jL_V_6_fu_3180_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? shadow_fromTopToInnermost_topL_jL_q0 : original_topR_jL_V_1_reg_1242);

assign complementary_topL_jL_V_7_fu_3187_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? shadow_fromTopToInnermost_topL_jL_q0 : original_topL_jL_V_1_reg_1252);

assign complementary_topL_jL_V_8_fu_3215_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? complementary_topL_jL_V_1_reg_1292 : shadow_fromTopToInnermost_topL_jL_q0);

assign complementary_topL_jR_V_5_fu_3201_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? complementary_topL_jR_V_1_reg_1272 : shadow_fromTopToInnermost_topL_jR_q0);

assign complementary_topL_jR_V_6_fu_3229_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? shadow_fromTopToInnermost_topL_jR_q0 : original_topL_jR_V_1_reg_1312);

assign complementary_topR_jL_V_4_fu_3208_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? complementary_topR_jL_V_1_reg_1282 : shadow_fromTopToInnermost_topR_jL_q0);

assign complementary_topR_jR_V_5_fu_3194_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? complementary_topR_jR_V_1_reg_1262 : shadow_fromTopToInnermost_topR_jR_q0);

assign complementary_topR_jR_V_6_fu_3222_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? shadow_fromTopToInnermost_topR_jR_q0 : original_topR_jR_V_1_reg_1302);

assign cond_loop_adjust_complementary_patch_1_fu_2793_p2 = (and_ln1494_2_fu_2788_p2 & and_ln1494_1_fu_2782_p2);

assign current_z_top_index_V_3_fu_1916_p2 = (current_z_top_index_V_1_reg_3594 + 32'd1);

assign current_z_top_index_V_4_fu_1952_p2 = ($signed(current_z_top_index_V_2_reg_998) + $signed(32'd4294967295));

assign current_z_top_index_V_6_fu_1946_p2 = (current_z_top_index_V_2_reg_998 + 32'd1);

assign current_z_top_index_V_fu_2343_p3 = ((icmp_ln878_fu_2327_p2[0:0] == 1'b1) ? trunc_ln1051_fu_2333_p1 : add_ln1051_fu_2337_p2);

assign d_corner_0_address0 = grp_get_acceptanceCorners_fu_1445_d_corner_0_address0;

assign d_corner_0_d0 = grp_get_acceptanceCorners_fu_1445_d_corner_0_d0;

assign d_corner_1_d0 = grp_get_acceptanceCorners_fu_1445_d_corner_1_d0;

assign empty_247_fu_2043_p1 = new_z_i_index_V_q0[30:0];

assign flatBottom_d0 = grp_get_acceptanceCorners_fu_1445_flatBottom_d0;

assign flatTop_address0 = grp_get_acceptanceCorners_fu_1445_flatTop_address0;

assign flatTop_d0 = grp_get_acceptanceCorners_fu_1445_flatTop_d0;

assign grp_fu_1508_p2 = (($signed(grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return) < $signed(32'd15728640)) ? 1'b1 : 1'b0);

assign grp_fu_1521_p0 = ($signed(grp_fu_1514_p0) + $signed(32'd4294967295));

assign grp_fu_1521_p1 = 32'd3;

assign grp_fu_1527_p2 = (current_z_i_index_V_q0 + 32'd1048576);

assign grp_fu_1554_p2 = (32'd0 - grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return);

assign grp_fu_1560_p2 = (($signed(horizontalOverlapTop_V_fu_266) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign grp_fu_1565_p2 = (($signed(horizontalOverlapBottom_V_fu_262) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign grp_fu_2647_p1 = 32'd3;

assign grp_getParallelograms_fu_1361_ap_start = grp_getParallelograms_fu_1361_ap_start_reg;

assign grp_getShadows_fu_1393_ap_start = grp_getShadows_fu_1393_ap_start_reg;

assign grp_get_acceptanceCorners_fu_1445_ap_start = grp_get_acceptanceCorners_fu_1445_ap_start_reg;

assign grp_get_index_from_z_fu_1486_ap_start = grp_get_index_from_z_fu_1486_ap_start_reg;

assign grp_makePatch_alignedToLine_fu_1322_ap_start = grp_makePatch_alignedToLine_fu_1322_ap_start_reg;

assign grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_start_reg;

assign grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start = grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_start_reg;

assign horizontalOverlapBottom_V_1_fu_3328_p3 = ((icmp_ln1494_24_fu_3314_p2[0:0] == 1'b1) ? trunc_ln1564_fu_3320_p1 : trunc_ln1564_1_fu_3324_p1);

assign horizontalOverlapTop_V_1_fu_3290_p3 = ((icmp_ln1494_23_fu_3276_p2[0:0] == 1'b1) ? trunc_ln1561_fu_3282_p1 : trunc_ln1561_1_fu_3286_p1);

assign horizontalShiftBottom_1_fu_3242_p2 = ($signed(complementary_topL_jL_V_7_fu_3187_p3) - $signed(complementary_topL_jR_V_5_fu_3201_p3));

assign horizontalShiftBottom_fu_3015_p2 = (original_topL_jL_V_reg_4039 - complementary_topL_jR_V_reg_4099);

assign horizontalShiftTop_1_fu_3236_p2 = ($signed(complementary_topL_jL_V_6_fu_3180_p3) - $signed(complementary_topR_jR_V_5_fu_3194_p3));

assign horizontalShiftTop_fu_3011_p2 = (original_topR_jL_V_reg_4053 - complementary_topR_jR_V_reg_4083);

assign i_10_cast_fu_1941_p1 = i_9_reg_1008;

assign i_11_cast_fu_1994_p1 = i_10_reg_1040;

assign i_12_cast_fu_2038_p1 = i_11_reg_1051;

assign i_13_cast14_fu_2078_p1 = ap_phi_mux_i_12_phi_fu_1066_p4;

assign i_15_cast_fu_2228_p1 = i_14_reg_1085;

assign i_8_cast_fu_1911_p1 = i_7_reg_987;

assign i_9_cast_fu_1970_p1 = i_8_reg_1019;

assign icmp_ln1016_fu_1905_p2 = ((i_7_reg_987 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1031_fu_1964_p2 = ((i_8_reg_1019 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1038_fu_1935_p2 = ((i_9_reg_1008 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1054_fu_1988_p2 = ((i_10_reg_1040 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1068_fu_2032_p2 = ((i_11_reg_1051 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1076_fu_2072_p2 = ((ap_phi_mux_i_12_phi_fu_1066_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1087_fu_2185_p2 = ((ap_phi_mux_i_13_phi_fu_1078_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1102_fu_2222_p2 = ((i_14_reg_1085 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln1106_fu_2262_p2 = (($signed(select_ln1106_fu_2256_p3) < $signed(layerSMin_V_reg_1108)) ? 1'b1 : 1'b0);

assign icmp_ln1487_fu_3081_p2 = (($signed(empty_257_reg_1233) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign icmp_ln1489_fu_3106_p2 = (($signed(empty_256_reg_1224) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_10_fu_1651_p2 = (($signed(original_c_V_reg_3384) > $signed(32'd4242538392)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_1758_p2 = (($signed(min_z_V_2_reg_836) < $signed(32'd4242538496)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_1848_p2 = (($signed(ret_V_fu_1829_p2) > $signed(ret_V_8_fu_1842_p2)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_2871_p2 = (($signed(original_topL_jL_V_reg_4039) > $signed(shifted_Align_V_5_reg_801)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_2909_p2 = (($signed(shadow_fromTopToInnermost_topR_jR_q0) > $signed(shifted_Align_V_5_reg_801)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_2949_p2 = (($signed(shadow_fromTopToInnermost_topL_jR_q0) > $signed(shifted_Align_V_5_reg_801)) ? 1'b1 : 1'b0);

assign icmp_ln1494_16_fu_2047_p2 = (($signed(new_z_i_index_V_q0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_17_fu_3035_p2 = (($signed(grp_straightLineProjectorFromLayerIJtoK_fu_1429_ap_return) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_17_not_fu_3061_p2 = (icmp_ln1494_17_fu_3035_p2 ^ 1'd1);

assign icmp_ln1494_18_fu_3135_p2 = (($signed(empty_257_reg_1233) > $signed(empty_256_reg_1224)) ? 1'b1 : 1'b0);

assign icmp_ln1494_19_fu_2704_p2 = (($signed(ret_V_17_reg_3982) > $signed(ret_V_18_reg_3988)) ? 1'b1 : 1'b0);

assign icmp_ln1494_21_fu_2698_p2 = (($signed(c_corner_1_q0) > $signed(32'd4242538392)) ? 1'b1 : 1'b0);

assign icmp_ln1494_22_fu_2766_p2 = (($signed(white_space_height_V_2_fu_2714_p1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_23_fu_3276_p2 = (($signed(ret_V_9_fu_3263_p2) > $signed(ret_V_10_fu_3271_p2)) ? 1'b1 : 1'b0);

assign icmp_ln1494_24_fu_3314_p2 = (($signed(ret_V_11_fu_3301_p2) > $signed(ret_V_12_fu_3309_p2)) ? 1'b1 : 1'b0);

assign icmp_ln1494_37_fu_2760_p2 = (($signed(select_ln1279_fu_2752_p3) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1633_p2 = (($signed(a_corner_1_q0) > $signed(32'd52428800)) ? 1'b1 : 1'b0);

assign icmp_ln1495_11_fu_1688_p2 = (($signed(patch_buffer_q0) < $signed(empty_reg_813)) ? 1'b1 : 1'b0);

assign icmp_ln1495_12_fu_1736_p2 = (($signed(patch_buffer_q0) < $signed(empty_237_reg_848)) ? 1'b1 : 1'b0);

assign icmp_ln1495_13_fu_1790_p2 = (($signed(patch_buffer_q0) < $signed(empty_239_reg_883)) ? 1'b1 : 1'b0);

assign icmp_ln1495_15_fu_2876_p2 = (($signed(original_topL_jL_V_reg_4039) < $signed(32'd23068776)) ? 1'b1 : 1'b0);

assign icmp_ln1495_18_fu_2915_p2 = (($signed(shadow_fromTopToInnermost_topR_jR_q0) < $signed(32'd23068776)) ? 1'b1 : 1'b0);

assign icmp_ln1495_20_fu_2011_p2 = (($signed(new_z_i_index_V_q1) < $signed(add_ln731_fu_2005_p2)) ? 1'b1 : 1'b0);

assign icmp_ln1495_21_fu_2955_p2 = (($signed(shadow_fromTopToInnermost_topL_jR_q0) < $signed(32'd23068776)) ? 1'b1 : 1'b0);

assign icmp_ln1495_25_fu_2468_p2 = (($signed(shl_ln5_fu_2460_p3) < $signed(52'd1048570)) ? 1'b1 : 1'b0);

assign icmp_ln1495_28_fu_2531_p2 = (($signed(shl_ln728_1_fu_2523_p3) < $signed(52'd1048570)) ? 1'b1 : 1'b0);

assign icmp_ln1495_30_fu_2594_p2 = (($signed(shl_ln728_2_fu_2586_p3) < $signed(52'd1048570)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_2825_p2 = (($signed(grp_getShadows_fu_1393_ap_return_2) < $signed(shifted_Align_V_5_reg_801)) ? 1'b1 : 1'b0);

assign icmp_ln1497_fu_2837_p2 = (($signed(grp_getShadows_fu_1393_ap_return_2) < $signed(32'd23068777)) ? 1'b1 : 1'b0);

assign icmp_ln1498_fu_1886_p2 = ((z_top_min_V_11_reg_930 == previous_z_top_min_V_reg_951) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_1716_p2 = ((i_4_reg_825 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_1770_p2 = ((i_5_reg_860 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1668_p2 = ((i_reg_790 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_2664_p2 = ((grp_fu_2647_p2 == latest_patch_index_0_reg_910) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_2105_p2 = ((trunc_ln851_fu_2101_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_2327_p2 = (($signed(current_z_top_index_V_5_reg_1030) < $signed(x_fu_2322_p2)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_2410_p2 = (($signed(nPatchesAtComplementary_reg_920) > $signed(reg_1577)) ? 1'b1 : 1'b0);

assign icmp_ln999_fu_1880_p2 = ((i_6_reg_975 == 3'd5) ? 1'b1 : 1'b0);

assign layerSMin_V_1_fu_2303_p3 = ((or_ln1106_fu_2279_p2[0:0] == 1'b1) ? select_ln1106_1_fu_2285_p3 : sub_ln703_14_fu_2251_p2);

assign layerWithSmallestShift_1_fu_2311_p3 = ((or_ln1106_fu_2279_p2[0:0] == 1'b1) ? select_ln1106_2_fu_2295_p3 : zext_ln1106_fu_2292_p1);

assign lnot633_fu_3067_p2 = (tmp_40_fu_3019_p3 & icmp_ln1494_17_not_fu_3061_p2);

assign min_z_V_1_fu_1694_p3 = ((icmp_ln1495_11_fu_1688_p2[0:0] == 1'b1) ? patch_buffer_q0 : shifted_Align_V_5_reg_801);

assign min_z_V_3_fu_1742_p3 = ((icmp_ln1495_12_fu_1736_p2[0:0] == 1'b1) ? patch_buffer_q0 : min_z_V_2_reg_836);

assign min_z_V_5_fu_1796_p3 = ((icmp_ln1495_13_fu_1790_p2[0:0] == 1'b1) ? patch_buffer_q0 : min_z_V_4_reg_871);

assign newZtop_V_1_fu_3073_p3 = ((shiftOriginal_fu_3055_p2[0:0] == 1'b1) ? 32'd52428800 : z_top_min_V_11_reg_930);

assign new_z_i_index_V_d1 = select_ln1070_fu_2053_p3;

assign notChoppedPatch_fu_1645_p2 = (squareAcceptance_q0 | and_ln1494_fu_1639_p2);

assign num_points_address1 = grp_makePatch_alignedToLine_fu_1322_num_points_address1;

assign or_ln1106_fu_2279_p2 = (xor_ln1106_fu_2274_p2 | xor_ln1106_1_fu_2268_p2);

assign or_ln1277_fu_2777_p2 = (tmp_41_reg_3648 | icmp_ln1494_22_fu_2766_p2);

assign or_ln1282_fu_2772_p2 = (icmp_ln1494_22_fu_2766_p2 | icmp_ln1494_21_reg_3994);

assign or_ln1487_1_fu_3087_p2 = (or_ln1487_reg_4129 | icmp_ln1487_fu_3081_p2);

assign or_ln1487_fu_2989_p2 = (empty_253_reg_1170 | empty_251_reg_1146);

assign or_ln1489_1_fu_3112_p2 = (or_ln1489_reg_4134 | icmp_ln1489_fu_3106_p2);

assign or_ln1489_fu_3005_p2 = (empty_254_reg_1182 | empty_252_reg_1158);

assign pSlope_address0 = grp_getParallelograms_fu_1361_pSlope_V_address0;

assign pSlope_d0 = grp_getParallelograms_fu_1361_pSlope_V_d0;

assign p_Result_s_fu_2093_p3 = new_z_i_index_V_q1[32'd31];

assign patch_buffer_d0 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_d0;

assign patch_buffer_d1 = grp_makePatch_alignedToLine_fu_1322_patch_buffer_d1;

assign patch_stream_V_din = grp_makePatch_alignedToLine_fu_1322_patch_stream_V_din;

assign phitmp5_fu_2943_p2 = (($signed(select_ln1381_fu_2935_p3) > $signed(32'd314572799)) ? 1'b1 : 1'b0);

assign phitmp6_fu_2903_p2 = (($signed(select_ln1373_fu_2895_p3) > $signed(32'd314572799)) ? 1'b1 : 1'b0);

assign phitmp7_fu_2983_p2 = (($signed(select_ln1390_fu_2975_p3) > $signed(32'd314572799)) ? 1'b1 : 1'b0);

assign phitmp_fu_2865_p2 = (($signed(select_ln1364_fu_2857_p3) > $signed(32'd314572799)) ? 1'b1 : 1'b0);

assign points_address1 = grp_makePatch_alignedToLine_fu_1322_points_address1;

assign ret_V_10_fu_3271_p2 = ($signed(sext_ln703_7_reg_4299) - $signed(sext_ln703_11_fu_3268_p1));

assign ret_V_11_fu_3301_p2 = ($signed(sext_ln703_12_fu_3298_p1) - $signed(sext_ln703_8_reg_4304));

assign ret_V_12_fu_3309_p2 = ($signed(sext_ln703_9_reg_4309) - $signed(sext_ln703_13_fu_3306_p1));

assign ret_V_13_fu_2083_p4 = {{new_z_i_index_V_q1[31:20]}};

assign ret_V_14_fu_2111_p2 = (ret_V_13_fu_2083_p4 + 12'd1);

assign ret_V_15_fu_2125_p3 = ((p_Result_s_fu_2093_p3[0:0] == 1'b1) ? select_ln850_fu_2117_p3 : ret_V_13_fu_2083_p4);

assign ret_V_17_fu_2684_p2 = ($signed(sext_ln703_reg_3549) - $signed(sext_ln703_15_fu_2680_p1));

assign ret_V_18_fu_2693_p2 = ($signed(sext_ln703_4_reg_3554) - $signed(sext_ln703_16_fu_2689_p1));

assign ret_V_19_fu_2614_p2 = ($signed(sext_ln703_14_fu_2611_p1) - $signed(rhs_6_reg_3801));

assign ret_V_8_fu_1842_p2 = ($signed(sext_ln703_4_fu_1835_p1) - $signed(sext_ln703_5_fu_1838_p1));

assign ret_V_9_fu_3263_p2 = ($signed(sext_ln703_10_fu_3260_p1) - $signed(sext_ln703_6_reg_4294));

assign ret_V_fu_1829_p2 = ($signed(sext_ln703_fu_1822_p1) - $signed(sext_ln703_3_fu_1825_p1));

assign rhs_6_fu_2212_p1 = $signed(z_top_min_V_11_reg_930);

assign select_ln1058_fu_2017_p3 = ((icmp_ln1495_20_fu_2011_p2[0:0] == 1'b1) ? new_z_i_index_V_q1 : add_ln731_fu_2005_p2);

assign select_ln1070_fu_2053_p3 = ((icmp_ln1494_16_fu_2047_p2[0:0] == 1'b1) ? empty_247_fu_2043_p1 : 31'd0);

assign select_ln1106_1_fu_2285_p3 = ((xor_ln1106_1_fu_2268_p2[0:0] == 1'b1) ? layerSMin_V_reg_1108 : sub_ln703_13_reg_3825);

assign select_ln1106_2_fu_2295_p3 = ((xor_ln1106_1_fu_2268_p2[0:0] == 1'b1) ? layerWithSmallestShift_reg_1096 : zext_ln1106_fu_2292_p1);

assign select_ln1106_fu_2256_p3 = ((tmp_51_reg_3832[0:0] == 1'b1) ? sub_ln703_14_fu_2251_p2 : sub_ln703_13_reg_3825);

assign select_ln1134_fu_2452_p3 = ((tmp_44_fu_2438_p3[0:0] == 1'b1) ? sub_ln703_12_fu_2446_p2 : sub_ln703_11_fu_2433_p2);

assign select_ln1141_fu_2515_p3 = ((tmp_46_fu_2501_p3[0:0] == 1'b1) ? sub_ln703_16_fu_2509_p2 : sub_ln703_15_fu_2496_p2);

assign select_ln1148_fu_2578_p3 = ((tmp_48_fu_2564_p3[0:0] == 1'b1) ? sub_ln703_18_fu_2572_p2 : sub_ln703_17_fu_2559_p2);

assign select_ln1244_fu_2708_p3 = ((icmp_ln1494_19_fu_2704_p2[0:0] == 1'b1) ? ret_V_17_reg_3982 : ret_V_18_reg_3988);

assign select_ln1279_fu_2752_p3 = ((tmp_52_fu_2718_p3[0:0] == 1'b1) ? tmp_53_fu_2732_p4 : tmp_54_fu_2742_p4);

assign select_ln1364_fu_2857_p3 = ((tmp_fu_2849_p3[0:0] == 1'b1) ? grp_fu_1554_p2 : grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return);

assign select_ln1373_fu_2895_p3 = ((tmp_37_fu_2887_p3[0:0] == 1'b1) ? grp_fu_1554_p2 : grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return);

assign select_ln1381_fu_2935_p3 = ((tmp_38_fu_2927_p3[0:0] == 1'b1) ? grp_fu_1554_p2 : grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return);

assign select_ln1390_fu_2975_p3 = ((tmp_39_fu_2967_p3[0:0] == 1'b1) ? grp_fu_1554_p2 : grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return);

assign select_ln1461_fu_3027_p3 = ((tmp_40_fu_3019_p3[0:0] == 1'b1) ? shifted_Align_V_5_reg_801 : 32'd23068776);

assign select_ln53_3_fu_1702_p3 = ((icmp_ln1495_11_fu_1688_p2[0:0] == 1'b1) ? patch_buffer_q0 : empty_reg_813);

assign select_ln53_4_fu_1750_p3 = ((icmp_ln1495_12_fu_1736_p2[0:0] == 1'b1) ? patch_buffer_q0 : empty_237_reg_848);

assign select_ln53_5_fu_1804_p3 = ((icmp_ln1495_13_fu_1790_p2[0:0] == 1'b1) ? patch_buffer_q0 : empty_239_reg_883);

assign select_ln703_fu_3141_p3 = ((icmp_ln1494_18_fu_3135_p2[0:0] == 1'b1) ? empty_257_reg_1233 : empty_256_reg_1224);

assign select_ln850_fu_2117_p3 = ((icmp_ln851_fu_2105_p2[0:0] == 1'b1) ? ret_V_13_fu_2083_p4 : ret_V_14_fu_2111_p2);

assign sext_ln703_10_fu_3260_p1 = complementary_topR_jL_V_4_reg_4259;

assign sext_ln703_11_fu_3268_p1 = complementary_topR_jR_V_6_reg_4271;

assign sext_ln703_12_fu_3298_p1 = complementary_topL_jL_V_8_reg_4265;

assign sext_ln703_13_fu_3306_p1 = complementary_topL_jR_V_6_reg_4278;

assign sext_ln703_14_fu_2611_p1 = z_top_min_V_12_reg_3917;

assign sext_ln703_15_fu_2680_p1 = $signed(a_corner_1_q0);

assign sext_ln703_16_fu_2689_p1 = $signed(b_corner_1_q0);

assign sext_ln703_3_fu_1825_p1 = $signed(a_corner_1_q0);

assign sext_ln703_4_fu_1835_p1 = original_d_V_reg_3422;

assign sext_ln703_5_fu_1838_p1 = $signed(b_corner_1_q0);

assign sext_ln703_6_fu_3248_p1 = complementary_topL_jL_V_6_reg_4235;

assign sext_ln703_7_fu_3251_p1 = complementary_topR_jR_V_5_reg_4247;

assign sext_ln703_8_fu_3254_p1 = complementary_topL_jL_V_7_reg_4241;

assign sext_ln703_9_fu_3257_p1 = complementary_topL_jR_V_5_reg_4253;

assign sext_ln703_fu_1822_p1 = original_c_V_reg_3384;

assign shadow_bottomL_jL_address1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jL_address1;

assign shadow_bottomL_jL_d0 = grp_getParallelograms_fu_1361_shadow_bottomL_jL_V_d0;

assign shadow_bottomL_jR_address1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomL_jR_address1;

assign shadow_bottomL_jR_d0 = grp_getParallelograms_fu_1361_shadow_bottomL_jR_V_d0;

assign shadow_bottomR_jL_address1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jL_address1;

assign shadow_bottomR_jL_d0 = grp_getParallelograms_fu_1361_shadow_bottomR_jL_V_d0;

assign shadow_bottomR_jR_address1 = grp_get_acceptanceCorners_fu_1445_shadow_bottomR_jR_address1;

assign shadow_bottomR_jR_d0 = grp_getParallelograms_fu_1361_shadow_bottomR_jR_V_d0;

assign shadow_fromTopToInnermost_topL_jL_d0 = grp_getShadows_fu_1393_ap_return_0;

assign shadow_fromTopToInnermost_topL_jR_d0 = grp_getShadows_fu_1393_ap_return_1;

assign shadow_fromTopToInnermost_topR_jL_d0 = grp_getShadows_fu_1393_ap_return_2;

assign shadow_fromTopToInnermost_topR_jR_d0 = grp_getShadows_fu_1393_ap_return_3;

assign shiftOriginal_fu_3055_p2 = (xor_ln1466_fu_3049_p2 | icmp_ln1494_17_fu_3035_p2);

assign shifted_Align_V_2_fu_3041_p3 = ((icmp_ln1494_17_fu_3035_p2[0:0] == 1'b1) ? 32'd23068776 : select_ln1461_fu_3027_p3);

assign shifted_Align_V_3_fu_3149_p2 = (select_ln703_fu_3141_p3 + empty_255_reg_1215);

assign shifted_Align_V_4_fu_3161_p3 = ((shiftOriginal_reg_4164[0:0] == 1'b1) ? shifted_Align_V_fu_3155_p2 : shifted_Align_V_3_fu_3149_p2);

assign shifted_Align_V_fu_3155_p2 = (empty_255_reg_1215 - select_ln703_fu_3141_p3);

assign shl_ln1077_1_fu_2141_p3 = {{ret_V_15_fu_2125_p3}, {4'd0}};

assign shl_ln4_fu_2133_p3 = {{i_12_reg_1062}, {13'd0}};

assign shl_ln5_fu_2460_p3 = {{select_ln1134_fu_2452_p3}, {20'd0}};

assign shl_ln6_fu_2370_p3 = {{current_z_top_index_V_fu_2343_p3}, {4'd0}};

assign shl_ln728_1_fu_2523_p3 = {{select_ln1141_fu_2515_p3}, {20'd0}};

assign shl_ln728_2_fu_2586_p3 = {{select_ln1148_fu_2578_p3}, {20'd0}};

assign shl_ln731_1_fu_2000_p2 = num_points_load_1_reg_3727 << 32'd20;

assign shl_ln731_fu_1892_p2 = grp_get_index_from_z_fu_1486_ap_return << 32'd20;

assign squareAcceptance_d0 = grp_get_acceptanceCorners_fu_1445_squareAcceptance_d0;

assign sub_ln703_11_fu_2433_p2 = (z_top_min_V_2_reg_3884 - z_top_min_V_11_reg_930);

assign sub_ln703_12_fu_2446_p2 = (32'd0 - sub_ln703_11_fu_2433_p2);

assign sub_ln703_13_fu_2237_p2 = (new_z_i_atTop_V_q0 - z_top_min_V_11_reg_930);

assign sub_ln703_14_fu_2251_p2 = (32'd0 - sub_ln703_13_reg_3825);

assign sub_ln703_15_fu_2496_p2 = (z_top_min_V_4_reg_3895 - z_top_min_V_11_reg_930);

assign sub_ln703_16_fu_2509_p2 = (32'd0 - sub_ln703_15_fu_2496_p2);

assign sub_ln703_17_fu_2559_p2 = (z_top_min_V_6_reg_3906 - z_top_min_V_11_reg_930);

assign sub_ln703_18_fu_2572_p2 = (32'd0 - sub_ln703_17_fu_2559_p2);

assign sub_ln703_19_fu_2726_p2 = (32'd0 - white_space_height_V_2_fu_2714_p1);

assign tmp_102_cast_fu_1614_p3 = {{trunc_ln52_reg_3360}, {4'd0}};

assign tmp_37_fu_2887_p3 = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return[32'd31];

assign tmp_38_fu_2927_p3 = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return[32'd31];

assign tmp_39_fu_2967_p3 = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return[32'd31];

assign tmp_40_fu_3019_p3 = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return[32'd31];

assign tmp_41_fu_1921_p3 = white_space_height_V_3_reg_941[32'd31];

assign tmp_44_fu_2438_p3 = sub_ln703_11_fu_2433_p2[32'd31];

assign tmp_46_fu_2501_p3 = sub_ln703_15_fu_2496_p2[32'd31];

assign tmp_48_fu_2564_p3 = sub_ln703_17_fu_2559_p2[32'd31];

assign tmp_50_fu_2632_p3 = r_V_3_fu_2626_p2[32'd63];

assign tmp_52_fu_2718_p3 = select_ln1244_fu_2708_p3[32'd31];

assign tmp_53_fu_2732_p4 = {{sub_ln703_19_fu_2726_p2[31:1]}};

assign tmp_54_fu_2742_p4 = {{select_ln1244_fu_2708_p3[31:1]}};

assign tmp_81_fu_2169_p3 = {{lshr_ln_reg_3766}, {trunc_ln1077_reg_3771}};

assign tmp_82_fu_2421_p3 = {{xor_ln1136_fu_2416_p2}, {trunc_ln1136_reg_3863}};

assign tmp_83_fu_2485_p3 = {{lshr_ln4_reg_3870}, {trunc_ln1136_reg_3863}};

assign tmp_84_fu_2548_p3 = {{lshr_ln5_reg_3875}, {trunc_ln1136_reg_3863}};

assign tmp_cast_fu_1607_p3 = {{trunc_ln694_reg_3346}, {6'd0}};

assign tmp_fu_2849_p3 = grp_straightLineProjectorFromLayerIJtoK_fu_1404_ap_return[32'd31];

assign triangleAcceptance_d0 = grp_get_acceptanceCorners_fu_1445_triangleAcceptance_d0;

assign trunc_ln1049_fu_2319_p1 = num_points_load_reg_3701[11:0];

assign trunc_ln1051_fu_2333_p1 = current_z_top_index_V_5_reg_1030[11:0];

assign trunc_ln1077_fu_2165_p1 = ret_V_15_fu_2125_p3[8:0];

assign trunc_ln1089_cast_fu_2197_p1 = ap_phi_mux_i_13_phi_fu_1078_p4;

assign trunc_ln1106_fu_2233_p1 = i_14_reg_1085[1:0];

assign trunc_ln1136_fu_2366_p1 = current_z_top_index_V_fu_2343_p3[8:0];

assign trunc_ln1204_fu_2670_p1 = grp_makePatch_alignedToLine_fu_1322_ap_return_0[1:0];

assign trunc_ln1288_fu_2799_p1 = latest_patch_index_0_reg_910[1:0];

assign trunc_ln1305_fu_2812_p1 = grp_fu_1521_p2[1:0];

assign trunc_ln1520_fu_3168_p1 = grp_makePatch_alignedToLine_fu_1322_ap_return_0[1:0];

assign trunc_ln1561_1_fu_3286_p1 = ret_V_10_fu_3271_p2[31:0];

assign trunc_ln1561_fu_3282_p1 = ret_V_9_fu_3263_p2[31:0];

assign trunc_ln1564_1_fu_3324_p1 = ret_V_12_fu_3309_p2[31:0];

assign trunc_ln1564_fu_3320_p1 = ret_V_11_fu_3301_p2[31:0];

assign trunc_ln52_fu_1597_p1 = grp_makePatch_alignedToLine_fu_1322_ap_return_0[3:0];

assign trunc_ln694_fu_1593_p1 = grp_makePatch_alignedToLine_fu_1322_ap_return_0[1:0];

assign trunc_ln851_fu_2101_p1 = new_z_i_index_V_q1[19:0];

assign trunc_ln858_fu_1812_p1 = grp_makePatch_alignedToLine_fu_1322_ap_return_0[1:0];

assign trunc_ln949_1_fu_1858_p1 = ret_V_8_fu_1842_p2[31:0];

assign trunc_ln949_fu_1854_p1 = ret_V_fu_1829_p2[31:0];

assign white_space_height_V_2_fu_2714_p1 = select_ln1244_fu_2708_p3[31:0];

assign white_space_height_V_fu_1862_p3 = ((icmp_ln1494_12_fu_1848_p2[0:0] == 1'b1) ? trunc_ln949_fu_1854_p1 : trunc_ln949_1_fu_1858_p1);

assign x_fu_2322_p2 = ($signed(num_points_load_reg_3701) + $signed(32'd4294967295));

assign xor_ln1106_1_fu_2268_p2 = (icmp_ln1106_fu_2262_p2 ^ 1'd1);

assign xor_ln1106_fu_2274_p2 = (tmp_51_reg_3832 ^ 1'd1);

assign xor_ln1136_fu_2416_p2 = (trunc_ln_reg_3858 ^ 3'd4);

assign xor_ln1466_fu_3049_p2 = (tmp_40_fu_3019_p3 ^ 1'd1);

assign xor_ln1489_fu_3117_p2 = (or_ln1489_1_fu_3112_p2 ^ 1'd1);

assign xor_ln1496_fu_2831_p2 = (icmp_ln1496_fu_2825_p2 ^ 1'd1);

assign z1_max_d0 = grp_getParallelograms_fu_1361_z1_max_V_d0;

assign z1_min_d0 = grp_getParallelograms_fu_1361_z1_min_V_d0;

assign z_bits_1_fu_2474_p1 = points_q0[31:0];

assign z_bits_2_fu_2537_p1 = points_q0[31:0];

assign z_bits_3_fu_2600_p1 = points_q0[31:0];

assign z_bits_fu_2180_p1 = points_q0[31:0];

assign z_top_min_V_10_fu_2640_p3 = ((tmp_50_fu_2632_p3[0:0] == 1'b1) ? new_z_i_atTop_V_q0 : z_top_min_V_12_reg_3917);

assign z_top_min_V_12_fu_2604_p3 = ((icmp_ln1495_30_fu_2594_p2[0:0] == 1'b1) ? z_bits_3_fu_2600_p1 : z_top_min_V_6_reg_3906);

assign z_top_min_V_4_fu_2478_p3 = ((icmp_ln1495_25_fu_2468_p2[0:0] == 1'b1) ? z_bits_1_fu_2474_p1 : z_top_min_V_2_reg_3884);

assign z_top_min_V_6_fu_2541_p3 = ((icmp_ln1495_28_fu_2531_p2[0:0] == 1'b1) ? z_bits_2_fu_2537_p1 : z_top_min_V_4_reg_3895);

assign zext_ln1077_fu_2175_p1 = tmp_81_fu_2169_p3;

assign zext_ln1088_fu_2208_p1 = add_ln1088_reg_3796_pp9_iter53_reg;

assign zext_ln1106_fu_2292_p1 = trunc_ln1106_reg_3820_pp10_iter1_reg;

assign zext_ln1130_fu_2351_p1 = layerWithSmallestShift_reg_1096;

assign zext_ln1136_fu_2428_p1 = tmp_82_fu_2421_p3;

assign zext_ln1143_fu_2491_p1 = tmp_83_fu_2485_p3;

assign zext_ln1150_fu_2554_p1 = tmp_84_fu_2548_p3;

assign zext_ln1208_fu_2674_p1 = latest_patch_index_ret8_reg_3943;

assign zext_ln1288_fu_2804_p1 = latest_patch_index_0_reg_910;

assign zext_ln1304_fu_2817_p1 = reg_1588;

assign zext_ln1524_fu_3172_p1 = grp_makePatch_alignedToLine_fu_1322_ap_return_0;

assign zext_ln52_40_fu_1683_p1 = add_ln52_6_fu_1678_p2;

assign zext_ln52_41_fu_1722_p1 = i_4_reg_825;

assign zext_ln52_42_fu_1731_p1 = add_ln52_7_fu_1726_p2;

assign zext_ln52_43_fu_1776_p1 = i_5_reg_860;

assign zext_ln52_44_fu_1785_p1 = add_ln52_8_fu_1780_p2;

assign zext_ln52_fu_1674_p1 = i_reg_790;

assign zext_ln64_fu_2659_p1 = grp_fu_2647_p2;

assign zext_ln697_fu_1601_p1 = reg_1570;

assign zext_ln861_fu_1816_p1 = reg_1570;

assign zext_ln999_fu_1876_p1 = i_6_reg_975;

always @ (posedge ap_clk) begin
    zext_ln697_reg_3365[63:32] <= 32'b00000000000000000000000000000000;
    add_ln52_reg_3411[3:0] <= 4'b0000;
    add_ln52_5_reg_3416[3:0] <= 4'b0000;
    zext_ln999_reg_3606[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_8_cast_reg_3633[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_10_cast_reg_3662[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_9_cast_reg_3691[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_13_cast14_reg_3756[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_13_cast14_reg_3756_pp8_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_13_cast14_reg_3756_pp8_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //system_top_p_shadowquilt_main_loop_make_verticle_strip
