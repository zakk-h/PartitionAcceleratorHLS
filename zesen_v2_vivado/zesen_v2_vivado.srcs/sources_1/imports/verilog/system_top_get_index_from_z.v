// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_get_index_from_z (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        points_address0,
        points_ce0,
        points_q0,
        num_points_address0,
        num_points_ce0,
        num_points_q0,
        layer,
        z_value,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] points_address0;
output   points_ce0;
input  [127:0] points_q0;
output  [2:0] num_points_address0;
output   num_points_ce0;
input  [31:0] num_points_q0;
input  [2:0] layer;
input  [31:0] z_value;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg points_ce0;
reg num_points_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_reg_94;
reg   [31:0] i_reg_94_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] index_reg_106;
reg   [31:0] minVal_V_reg_118;
wire    ap_CS_fsm_state2;
reg   [31:0] num_points_load_reg_285;
wire   [15:0] shl_ln_fu_135_p3;
reg   [15:0] shl_ln_reg_290;
wire   [31:0] add_ln566_fu_142_p2;
reg   [31:0] add_ln566_reg_295;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln566_fu_148_p2;
reg   [0:0] icmp_ln566_reg_300;
reg   [0:0] icmp_ln566_reg_300_pp0_iter1_reg;
wire   [31:0] z_V_fu_197_p1;
reg   [31:0] z_V_reg_309;
wire   [31:0] minVal_V_1_fu_253_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] index_1_fu_261_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter1_state4;
reg   [31:0] ap_phi_mux_i_phi_fu_98_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom_fu_130_p1;
wire   [63:0] zext_ln569_fu_192_p1;
wire   [11:0] trunc_ln569_fu_153_p1;
wire   [15:0] shl_ln569_1_fu_157_p3;
wire   [15:0] add_ln569_fu_165_p2;
wire   [2:0] lshr_ln_fu_170_p4;
wire   [8:0] trunc_ln569_1_fu_180_p1;
wire   [11:0] tmp_8_fu_184_p3;
wire   [31:0] sub_ln703_fu_201_p2;
wire   [0:0] tmp_fu_205_p3;
wire   [31:0] sub_ln703_1_fu_213_p2;
wire   [0:0] tmp_3_fu_225_p3;
wire   [31:0] sub_ln703_2_fu_233_p2;
wire   [31:0] select_ln569_fu_217_p3;
wire   [31:0] select_ln570_fu_239_p3;
wire   [0:0] icmp_ln1495_fu_247_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln566_reg_300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_94 <= add_ln566_reg_295;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln566_reg_300_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        index_reg_106 <= index_1_fu_261_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        index_reg_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln566_reg_300_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        minVal_V_reg_118 <= minVal_V_1_fu_253_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        minVal_V_reg_118 <= 32'd2146435072;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln566_reg_295 <= add_ln566_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_94_pp0_iter1_reg <= i_reg_94;
        icmp_ln566_reg_300 <= icmp_ln566_fu_148_p2;
        icmp_ln566_reg_300_pp0_iter1_reg <= icmp_ln566_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        num_points_load_reg_285 <= num_points_q0;
        shl_ln_reg_290[15 : 13] <= shl_ln_fu_135_p3[15 : 13];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln566_reg_300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_V_reg_309 <= z_V_fu_197_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln566_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln566_reg_300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_98_p4 = add_ln566_reg_295;
    end else begin
        ap_phi_mux_i_phi_fu_98_p4 = i_reg_94;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        num_points_ce0 = 1'b1;
    end else begin
        num_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln566_fu_142_p2 = (ap_phi_mux_i_phi_fu_98_p4 + 32'd1);

assign add_ln569_fu_165_p2 = (shl_ln569_1_fu_157_p3 + shl_ln_reg_290);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = index_reg_106;

assign icmp_ln1495_fu_247_p2 = (($signed(select_ln569_fu_217_p3) < $signed(select_ln570_fu_239_p3)) ? 1'b1 : 1'b0);

assign icmp_ln566_fu_148_p2 = ((ap_phi_mux_i_phi_fu_98_p4 == num_points_load_reg_285) ? 1'b1 : 1'b0);

assign idxprom_fu_130_p1 = layer;

assign index_1_fu_261_p3 = ((icmp_ln1495_fu_247_p2[0:0] == 1'b1) ? i_reg_94_pp0_iter1_reg : index_reg_106);

assign lshr_ln_fu_170_p4 = {{add_ln569_fu_165_p2[15:13]}};

assign minVal_V_1_fu_253_p3 = ((icmp_ln1495_fu_247_p2[0:0] == 1'b1) ? select_ln569_fu_217_p3 : minVal_V_reg_118);

assign num_points_address0 = idxprom_fu_130_p1;

assign points_address0 = zext_ln569_fu_192_p1;

assign select_ln569_fu_217_p3 = ((tmp_fu_205_p3[0:0] == 1'b1) ? sub_ln703_1_fu_213_p2 : sub_ln703_fu_201_p2);

assign select_ln570_fu_239_p3 = ((tmp_3_fu_225_p3[0:0] == 1'b1) ? sub_ln703_2_fu_233_p2 : minVal_V_reg_118);

assign shl_ln569_1_fu_157_p3 = {{trunc_ln569_fu_153_p1}, {4'd0}};

assign shl_ln_fu_135_p3 = {{layer}, {13'd0}};

assign sub_ln703_1_fu_213_p2 = (z_value - z_V_reg_309);

assign sub_ln703_2_fu_233_p2 = (32'd0 - minVal_V_reg_118);

assign sub_ln703_fu_201_p2 = (z_V_reg_309 - z_value);

assign tmp_3_fu_225_p3 = minVal_V_reg_118[32'd31];

assign tmp_8_fu_184_p3 = {{lshr_ln_fu_170_p4}, {trunc_ln569_1_fu_180_p1}};

assign tmp_fu_205_p3 = sub_ln703_fu_201_p2[32'd31];

assign trunc_ln569_1_fu_180_p1 = ap_phi_mux_i_phi_fu_98_p4[8:0];

assign trunc_ln569_fu_153_p1 = ap_phi_mux_i_phi_fu_98_p4[11:0];

assign z_V_fu_197_p1 = points_q0[31:0];

assign zext_ln569_fu_192_p1 = tmp_8_fu_184_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_290[12:0] <= 13'b0000000000000;
end

endmodule //system_top_get_index_from_z
