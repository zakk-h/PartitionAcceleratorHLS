// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_patch_buffer_add_patch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patch_stream_V_din,
        patch_stream_V_full_n,
        patch_stream_V_write,
        new_patch_0_address0,
        new_patch_0_ce0,
        new_patch_0_q0,
        new_patch_0_address1,
        new_patch_0_ce1,
        new_patch_0_q1,
        new_patch_1_address0,
        new_patch_1_ce0,
        new_patch_1_q0,
        new_patch_1_address1,
        new_patch_1_ce1,
        new_patch_1_q1,
        new_patch_2_address0,
        new_patch_2_ce0,
        new_patch_2_q0,
        new_patch_2_address1,
        new_patch_2_ce1,
        new_patch_2_q1,
        new_patch_3_address0,
        new_patch_3_ce0,
        new_patch_3_q0,
        new_patch_3_address1,
        new_patch_3_ce1,
        new_patch_3_q1,
        new_patch_4_address0,
        new_patch_4_ce0,
        new_patch_4_q0,
        new_patch_4_address1,
        new_patch_4_ce1,
        new_patch_4_q1,
        new_patch_5_address0,
        new_patch_5_ce0,
        new_patch_5_q0,
        new_patch_5_address1,
        new_patch_5_ce1,
        new_patch_5_q1,
        new_patch_6_address0,
        new_patch_6_ce0,
        new_patch_6_q0,
        new_patch_6_address1,
        new_patch_6_ce1,
        new_patch_6_q1,
        new_patch_7_address0,
        new_patch_7_ce0,
        new_patch_7_q0,
        new_patch_7_address1,
        new_patch_7_ce1,
        new_patch_7_q1,
        new_patch_8_address0,
        new_patch_8_ce0,
        new_patch_8_q0,
        new_patch_8_address1,
        new_patch_8_ce1,
        new_patch_8_q1,
        new_patch_9_address0,
        new_patch_9_ce0,
        new_patch_9_q0,
        new_patch_9_address1,
        new_patch_9_ce1,
        new_patch_9_q1,
        new_patch_10_address0,
        new_patch_10_ce0,
        new_patch_10_q0,
        new_patch_10_address1,
        new_patch_10_ce1,
        new_patch_10_q1,
        new_patch_11_address0,
        new_patch_11_ce0,
        new_patch_11_q0,
        new_patch_11_address1,
        new_patch_11_ce1,
        new_patch_11_q1,
        new_patch_12_address0,
        new_patch_12_ce0,
        new_patch_12_q0,
        new_patch_12_address1,
        new_patch_12_ce1,
        new_patch_12_q1,
        new_patch_13_address0,
        new_patch_13_ce0,
        new_patch_13_q0,
        new_patch_13_address1,
        new_patch_13_ce1,
        new_patch_13_q1,
        new_patch_14_address0,
        new_patch_14_ce0,
        new_patch_14_q0,
        new_patch_14_address1,
        new_patch_14_ce1,
        new_patch_14_q1,
        new_patch_15_address0,
        new_patch_15_ce0,
        new_patch_15_q0,
        new_patch_15_address1,
        new_patch_15_ce1,
        new_patch_15_q1,
        patch_buffer_0_0_address0,
        patch_buffer_0_0_ce0,
        patch_buffer_0_0_we0,
        patch_buffer_0_0_d0,
        patch_buffer_0_0_q0,
        patch_buffer_0_1_address0,
        patch_buffer_0_1_ce0,
        patch_buffer_0_1_we0,
        patch_buffer_0_1_d0,
        patch_buffer_0_1_q0,
        patch_buffer_0_2_address0,
        patch_buffer_0_2_ce0,
        patch_buffer_0_2_we0,
        patch_buffer_0_2_d0,
        patch_buffer_0_2_q0,
        patch_buffer_0_3_address0,
        patch_buffer_0_3_ce0,
        patch_buffer_0_3_we0,
        patch_buffer_0_3_d0,
        patch_buffer_0_3_q0,
        patch_buffer_0_4_address0,
        patch_buffer_0_4_ce0,
        patch_buffer_0_4_we0,
        patch_buffer_0_4_d0,
        patch_buffer_0_4_q0,
        patch_buffer_0_5_address0,
        patch_buffer_0_5_ce0,
        patch_buffer_0_5_we0,
        patch_buffer_0_5_d0,
        patch_buffer_0_5_q0,
        patch_buffer_0_6_address0,
        patch_buffer_0_6_ce0,
        patch_buffer_0_6_we0,
        patch_buffer_0_6_d0,
        patch_buffer_0_6_q0,
        patch_buffer_0_7_address0,
        patch_buffer_0_7_ce0,
        patch_buffer_0_7_we0,
        patch_buffer_0_7_d0,
        patch_buffer_0_7_q0,
        patch_buffer_0_8_address0,
        patch_buffer_0_8_ce0,
        patch_buffer_0_8_we0,
        patch_buffer_0_8_d0,
        patch_buffer_0_8_q0,
        patch_buffer_0_9_address0,
        patch_buffer_0_9_ce0,
        patch_buffer_0_9_we0,
        patch_buffer_0_9_d0,
        patch_buffer_0_9_q0,
        patch_buffer_0_10_address0,
        patch_buffer_0_10_ce0,
        patch_buffer_0_10_we0,
        patch_buffer_0_10_d0,
        patch_buffer_0_10_q0,
        patch_buffer_0_11_address0,
        patch_buffer_0_11_ce0,
        patch_buffer_0_11_we0,
        patch_buffer_0_11_d0,
        patch_buffer_0_11_q0,
        patch_buffer_0_12_address0,
        patch_buffer_0_12_ce0,
        patch_buffer_0_12_we0,
        patch_buffer_0_12_d0,
        patch_buffer_0_12_q0,
        patch_buffer_0_13_address0,
        patch_buffer_0_13_ce0,
        patch_buffer_0_13_we0,
        patch_buffer_0_13_d0,
        patch_buffer_0_13_q0,
        patch_buffer_0_14_address0,
        patch_buffer_0_14_ce0,
        patch_buffer_0_14_we0,
        patch_buffer_0_14_d0,
        patch_buffer_0_14_q0,
        patch_buffer_0_15_address0,
        patch_buffer_0_15_ce0,
        patch_buffer_0_15_we0,
        patch_buffer_0_15_d0,
        patch_buffer_0_15_q0,
        patch_buffer_1_0_address0,
        patch_buffer_1_0_ce0,
        patch_buffer_1_0_we0,
        patch_buffer_1_0_d0,
        patch_buffer_1_0_q0,
        patch_buffer_1_1_address0,
        patch_buffer_1_1_ce0,
        patch_buffer_1_1_we0,
        patch_buffer_1_1_d0,
        patch_buffer_1_1_q0,
        patch_buffer_1_2_address0,
        patch_buffer_1_2_ce0,
        patch_buffer_1_2_we0,
        patch_buffer_1_2_d0,
        patch_buffer_1_2_q0,
        patch_buffer_1_3_address0,
        patch_buffer_1_3_ce0,
        patch_buffer_1_3_we0,
        patch_buffer_1_3_d0,
        patch_buffer_1_3_q0,
        patch_buffer_1_4_address0,
        patch_buffer_1_4_ce0,
        patch_buffer_1_4_we0,
        patch_buffer_1_4_d0,
        patch_buffer_1_4_q0,
        patch_buffer_1_5_address0,
        patch_buffer_1_5_ce0,
        patch_buffer_1_5_we0,
        patch_buffer_1_5_d0,
        patch_buffer_1_5_q0,
        patch_buffer_1_6_address0,
        patch_buffer_1_6_ce0,
        patch_buffer_1_6_we0,
        patch_buffer_1_6_d0,
        patch_buffer_1_6_q0,
        patch_buffer_1_7_address0,
        patch_buffer_1_7_ce0,
        patch_buffer_1_7_we0,
        patch_buffer_1_7_d0,
        patch_buffer_1_7_q0,
        patch_buffer_1_8_address0,
        patch_buffer_1_8_ce0,
        patch_buffer_1_8_we0,
        patch_buffer_1_8_d0,
        patch_buffer_1_8_q0,
        patch_buffer_1_9_address0,
        patch_buffer_1_9_ce0,
        patch_buffer_1_9_we0,
        patch_buffer_1_9_d0,
        patch_buffer_1_9_q0,
        patch_buffer_1_10_address0,
        patch_buffer_1_10_ce0,
        patch_buffer_1_10_we0,
        patch_buffer_1_10_d0,
        patch_buffer_1_10_q0,
        patch_buffer_1_11_address0,
        patch_buffer_1_11_ce0,
        patch_buffer_1_11_we0,
        patch_buffer_1_11_d0,
        patch_buffer_1_11_q0,
        patch_buffer_1_12_address0,
        patch_buffer_1_12_ce0,
        patch_buffer_1_12_we0,
        patch_buffer_1_12_d0,
        patch_buffer_1_12_q0,
        patch_buffer_1_13_address0,
        patch_buffer_1_13_ce0,
        patch_buffer_1_13_we0,
        patch_buffer_1_13_d0,
        patch_buffer_1_13_q0,
        patch_buffer_1_14_address0,
        patch_buffer_1_14_ce0,
        patch_buffer_1_14_we0,
        patch_buffer_1_14_d0,
        patch_buffer_1_14_q0,
        patch_buffer_1_15_address0,
        patch_buffer_1_15_ce0,
        patch_buffer_1_15_we0,
        patch_buffer_1_15_d0,
        patch_buffer_1_15_q0,
        patch_buffer_2_0_address0,
        patch_buffer_2_0_ce0,
        patch_buffer_2_0_we0,
        patch_buffer_2_0_d0,
        patch_buffer_2_0_q0,
        patch_buffer_2_1_address0,
        patch_buffer_2_1_ce0,
        patch_buffer_2_1_we0,
        patch_buffer_2_1_d0,
        patch_buffer_2_1_q0,
        patch_buffer_2_2_address0,
        patch_buffer_2_2_ce0,
        patch_buffer_2_2_we0,
        patch_buffer_2_2_d0,
        patch_buffer_2_2_q0,
        patch_buffer_2_3_address0,
        patch_buffer_2_3_ce0,
        patch_buffer_2_3_we0,
        patch_buffer_2_3_d0,
        patch_buffer_2_3_q0,
        patch_buffer_2_4_address0,
        patch_buffer_2_4_ce0,
        patch_buffer_2_4_we0,
        patch_buffer_2_4_d0,
        patch_buffer_2_4_q0,
        patch_buffer_2_5_address0,
        patch_buffer_2_5_ce0,
        patch_buffer_2_5_we0,
        patch_buffer_2_5_d0,
        patch_buffer_2_5_q0,
        patch_buffer_2_6_address0,
        patch_buffer_2_6_ce0,
        patch_buffer_2_6_we0,
        patch_buffer_2_6_d0,
        patch_buffer_2_6_q0,
        patch_buffer_2_7_address0,
        patch_buffer_2_7_ce0,
        patch_buffer_2_7_we0,
        patch_buffer_2_7_d0,
        patch_buffer_2_7_q0,
        patch_buffer_2_8_address0,
        patch_buffer_2_8_ce0,
        patch_buffer_2_8_we0,
        patch_buffer_2_8_d0,
        patch_buffer_2_8_q0,
        patch_buffer_2_9_address0,
        patch_buffer_2_9_ce0,
        patch_buffer_2_9_we0,
        patch_buffer_2_9_d0,
        patch_buffer_2_9_q0,
        patch_buffer_2_10_address0,
        patch_buffer_2_10_ce0,
        patch_buffer_2_10_we0,
        patch_buffer_2_10_d0,
        patch_buffer_2_10_q0,
        patch_buffer_2_11_address0,
        patch_buffer_2_11_ce0,
        patch_buffer_2_11_we0,
        patch_buffer_2_11_d0,
        patch_buffer_2_11_q0,
        patch_buffer_2_12_address0,
        patch_buffer_2_12_ce0,
        patch_buffer_2_12_we0,
        patch_buffer_2_12_d0,
        patch_buffer_2_12_q0,
        patch_buffer_2_13_address0,
        patch_buffer_2_13_ce0,
        patch_buffer_2_13_we0,
        patch_buffer_2_13_d0,
        patch_buffer_2_13_q0,
        patch_buffer_2_14_address0,
        patch_buffer_2_14_ce0,
        patch_buffer_2_14_we0,
        patch_buffer_2_14_d0,
        patch_buffer_2_14_q0,
        patch_buffer_2_15_address0,
        patch_buffer_2_15_ce0,
        patch_buffer_2_15_we0,
        patch_buffer_2_15_d0,
        patch_buffer_2_15_q0,
        patch_buffer_3_0_address0,
        patch_buffer_3_0_ce0,
        patch_buffer_3_0_we0,
        patch_buffer_3_0_d0,
        patch_buffer_3_0_q0,
        patch_buffer_3_1_address0,
        patch_buffer_3_1_ce0,
        patch_buffer_3_1_we0,
        patch_buffer_3_1_d0,
        patch_buffer_3_1_q0,
        patch_buffer_3_2_address0,
        patch_buffer_3_2_ce0,
        patch_buffer_3_2_we0,
        patch_buffer_3_2_d0,
        patch_buffer_3_2_q0,
        patch_buffer_3_3_address0,
        patch_buffer_3_3_ce0,
        patch_buffer_3_3_we0,
        patch_buffer_3_3_d0,
        patch_buffer_3_3_q0,
        patch_buffer_3_4_address0,
        patch_buffer_3_4_ce0,
        patch_buffer_3_4_we0,
        patch_buffer_3_4_d0,
        patch_buffer_3_4_q0,
        patch_buffer_3_5_address0,
        patch_buffer_3_5_ce0,
        patch_buffer_3_5_we0,
        patch_buffer_3_5_d0,
        patch_buffer_3_5_q0,
        patch_buffer_3_6_address0,
        patch_buffer_3_6_ce0,
        patch_buffer_3_6_we0,
        patch_buffer_3_6_d0,
        patch_buffer_3_6_q0,
        patch_buffer_3_7_address0,
        patch_buffer_3_7_ce0,
        patch_buffer_3_7_we0,
        patch_buffer_3_7_d0,
        patch_buffer_3_7_q0,
        patch_buffer_3_8_address0,
        patch_buffer_3_8_ce0,
        patch_buffer_3_8_we0,
        patch_buffer_3_8_d0,
        patch_buffer_3_8_q0,
        patch_buffer_3_9_address0,
        patch_buffer_3_9_ce0,
        patch_buffer_3_9_we0,
        patch_buffer_3_9_d0,
        patch_buffer_3_9_q0,
        patch_buffer_3_10_address0,
        patch_buffer_3_10_ce0,
        patch_buffer_3_10_we0,
        patch_buffer_3_10_d0,
        patch_buffer_3_10_q0,
        patch_buffer_3_11_address0,
        patch_buffer_3_11_ce0,
        patch_buffer_3_11_we0,
        patch_buffer_3_11_d0,
        patch_buffer_3_11_q0,
        patch_buffer_3_12_address0,
        patch_buffer_3_12_ce0,
        patch_buffer_3_12_we0,
        patch_buffer_3_12_d0,
        patch_buffer_3_12_q0,
        patch_buffer_3_13_address0,
        patch_buffer_3_13_ce0,
        patch_buffer_3_13_we0,
        patch_buffer_3_13_d0,
        patch_buffer_3_13_q0,
        patch_buffer_3_14_address0,
        patch_buffer_3_14_ce0,
        patch_buffer_3_14_we0,
        patch_buffer_3_14_d0,
        patch_buffer_3_14_q0,
        patch_buffer_3_15_address0,
        patch_buffer_3_15_ce0,
        patch_buffer_3_15_we0,
        patch_buffer_3_15_d0,
        patch_buffer_3_15_q0,
        patch_buffer_4_0_address0,
        patch_buffer_4_0_ce0,
        patch_buffer_4_0_we0,
        patch_buffer_4_0_d0,
        patch_buffer_4_0_q0,
        patch_buffer_4_1_address0,
        patch_buffer_4_1_ce0,
        patch_buffer_4_1_we0,
        patch_buffer_4_1_d0,
        patch_buffer_4_1_q0,
        patch_buffer_4_2_address0,
        patch_buffer_4_2_ce0,
        patch_buffer_4_2_we0,
        patch_buffer_4_2_d0,
        patch_buffer_4_2_q0,
        patch_buffer_4_3_address0,
        patch_buffer_4_3_ce0,
        patch_buffer_4_3_we0,
        patch_buffer_4_3_d0,
        patch_buffer_4_3_q0,
        patch_buffer_4_4_address0,
        patch_buffer_4_4_ce0,
        patch_buffer_4_4_we0,
        patch_buffer_4_4_d0,
        patch_buffer_4_4_q0,
        patch_buffer_4_5_address0,
        patch_buffer_4_5_ce0,
        patch_buffer_4_5_we0,
        patch_buffer_4_5_d0,
        patch_buffer_4_5_q0,
        patch_buffer_4_6_address0,
        patch_buffer_4_6_ce0,
        patch_buffer_4_6_we0,
        patch_buffer_4_6_d0,
        patch_buffer_4_6_q0,
        patch_buffer_4_7_address0,
        patch_buffer_4_7_ce0,
        patch_buffer_4_7_we0,
        patch_buffer_4_7_d0,
        patch_buffer_4_7_q0,
        patch_buffer_4_8_address0,
        patch_buffer_4_8_ce0,
        patch_buffer_4_8_we0,
        patch_buffer_4_8_d0,
        patch_buffer_4_8_q0,
        patch_buffer_4_9_address0,
        patch_buffer_4_9_ce0,
        patch_buffer_4_9_we0,
        patch_buffer_4_9_d0,
        patch_buffer_4_9_q0,
        patch_buffer_4_10_address0,
        patch_buffer_4_10_ce0,
        patch_buffer_4_10_we0,
        patch_buffer_4_10_d0,
        patch_buffer_4_10_q0,
        patch_buffer_4_11_address0,
        patch_buffer_4_11_ce0,
        patch_buffer_4_11_we0,
        patch_buffer_4_11_d0,
        patch_buffer_4_11_q0,
        patch_buffer_4_12_address0,
        patch_buffer_4_12_ce0,
        patch_buffer_4_12_we0,
        patch_buffer_4_12_d0,
        patch_buffer_4_12_q0,
        patch_buffer_4_13_address0,
        patch_buffer_4_13_ce0,
        patch_buffer_4_13_we0,
        patch_buffer_4_13_d0,
        patch_buffer_4_13_q0,
        patch_buffer_4_14_address0,
        patch_buffer_4_14_ce0,
        patch_buffer_4_14_we0,
        patch_buffer_4_14_d0,
        patch_buffer_4_14_q0,
        patch_buffer_4_15_address0,
        patch_buffer_4_15_ce0,
        patch_buffer_4_15_we0,
        patch_buffer_4_15_d0,
        patch_buffer_4_15_q0,
        patch_buffer_valid_address0,
        patch_buffer_valid_ce0,
        patch_buffer_valid_we0,
        patch_buffer_valid_d0,
        patch_buffer_valid_q0,
        patch_buffer_order_address0,
        patch_buffer_order_ce0,
        patch_buffer_order_we0,
        patch_buffer_order_d0,
        patch_buffer_order_q0,
        num_patches_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 88'd1;
parameter    ap_ST_fsm_state2 = 88'd2;
parameter    ap_ST_fsm_state3 = 88'd4;
parameter    ap_ST_fsm_state4 = 88'd8;
parameter    ap_ST_fsm_state5 = 88'd16;
parameter    ap_ST_fsm_state6 = 88'd32;
parameter    ap_ST_fsm_state7 = 88'd64;
parameter    ap_ST_fsm_state8 = 88'd128;
parameter    ap_ST_fsm_state9 = 88'd256;
parameter    ap_ST_fsm_state10 = 88'd512;
parameter    ap_ST_fsm_state11 = 88'd1024;
parameter    ap_ST_fsm_state12 = 88'd2048;
parameter    ap_ST_fsm_state13 = 88'd4096;
parameter    ap_ST_fsm_state14 = 88'd8192;
parameter    ap_ST_fsm_state15 = 88'd16384;
parameter    ap_ST_fsm_state16 = 88'd32768;
parameter    ap_ST_fsm_state17 = 88'd65536;
parameter    ap_ST_fsm_state18 = 88'd131072;
parameter    ap_ST_fsm_state19 = 88'd262144;
parameter    ap_ST_fsm_state20 = 88'd524288;
parameter    ap_ST_fsm_state21 = 88'd1048576;
parameter    ap_ST_fsm_state22 = 88'd2097152;
parameter    ap_ST_fsm_state23 = 88'd4194304;
parameter    ap_ST_fsm_state24 = 88'd8388608;
parameter    ap_ST_fsm_state25 = 88'd16777216;
parameter    ap_ST_fsm_state26 = 88'd33554432;
parameter    ap_ST_fsm_state27 = 88'd67108864;
parameter    ap_ST_fsm_state28 = 88'd134217728;
parameter    ap_ST_fsm_state29 = 88'd268435456;
parameter    ap_ST_fsm_state30 = 88'd536870912;
parameter    ap_ST_fsm_state31 = 88'd1073741824;
parameter    ap_ST_fsm_state32 = 88'd2147483648;
parameter    ap_ST_fsm_state33 = 88'd4294967296;
parameter    ap_ST_fsm_state34 = 88'd8589934592;
parameter    ap_ST_fsm_state35 = 88'd17179869184;
parameter    ap_ST_fsm_state36 = 88'd34359738368;
parameter    ap_ST_fsm_state37 = 88'd68719476736;
parameter    ap_ST_fsm_state38 = 88'd137438953472;
parameter    ap_ST_fsm_state39 = 88'd274877906944;
parameter    ap_ST_fsm_state40 = 88'd549755813888;
parameter    ap_ST_fsm_state41 = 88'd1099511627776;
parameter    ap_ST_fsm_state42 = 88'd2199023255552;
parameter    ap_ST_fsm_state43 = 88'd4398046511104;
parameter    ap_ST_fsm_state44 = 88'd8796093022208;
parameter    ap_ST_fsm_state45 = 88'd17592186044416;
parameter    ap_ST_fsm_state46 = 88'd35184372088832;
parameter    ap_ST_fsm_state47 = 88'd70368744177664;
parameter    ap_ST_fsm_state48 = 88'd140737488355328;
parameter    ap_ST_fsm_state49 = 88'd281474976710656;
parameter    ap_ST_fsm_state50 = 88'd562949953421312;
parameter    ap_ST_fsm_state51 = 88'd1125899906842624;
parameter    ap_ST_fsm_state52 = 88'd2251799813685248;
parameter    ap_ST_fsm_state53 = 88'd4503599627370496;
parameter    ap_ST_fsm_state54 = 88'd9007199254740992;
parameter    ap_ST_fsm_state55 = 88'd18014398509481984;
parameter    ap_ST_fsm_state56 = 88'd36028797018963968;
parameter    ap_ST_fsm_state57 = 88'd72057594037927936;
parameter    ap_ST_fsm_state58 = 88'd144115188075855872;
parameter    ap_ST_fsm_state59 = 88'd288230376151711744;
parameter    ap_ST_fsm_state60 = 88'd576460752303423488;
parameter    ap_ST_fsm_state61 = 88'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 88'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 88'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 88'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 88'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 88'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 88'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 88'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 88'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 88'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 88'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 88'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 88'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 88'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 88'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 88'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 88'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 88'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 88'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 88'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 88'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 88'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 88'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 88'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 88'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 88'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 88'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 88'd154742504910672534362390528;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] patch_stream_V_din;
input   patch_stream_V_full_n;
output   patch_stream_V_write;
output  [2:0] new_patch_0_address0;
output   new_patch_0_ce0;
input  [95:0] new_patch_0_q0;
output  [2:0] new_patch_0_address1;
output   new_patch_0_ce1;
input  [95:0] new_patch_0_q1;
output  [2:0] new_patch_1_address0;
output   new_patch_1_ce0;
input  [95:0] new_patch_1_q0;
output  [2:0] new_patch_1_address1;
output   new_patch_1_ce1;
input  [95:0] new_patch_1_q1;
output  [2:0] new_patch_2_address0;
output   new_patch_2_ce0;
input  [95:0] new_patch_2_q0;
output  [2:0] new_patch_2_address1;
output   new_patch_2_ce1;
input  [95:0] new_patch_2_q1;
output  [2:0] new_patch_3_address0;
output   new_patch_3_ce0;
input  [95:0] new_patch_3_q0;
output  [2:0] new_patch_3_address1;
output   new_patch_3_ce1;
input  [95:0] new_patch_3_q1;
output  [2:0] new_patch_4_address0;
output   new_patch_4_ce0;
input  [95:0] new_patch_4_q0;
output  [2:0] new_patch_4_address1;
output   new_patch_4_ce1;
input  [95:0] new_patch_4_q1;
output  [2:0] new_patch_5_address0;
output   new_patch_5_ce0;
input  [95:0] new_patch_5_q0;
output  [2:0] new_patch_5_address1;
output   new_patch_5_ce1;
input  [95:0] new_patch_5_q1;
output  [2:0] new_patch_6_address0;
output   new_patch_6_ce0;
input  [95:0] new_patch_6_q0;
output  [2:0] new_patch_6_address1;
output   new_patch_6_ce1;
input  [95:0] new_patch_6_q1;
output  [2:0] new_patch_7_address0;
output   new_patch_7_ce0;
input  [95:0] new_patch_7_q0;
output  [2:0] new_patch_7_address1;
output   new_patch_7_ce1;
input  [95:0] new_patch_7_q1;
output  [2:0] new_patch_8_address0;
output   new_patch_8_ce0;
input  [95:0] new_patch_8_q0;
output  [2:0] new_patch_8_address1;
output   new_patch_8_ce1;
input  [95:0] new_patch_8_q1;
output  [2:0] new_patch_9_address0;
output   new_patch_9_ce0;
input  [95:0] new_patch_9_q0;
output  [2:0] new_patch_9_address1;
output   new_patch_9_ce1;
input  [95:0] new_patch_9_q1;
output  [2:0] new_patch_10_address0;
output   new_patch_10_ce0;
input  [95:0] new_patch_10_q0;
output  [2:0] new_patch_10_address1;
output   new_patch_10_ce1;
input  [95:0] new_patch_10_q1;
output  [2:0] new_patch_11_address0;
output   new_patch_11_ce0;
input  [95:0] new_patch_11_q0;
output  [2:0] new_patch_11_address1;
output   new_patch_11_ce1;
input  [95:0] new_patch_11_q1;
output  [2:0] new_patch_12_address0;
output   new_patch_12_ce0;
input  [95:0] new_patch_12_q0;
output  [2:0] new_patch_12_address1;
output   new_patch_12_ce1;
input  [95:0] new_patch_12_q1;
output  [2:0] new_patch_13_address0;
output   new_patch_13_ce0;
input  [95:0] new_patch_13_q0;
output  [2:0] new_patch_13_address1;
output   new_patch_13_ce1;
input  [95:0] new_patch_13_q1;
output  [2:0] new_patch_14_address0;
output   new_patch_14_ce0;
input  [95:0] new_patch_14_q0;
output  [2:0] new_patch_14_address1;
output   new_patch_14_ce1;
input  [95:0] new_patch_14_q1;
output  [2:0] new_patch_15_address0;
output   new_patch_15_ce0;
input  [95:0] new_patch_15_q0;
output  [2:0] new_patch_15_address1;
output   new_patch_15_ce1;
input  [95:0] new_patch_15_q1;
output  [1:0] patch_buffer_0_0_address0;
output   patch_buffer_0_0_ce0;
output   patch_buffer_0_0_we0;
output  [95:0] patch_buffer_0_0_d0;
input  [95:0] patch_buffer_0_0_q0;
output  [1:0] patch_buffer_0_1_address0;
output   patch_buffer_0_1_ce0;
output   patch_buffer_0_1_we0;
output  [95:0] patch_buffer_0_1_d0;
input  [95:0] patch_buffer_0_1_q0;
output  [1:0] patch_buffer_0_2_address0;
output   patch_buffer_0_2_ce0;
output   patch_buffer_0_2_we0;
output  [95:0] patch_buffer_0_2_d0;
input  [95:0] patch_buffer_0_2_q0;
output  [1:0] patch_buffer_0_3_address0;
output   patch_buffer_0_3_ce0;
output   patch_buffer_0_3_we0;
output  [95:0] patch_buffer_0_3_d0;
input  [95:0] patch_buffer_0_3_q0;
output  [1:0] patch_buffer_0_4_address0;
output   patch_buffer_0_4_ce0;
output   patch_buffer_0_4_we0;
output  [95:0] patch_buffer_0_4_d0;
input  [95:0] patch_buffer_0_4_q0;
output  [1:0] patch_buffer_0_5_address0;
output   patch_buffer_0_5_ce0;
output   patch_buffer_0_5_we0;
output  [95:0] patch_buffer_0_5_d0;
input  [95:0] patch_buffer_0_5_q0;
output  [1:0] patch_buffer_0_6_address0;
output   patch_buffer_0_6_ce0;
output   patch_buffer_0_6_we0;
output  [95:0] patch_buffer_0_6_d0;
input  [95:0] patch_buffer_0_6_q0;
output  [1:0] patch_buffer_0_7_address0;
output   patch_buffer_0_7_ce0;
output   patch_buffer_0_7_we0;
output  [95:0] patch_buffer_0_7_d0;
input  [95:0] patch_buffer_0_7_q0;
output  [1:0] patch_buffer_0_8_address0;
output   patch_buffer_0_8_ce0;
output   patch_buffer_0_8_we0;
output  [95:0] patch_buffer_0_8_d0;
input  [95:0] patch_buffer_0_8_q0;
output  [1:0] patch_buffer_0_9_address0;
output   patch_buffer_0_9_ce0;
output   patch_buffer_0_9_we0;
output  [95:0] patch_buffer_0_9_d0;
input  [95:0] patch_buffer_0_9_q0;
output  [1:0] patch_buffer_0_10_address0;
output   patch_buffer_0_10_ce0;
output   patch_buffer_0_10_we0;
output  [95:0] patch_buffer_0_10_d0;
input  [95:0] patch_buffer_0_10_q0;
output  [1:0] patch_buffer_0_11_address0;
output   patch_buffer_0_11_ce0;
output   patch_buffer_0_11_we0;
output  [95:0] patch_buffer_0_11_d0;
input  [95:0] patch_buffer_0_11_q0;
output  [1:0] patch_buffer_0_12_address0;
output   patch_buffer_0_12_ce0;
output   patch_buffer_0_12_we0;
output  [95:0] patch_buffer_0_12_d0;
input  [95:0] patch_buffer_0_12_q0;
output  [1:0] patch_buffer_0_13_address0;
output   patch_buffer_0_13_ce0;
output   patch_buffer_0_13_we0;
output  [95:0] patch_buffer_0_13_d0;
input  [95:0] patch_buffer_0_13_q0;
output  [1:0] patch_buffer_0_14_address0;
output   patch_buffer_0_14_ce0;
output   patch_buffer_0_14_we0;
output  [95:0] patch_buffer_0_14_d0;
input  [95:0] patch_buffer_0_14_q0;
output  [1:0] patch_buffer_0_15_address0;
output   patch_buffer_0_15_ce0;
output   patch_buffer_0_15_we0;
output  [95:0] patch_buffer_0_15_d0;
input  [95:0] patch_buffer_0_15_q0;
output  [1:0] patch_buffer_1_0_address0;
output   patch_buffer_1_0_ce0;
output   patch_buffer_1_0_we0;
output  [95:0] patch_buffer_1_0_d0;
input  [95:0] patch_buffer_1_0_q0;
output  [1:0] patch_buffer_1_1_address0;
output   patch_buffer_1_1_ce0;
output   patch_buffer_1_1_we0;
output  [95:0] patch_buffer_1_1_d0;
input  [95:0] patch_buffer_1_1_q0;
output  [1:0] patch_buffer_1_2_address0;
output   patch_buffer_1_2_ce0;
output   patch_buffer_1_2_we0;
output  [95:0] patch_buffer_1_2_d0;
input  [95:0] patch_buffer_1_2_q0;
output  [1:0] patch_buffer_1_3_address0;
output   patch_buffer_1_3_ce0;
output   patch_buffer_1_3_we0;
output  [95:0] patch_buffer_1_3_d0;
input  [95:0] patch_buffer_1_3_q0;
output  [1:0] patch_buffer_1_4_address0;
output   patch_buffer_1_4_ce0;
output   patch_buffer_1_4_we0;
output  [95:0] patch_buffer_1_4_d0;
input  [95:0] patch_buffer_1_4_q0;
output  [1:0] patch_buffer_1_5_address0;
output   patch_buffer_1_5_ce0;
output   patch_buffer_1_5_we0;
output  [95:0] patch_buffer_1_5_d0;
input  [95:0] patch_buffer_1_5_q0;
output  [1:0] patch_buffer_1_6_address0;
output   patch_buffer_1_6_ce0;
output   patch_buffer_1_6_we0;
output  [95:0] patch_buffer_1_6_d0;
input  [95:0] patch_buffer_1_6_q0;
output  [1:0] patch_buffer_1_7_address0;
output   patch_buffer_1_7_ce0;
output   patch_buffer_1_7_we0;
output  [95:0] patch_buffer_1_7_d0;
input  [95:0] patch_buffer_1_7_q0;
output  [1:0] patch_buffer_1_8_address0;
output   patch_buffer_1_8_ce0;
output   patch_buffer_1_8_we0;
output  [95:0] patch_buffer_1_8_d0;
input  [95:0] patch_buffer_1_8_q0;
output  [1:0] patch_buffer_1_9_address0;
output   patch_buffer_1_9_ce0;
output   patch_buffer_1_9_we0;
output  [95:0] patch_buffer_1_9_d0;
input  [95:0] patch_buffer_1_9_q0;
output  [1:0] patch_buffer_1_10_address0;
output   patch_buffer_1_10_ce0;
output   patch_buffer_1_10_we0;
output  [95:0] patch_buffer_1_10_d0;
input  [95:0] patch_buffer_1_10_q0;
output  [1:0] patch_buffer_1_11_address0;
output   patch_buffer_1_11_ce0;
output   patch_buffer_1_11_we0;
output  [95:0] patch_buffer_1_11_d0;
input  [95:0] patch_buffer_1_11_q0;
output  [1:0] patch_buffer_1_12_address0;
output   patch_buffer_1_12_ce0;
output   patch_buffer_1_12_we0;
output  [95:0] patch_buffer_1_12_d0;
input  [95:0] patch_buffer_1_12_q0;
output  [1:0] patch_buffer_1_13_address0;
output   patch_buffer_1_13_ce0;
output   patch_buffer_1_13_we0;
output  [95:0] patch_buffer_1_13_d0;
input  [95:0] patch_buffer_1_13_q0;
output  [1:0] patch_buffer_1_14_address0;
output   patch_buffer_1_14_ce0;
output   patch_buffer_1_14_we0;
output  [95:0] patch_buffer_1_14_d0;
input  [95:0] patch_buffer_1_14_q0;
output  [1:0] patch_buffer_1_15_address0;
output   patch_buffer_1_15_ce0;
output   patch_buffer_1_15_we0;
output  [95:0] patch_buffer_1_15_d0;
input  [95:0] patch_buffer_1_15_q0;
output  [1:0] patch_buffer_2_0_address0;
output   patch_buffer_2_0_ce0;
output   patch_buffer_2_0_we0;
output  [95:0] patch_buffer_2_0_d0;
input  [95:0] patch_buffer_2_0_q0;
output  [1:0] patch_buffer_2_1_address0;
output   patch_buffer_2_1_ce0;
output   patch_buffer_2_1_we0;
output  [95:0] patch_buffer_2_1_d0;
input  [95:0] patch_buffer_2_1_q0;
output  [1:0] patch_buffer_2_2_address0;
output   patch_buffer_2_2_ce0;
output   patch_buffer_2_2_we0;
output  [95:0] patch_buffer_2_2_d0;
input  [95:0] patch_buffer_2_2_q0;
output  [1:0] patch_buffer_2_3_address0;
output   patch_buffer_2_3_ce0;
output   patch_buffer_2_3_we0;
output  [95:0] patch_buffer_2_3_d0;
input  [95:0] patch_buffer_2_3_q0;
output  [1:0] patch_buffer_2_4_address0;
output   patch_buffer_2_4_ce0;
output   patch_buffer_2_4_we0;
output  [95:0] patch_buffer_2_4_d0;
input  [95:0] patch_buffer_2_4_q0;
output  [1:0] patch_buffer_2_5_address0;
output   patch_buffer_2_5_ce0;
output   patch_buffer_2_5_we0;
output  [95:0] patch_buffer_2_5_d0;
input  [95:0] patch_buffer_2_5_q0;
output  [1:0] patch_buffer_2_6_address0;
output   patch_buffer_2_6_ce0;
output   patch_buffer_2_6_we0;
output  [95:0] patch_buffer_2_6_d0;
input  [95:0] patch_buffer_2_6_q0;
output  [1:0] patch_buffer_2_7_address0;
output   patch_buffer_2_7_ce0;
output   patch_buffer_2_7_we0;
output  [95:0] patch_buffer_2_7_d0;
input  [95:0] patch_buffer_2_7_q0;
output  [1:0] patch_buffer_2_8_address0;
output   patch_buffer_2_8_ce0;
output   patch_buffer_2_8_we0;
output  [95:0] patch_buffer_2_8_d0;
input  [95:0] patch_buffer_2_8_q0;
output  [1:0] patch_buffer_2_9_address0;
output   patch_buffer_2_9_ce0;
output   patch_buffer_2_9_we0;
output  [95:0] patch_buffer_2_9_d0;
input  [95:0] patch_buffer_2_9_q0;
output  [1:0] patch_buffer_2_10_address0;
output   patch_buffer_2_10_ce0;
output   patch_buffer_2_10_we0;
output  [95:0] patch_buffer_2_10_d0;
input  [95:0] patch_buffer_2_10_q0;
output  [1:0] patch_buffer_2_11_address0;
output   patch_buffer_2_11_ce0;
output   patch_buffer_2_11_we0;
output  [95:0] patch_buffer_2_11_d0;
input  [95:0] patch_buffer_2_11_q0;
output  [1:0] patch_buffer_2_12_address0;
output   patch_buffer_2_12_ce0;
output   patch_buffer_2_12_we0;
output  [95:0] patch_buffer_2_12_d0;
input  [95:0] patch_buffer_2_12_q0;
output  [1:0] patch_buffer_2_13_address0;
output   patch_buffer_2_13_ce0;
output   patch_buffer_2_13_we0;
output  [95:0] patch_buffer_2_13_d0;
input  [95:0] patch_buffer_2_13_q0;
output  [1:0] patch_buffer_2_14_address0;
output   patch_buffer_2_14_ce0;
output   patch_buffer_2_14_we0;
output  [95:0] patch_buffer_2_14_d0;
input  [95:0] patch_buffer_2_14_q0;
output  [1:0] patch_buffer_2_15_address0;
output   patch_buffer_2_15_ce0;
output   patch_buffer_2_15_we0;
output  [95:0] patch_buffer_2_15_d0;
input  [95:0] patch_buffer_2_15_q0;
output  [1:0] patch_buffer_3_0_address0;
output   patch_buffer_3_0_ce0;
output   patch_buffer_3_0_we0;
output  [95:0] patch_buffer_3_0_d0;
input  [95:0] patch_buffer_3_0_q0;
output  [1:0] patch_buffer_3_1_address0;
output   patch_buffer_3_1_ce0;
output   patch_buffer_3_1_we0;
output  [95:0] patch_buffer_3_1_d0;
input  [95:0] patch_buffer_3_1_q0;
output  [1:0] patch_buffer_3_2_address0;
output   patch_buffer_3_2_ce0;
output   patch_buffer_3_2_we0;
output  [95:0] patch_buffer_3_2_d0;
input  [95:0] patch_buffer_3_2_q0;
output  [1:0] patch_buffer_3_3_address0;
output   patch_buffer_3_3_ce0;
output   patch_buffer_3_3_we0;
output  [95:0] patch_buffer_3_3_d0;
input  [95:0] patch_buffer_3_3_q0;
output  [1:0] patch_buffer_3_4_address0;
output   patch_buffer_3_4_ce0;
output   patch_buffer_3_4_we0;
output  [95:0] patch_buffer_3_4_d0;
input  [95:0] patch_buffer_3_4_q0;
output  [1:0] patch_buffer_3_5_address0;
output   patch_buffer_3_5_ce0;
output   patch_buffer_3_5_we0;
output  [95:0] patch_buffer_3_5_d0;
input  [95:0] patch_buffer_3_5_q0;
output  [1:0] patch_buffer_3_6_address0;
output   patch_buffer_3_6_ce0;
output   patch_buffer_3_6_we0;
output  [95:0] patch_buffer_3_6_d0;
input  [95:0] patch_buffer_3_6_q0;
output  [1:0] patch_buffer_3_7_address0;
output   patch_buffer_3_7_ce0;
output   patch_buffer_3_7_we0;
output  [95:0] patch_buffer_3_7_d0;
input  [95:0] patch_buffer_3_7_q0;
output  [1:0] patch_buffer_3_8_address0;
output   patch_buffer_3_8_ce0;
output   patch_buffer_3_8_we0;
output  [95:0] patch_buffer_3_8_d0;
input  [95:0] patch_buffer_3_8_q0;
output  [1:0] patch_buffer_3_9_address0;
output   patch_buffer_3_9_ce0;
output   patch_buffer_3_9_we0;
output  [95:0] patch_buffer_3_9_d0;
input  [95:0] patch_buffer_3_9_q0;
output  [1:0] patch_buffer_3_10_address0;
output   patch_buffer_3_10_ce0;
output   patch_buffer_3_10_we0;
output  [95:0] patch_buffer_3_10_d0;
input  [95:0] patch_buffer_3_10_q0;
output  [1:0] patch_buffer_3_11_address0;
output   patch_buffer_3_11_ce0;
output   patch_buffer_3_11_we0;
output  [95:0] patch_buffer_3_11_d0;
input  [95:0] patch_buffer_3_11_q0;
output  [1:0] patch_buffer_3_12_address0;
output   patch_buffer_3_12_ce0;
output   patch_buffer_3_12_we0;
output  [95:0] patch_buffer_3_12_d0;
input  [95:0] patch_buffer_3_12_q0;
output  [1:0] patch_buffer_3_13_address0;
output   patch_buffer_3_13_ce0;
output   patch_buffer_3_13_we0;
output  [95:0] patch_buffer_3_13_d0;
input  [95:0] patch_buffer_3_13_q0;
output  [1:0] patch_buffer_3_14_address0;
output   patch_buffer_3_14_ce0;
output   patch_buffer_3_14_we0;
output  [95:0] patch_buffer_3_14_d0;
input  [95:0] patch_buffer_3_14_q0;
output  [1:0] patch_buffer_3_15_address0;
output   patch_buffer_3_15_ce0;
output   patch_buffer_3_15_we0;
output  [95:0] patch_buffer_3_15_d0;
input  [95:0] patch_buffer_3_15_q0;
output  [1:0] patch_buffer_4_0_address0;
output   patch_buffer_4_0_ce0;
output   patch_buffer_4_0_we0;
output  [95:0] patch_buffer_4_0_d0;
input  [95:0] patch_buffer_4_0_q0;
output  [1:0] patch_buffer_4_1_address0;
output   patch_buffer_4_1_ce0;
output   patch_buffer_4_1_we0;
output  [95:0] patch_buffer_4_1_d0;
input  [95:0] patch_buffer_4_1_q0;
output  [1:0] patch_buffer_4_2_address0;
output   patch_buffer_4_2_ce0;
output   patch_buffer_4_2_we0;
output  [95:0] patch_buffer_4_2_d0;
input  [95:0] patch_buffer_4_2_q0;
output  [1:0] patch_buffer_4_3_address0;
output   patch_buffer_4_3_ce0;
output   patch_buffer_4_3_we0;
output  [95:0] patch_buffer_4_3_d0;
input  [95:0] patch_buffer_4_3_q0;
output  [1:0] patch_buffer_4_4_address0;
output   patch_buffer_4_4_ce0;
output   patch_buffer_4_4_we0;
output  [95:0] patch_buffer_4_4_d0;
input  [95:0] patch_buffer_4_4_q0;
output  [1:0] patch_buffer_4_5_address0;
output   patch_buffer_4_5_ce0;
output   patch_buffer_4_5_we0;
output  [95:0] patch_buffer_4_5_d0;
input  [95:0] patch_buffer_4_5_q0;
output  [1:0] patch_buffer_4_6_address0;
output   patch_buffer_4_6_ce0;
output   patch_buffer_4_6_we0;
output  [95:0] patch_buffer_4_6_d0;
input  [95:0] patch_buffer_4_6_q0;
output  [1:0] patch_buffer_4_7_address0;
output   patch_buffer_4_7_ce0;
output   patch_buffer_4_7_we0;
output  [95:0] patch_buffer_4_7_d0;
input  [95:0] patch_buffer_4_7_q0;
output  [1:0] patch_buffer_4_8_address0;
output   patch_buffer_4_8_ce0;
output   patch_buffer_4_8_we0;
output  [95:0] patch_buffer_4_8_d0;
input  [95:0] patch_buffer_4_8_q0;
output  [1:0] patch_buffer_4_9_address0;
output   patch_buffer_4_9_ce0;
output   patch_buffer_4_9_we0;
output  [95:0] patch_buffer_4_9_d0;
input  [95:0] patch_buffer_4_9_q0;
output  [1:0] patch_buffer_4_10_address0;
output   patch_buffer_4_10_ce0;
output   patch_buffer_4_10_we0;
output  [95:0] patch_buffer_4_10_d0;
input  [95:0] patch_buffer_4_10_q0;
output  [1:0] patch_buffer_4_11_address0;
output   patch_buffer_4_11_ce0;
output   patch_buffer_4_11_we0;
output  [95:0] patch_buffer_4_11_d0;
input  [95:0] patch_buffer_4_11_q0;
output  [1:0] patch_buffer_4_12_address0;
output   patch_buffer_4_12_ce0;
output   patch_buffer_4_12_we0;
output  [95:0] patch_buffer_4_12_d0;
input  [95:0] patch_buffer_4_12_q0;
output  [1:0] patch_buffer_4_13_address0;
output   patch_buffer_4_13_ce0;
output   patch_buffer_4_13_we0;
output  [95:0] patch_buffer_4_13_d0;
input  [95:0] patch_buffer_4_13_q0;
output  [1:0] patch_buffer_4_14_address0;
output   patch_buffer_4_14_ce0;
output   patch_buffer_4_14_we0;
output  [95:0] patch_buffer_4_14_d0;
input  [95:0] patch_buffer_4_14_q0;
output  [1:0] patch_buffer_4_15_address0;
output   patch_buffer_4_15_ce0;
output   patch_buffer_4_15_we0;
output  [95:0] patch_buffer_4_15_d0;
input  [95:0] patch_buffer_4_15_q0;
output  [1:0] patch_buffer_valid_address0;
output   patch_buffer_valid_ce0;
output   patch_buffer_valid_we0;
output  [0:0] patch_buffer_valid_d0;
input  [0:0] patch_buffer_valid_q0;
output  [1:0] patch_buffer_order_address0;
output   patch_buffer_order_ce0;
output   patch_buffer_order_we0;
output  [31:0] patch_buffer_order_d0;
input  [31:0] patch_buffer_order_q0;
input  [31:0] num_patches_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[95:0] patch_stream_V_din;
reg patch_stream_V_write;
reg[2:0] new_patch_0_address0;
reg new_patch_0_ce0;
reg[2:0] new_patch_0_address1;
reg new_patch_0_ce1;
reg[2:0] new_patch_1_address0;
reg new_patch_1_ce0;
reg[2:0] new_patch_1_address1;
reg new_patch_1_ce1;
reg[2:0] new_patch_2_address0;
reg new_patch_2_ce0;
reg[2:0] new_patch_2_address1;
reg new_patch_2_ce1;
reg[2:0] new_patch_3_address0;
reg new_patch_3_ce0;
reg[2:0] new_patch_3_address1;
reg new_patch_3_ce1;
reg[2:0] new_patch_4_address0;
reg new_patch_4_ce0;
reg[2:0] new_patch_4_address1;
reg new_patch_4_ce1;
reg[2:0] new_patch_5_address0;
reg new_patch_5_ce0;
reg[2:0] new_patch_5_address1;
reg new_patch_5_ce1;
reg[2:0] new_patch_6_address0;
reg new_patch_6_ce0;
reg[2:0] new_patch_6_address1;
reg new_patch_6_ce1;
reg[2:0] new_patch_7_address0;
reg new_patch_7_ce0;
reg[2:0] new_patch_7_address1;
reg new_patch_7_ce1;
reg[2:0] new_patch_8_address0;
reg new_patch_8_ce0;
reg[2:0] new_patch_8_address1;
reg new_patch_8_ce1;
reg[2:0] new_patch_9_address0;
reg new_patch_9_ce0;
reg[2:0] new_patch_9_address1;
reg new_patch_9_ce1;
reg[2:0] new_patch_10_address0;
reg new_patch_10_ce0;
reg[2:0] new_patch_10_address1;
reg new_patch_10_ce1;
reg[2:0] new_patch_11_address0;
reg new_patch_11_ce0;
reg[2:0] new_patch_11_address1;
reg new_patch_11_ce1;
reg[2:0] new_patch_12_address0;
reg new_patch_12_ce0;
reg[2:0] new_patch_12_address1;
reg new_patch_12_ce1;
reg[2:0] new_patch_13_address0;
reg new_patch_13_ce0;
reg[2:0] new_patch_13_address1;
reg new_patch_13_ce1;
reg[2:0] new_patch_14_address0;
reg new_patch_14_ce0;
reg[2:0] new_patch_14_address1;
reg new_patch_14_ce1;
reg[2:0] new_patch_15_address0;
reg new_patch_15_ce0;
reg[2:0] new_patch_15_address1;
reg new_patch_15_ce1;
reg[1:0] patch_buffer_0_0_address0;
reg patch_buffer_0_0_ce0;
reg patch_buffer_0_0_we0;
reg[1:0] patch_buffer_0_1_address0;
reg patch_buffer_0_1_ce0;
reg patch_buffer_0_1_we0;
reg[1:0] patch_buffer_0_2_address0;
reg patch_buffer_0_2_ce0;
reg patch_buffer_0_2_we0;
reg[1:0] patch_buffer_0_3_address0;
reg patch_buffer_0_3_ce0;
reg patch_buffer_0_3_we0;
reg[1:0] patch_buffer_0_4_address0;
reg patch_buffer_0_4_ce0;
reg patch_buffer_0_4_we0;
reg[1:0] patch_buffer_0_5_address0;
reg patch_buffer_0_5_ce0;
reg patch_buffer_0_5_we0;
reg[1:0] patch_buffer_0_6_address0;
reg patch_buffer_0_6_ce0;
reg patch_buffer_0_6_we0;
reg[1:0] patch_buffer_0_7_address0;
reg patch_buffer_0_7_ce0;
reg patch_buffer_0_7_we0;
reg[1:0] patch_buffer_0_8_address0;
reg patch_buffer_0_8_ce0;
reg patch_buffer_0_8_we0;
reg[1:0] patch_buffer_0_9_address0;
reg patch_buffer_0_9_ce0;
reg patch_buffer_0_9_we0;
reg[1:0] patch_buffer_0_10_address0;
reg patch_buffer_0_10_ce0;
reg patch_buffer_0_10_we0;
reg[1:0] patch_buffer_0_11_address0;
reg patch_buffer_0_11_ce0;
reg patch_buffer_0_11_we0;
reg[1:0] patch_buffer_0_12_address0;
reg patch_buffer_0_12_ce0;
reg patch_buffer_0_12_we0;
reg[1:0] patch_buffer_0_13_address0;
reg patch_buffer_0_13_ce0;
reg patch_buffer_0_13_we0;
reg[1:0] patch_buffer_0_14_address0;
reg patch_buffer_0_14_ce0;
reg patch_buffer_0_14_we0;
reg[1:0] patch_buffer_0_15_address0;
reg patch_buffer_0_15_ce0;
reg patch_buffer_0_15_we0;
reg[1:0] patch_buffer_1_0_address0;
reg patch_buffer_1_0_ce0;
reg patch_buffer_1_0_we0;
reg[1:0] patch_buffer_1_1_address0;
reg patch_buffer_1_1_ce0;
reg patch_buffer_1_1_we0;
reg[1:0] patch_buffer_1_2_address0;
reg patch_buffer_1_2_ce0;
reg patch_buffer_1_2_we0;
reg[1:0] patch_buffer_1_3_address0;
reg patch_buffer_1_3_ce0;
reg patch_buffer_1_3_we0;
reg[1:0] patch_buffer_1_4_address0;
reg patch_buffer_1_4_ce0;
reg patch_buffer_1_4_we0;
reg[1:0] patch_buffer_1_5_address0;
reg patch_buffer_1_5_ce0;
reg patch_buffer_1_5_we0;
reg[1:0] patch_buffer_1_6_address0;
reg patch_buffer_1_6_ce0;
reg patch_buffer_1_6_we0;
reg[1:0] patch_buffer_1_7_address0;
reg patch_buffer_1_7_ce0;
reg patch_buffer_1_7_we0;
reg[1:0] patch_buffer_1_8_address0;
reg patch_buffer_1_8_ce0;
reg patch_buffer_1_8_we0;
reg[1:0] patch_buffer_1_9_address0;
reg patch_buffer_1_9_ce0;
reg patch_buffer_1_9_we0;
reg[1:0] patch_buffer_1_10_address0;
reg patch_buffer_1_10_ce0;
reg patch_buffer_1_10_we0;
reg[1:0] patch_buffer_1_11_address0;
reg patch_buffer_1_11_ce0;
reg patch_buffer_1_11_we0;
reg[1:0] patch_buffer_1_12_address0;
reg patch_buffer_1_12_ce0;
reg patch_buffer_1_12_we0;
reg[1:0] patch_buffer_1_13_address0;
reg patch_buffer_1_13_ce0;
reg patch_buffer_1_13_we0;
reg[1:0] patch_buffer_1_14_address0;
reg patch_buffer_1_14_ce0;
reg patch_buffer_1_14_we0;
reg[1:0] patch_buffer_1_15_address0;
reg patch_buffer_1_15_ce0;
reg patch_buffer_1_15_we0;
reg[1:0] patch_buffer_2_0_address0;
reg patch_buffer_2_0_ce0;
reg patch_buffer_2_0_we0;
reg[1:0] patch_buffer_2_1_address0;
reg patch_buffer_2_1_ce0;
reg patch_buffer_2_1_we0;
reg[1:0] patch_buffer_2_2_address0;
reg patch_buffer_2_2_ce0;
reg patch_buffer_2_2_we0;
reg[1:0] patch_buffer_2_3_address0;
reg patch_buffer_2_3_ce0;
reg patch_buffer_2_3_we0;
reg[1:0] patch_buffer_2_4_address0;
reg patch_buffer_2_4_ce0;
reg patch_buffer_2_4_we0;
reg[1:0] patch_buffer_2_5_address0;
reg patch_buffer_2_5_ce0;
reg patch_buffer_2_5_we0;
reg[1:0] patch_buffer_2_6_address0;
reg patch_buffer_2_6_ce0;
reg patch_buffer_2_6_we0;
reg[1:0] patch_buffer_2_7_address0;
reg patch_buffer_2_7_ce0;
reg patch_buffer_2_7_we0;
reg[1:0] patch_buffer_2_8_address0;
reg patch_buffer_2_8_ce0;
reg patch_buffer_2_8_we0;
reg[1:0] patch_buffer_2_9_address0;
reg patch_buffer_2_9_ce0;
reg patch_buffer_2_9_we0;
reg[1:0] patch_buffer_2_10_address0;
reg patch_buffer_2_10_ce0;
reg patch_buffer_2_10_we0;
reg[1:0] patch_buffer_2_11_address0;
reg patch_buffer_2_11_ce0;
reg patch_buffer_2_11_we0;
reg[1:0] patch_buffer_2_12_address0;
reg patch_buffer_2_12_ce0;
reg patch_buffer_2_12_we0;
reg[1:0] patch_buffer_2_13_address0;
reg patch_buffer_2_13_ce0;
reg patch_buffer_2_13_we0;
reg[1:0] patch_buffer_2_14_address0;
reg patch_buffer_2_14_ce0;
reg patch_buffer_2_14_we0;
reg[1:0] patch_buffer_2_15_address0;
reg patch_buffer_2_15_ce0;
reg patch_buffer_2_15_we0;
reg[1:0] patch_buffer_3_0_address0;
reg patch_buffer_3_0_ce0;
reg patch_buffer_3_0_we0;
reg[1:0] patch_buffer_3_1_address0;
reg patch_buffer_3_1_ce0;
reg patch_buffer_3_1_we0;
reg[1:0] patch_buffer_3_2_address0;
reg patch_buffer_3_2_ce0;
reg patch_buffer_3_2_we0;
reg[1:0] patch_buffer_3_3_address0;
reg patch_buffer_3_3_ce0;
reg patch_buffer_3_3_we0;
reg[1:0] patch_buffer_3_4_address0;
reg patch_buffer_3_4_ce0;
reg patch_buffer_3_4_we0;
reg[1:0] patch_buffer_3_5_address0;
reg patch_buffer_3_5_ce0;
reg patch_buffer_3_5_we0;
reg[1:0] patch_buffer_3_6_address0;
reg patch_buffer_3_6_ce0;
reg patch_buffer_3_6_we0;
reg[1:0] patch_buffer_3_7_address0;
reg patch_buffer_3_7_ce0;
reg patch_buffer_3_7_we0;
reg[1:0] patch_buffer_3_8_address0;
reg patch_buffer_3_8_ce0;
reg patch_buffer_3_8_we0;
reg[1:0] patch_buffer_3_9_address0;
reg patch_buffer_3_9_ce0;
reg patch_buffer_3_9_we0;
reg[1:0] patch_buffer_3_10_address0;
reg patch_buffer_3_10_ce0;
reg patch_buffer_3_10_we0;
reg[1:0] patch_buffer_3_11_address0;
reg patch_buffer_3_11_ce0;
reg patch_buffer_3_11_we0;
reg[1:0] patch_buffer_3_12_address0;
reg patch_buffer_3_12_ce0;
reg patch_buffer_3_12_we0;
reg[1:0] patch_buffer_3_13_address0;
reg patch_buffer_3_13_ce0;
reg patch_buffer_3_13_we0;
reg[1:0] patch_buffer_3_14_address0;
reg patch_buffer_3_14_ce0;
reg patch_buffer_3_14_we0;
reg[1:0] patch_buffer_3_15_address0;
reg patch_buffer_3_15_ce0;
reg patch_buffer_3_15_we0;
reg[1:0] patch_buffer_4_0_address0;
reg patch_buffer_4_0_ce0;
reg patch_buffer_4_0_we0;
reg[1:0] patch_buffer_4_1_address0;
reg patch_buffer_4_1_ce0;
reg patch_buffer_4_1_we0;
reg[1:0] patch_buffer_4_2_address0;
reg patch_buffer_4_2_ce0;
reg patch_buffer_4_2_we0;
reg[1:0] patch_buffer_4_3_address0;
reg patch_buffer_4_3_ce0;
reg patch_buffer_4_3_we0;
reg[1:0] patch_buffer_4_4_address0;
reg patch_buffer_4_4_ce0;
reg patch_buffer_4_4_we0;
reg[1:0] patch_buffer_4_5_address0;
reg patch_buffer_4_5_ce0;
reg patch_buffer_4_5_we0;
reg[1:0] patch_buffer_4_6_address0;
reg patch_buffer_4_6_ce0;
reg patch_buffer_4_6_we0;
reg[1:0] patch_buffer_4_7_address0;
reg patch_buffer_4_7_ce0;
reg patch_buffer_4_7_we0;
reg[1:0] patch_buffer_4_8_address0;
reg patch_buffer_4_8_ce0;
reg patch_buffer_4_8_we0;
reg[1:0] patch_buffer_4_9_address0;
reg patch_buffer_4_9_ce0;
reg patch_buffer_4_9_we0;
reg[1:0] patch_buffer_4_10_address0;
reg patch_buffer_4_10_ce0;
reg patch_buffer_4_10_we0;
reg[1:0] patch_buffer_4_11_address0;
reg patch_buffer_4_11_ce0;
reg patch_buffer_4_11_we0;
reg[1:0] patch_buffer_4_12_address0;
reg patch_buffer_4_12_ce0;
reg patch_buffer_4_12_we0;
reg[1:0] patch_buffer_4_13_address0;
reg patch_buffer_4_13_ce0;
reg patch_buffer_4_13_we0;
reg[1:0] patch_buffer_4_14_address0;
reg patch_buffer_4_14_ce0;
reg patch_buffer_4_14_we0;
reg[1:0] patch_buffer_4_15_address0;
reg patch_buffer_4_15_ce0;
reg patch_buffer_4_15_we0;
reg[1:0] patch_buffer_valid_address0;
reg patch_buffer_valid_ce0;
reg patch_buffer_valid_we0;
reg[1:0] patch_buffer_order_address0;
reg patch_buffer_order_ce0;
reg patch_buffer_order_we0;
reg[31:0] patch_buffer_order_d0;

(* fsm_encoding = "none" *) reg   [87:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    patch_stream_V_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
reg   [0:0] patch_buffer_valid_load_reg_3115;
reg   [0:0] patch_buffer_valid_load_1_reg_3124;
reg   [0:0] patch_buffer_valid_load_2_reg_3133;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [31:0] next_patch_index_reg_3137;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln52_fu_3041_p1;
reg   [63:0] zext_ln52_reg_3142;
wire    ap_CS_fsm_state86;
wire   [63:0] zext_ln69_fu_3046_p1;
reg   [63:0] zext_ln69_reg_3790;
wire    ap_CS_fsm_state87;
reg   [31:0] next_patch_index_1_reg_3020;
reg    ap_predicate_op426_write_state85;
reg    ap_block_state85;
wire    ap_CS_fsm_state88;
wire   [31:0] add_ln83_fu_3083_p2;
reg   [87:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 88'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((patch_buffer_valid_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        next_patch_index_1_reg_3020 <= 32'd2;
    end else if (((patch_buffer_valid_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        next_patch_index_1_reg_3020 <= 32'd1;
    end else if (((patch_buffer_valid_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        next_patch_index_1_reg_3020 <= 32'd0;
    end else if ((~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85) & (patch_buffer_valid_load_2_reg_3133 == 1'd1) & (patch_buffer_valid_load_1_reg_3124 == 1'd1) & (patch_buffer_valid_load_reg_3115 == 1'd1))) begin
        next_patch_index_1_reg_3020 <= next_patch_index_reg_3137;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        next_patch_index_reg_3137 <= patch_buffer_order_q0;
        zext_ln52_reg_3142[31 : 0] <= zext_ln52_fu_3041_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        patch_buffer_valid_load_1_reg_3124 <= patch_buffer_valid_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_buffer_valid_load_2_reg_3133 <= patch_buffer_valid_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patch_buffer_valid_load_reg_3115 <= patch_buffer_valid_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        zext_ln69_reg_3790[31 : 0] <= zext_ln69_fu_3046_p1[31 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_0_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_0_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_0_address0 = 64'd1;
    end else begin
        new_patch_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_0_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_0_address1 = 64'd0;
    end else begin
        new_patch_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_0_ce0 = 1'b1;
    end else begin
        new_patch_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_0_ce1 = 1'b1;
    end else begin
        new_patch_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_10_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_10_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_10_address0 = 64'd1;
    end else begin
        new_patch_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_10_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_10_address1 = 64'd0;
    end else begin
        new_patch_10_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_10_ce0 = 1'b1;
    end else begin
        new_patch_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_10_ce1 = 1'b1;
    end else begin
        new_patch_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_11_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_11_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_11_address0 = 64'd1;
    end else begin
        new_patch_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_11_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_11_address1 = 64'd0;
    end else begin
        new_patch_11_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_11_ce0 = 1'b1;
    end else begin
        new_patch_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_11_ce1 = 1'b1;
    end else begin
        new_patch_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_12_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_12_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_12_address0 = 64'd1;
    end else begin
        new_patch_12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_12_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_12_address1 = 64'd0;
    end else begin
        new_patch_12_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_12_ce0 = 1'b1;
    end else begin
        new_patch_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_12_ce1 = 1'b1;
    end else begin
        new_patch_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_13_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_13_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_13_address0 = 64'd1;
    end else begin
        new_patch_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_13_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_13_address1 = 64'd0;
    end else begin
        new_patch_13_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_13_ce0 = 1'b1;
    end else begin
        new_patch_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_13_ce1 = 1'b1;
    end else begin
        new_patch_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_14_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_14_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_14_address0 = 64'd1;
    end else begin
        new_patch_14_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_14_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_14_address1 = 64'd0;
    end else begin
        new_patch_14_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_14_ce0 = 1'b1;
    end else begin
        new_patch_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_14_ce1 = 1'b1;
    end else begin
        new_patch_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_15_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_15_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_15_address0 = 64'd1;
    end else begin
        new_patch_15_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_15_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_15_address1 = 64'd0;
    end else begin
        new_patch_15_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_15_ce0 = 1'b1;
    end else begin
        new_patch_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_15_ce1 = 1'b1;
    end else begin
        new_patch_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_1_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_1_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_1_address0 = 64'd1;
    end else begin
        new_patch_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_1_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_1_address1 = 64'd0;
    end else begin
        new_patch_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_1_ce0 = 1'b1;
    end else begin
        new_patch_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_1_ce1 = 1'b1;
    end else begin
        new_patch_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_2_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_2_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_2_address0 = 64'd1;
    end else begin
        new_patch_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_2_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_2_address1 = 64'd0;
    end else begin
        new_patch_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_2_ce0 = 1'b1;
    end else begin
        new_patch_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_2_ce1 = 1'b1;
    end else begin
        new_patch_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_3_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_3_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_3_address0 = 64'd1;
    end else begin
        new_patch_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_3_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_3_address1 = 64'd0;
    end else begin
        new_patch_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_3_ce0 = 1'b1;
    end else begin
        new_patch_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_3_ce1 = 1'b1;
    end else begin
        new_patch_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_4_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_4_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_4_address0 = 64'd1;
    end else begin
        new_patch_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_4_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_4_address1 = 64'd0;
    end else begin
        new_patch_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_4_ce0 = 1'b1;
    end else begin
        new_patch_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_4_ce1 = 1'b1;
    end else begin
        new_patch_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_5_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_5_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_5_address0 = 64'd1;
    end else begin
        new_patch_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_5_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_5_address1 = 64'd0;
    end else begin
        new_patch_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_5_ce0 = 1'b1;
    end else begin
        new_patch_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_5_ce1 = 1'b1;
    end else begin
        new_patch_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_6_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_6_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_6_address0 = 64'd1;
    end else begin
        new_patch_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_6_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_6_address1 = 64'd0;
    end else begin
        new_patch_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_6_ce0 = 1'b1;
    end else begin
        new_patch_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_6_ce1 = 1'b1;
    end else begin
        new_patch_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_7_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_7_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_7_address0 = 64'd1;
    end else begin
        new_patch_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_7_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_7_address1 = 64'd0;
    end else begin
        new_patch_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_7_ce0 = 1'b1;
    end else begin
        new_patch_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_7_ce1 = 1'b1;
    end else begin
        new_patch_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_8_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_8_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_8_address0 = 64'd1;
    end else begin
        new_patch_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_8_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_8_address1 = 64'd0;
    end else begin
        new_patch_8_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_8_ce0 = 1'b1;
    end else begin
        new_patch_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_8_ce1 = 1'b1;
    end else begin
        new_patch_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        new_patch_9_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_9_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_9_address0 = 64'd1;
    end else begin
        new_patch_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        new_patch_9_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        new_patch_9_address1 = 64'd0;
    end else begin
        new_patch_9_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_9_ce0 = 1'b1;
    end else begin
        new_patch_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85)))) begin
        new_patch_9_ce1 = 1'b1;
    end else begin
        new_patch_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_0_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        patch_buffer_0_0_address0 = zext_ln52_fu_3041_p1;
    end else begin
        patch_buffer_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state5))) begin
        patch_buffer_0_0_ce0 = 1'b1;
    end else begin
        patch_buffer_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_0_we0 = 1'b1;
    end else begin
        patch_buffer_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_10_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        patch_buffer_0_10_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state15) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_10_ce0 = 1'b1;
    end else begin
        patch_buffer_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_10_we0 = 1'b1;
    end else begin
        patch_buffer_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_11_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        patch_buffer_0_11_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state16) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_11_ce0 = 1'b1;
    end else begin
        patch_buffer_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_11_we0 = 1'b1;
    end else begin
        patch_buffer_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_12_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        patch_buffer_0_12_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state17) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_12_ce0 = 1'b1;
    end else begin
        patch_buffer_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_12_we0 = 1'b1;
    end else begin
        patch_buffer_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_13_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        patch_buffer_0_13_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state18) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_13_ce0 = 1'b1;
    end else begin
        patch_buffer_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_13_we0 = 1'b1;
    end else begin
        patch_buffer_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_14_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        patch_buffer_0_14_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state19) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_14_ce0 = 1'b1;
    end else begin
        patch_buffer_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_14_we0 = 1'b1;
    end else begin
        patch_buffer_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_15_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        patch_buffer_0_15_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state20) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_15_ce0 = 1'b1;
    end else begin
        patch_buffer_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_15_we0 = 1'b1;
    end else begin
        patch_buffer_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_1_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_buffer_0_1_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state6) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_1_ce0 = 1'b1;
    end else begin
        patch_buffer_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_1_we0 = 1'b1;
    end else begin
        patch_buffer_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_2_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        patch_buffer_0_2_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state7) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_2_ce0 = 1'b1;
    end else begin
        patch_buffer_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_2_we0 = 1'b1;
    end else begin
        patch_buffer_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_3_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        patch_buffer_0_3_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state8) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_3_ce0 = 1'b1;
    end else begin
        patch_buffer_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_3_we0 = 1'b1;
    end else begin
        patch_buffer_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_4_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        patch_buffer_0_4_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state9) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_4_ce0 = 1'b1;
    end else begin
        patch_buffer_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_4_we0 = 1'b1;
    end else begin
        patch_buffer_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_5_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        patch_buffer_0_5_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state10) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_5_ce0 = 1'b1;
    end else begin
        patch_buffer_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_5_we0 = 1'b1;
    end else begin
        patch_buffer_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_6_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        patch_buffer_0_6_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state11) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_6_ce0 = 1'b1;
    end else begin
        patch_buffer_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_6_we0 = 1'b1;
    end else begin
        patch_buffer_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_7_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        patch_buffer_0_7_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state12) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_7_ce0 = 1'b1;
    end else begin
        patch_buffer_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_7_we0 = 1'b1;
    end else begin
        patch_buffer_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_8_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        patch_buffer_0_8_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state13) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_8_ce0 = 1'b1;
    end else begin
        patch_buffer_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_8_we0 = 1'b1;
    end else begin
        patch_buffer_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_9_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        patch_buffer_0_9_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_0_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state14) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_0_9_ce0 = 1'b1;
    end else begin
        patch_buffer_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_0_9_we0 = 1'b1;
    end else begin
        patch_buffer_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_0_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        patch_buffer_1_0_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state21) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_0_ce0 = 1'b1;
    end else begin
        patch_buffer_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_0_we0 = 1'b1;
    end else begin
        patch_buffer_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_10_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        patch_buffer_1_10_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state31) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_10_ce0 = 1'b1;
    end else begin
        patch_buffer_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_10_we0 = 1'b1;
    end else begin
        patch_buffer_1_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_11_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        patch_buffer_1_11_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state32) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_11_ce0 = 1'b1;
    end else begin
        patch_buffer_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_11_we0 = 1'b1;
    end else begin
        patch_buffer_1_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_12_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        patch_buffer_1_12_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state33) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_12_ce0 = 1'b1;
    end else begin
        patch_buffer_1_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_12_we0 = 1'b1;
    end else begin
        patch_buffer_1_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_13_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        patch_buffer_1_13_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state34) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_13_ce0 = 1'b1;
    end else begin
        patch_buffer_1_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_13_we0 = 1'b1;
    end else begin
        patch_buffer_1_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_14_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        patch_buffer_1_14_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state35) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_14_ce0 = 1'b1;
    end else begin
        patch_buffer_1_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_14_we0 = 1'b1;
    end else begin
        patch_buffer_1_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_15_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        patch_buffer_1_15_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state36) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_15_ce0 = 1'b1;
    end else begin
        patch_buffer_1_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_15_we0 = 1'b1;
    end else begin
        patch_buffer_1_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_1_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        patch_buffer_1_1_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state22) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_1_ce0 = 1'b1;
    end else begin
        patch_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_1_we0 = 1'b1;
    end else begin
        patch_buffer_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_2_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        patch_buffer_1_2_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state23) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_2_ce0 = 1'b1;
    end else begin
        patch_buffer_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_2_we0 = 1'b1;
    end else begin
        patch_buffer_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_3_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        patch_buffer_1_3_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state24) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_3_ce0 = 1'b1;
    end else begin
        patch_buffer_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_3_we0 = 1'b1;
    end else begin
        patch_buffer_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_4_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        patch_buffer_1_4_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state25) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_4_ce0 = 1'b1;
    end else begin
        patch_buffer_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_4_we0 = 1'b1;
    end else begin
        patch_buffer_1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_5_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        patch_buffer_1_5_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state26) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_5_ce0 = 1'b1;
    end else begin
        patch_buffer_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_5_we0 = 1'b1;
    end else begin
        patch_buffer_1_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_6_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        patch_buffer_1_6_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state27) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_6_ce0 = 1'b1;
    end else begin
        patch_buffer_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_6_we0 = 1'b1;
    end else begin
        patch_buffer_1_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_7_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        patch_buffer_1_7_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state28) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_7_ce0 = 1'b1;
    end else begin
        patch_buffer_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_7_we0 = 1'b1;
    end else begin
        patch_buffer_1_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_8_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        patch_buffer_1_8_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state29) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_8_ce0 = 1'b1;
    end else begin
        patch_buffer_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_8_we0 = 1'b1;
    end else begin
        patch_buffer_1_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_9_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        patch_buffer_1_9_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_1_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state30) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_1_9_ce0 = 1'b1;
    end else begin
        patch_buffer_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_1_9_we0 = 1'b1;
    end else begin
        patch_buffer_1_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_0_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        patch_buffer_2_0_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state37) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_0_ce0 = 1'b1;
    end else begin
        patch_buffer_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_0_we0 = 1'b1;
    end else begin
        patch_buffer_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_10_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        patch_buffer_2_10_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state47) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_10_ce0 = 1'b1;
    end else begin
        patch_buffer_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_10_we0 = 1'b1;
    end else begin
        patch_buffer_2_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_11_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        patch_buffer_2_11_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state48) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_11_ce0 = 1'b1;
    end else begin
        patch_buffer_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_11_we0 = 1'b1;
    end else begin
        patch_buffer_2_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_12_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        patch_buffer_2_12_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state49) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_12_ce0 = 1'b1;
    end else begin
        patch_buffer_2_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_12_we0 = 1'b1;
    end else begin
        patch_buffer_2_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_13_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        patch_buffer_2_13_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state50) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_13_ce0 = 1'b1;
    end else begin
        patch_buffer_2_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_13_we0 = 1'b1;
    end else begin
        patch_buffer_2_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_14_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        patch_buffer_2_14_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state51) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_14_ce0 = 1'b1;
    end else begin
        patch_buffer_2_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_14_we0 = 1'b1;
    end else begin
        patch_buffer_2_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_15_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        patch_buffer_2_15_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state52) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_15_ce0 = 1'b1;
    end else begin
        patch_buffer_2_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_15_we0 = 1'b1;
    end else begin
        patch_buffer_2_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_1_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        patch_buffer_2_1_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state38) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_1_ce0 = 1'b1;
    end else begin
        patch_buffer_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_1_we0 = 1'b1;
    end else begin
        patch_buffer_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_2_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        patch_buffer_2_2_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state39) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_2_ce0 = 1'b1;
    end else begin
        patch_buffer_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_2_we0 = 1'b1;
    end else begin
        patch_buffer_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_3_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        patch_buffer_2_3_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state40) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_3_ce0 = 1'b1;
    end else begin
        patch_buffer_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_3_we0 = 1'b1;
    end else begin
        patch_buffer_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_4_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        patch_buffer_2_4_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state41) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_4_ce0 = 1'b1;
    end else begin
        patch_buffer_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_4_we0 = 1'b1;
    end else begin
        patch_buffer_2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_5_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        patch_buffer_2_5_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state42) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_5_ce0 = 1'b1;
    end else begin
        patch_buffer_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_5_we0 = 1'b1;
    end else begin
        patch_buffer_2_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_6_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        patch_buffer_2_6_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state43) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_6_ce0 = 1'b1;
    end else begin
        patch_buffer_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_6_we0 = 1'b1;
    end else begin
        patch_buffer_2_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_7_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        patch_buffer_2_7_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state44) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_7_ce0 = 1'b1;
    end else begin
        patch_buffer_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_7_we0 = 1'b1;
    end else begin
        patch_buffer_2_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_8_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        patch_buffer_2_8_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state45) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_8_ce0 = 1'b1;
    end else begin
        patch_buffer_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_8_we0 = 1'b1;
    end else begin
        patch_buffer_2_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_9_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        patch_buffer_2_9_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_2_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state46) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_2_9_ce0 = 1'b1;
    end else begin
        patch_buffer_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_2_9_we0 = 1'b1;
    end else begin
        patch_buffer_2_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_0_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        patch_buffer_3_0_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state53) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_0_ce0 = 1'b1;
    end else begin
        patch_buffer_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_0_we0 = 1'b1;
    end else begin
        patch_buffer_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_10_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        patch_buffer_3_10_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state63) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_10_ce0 = 1'b1;
    end else begin
        patch_buffer_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_10_we0 = 1'b1;
    end else begin
        patch_buffer_3_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_11_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        patch_buffer_3_11_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state64) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_11_ce0 = 1'b1;
    end else begin
        patch_buffer_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_11_we0 = 1'b1;
    end else begin
        patch_buffer_3_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_12_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        patch_buffer_3_12_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state65) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_12_ce0 = 1'b1;
    end else begin
        patch_buffer_3_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_12_we0 = 1'b1;
    end else begin
        patch_buffer_3_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_13_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        patch_buffer_3_13_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state66) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_13_ce0 = 1'b1;
    end else begin
        patch_buffer_3_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_13_we0 = 1'b1;
    end else begin
        patch_buffer_3_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_14_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        patch_buffer_3_14_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state67) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_14_ce0 = 1'b1;
    end else begin
        patch_buffer_3_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_14_we0 = 1'b1;
    end else begin
        patch_buffer_3_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_15_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        patch_buffer_3_15_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state68) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_15_ce0 = 1'b1;
    end else begin
        patch_buffer_3_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_15_we0 = 1'b1;
    end else begin
        patch_buffer_3_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_1_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        patch_buffer_3_1_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state54) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_1_ce0 = 1'b1;
    end else begin
        patch_buffer_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_1_we0 = 1'b1;
    end else begin
        patch_buffer_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_2_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        patch_buffer_3_2_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state55) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_2_ce0 = 1'b1;
    end else begin
        patch_buffer_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_2_we0 = 1'b1;
    end else begin
        patch_buffer_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_3_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        patch_buffer_3_3_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state56) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_3_ce0 = 1'b1;
    end else begin
        patch_buffer_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_3_we0 = 1'b1;
    end else begin
        patch_buffer_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_4_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        patch_buffer_3_4_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state57) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_4_ce0 = 1'b1;
    end else begin
        patch_buffer_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_4_we0 = 1'b1;
    end else begin
        patch_buffer_3_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_5_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        patch_buffer_3_5_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state58) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_5_ce0 = 1'b1;
    end else begin
        patch_buffer_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_5_we0 = 1'b1;
    end else begin
        patch_buffer_3_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_6_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        patch_buffer_3_6_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state59) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_6_ce0 = 1'b1;
    end else begin
        patch_buffer_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_6_we0 = 1'b1;
    end else begin
        patch_buffer_3_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_7_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        patch_buffer_3_7_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state60) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_7_ce0 = 1'b1;
    end else begin
        patch_buffer_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_7_we0 = 1'b1;
    end else begin
        patch_buffer_3_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_8_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        patch_buffer_3_8_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state61) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_8_ce0 = 1'b1;
    end else begin
        patch_buffer_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_8_we0 = 1'b1;
    end else begin
        patch_buffer_3_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_9_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        patch_buffer_3_9_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_3_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state62) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_3_9_ce0 = 1'b1;
    end else begin
        patch_buffer_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_3_9_we0 = 1'b1;
    end else begin
        patch_buffer_3_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_0_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        patch_buffer_4_0_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state69) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_0_ce0 = 1'b1;
    end else begin
        patch_buffer_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_0_we0 = 1'b1;
    end else begin
        patch_buffer_4_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_10_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        patch_buffer_4_10_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state79) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_10_ce0 = 1'b1;
    end else begin
        patch_buffer_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_10_we0 = 1'b1;
    end else begin
        patch_buffer_4_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_11_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        patch_buffer_4_11_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state80) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_11_ce0 = 1'b1;
    end else begin
        patch_buffer_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_11_we0 = 1'b1;
    end else begin
        patch_buffer_4_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_12_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        patch_buffer_4_12_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state81) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_12_ce0 = 1'b1;
    end else begin
        patch_buffer_4_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_12_we0 = 1'b1;
    end else begin
        patch_buffer_4_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_13_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        patch_buffer_4_13_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state82) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_13_ce0 = 1'b1;
    end else begin
        patch_buffer_4_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_13_we0 = 1'b1;
    end else begin
        patch_buffer_4_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_14_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        patch_buffer_4_14_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state83) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_14_ce0 = 1'b1;
    end else begin
        patch_buffer_4_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_14_we0 = 1'b1;
    end else begin
        patch_buffer_4_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_15_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        patch_buffer_4_15_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state84) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_15_ce0 = 1'b1;
    end else begin
        patch_buffer_4_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_15_we0 = 1'b1;
    end else begin
        patch_buffer_4_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_1_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        patch_buffer_4_1_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state70) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_1_ce0 = 1'b1;
    end else begin
        patch_buffer_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_1_we0 = 1'b1;
    end else begin
        patch_buffer_4_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_2_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        patch_buffer_4_2_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state71) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_2_ce0 = 1'b1;
    end else begin
        patch_buffer_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_2_we0 = 1'b1;
    end else begin
        patch_buffer_4_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_3_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        patch_buffer_4_3_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state72) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_3_ce0 = 1'b1;
    end else begin
        patch_buffer_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_3_we0 = 1'b1;
    end else begin
        patch_buffer_4_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_4_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        patch_buffer_4_4_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state73) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_4_ce0 = 1'b1;
    end else begin
        patch_buffer_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_4_we0 = 1'b1;
    end else begin
        patch_buffer_4_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_5_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        patch_buffer_4_5_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state74) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_5_ce0 = 1'b1;
    end else begin
        patch_buffer_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_5_we0 = 1'b1;
    end else begin
        patch_buffer_4_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_6_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        patch_buffer_4_6_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state75) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_6_ce0 = 1'b1;
    end else begin
        patch_buffer_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_6_we0 = 1'b1;
    end else begin
        patch_buffer_4_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_7_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        patch_buffer_4_7_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state76) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_7_ce0 = 1'b1;
    end else begin
        patch_buffer_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_7_we0 = 1'b1;
    end else begin
        patch_buffer_4_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_8_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        patch_buffer_4_8_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state77) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_8_ce0 = 1'b1;
    end else begin
        patch_buffer_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_8_we0 = 1'b1;
    end else begin
        patch_buffer_4_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_9_address0 = zext_ln69_reg_3790;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        patch_buffer_4_9_address0 = zext_ln52_reg_3142;
    end else begin
        patch_buffer_4_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | ((1'b1 == ap_CS_fsm_state78) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_buffer_4_9_ce0 = 1'b1;
    end else begin
        patch_buffer_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        patch_buffer_4_9_we0 = 1'b1;
    end else begin
        patch_buffer_4_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        patch_buffer_order_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_order_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state4))) begin
        patch_buffer_order_address0 = 64'd0;
    end else begin
        patch_buffer_order_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state4))) begin
        patch_buffer_order_ce0 = 1'b1;
    end else begin
        patch_buffer_order_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87))) begin
        patch_buffer_order_d0 = patch_buffer_order_q0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_order_d0 = next_patch_index_1_reg_3020;
    end else begin
        patch_buffer_order_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86))) begin
        patch_buffer_order_we0 = 1'b1;
    end else begin
        patch_buffer_order_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_valid_address0 = zext_ln69_fu_3046_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        patch_buffer_valid_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        patch_buffer_valid_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        patch_buffer_valid_address0 = 64'd0;
    end else begin
        patch_buffer_valid_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        patch_buffer_valid_ce0 = 1'b1;
    end else begin
        patch_buffer_valid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        patch_buffer_valid_we0 = 1'b1;
    end else begin
        patch_buffer_valid_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state85) & (patch_buffer_valid_load_2_reg_3133 == 1'd1) & (patch_buffer_valid_load_1_reg_3124 == 1'd1) & (patch_buffer_valid_load_reg_3115 == 1'd1)))) begin
        patch_stream_V_blk_n = patch_stream_V_full_n;
    end else begin
        patch_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85) & (ap_predicate_op426_write_state85 == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_15_q0;
    end else if (((1'b1 == ap_CS_fsm_state84) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_14_q0;
    end else if (((1'b1 == ap_CS_fsm_state83) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_13_q0;
    end else if (((1'b1 == ap_CS_fsm_state82) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_12_q0;
    end else if (((1'b1 == ap_CS_fsm_state81) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_11_q0;
    end else if (((1'b1 == ap_CS_fsm_state80) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_10_q0;
    end else if (((1'b1 == ap_CS_fsm_state79) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_9_q0;
    end else if (((1'b1 == ap_CS_fsm_state78) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_8_q0;
    end else if (((1'b1 == ap_CS_fsm_state77) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_7_q0;
    end else if (((1'b1 == ap_CS_fsm_state76) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_6_q0;
    end else if (((1'b1 == ap_CS_fsm_state75) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_5_q0;
    end else if (((1'b1 == ap_CS_fsm_state74) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_4_q0;
    end else if (((1'b1 == ap_CS_fsm_state73) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_3_q0;
    end else if (((1'b1 == ap_CS_fsm_state72) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_2_q0;
    end else if (((1'b1 == ap_CS_fsm_state71) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state70) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_4_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state69) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_15_q0;
    end else if (((1'b1 == ap_CS_fsm_state68) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_14_q0;
    end else if (((1'b1 == ap_CS_fsm_state67) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_13_q0;
    end else if (((1'b1 == ap_CS_fsm_state66) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_12_q0;
    end else if (((1'b1 == ap_CS_fsm_state65) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_11_q0;
    end else if (((1'b1 == ap_CS_fsm_state64) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_10_q0;
    end else if (((1'b1 == ap_CS_fsm_state63) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_9_q0;
    end else if (((1'b1 == ap_CS_fsm_state62) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_8_q0;
    end else if (((1'b1 == ap_CS_fsm_state61) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_7_q0;
    end else if (((1'b1 == ap_CS_fsm_state60) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_6_q0;
    end else if (((1'b1 == ap_CS_fsm_state59) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_5_q0;
    end else if (((1'b1 == ap_CS_fsm_state58) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_4_q0;
    end else if (((1'b1 == ap_CS_fsm_state57) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_3_q0;
    end else if (((1'b1 == ap_CS_fsm_state56) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_2_q0;
    end else if (((1'b1 == ap_CS_fsm_state55) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_3_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state53) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_15_q0;
    end else if (((1'b1 == ap_CS_fsm_state52) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_14_q0;
    end else if (((1'b1 == ap_CS_fsm_state51) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_13_q0;
    end else if (((1'b1 == ap_CS_fsm_state50) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_12_q0;
    end else if (((1'b1 == ap_CS_fsm_state49) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_11_q0;
    end else if (((1'b1 == ap_CS_fsm_state48) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_10_q0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_9_q0;
    end else if (((1'b1 == ap_CS_fsm_state46) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_8_q0;
    end else if (((1'b1 == ap_CS_fsm_state45) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_7_q0;
    end else if (((1'b1 == ap_CS_fsm_state44) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_6_q0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_5_q0;
    end else if (((1'b1 == ap_CS_fsm_state42) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_4_q0;
    end else if (((1'b1 == ap_CS_fsm_state41) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_3_q0;
    end else if (((1'b1 == ap_CS_fsm_state40) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_2_q0;
    end else if (((1'b1 == ap_CS_fsm_state39) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state38) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_2_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state37) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_15_q0;
    end else if (((1'b1 == ap_CS_fsm_state36) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_14_q0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_13_q0;
    end else if (((1'b1 == ap_CS_fsm_state34) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_12_q0;
    end else if (((1'b1 == ap_CS_fsm_state33) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_11_q0;
    end else if (((1'b1 == ap_CS_fsm_state32) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_10_q0;
    end else if (((1'b1 == ap_CS_fsm_state31) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_9_q0;
    end else if (((1'b1 == ap_CS_fsm_state30) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_8_q0;
    end else if (((1'b1 == ap_CS_fsm_state29) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_7_q0;
    end else if (((1'b1 == ap_CS_fsm_state28) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_6_q0;
    end else if (((1'b1 == ap_CS_fsm_state27) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_5_q0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_4_q0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_3_q0;
    end else if (((1'b1 == ap_CS_fsm_state24) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_2_q0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state22) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_1_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_15_q0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_14_q0;
    end else if (((1'b1 == ap_CS_fsm_state19) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_13_q0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_12_q0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_11_q0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_10_q0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_9_q0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_8_q0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_7_q0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_6_q0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_5_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_4_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_3_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_2_q0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (patch_stream_V_full_n == 1'b1))) begin
        patch_stream_V_din = patch_buffer_0_0_q0;
    end else begin
        patch_stream_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (patch_stream_V_full_n == 1'b1)) | (~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85) & (ap_predicate_op426_write_state85 == 1'b1)) | ((1'b1 == ap_CS_fsm_state84) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state83) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state82) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state81) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state80) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state79) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state78) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state77) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state76) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state75) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state74) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state73) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state71) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state70) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state69) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state67) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state66) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state65) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state63) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state62) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state61) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state60) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (patch_stream_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (patch_stream_V_full_n == 1'b1)))) begin
        patch_stream_V_write = 1'b1;
    end else begin
        patch_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((patch_buffer_valid_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((patch_buffer_valid_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((patch_buffer_valid_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == ap_CS_fsm_state79) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((1'b1 == ap_CS_fsm_state80) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((1'b1 == ap_CS_fsm_state81) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((1'b1 == ap_CS_fsm_state83) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & (patch_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if ((~((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_3083_p2 = (num_patches_read + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state85 = ((ap_predicate_op426_write_state85 == 1'b1) & (patch_stream_V_full_n == 1'b0));
end

always @ (*) begin
    ap_predicate_op426_write_state85 = ((patch_buffer_valid_load_2_reg_3133 == 1'd1) & (patch_buffer_valid_load_1_reg_3124 == 1'd1) & (patch_buffer_valid_load_reg_3115 == 1'd1));
end

assign ap_return_0 = next_patch_index_1_reg_3020;

assign ap_return_1 = add_ln83_fu_3083_p2;

assign patch_buffer_0_0_d0 = new_patch_0_q1;

assign patch_buffer_0_10_d0 = new_patch_10_q1;

assign patch_buffer_0_11_d0 = new_patch_11_q1;

assign patch_buffer_0_12_d0 = new_patch_12_q1;

assign patch_buffer_0_13_d0 = new_patch_13_q1;

assign patch_buffer_0_14_d0 = new_patch_14_q1;

assign patch_buffer_0_15_d0 = new_patch_15_q1;

assign patch_buffer_0_1_d0 = new_patch_1_q1;

assign patch_buffer_0_2_d0 = new_patch_2_q1;

assign patch_buffer_0_3_d0 = new_patch_3_q1;

assign patch_buffer_0_4_d0 = new_patch_4_q1;

assign patch_buffer_0_5_d0 = new_patch_5_q1;

assign patch_buffer_0_6_d0 = new_patch_6_q1;

assign patch_buffer_0_7_d0 = new_patch_7_q1;

assign patch_buffer_0_8_d0 = new_patch_8_q1;

assign patch_buffer_0_9_d0 = new_patch_9_q1;

assign patch_buffer_1_0_d0 = new_patch_0_q0;

assign patch_buffer_1_10_d0 = new_patch_10_q0;

assign patch_buffer_1_11_d0 = new_patch_11_q0;

assign patch_buffer_1_12_d0 = new_patch_12_q0;

assign patch_buffer_1_13_d0 = new_patch_13_q0;

assign patch_buffer_1_14_d0 = new_patch_14_q0;

assign patch_buffer_1_15_d0 = new_patch_15_q0;

assign patch_buffer_1_1_d0 = new_patch_1_q0;

assign patch_buffer_1_2_d0 = new_patch_2_q0;

assign patch_buffer_1_3_d0 = new_patch_3_q0;

assign patch_buffer_1_4_d0 = new_patch_4_q0;

assign patch_buffer_1_5_d0 = new_patch_5_q0;

assign patch_buffer_1_6_d0 = new_patch_6_q0;

assign patch_buffer_1_7_d0 = new_patch_7_q0;

assign patch_buffer_1_8_d0 = new_patch_8_q0;

assign patch_buffer_1_9_d0 = new_patch_9_q0;

assign patch_buffer_2_0_d0 = new_patch_0_q1;

assign patch_buffer_2_10_d0 = new_patch_10_q1;

assign patch_buffer_2_11_d0 = new_patch_11_q1;

assign patch_buffer_2_12_d0 = new_patch_12_q1;

assign patch_buffer_2_13_d0 = new_patch_13_q1;

assign patch_buffer_2_14_d0 = new_patch_14_q1;

assign patch_buffer_2_15_d0 = new_patch_15_q1;

assign patch_buffer_2_1_d0 = new_patch_1_q1;

assign patch_buffer_2_2_d0 = new_patch_2_q1;

assign patch_buffer_2_3_d0 = new_patch_3_q1;

assign patch_buffer_2_4_d0 = new_patch_4_q1;

assign patch_buffer_2_5_d0 = new_patch_5_q1;

assign patch_buffer_2_6_d0 = new_patch_6_q1;

assign patch_buffer_2_7_d0 = new_patch_7_q1;

assign patch_buffer_2_8_d0 = new_patch_8_q1;

assign patch_buffer_2_9_d0 = new_patch_9_q1;

assign patch_buffer_3_0_d0 = new_patch_0_q0;

assign patch_buffer_3_10_d0 = new_patch_10_q0;

assign patch_buffer_3_11_d0 = new_patch_11_q0;

assign patch_buffer_3_12_d0 = new_patch_12_q0;

assign patch_buffer_3_13_d0 = new_patch_13_q0;

assign patch_buffer_3_14_d0 = new_patch_14_q0;

assign patch_buffer_3_15_d0 = new_patch_15_q0;

assign patch_buffer_3_1_d0 = new_patch_1_q0;

assign patch_buffer_3_2_d0 = new_patch_2_q0;

assign patch_buffer_3_3_d0 = new_patch_3_q0;

assign patch_buffer_3_4_d0 = new_patch_4_q0;

assign patch_buffer_3_5_d0 = new_patch_5_q0;

assign patch_buffer_3_6_d0 = new_patch_6_q0;

assign patch_buffer_3_7_d0 = new_patch_7_q0;

assign patch_buffer_3_8_d0 = new_patch_8_q0;

assign patch_buffer_3_9_d0 = new_patch_9_q0;

assign patch_buffer_4_0_d0 = new_patch_0_q0;

assign patch_buffer_4_10_d0 = new_patch_10_q0;

assign patch_buffer_4_11_d0 = new_patch_11_q0;

assign patch_buffer_4_12_d0 = new_patch_12_q0;

assign patch_buffer_4_13_d0 = new_patch_13_q0;

assign patch_buffer_4_14_d0 = new_patch_14_q0;

assign patch_buffer_4_15_d0 = new_patch_15_q0;

assign patch_buffer_4_1_d0 = new_patch_1_q0;

assign patch_buffer_4_2_d0 = new_patch_2_q0;

assign patch_buffer_4_3_d0 = new_patch_3_q0;

assign patch_buffer_4_4_d0 = new_patch_4_q0;

assign patch_buffer_4_5_d0 = new_patch_5_q0;

assign patch_buffer_4_6_d0 = new_patch_6_q0;

assign patch_buffer_4_7_d0 = new_patch_7_q0;

assign patch_buffer_4_8_d0 = new_patch_8_q0;

assign patch_buffer_4_9_d0 = new_patch_9_q0;

assign patch_buffer_valid_d0 = 1'd1;

assign zext_ln52_fu_3041_p1 = patch_buffer_order_q0;

assign zext_ln69_fu_3046_p1 = next_patch_index_1_reg_3020;

always @ (posedge ap_clk) begin
    zext_ln52_reg_3142[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln69_reg_3790[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //system_top_patch_buffer_add_patch
