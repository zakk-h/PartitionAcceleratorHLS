// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_get_acceptanceCorners (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        shadow_bottomL_jR_0_address0,
        shadow_bottomL_jR_0_ce0,
        shadow_bottomL_jR_0_q0,
        shadow_bottomL_jR_1_address0,
        shadow_bottomL_jR_1_ce0,
        shadow_bottomL_jR_1_q0,
        shadow_bottomL_jR_2_address0,
        shadow_bottomL_jR_2_ce0,
        shadow_bottomL_jR_2_q0,
        shadow_bottomL_jR_3_address0,
        shadow_bottomL_jR_3_ce0,
        shadow_bottomL_jR_3_q0,
        shadow_bottomR_jR_0_address0,
        shadow_bottomR_jR_0_ce0,
        shadow_bottomR_jR_0_q0,
        shadow_bottomR_jR_1_address0,
        shadow_bottomR_jR_1_ce0,
        shadow_bottomR_jR_1_q0,
        shadow_bottomR_jR_2_address0,
        shadow_bottomR_jR_2_ce0,
        shadow_bottomR_jR_2_q0,
        shadow_bottomR_jR_3_address0,
        shadow_bottomR_jR_3_ce0,
        shadow_bottomR_jR_3_q0,
        shadow_bottomL_jL_0_address0,
        shadow_bottomL_jL_0_ce0,
        shadow_bottomL_jL_0_q0,
        shadow_bottomL_jL_1_address0,
        shadow_bottomL_jL_1_ce0,
        shadow_bottomL_jL_1_q0,
        shadow_bottomL_jL_2_address0,
        shadow_bottomL_jL_2_ce0,
        shadow_bottomL_jL_2_q0,
        shadow_bottomL_jL_3_address0,
        shadow_bottomL_jL_3_ce0,
        shadow_bottomL_jL_3_q0,
        shadow_bottomR_jL_0_address0,
        shadow_bottomR_jL_0_ce0,
        shadow_bottomR_jL_0_q0,
        shadow_bottomR_jL_1_address0,
        shadow_bottomR_jL_1_ce0,
        shadow_bottomR_jL_1_q0,
        shadow_bottomR_jL_2_address0,
        shadow_bottomR_jL_2_ce0,
        shadow_bottomR_jL_2_q0,
        shadow_bottomR_jL_3_address0,
        shadow_bottomR_jL_3_ce0,
        shadow_bottomR_jL_3_q0,
        z1_min_0_address0,
        z1_min_0_ce0,
        z1_min_0_q0,
        z1_max_0_address0,
        z1_max_0_ce0,
        z1_max_0_q0,
        a_corner_0_address0,
        a_corner_0_ce0,
        a_corner_0_we0,
        a_corner_0_d0,
        a_corner_1_address0,
        a_corner_1_ce0,
        a_corner_1_we0,
        a_corner_1_d0,
        b_corner_0_address0,
        b_corner_0_ce0,
        b_corner_0_we0,
        b_corner_0_d0,
        b_corner_1_address0,
        b_corner_1_ce0,
        b_corner_1_we0,
        b_corner_1_d0,
        c_corner_0_address0,
        c_corner_0_ce0,
        c_corner_0_we0,
        c_corner_0_d0,
        c_corner_1_address0,
        c_corner_1_ce0,
        c_corner_1_we0,
        c_corner_1_d0,
        d_corner_0_address0,
        d_corner_0_ce0,
        d_corner_0_we0,
        d_corner_0_d0,
        d_corner_1_address0,
        d_corner_1_ce0,
        d_corner_1_we0,
        d_corner_1_d0,
        squareAcceptance_address0,
        squareAcceptance_ce0,
        squareAcceptance_we0,
        squareAcceptance_d0,
        flatTop_address0,
        flatTop_ce0,
        flatTop_we0,
        flatTop_d0,
        flatBottom_address0,
        flatBottom_ce0,
        flatBottom_we0,
        flatBottom_d0,
        triangleAcceptance_address0,
        triangleAcceptance_ce0,
        triangleAcceptance_we0,
        triangleAcceptance_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] p_read;
output  [1:0] shadow_bottomL_jR_0_address0;
output   shadow_bottomL_jR_0_ce0;
input  [31:0] shadow_bottomL_jR_0_q0;
output  [1:0] shadow_bottomL_jR_1_address0;
output   shadow_bottomL_jR_1_ce0;
input  [31:0] shadow_bottomL_jR_1_q0;
output  [1:0] shadow_bottomL_jR_2_address0;
output   shadow_bottomL_jR_2_ce0;
input  [31:0] shadow_bottomL_jR_2_q0;
output  [1:0] shadow_bottomL_jR_3_address0;
output   shadow_bottomL_jR_3_ce0;
input  [31:0] shadow_bottomL_jR_3_q0;
output  [1:0] shadow_bottomR_jR_0_address0;
output   shadow_bottomR_jR_0_ce0;
input  [31:0] shadow_bottomR_jR_0_q0;
output  [1:0] shadow_bottomR_jR_1_address0;
output   shadow_bottomR_jR_1_ce0;
input  [31:0] shadow_bottomR_jR_1_q0;
output  [1:0] shadow_bottomR_jR_2_address0;
output   shadow_bottomR_jR_2_ce0;
input  [31:0] shadow_bottomR_jR_2_q0;
output  [1:0] shadow_bottomR_jR_3_address0;
output   shadow_bottomR_jR_3_ce0;
input  [31:0] shadow_bottomR_jR_3_q0;
output  [1:0] shadow_bottomL_jL_0_address0;
output   shadow_bottomL_jL_0_ce0;
input  [31:0] shadow_bottomL_jL_0_q0;
output  [1:0] shadow_bottomL_jL_1_address0;
output   shadow_bottomL_jL_1_ce0;
input  [31:0] shadow_bottomL_jL_1_q0;
output  [1:0] shadow_bottomL_jL_2_address0;
output   shadow_bottomL_jL_2_ce0;
input  [31:0] shadow_bottomL_jL_2_q0;
output  [1:0] shadow_bottomL_jL_3_address0;
output   shadow_bottomL_jL_3_ce0;
input  [31:0] shadow_bottomL_jL_3_q0;
output  [1:0] shadow_bottomR_jL_0_address0;
output   shadow_bottomR_jL_0_ce0;
input  [31:0] shadow_bottomR_jL_0_q0;
output  [1:0] shadow_bottomR_jL_1_address0;
output   shadow_bottomR_jL_1_ce0;
input  [31:0] shadow_bottomR_jL_1_q0;
output  [1:0] shadow_bottomR_jL_2_address0;
output   shadow_bottomR_jL_2_ce0;
input  [31:0] shadow_bottomR_jL_2_q0;
output  [1:0] shadow_bottomR_jL_3_address0;
output   shadow_bottomR_jL_3_ce0;
input  [31:0] shadow_bottomR_jL_3_q0;
output  [1:0] z1_min_0_address0;
output   z1_min_0_ce0;
input  [31:0] z1_min_0_q0;
output  [1:0] z1_max_0_address0;
output   z1_max_0_ce0;
input  [31:0] z1_max_0_q0;
output  [1:0] a_corner_0_address0;
output   a_corner_0_ce0;
output   a_corner_0_we0;
output  [31:0] a_corner_0_d0;
output  [1:0] a_corner_1_address0;
output   a_corner_1_ce0;
output   a_corner_1_we0;
output  [31:0] a_corner_1_d0;
output  [1:0] b_corner_0_address0;
output   b_corner_0_ce0;
output   b_corner_0_we0;
output  [31:0] b_corner_0_d0;
output  [1:0] b_corner_1_address0;
output   b_corner_1_ce0;
output   b_corner_1_we0;
output  [31:0] b_corner_1_d0;
output  [1:0] c_corner_0_address0;
output   c_corner_0_ce0;
output   c_corner_0_we0;
output  [31:0] c_corner_0_d0;
output  [1:0] c_corner_1_address0;
output   c_corner_1_ce0;
output   c_corner_1_we0;
output  [31:0] c_corner_1_d0;
output  [1:0] d_corner_0_address0;
output   d_corner_0_ce0;
output   d_corner_0_we0;
output  [31:0] d_corner_0_d0;
output  [1:0] d_corner_1_address0;
output   d_corner_1_ce0;
output   d_corner_1_we0;
output  [31:0] d_corner_1_d0;
output  [1:0] squareAcceptance_address0;
output   squareAcceptance_ce0;
output   squareAcceptance_we0;
output  [0:0] squareAcceptance_d0;
output  [1:0] flatTop_address0;
output   flatTop_ce0;
output   flatTop_we0;
output  [0:0] flatTop_d0;
output  [1:0] flatBottom_address0;
output   flatBottom_ce0;
output   flatBottom_we0;
output  [0:0] flatBottom_d0;
output  [1:0] triangleAcceptance_address0;
output   triangleAcceptance_ce0;
output   triangleAcceptance_we0;
output  [0:0] triangleAcceptance_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg shadow_bottomL_jR_0_ce0;
reg shadow_bottomL_jR_1_ce0;
reg shadow_bottomL_jR_2_ce0;
reg shadow_bottomL_jR_3_ce0;
reg shadow_bottomR_jR_0_ce0;
reg shadow_bottomR_jR_1_ce0;
reg shadow_bottomR_jR_2_ce0;
reg shadow_bottomR_jR_3_ce0;
reg shadow_bottomL_jL_0_ce0;
reg shadow_bottomL_jL_1_ce0;
reg shadow_bottomL_jL_2_ce0;
reg shadow_bottomL_jL_3_ce0;
reg shadow_bottomR_jL_0_ce0;
reg shadow_bottomR_jL_1_ce0;
reg shadow_bottomR_jL_2_ce0;
reg shadow_bottomR_jL_3_ce0;
reg z1_min_0_ce0;
reg z1_max_0_ce0;
reg a_corner_0_ce0;
reg a_corner_0_we0;
reg[1:0] a_corner_1_address0;
reg a_corner_1_ce0;
reg a_corner_1_we0;
reg[31:0] a_corner_1_d0;
reg b_corner_0_ce0;
reg b_corner_0_we0;
reg[1:0] b_corner_1_address0;
reg b_corner_1_ce0;
reg b_corner_1_we0;
reg[31:0] b_corner_1_d0;
reg c_corner_0_ce0;
reg c_corner_0_we0;
reg[1:0] c_corner_1_address0;
reg c_corner_1_ce0;
reg c_corner_1_we0;
reg[31:0] c_corner_1_d0;
reg d_corner_0_ce0;
reg d_corner_0_we0;
reg[1:0] d_corner_1_address0;
reg d_corner_1_ce0;
reg d_corner_1_we0;
reg[31:0] d_corner_1_d0;
reg[1:0] squareAcceptance_address0;
reg squareAcceptance_ce0;
reg squareAcceptance_we0;
reg[1:0] flatTop_address0;
reg flatTop_ce0;
reg flatTop_we0;
reg[1:0] flatBottom_address0;
reg flatBottom_ce0;
reg flatBottom_we0;
reg[1:0] triangleAcceptance_address0;
reg triangleAcceptance_ce0;
reg triangleAcceptance_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] idxprom_fu_535_p1;
reg   [63:0] idxprom_reg_755;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln201_fu_548_p3;
reg   [31:0] select_ln201_reg_867;
reg   [31:0] shadow_bottomR_jR_2_load_reg_873;
wire    ap_CS_fsm_state3;
reg   [31:0] shadow_bottomL_jR_3_load_reg_879;
wire   [31:0] select_ln204_1_fu_588_p3;
reg   [31:0] select_ln204_1_reg_901;
wire   [31:0] select_ln201_2_fu_630_p3;
reg   [31:0] select_ln201_2_reg_907;
wire   [31:0] select_ln207_1_fu_644_p3;
reg   [31:0] select_ln207_1_reg_913;
wire   [31:0] select_ln210_1_fu_658_p3;
reg   [31:0] select_ln210_1_reg_919;
reg   [31:0] shadow_bottomL_jL_3_load_reg_925;
wire    ap_CS_fsm_state4;
reg   [31:0] shadow_bottomR_jL_3_load_reg_930;
wire   [31:0] select_ln201_3_fu_680_p3;
reg   [31:0] select_ln201_3_reg_935;
wire   [31:0] select_ln204_3_fu_693_p3;
reg   [31:0] select_ln204_3_reg_940;
wire   [31:0] select_ln207_2_fu_707_p3;
reg   [31:0] select_ln207_2_reg_948;
wire   [31:0] select_ln210_2_fu_720_p3;
reg   [31:0] select_ln210_2_reg_955;
reg   [1:0] a_corner_1_addr_reg_961;
reg   [1:0] b_corner_1_addr_reg_966;
reg   [1:0] c_corner_1_addr_reg_971;
reg   [1:0] d_corner_1_addr_reg_976;
wire   [0:0] icmp_ln1499_1_fu_733_p2;
reg   [0:0] icmp_ln1499_1_reg_984;
wire   [0:0] icmp_ln1499_2_fu_739_p2;
reg   [0:0] icmp_ln1499_2_reg_988;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln1499_3_fu_743_p2;
reg   [0:0] icmp_ln1499_3_reg_992;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln1495_5_fu_751_p2;
reg   [0:0] icmp_ln1495_5_reg_999;
wire    ap_CS_fsm_state7;
reg   [31:0] ap_phi_mux_p_0_0_0_phi_fu_527_p4;
wire   [0:0] icmp_ln1494_2_fu_747_p2;
wire   [0:0] icmp_ln1499_fu_728_p2;
wire   [1:0] squareAcceptance_addr_1_gep_fu_448_p3;
wire   [1:0] flatTop_addr_1_gep_fu_456_p3;
wire   [1:0] squareAcceptance_addr_2_gep_fu_478_p3;
wire   [1:0] flatBottom_addr_1_gep_fu_486_p3;
wire   [1:0] squareAcceptance_addr_3_gep_fu_494_p3;
wire   [1:0] triangleAcceptance_addr_1_gep_fu_516_p3;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln1495_fu_542_p2;
wire   [0:0] icmp_ln1495_4_fu_556_p2;
wire   [0:0] icmp_ln1495_1_fu_570_p2;
wire   [31:0] select_ln204_fu_562_p3;
wire   [0:0] icmp_ln1495_6_fu_582_p2;
wire   [0:0] icmp_ln1494_fu_596_p2;
wire   [0:0] icmp_ln1494_1_fu_610_p2;
wire   [31:0] select_ln201_1_fu_575_p3;
wire   [0:0] icmp_ln1495_2_fu_624_p2;
wire   [31:0] select_ln207_fu_602_p3;
wire   [0:0] icmp_ln1494_4_fu_638_p2;
wire   [31:0] select_ln210_fu_616_p3;
wire   [0:0] icmp_ln1494_5_fu_652_p2;
wire   [0:0] icmp_ln1495_7_fu_666_p2;
wire   [0:0] icmp_ln1495_3_fu_676_p2;
wire   [31:0] select_ln204_2_fu_670_p3;
wire   [0:0] icmp_ln1495_8_fu_687_p2;
wire   [0:0] icmp_ln1494_3_fu_702_p2;
wire   [0:0] icmp_ln1494_6_fu_715_p2;
reg   [7:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_corner_1_addr_reg_961 <= idxprom_reg_755;
        b_corner_1_addr_reg_966 <= idxprom_reg_755;
        c_corner_1_addr_reg_971 <= idxprom_reg_755;
        d_corner_1_addr_reg_976 <= idxprom_reg_755;
        icmp_ln1499_1_reg_984 <= icmp_ln1499_1_fu_733_p2;
        select_ln201_3_reg_935 <= select_ln201_3_fu_680_p3;
        select_ln204_3_reg_940 <= select_ln204_3_fu_693_p3;
        select_ln207_2_reg_948 <= select_ln207_2_fu_707_p3;
        select_ln210_2_reg_955 <= select_ln210_2_fu_720_p3;
        shadow_bottomL_jL_3_load_reg_925 <= shadow_bottomL_jL_3_q0;
        shadow_bottomR_jL_3_load_reg_930 <= shadow_bottomR_jL_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln1495_5_reg_999 <= icmp_ln1495_5_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln1499_2_reg_988 <= icmp_ln1499_2_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln1499_3_reg_992 <= icmp_ln1499_3_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        idxprom_reg_755[1 : 0] <= idxprom_fu_535_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln201_2_reg_907 <= select_ln201_2_fu_630_p3;
        select_ln204_1_reg_901 <= select_ln204_1_fu_588_p3;
        select_ln207_1_reg_913 <= select_ln207_1_fu_644_p3;
        select_ln210_1_reg_919 <= select_ln210_1_fu_658_p3;
        shadow_bottomL_jR_3_load_reg_879 <= shadow_bottomL_jR_3_q0;
        shadow_bottomR_jR_2_load_reg_873 <= shadow_bottomR_jR_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln201_reg_867 <= select_ln201_fu_548_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_corner_0_ce0 = 1'b1;
    end else begin
        a_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_corner_0_we0 = 1'b1;
    end else begin
        a_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_1_address0 = a_corner_1_addr_reg_961;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_corner_1_address0 = idxprom_reg_755;
    end else begin
        a_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        a_corner_1_ce0 = 1'b1;
    end else begin
        a_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_1_d0 = select_ln204_3_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_corner_1_d0 = select_ln201_3_fu_680_p3;
    end else begin
        a_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln1494_2_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        a_corner_1_we0 = 1'b1;
    end else begin
        a_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        if ((icmp_ln1494_2_fu_747_p2 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_phi_fu_527_p4 = select_ln207_2_reg_948;
        end else if ((icmp_ln1494_2_fu_747_p2 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_phi_fu_527_p4 = select_ln204_3_reg_940;
        end else begin
            ap_phi_mux_p_0_0_0_phi_fu_527_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_0_0_phi_fu_527_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_corner_0_ce0 = 1'b1;
    end else begin
        b_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_corner_0_we0 = 1'b1;
    end else begin
        b_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_corner_1_address0 = b_corner_1_addr_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_corner_1_address0 = idxprom_reg_755;
    end else begin
        b_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        b_corner_1_ce0 = 1'b1;
    end else begin
        b_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_corner_1_d0 = ap_phi_mux_p_0_0_0_phi_fu_527_p4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_corner_1_d0 = select_ln204_3_fu_693_p3;
    end else begin
        b_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln1495_5_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        b_corner_1_we0 = 1'b1;
    end else begin
        b_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_corner_0_ce0 = 1'b1;
    end else begin
        c_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_corner_0_we0 = 1'b1;
    end else begin
        c_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_1_address0 = c_corner_1_addr_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_corner_1_address0 = idxprom_reg_755;
    end else begin
        c_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        c_corner_1_ce0 = 1'b1;
    end else begin
        c_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_1_d0 = select_ln204_3_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_corner_1_d0 = select_ln207_2_fu_707_p3;
    end else begin
        c_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln1494_2_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        c_corner_1_we0 = 1'b1;
    end else begin
        c_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_corner_0_ce0 = 1'b1;
    end else begin
        d_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_corner_0_we0 = 1'b1;
    end else begin
        d_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        d_corner_1_address0 = d_corner_1_addr_reg_976;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_corner_1_address0 = idxprom_reg_755;
    end else begin
        d_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        d_corner_1_ce0 = 1'b1;
    end else begin
        d_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        d_corner_1_d0 = ap_phi_mux_p_0_0_0_phi_fu_527_p4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_corner_1_d0 = select_ln210_2_fu_720_p3;
    end else begin
        d_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln1495_5_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        d_corner_1_we0 = 1'b1;
    end else begin
        d_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        flatBottom_address0 = flatBottom_addr_1_gep_fu_486_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        flatBottom_address0 = idxprom_reg_755;
    end else begin
        flatBottom_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        flatBottom_ce0 = 1'b1;
    end else begin
        flatBottom_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1499_3_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln1499_2_fu_739_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        flatBottom_we0 = 1'b1;
    end else begin
        flatBottom_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flatTop_address0 = flatTop_addr_1_gep_fu_456_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flatTop_address0 = idxprom_reg_755;
    end else begin
        flatTop_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        flatTop_ce0 = 1'b1;
    end else begin
        flatTop_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1499_1_reg_984 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln1499_fu_728_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        flatTop_we0 = 1'b1;
    end else begin
        flatTop_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jL_0_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jL_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jL_1_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jL_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jL_2_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jL_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shadow_bottomL_jL_3_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jL_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shadow_bottomL_jR_0_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jR_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jR_1_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jR_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jR_2_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jR_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jR_3_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jR_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jL_0_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jL_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jL_1_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jL_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jL_2_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jL_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shadow_bottomR_jL_3_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jL_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jR_0_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jR_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jR_1_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jR_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jR_2_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jR_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shadow_bottomR_jR_3_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jR_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        squareAcceptance_address0 = squareAcceptance_addr_3_gep_fu_494_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        squareAcceptance_address0 = squareAcceptance_addr_2_gep_fu_478_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        squareAcceptance_address0 = squareAcceptance_addr_1_gep_fu_448_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        squareAcceptance_address0 = idxprom_reg_755;
    end else begin
        squareAcceptance_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        squareAcceptance_ce0 = 1'b1;
    end else begin
        squareAcceptance_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1499_3_reg_992 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln1499_2_reg_988 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln1499_1_reg_984 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln1499_fu_728_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        squareAcceptance_we0 = 1'b1;
    end else begin
        squareAcceptance_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        triangleAcceptance_address0 = triangleAcceptance_addr_1_gep_fu_516_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        triangleAcceptance_address0 = idxprom_reg_755;
    end else begin
        triangleAcceptance_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        triangleAcceptance_ce0 = 1'b1;
    end else begin
        triangleAcceptance_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1495_5_reg_999 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln1494_2_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        triangleAcceptance_we0 = 1'b1;
    end else begin
        triangleAcceptance_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        z1_max_0_ce0 = 1'b1;
    end else begin
        z1_max_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        z1_min_0_ce0 = 1'b1;
    end else begin
        z1_min_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_corner_0_address0 = idxprom_reg_755;

assign a_corner_0_d0 = z1_min_0_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign b_corner_0_address0 = idxprom_reg_755;

assign b_corner_0_d0 = z1_max_0_q0;

assign c_corner_0_address0 = idxprom_reg_755;

assign c_corner_0_d0 = z1_min_0_q0;

assign d_corner_0_address0 = idxprom_reg_755;

assign d_corner_0_d0 = z1_max_0_q0;

assign flatBottom_addr_1_gep_fu_486_p3 = idxprom_reg_755;

assign flatBottom_d0 = 1'd0;

assign flatTop_addr_1_gep_fu_456_p3 = idxprom_reg_755;

assign flatTop_d0 = 1'd0;

assign icmp_ln1494_1_fu_610_p2 = (($signed(shadow_bottomR_jL_1_q0) > $signed(shadow_bottomR_jL_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_747_p2 = (($signed(select_ln207_2_reg_948) > $signed(select_ln201_3_reg_935)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_702_p2 = (($signed(shadow_bottomL_jL_3_q0) > $signed(select_ln207_1_reg_913)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_638_p2 = (($signed(shadow_bottomL_jL_2_q0) > $signed(select_ln207_fu_602_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_652_p2 = (($signed(shadow_bottomR_jL_2_q0) > $signed(select_ln210_fu_616_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_715_p2 = (($signed(shadow_bottomR_jL_3_q0) > $signed(select_ln210_1_reg_919)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_596_p2 = (($signed(shadow_bottomL_jL_1_q0) > $signed(shadow_bottomL_jL_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1495_1_fu_570_p2 = (($signed(shadow_bottomL_jR_1_q0) < $signed(select_ln201_reg_867)) ? 1'b1 : 1'b0);

assign icmp_ln1495_2_fu_624_p2 = (($signed(shadow_bottomL_jR_2_q0) < $signed(select_ln201_1_fu_575_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1495_3_fu_676_p2 = (($signed(shadow_bottomL_jR_3_load_reg_879) < $signed(select_ln201_2_reg_907)) ? 1'b1 : 1'b0);

assign icmp_ln1495_4_fu_556_p2 = (($signed(shadow_bottomR_jR_0_q0) < $signed(32'd2146435072)) ? 1'b1 : 1'b0);

assign icmp_ln1495_5_fu_751_p2 = (($signed(select_ln204_3_reg_940) < $signed(select_ln210_2_reg_955)) ? 1'b1 : 1'b0);

assign icmp_ln1495_6_fu_582_p2 = (($signed(shadow_bottomR_jR_1_q0) < $signed(select_ln204_fu_562_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1495_7_fu_666_p2 = (($signed(shadow_bottomR_jR_2_load_reg_873) < $signed(select_ln204_1_reg_901)) ? 1'b1 : 1'b0);

assign icmp_ln1495_8_fu_687_p2 = (($signed(shadow_bottomR_jR_3_q0) < $signed(select_ln204_2_fu_670_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_542_p2 = (($signed(shadow_bottomL_jR_0_q0) < $signed(32'd2146435072)) ? 1'b1 : 1'b0);

assign icmp_ln1499_1_fu_733_p2 = ((select_ln204_3_fu_693_p3 == shadow_bottomR_jR_3_q0) ? 1'b1 : 1'b0);

assign icmp_ln1499_2_fu_739_p2 = ((select_ln207_2_reg_948 == shadow_bottomL_jL_3_load_reg_925) ? 1'b1 : 1'b0);

assign icmp_ln1499_3_fu_743_p2 = ((select_ln210_2_reg_955 == shadow_bottomR_jL_3_load_reg_930) ? 1'b1 : 1'b0);

assign icmp_ln1499_fu_728_p2 = ((select_ln201_3_fu_680_p3 == shadow_bottomL_jR_3_load_reg_879) ? 1'b1 : 1'b0);

assign idxprom_fu_535_p1 = p_read;

assign select_ln201_1_fu_575_p3 = ((icmp_ln1495_1_fu_570_p2[0:0] == 1'b1) ? shadow_bottomL_jR_1_q0 : select_ln201_reg_867);

assign select_ln201_2_fu_630_p3 = ((icmp_ln1495_2_fu_624_p2[0:0] == 1'b1) ? shadow_bottomL_jR_2_q0 : select_ln201_1_fu_575_p3);

assign select_ln201_3_fu_680_p3 = ((icmp_ln1495_3_fu_676_p2[0:0] == 1'b1) ? shadow_bottomL_jR_3_load_reg_879 : select_ln201_2_reg_907);

assign select_ln201_fu_548_p3 = ((icmp_ln1495_fu_542_p2[0:0] == 1'b1) ? shadow_bottomL_jR_0_q0 : 32'd2146435072);

assign select_ln204_1_fu_588_p3 = ((icmp_ln1495_6_fu_582_p2[0:0] == 1'b1) ? shadow_bottomR_jR_1_q0 : select_ln204_fu_562_p3);

assign select_ln204_2_fu_670_p3 = ((icmp_ln1495_7_fu_666_p2[0:0] == 1'b1) ? shadow_bottomR_jR_2_load_reg_873 : select_ln204_1_reg_901);

assign select_ln204_3_fu_693_p3 = ((icmp_ln1495_8_fu_687_p2[0:0] == 1'b1) ? shadow_bottomR_jR_3_q0 : select_ln204_2_fu_670_p3);

assign select_ln204_fu_562_p3 = ((icmp_ln1495_4_fu_556_p2[0:0] == 1'b1) ? shadow_bottomR_jR_0_q0 : 32'd2146435072);

assign select_ln207_1_fu_644_p3 = ((icmp_ln1494_4_fu_638_p2[0:0] == 1'b1) ? shadow_bottomL_jL_2_q0 : select_ln207_fu_602_p3);

assign select_ln207_2_fu_707_p3 = ((icmp_ln1494_3_fu_702_p2[0:0] == 1'b1) ? shadow_bottomL_jL_3_q0 : select_ln207_1_reg_913);

assign select_ln207_fu_602_p3 = ((icmp_ln1494_fu_596_p2[0:0] == 1'b1) ? shadow_bottomL_jL_1_q0 : shadow_bottomL_jL_0_q0);

assign select_ln210_1_fu_658_p3 = ((icmp_ln1494_5_fu_652_p2[0:0] == 1'b1) ? shadow_bottomR_jL_2_q0 : select_ln210_fu_616_p3);

assign select_ln210_2_fu_720_p3 = ((icmp_ln1494_6_fu_715_p2[0:0] == 1'b1) ? shadow_bottomR_jL_3_q0 : select_ln210_1_reg_919);

assign select_ln210_fu_616_p3 = ((icmp_ln1494_1_fu_610_p2[0:0] == 1'b1) ? shadow_bottomR_jL_1_q0 : shadow_bottomR_jL_0_q0);

assign shadow_bottomL_jL_0_address0 = idxprom_reg_755;

assign shadow_bottomL_jL_1_address0 = idxprom_reg_755;

assign shadow_bottomL_jL_2_address0 = idxprom_reg_755;

assign shadow_bottomL_jL_3_address0 = idxprom_reg_755;

assign shadow_bottomL_jR_0_address0 = idxprom_fu_535_p1;

assign shadow_bottomL_jR_1_address0 = idxprom_reg_755;

assign shadow_bottomL_jR_2_address0 = idxprom_reg_755;

assign shadow_bottomL_jR_3_address0 = idxprom_reg_755;

assign shadow_bottomR_jL_0_address0 = idxprom_reg_755;

assign shadow_bottomR_jL_1_address0 = idxprom_reg_755;

assign shadow_bottomR_jL_2_address0 = idxprom_reg_755;

assign shadow_bottomR_jL_3_address0 = idxprom_reg_755;

assign shadow_bottomR_jR_0_address0 = idxprom_reg_755;

assign shadow_bottomR_jR_1_address0 = idxprom_reg_755;

assign shadow_bottomR_jR_2_address0 = idxprom_reg_755;

assign shadow_bottomR_jR_3_address0 = idxprom_reg_755;

assign squareAcceptance_addr_1_gep_fu_448_p3 = idxprom_reg_755;

assign squareAcceptance_addr_2_gep_fu_478_p3 = idxprom_reg_755;

assign squareAcceptance_addr_3_gep_fu_494_p3 = idxprom_reg_755;

assign squareAcceptance_d0 = 1'd0;

assign triangleAcceptance_addr_1_gep_fu_516_p3 = idxprom_reg_755;

assign triangleAcceptance_d0 = 1'd1;

assign z1_max_0_address0 = idxprom_fu_535_p1;

assign z1_min_0_address0 = idxprom_fu_535_p1;

always @ (posedge ap_clk) begin
    idxprom_reg_755[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //system_top_get_acceptanceCorners
