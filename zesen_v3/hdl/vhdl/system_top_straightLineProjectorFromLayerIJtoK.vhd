-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_straightLineProjectorFromLayerIJtoK is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z_i : IN STD_LOGIC_VECTOR (31 downto 0);
    z_j : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    j : IN STD_LOGIC_VECTOR (2 downto 0);
    k : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of system_top_straightLineProjectorFromLayerIJtoK is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal get_radiiradii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal get_radiiradii_ce0 : STD_LOGIC;
    signal get_radiiradii_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal get_radiiradii_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal get_radiiradii_ce1 : STD_LOGIC;
    signal get_radiiradii_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln870_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln731_fu_118_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln731_reg_312 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln870_1_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_1_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_2_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_2_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln1148_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_258_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_reg_357 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_1_fu_274_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_1_reg_362 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal zext_ln113_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_1_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_2_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_fu_107_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln33_fu_128_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln38_fu_145_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal radius_i_V_fu_156_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln731_1_fu_170_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal radius_j_V_fu_174_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln731_2_fu_189_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal radius_k_V_fu_193_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_k_V_2_fu_201_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_i_V_2_fu_163_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1193_fu_208_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1193_1_fu_212_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal radius_j_V_2_fu_182_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1193_2_fu_222_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_fu_216_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_1_fu_226_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln703_1_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_fu_250_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_1_fu_254_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal radii_leverArm_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal lhs_2_fu_280_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_3_fu_287_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_244_ap_start : STD_LOGIC;
    signal grp_fu_244_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component system_top_sdiv_46ns_26s_32_50_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (45 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_mul_33s_32s_52_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component system_top_straightLineProjectorFromLayerIJtoK_get_radiiradii IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    get_radiiradii_U : component system_top_straightLineProjectorFromLayerIJtoK_get_radiiradii
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => get_radiiradii_address0,
        ce0 => get_radiiradii_ce0,
        q0 => get_radiiradii_q0,
        address1 => get_radiiradii_address1,
        ce1 => get_radiiradii_ce1,
        q1 => get_radiiradii_q1);

    sdiv_46ns_26s_32_50_seq_1_U172 : component system_top_sdiv_46ns_26s_32_50_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 50,
        din0_WIDTH => 46,
        din1_WIDTH => 26,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_244_ap_start,
        done => grp_fu_244_ap_done,
        din0 => grp_fu_244_p0,
        din1 => ret_V_1_fu_226_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    mul_33s_32s_52_1_1_U173 : component system_top_mul_33s_32s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        din0 => ret_V_4_reg_357,
        din1 => radii_leverArm_fu_264_p1,
        dout => r_V_1_fu_274_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln870_1_reg_317 <= icmp_ln870_1_fu_122_p2;
                icmp_ln870_2_reg_327 <= icmp_ln870_2_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln870_reg_302 <= icmp_ln870_fu_101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                r_V_1_reg_362 <= r_V_1_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                ret_V_4_reg_357 <= ret_V_4_fu_258_p2;
                sdiv_ln1148_reg_352 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_reg_302 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln731_reg_312 <= trunc_ln731_fu_118_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln28_fu_107_p2 <= std_logic_vector(unsigned(i) + unsigned(ap_const_lv3_7));
    add_ln33_fu_128_p2 <= std_logic_vector(unsigned(j) + unsigned(ap_const_lv3_7));
    add_ln38_fu_145_p2 <= std_logic_vector(unsigned(k) + unsigned(ap_const_lv3_7));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ret_V_3_fu_287_p2(51 downto 20);

    get_radiiradii_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln113_fu_113_p1, zext_ln113_2_fu_151_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            get_radiiradii_address0 <= zext_ln113_2_fu_151_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            get_radiiradii_address0 <= zext_ln113_fu_113_p1(3 - 1 downto 0);
        else 
            get_radiiradii_address0 <= "XXX";
        end if; 
    end process;

    get_radiiradii_address1 <= zext_ln113_1_fu_134_p1(3 - 1 downto 0);

    get_radiiradii_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            get_radiiradii_ce0 <= ap_const_logic_1;
        else 
            get_radiiradii_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    get_radiiradii_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            get_radiiradii_ce1 <= ap_const_logic_1;
        else 
            get_radiiradii_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_244_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_244_ap_start <= ap_const_logic_1;
        else 
            grp_fu_244_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_244_p0 <= (ret_V_fu_216_p2 & ap_const_lv20_0);
    icmp_ln870_1_fu_122_p2 <= "1" when (j = ap_const_lv3_0) else "0";
    icmp_ln870_2_fu_139_p2 <= "1" when (k = ap_const_lv3_0) else "0";
    icmp_ln870_fu_101_p2 <= "1" when (i = ap_const_lv3_0) else "0";
    lhs_2_fu_280_p1 <= z_i;
    lhs_2_fu_280_p3 <= (lhs_2_fu_280_p1 & ap_const_lv20_0);
    radii_leverArm_fu_264_p1 <= sdiv_ln1148_reg_352(32 - 1 downto 0);
    radius_i_V_2_fu_163_p3 <= 
        ap_const_lv25_0 when (icmp_ln870_reg_302(0) = '1') else 
        radius_i_V_fu_156_p3;
    radius_i_V_fu_156_p3 <= (trunc_ln731_reg_312 & ap_const_lv20_0);
    radius_j_V_2_fu_182_p3 <= 
        ap_const_lv25_0 when (icmp_ln870_1_reg_317(0) = '1') else 
        radius_j_V_fu_174_p3;
    radius_j_V_fu_174_p3 <= (trunc_ln731_1_fu_170_p1 & ap_const_lv20_0);
    radius_k_V_2_fu_201_p3 <= 
        ap_const_lv25_0 when (icmp_ln870_2_reg_327(0) = '1') else 
        radius_k_V_fu_193_p3;
    radius_k_V_fu_193_p3 <= (trunc_ln731_2_fu_189_p1 & ap_const_lv20_0);
    ret_V_1_fu_226_p2 <= std_logic_vector(unsigned(zext_ln1193_2_fu_222_p1) - unsigned(zext_ln1193_1_fu_212_p1));
    ret_V_3_fu_287_p2 <= std_logic_vector(unsigned(r_V_1_reg_362) + unsigned(lhs_2_fu_280_p3));
    ret_V_4_fu_258_p2 <= std_logic_vector(signed(sext_ln703_fu_250_p1) - signed(sext_ln703_1_fu_254_p1));
    ret_V_fu_216_p2 <= std_logic_vector(unsigned(zext_ln1193_fu_208_p1) - unsigned(zext_ln1193_1_fu_212_p1));
    sext_ln703_1_fu_254_p0 <= z_i;
        sext_ln703_1_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_1_fu_254_p0),33));

        sext_ln703_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_j),33));

    trunc_ln731_1_fu_170_p1 <= get_radiiradii_q1(5 - 1 downto 0);
    trunc_ln731_2_fu_189_p1 <= get_radiiradii_q0(5 - 1 downto 0);
    trunc_ln731_fu_118_p1 <= get_radiiradii_q0(5 - 1 downto 0);
    zext_ln113_1_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_128_p2),64));
    zext_ln113_2_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_145_p2),64));
    zext_ln113_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_107_p2),64));
    zext_ln1193_1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_i_V_2_fu_163_p3),26));
    zext_ln1193_2_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_j_V_2_fu_182_p3),26));
    zext_ln1193_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_k_V_2_fu_201_p3),26));
end behav;
