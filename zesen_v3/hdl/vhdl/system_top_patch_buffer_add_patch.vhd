-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_patch_buffer_add_patch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patch_stream_V_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_stream_V_full_n : IN STD_LOGIC;
    patch_stream_V_write : OUT STD_LOGIC;
    new_patch_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_0_ce0 : OUT STD_LOGIC;
    new_patch_0_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_0_ce1 : OUT STD_LOGIC;
    new_patch_0_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_1_ce0 : OUT STD_LOGIC;
    new_patch_1_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_1_ce1 : OUT STD_LOGIC;
    new_patch_1_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_2_ce0 : OUT STD_LOGIC;
    new_patch_2_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_2_ce1 : OUT STD_LOGIC;
    new_patch_2_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_3_ce0 : OUT STD_LOGIC;
    new_patch_3_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_3_ce1 : OUT STD_LOGIC;
    new_patch_3_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_4_ce0 : OUT STD_LOGIC;
    new_patch_4_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_4_ce1 : OUT STD_LOGIC;
    new_patch_4_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_5_ce0 : OUT STD_LOGIC;
    new_patch_5_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_5_ce1 : OUT STD_LOGIC;
    new_patch_5_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_6_ce0 : OUT STD_LOGIC;
    new_patch_6_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_6_ce1 : OUT STD_LOGIC;
    new_patch_6_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_7_ce0 : OUT STD_LOGIC;
    new_patch_7_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_7_ce1 : OUT STD_LOGIC;
    new_patch_7_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_8_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_8_ce0 : OUT STD_LOGIC;
    new_patch_8_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_8_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_8_ce1 : OUT STD_LOGIC;
    new_patch_8_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_9_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_9_ce0 : OUT STD_LOGIC;
    new_patch_9_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_9_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_9_ce1 : OUT STD_LOGIC;
    new_patch_9_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_10_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_10_ce0 : OUT STD_LOGIC;
    new_patch_10_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_10_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_10_ce1 : OUT STD_LOGIC;
    new_patch_10_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_11_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_11_ce0 : OUT STD_LOGIC;
    new_patch_11_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_11_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_11_ce1 : OUT STD_LOGIC;
    new_patch_11_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_12_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_12_ce0 : OUT STD_LOGIC;
    new_patch_12_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_12_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_12_ce1 : OUT STD_LOGIC;
    new_patch_12_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_13_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_13_ce0 : OUT STD_LOGIC;
    new_patch_13_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_13_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_13_ce1 : OUT STD_LOGIC;
    new_patch_13_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_14_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_14_ce0 : OUT STD_LOGIC;
    new_patch_14_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_14_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_14_ce1 : OUT STD_LOGIC;
    new_patch_14_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_15_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_15_ce0 : OUT STD_LOGIC;
    new_patch_15_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_15_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    new_patch_15_ce1 : OUT STD_LOGIC;
    new_patch_15_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_0_ce0 : OUT STD_LOGIC;
    patch_buffer_0_0_we0 : OUT STD_LOGIC;
    patch_buffer_0_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_0_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_1_ce0 : OUT STD_LOGIC;
    patch_buffer_0_1_we0 : OUT STD_LOGIC;
    patch_buffer_0_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_1_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_2_ce0 : OUT STD_LOGIC;
    patch_buffer_0_2_we0 : OUT STD_LOGIC;
    patch_buffer_0_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_2_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_3_ce0 : OUT STD_LOGIC;
    patch_buffer_0_3_we0 : OUT STD_LOGIC;
    patch_buffer_0_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_3_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_4_ce0 : OUT STD_LOGIC;
    patch_buffer_0_4_we0 : OUT STD_LOGIC;
    patch_buffer_0_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_4_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_5_ce0 : OUT STD_LOGIC;
    patch_buffer_0_5_we0 : OUT STD_LOGIC;
    patch_buffer_0_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_5_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_6_ce0 : OUT STD_LOGIC;
    patch_buffer_0_6_we0 : OUT STD_LOGIC;
    patch_buffer_0_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_6_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_7_ce0 : OUT STD_LOGIC;
    patch_buffer_0_7_we0 : OUT STD_LOGIC;
    patch_buffer_0_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_7_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_8_ce0 : OUT STD_LOGIC;
    patch_buffer_0_8_we0 : OUT STD_LOGIC;
    patch_buffer_0_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_8_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_9_ce0 : OUT STD_LOGIC;
    patch_buffer_0_9_we0 : OUT STD_LOGIC;
    patch_buffer_0_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_9_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_10_ce0 : OUT STD_LOGIC;
    patch_buffer_0_10_we0 : OUT STD_LOGIC;
    patch_buffer_0_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_10_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_11_ce0 : OUT STD_LOGIC;
    patch_buffer_0_11_we0 : OUT STD_LOGIC;
    patch_buffer_0_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_11_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_12_ce0 : OUT STD_LOGIC;
    patch_buffer_0_12_we0 : OUT STD_LOGIC;
    patch_buffer_0_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_12_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_13_ce0 : OUT STD_LOGIC;
    patch_buffer_0_13_we0 : OUT STD_LOGIC;
    patch_buffer_0_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_13_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_14_ce0 : OUT STD_LOGIC;
    patch_buffer_0_14_we0 : OUT STD_LOGIC;
    patch_buffer_0_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_14_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_15_ce0 : OUT STD_LOGIC;
    patch_buffer_0_15_we0 : OUT STD_LOGIC;
    patch_buffer_0_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_15_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_0_ce0 : OUT STD_LOGIC;
    patch_buffer_1_0_we0 : OUT STD_LOGIC;
    patch_buffer_1_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_0_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_1_ce0 : OUT STD_LOGIC;
    patch_buffer_1_1_we0 : OUT STD_LOGIC;
    patch_buffer_1_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_1_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_2_ce0 : OUT STD_LOGIC;
    patch_buffer_1_2_we0 : OUT STD_LOGIC;
    patch_buffer_1_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_2_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_3_ce0 : OUT STD_LOGIC;
    patch_buffer_1_3_we0 : OUT STD_LOGIC;
    patch_buffer_1_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_3_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_4_ce0 : OUT STD_LOGIC;
    patch_buffer_1_4_we0 : OUT STD_LOGIC;
    patch_buffer_1_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_4_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_5_ce0 : OUT STD_LOGIC;
    patch_buffer_1_5_we0 : OUT STD_LOGIC;
    patch_buffer_1_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_5_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_6_ce0 : OUT STD_LOGIC;
    patch_buffer_1_6_we0 : OUT STD_LOGIC;
    patch_buffer_1_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_6_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_7_ce0 : OUT STD_LOGIC;
    patch_buffer_1_7_we0 : OUT STD_LOGIC;
    patch_buffer_1_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_7_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_8_ce0 : OUT STD_LOGIC;
    patch_buffer_1_8_we0 : OUT STD_LOGIC;
    patch_buffer_1_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_8_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_9_ce0 : OUT STD_LOGIC;
    patch_buffer_1_9_we0 : OUT STD_LOGIC;
    patch_buffer_1_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_9_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_10_ce0 : OUT STD_LOGIC;
    patch_buffer_1_10_we0 : OUT STD_LOGIC;
    patch_buffer_1_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_10_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_11_ce0 : OUT STD_LOGIC;
    patch_buffer_1_11_we0 : OUT STD_LOGIC;
    patch_buffer_1_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_11_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_12_ce0 : OUT STD_LOGIC;
    patch_buffer_1_12_we0 : OUT STD_LOGIC;
    patch_buffer_1_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_12_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_13_ce0 : OUT STD_LOGIC;
    patch_buffer_1_13_we0 : OUT STD_LOGIC;
    patch_buffer_1_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_13_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_14_ce0 : OUT STD_LOGIC;
    patch_buffer_1_14_we0 : OUT STD_LOGIC;
    patch_buffer_1_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_14_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_15_ce0 : OUT STD_LOGIC;
    patch_buffer_1_15_we0 : OUT STD_LOGIC;
    patch_buffer_1_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_15_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_0_ce0 : OUT STD_LOGIC;
    patch_buffer_2_0_we0 : OUT STD_LOGIC;
    patch_buffer_2_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_0_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_1_ce0 : OUT STD_LOGIC;
    patch_buffer_2_1_we0 : OUT STD_LOGIC;
    patch_buffer_2_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_1_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_2_ce0 : OUT STD_LOGIC;
    patch_buffer_2_2_we0 : OUT STD_LOGIC;
    patch_buffer_2_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_2_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_3_ce0 : OUT STD_LOGIC;
    patch_buffer_2_3_we0 : OUT STD_LOGIC;
    patch_buffer_2_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_3_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_4_ce0 : OUT STD_LOGIC;
    patch_buffer_2_4_we0 : OUT STD_LOGIC;
    patch_buffer_2_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_4_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_5_ce0 : OUT STD_LOGIC;
    patch_buffer_2_5_we0 : OUT STD_LOGIC;
    patch_buffer_2_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_5_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_6_ce0 : OUT STD_LOGIC;
    patch_buffer_2_6_we0 : OUT STD_LOGIC;
    patch_buffer_2_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_6_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_7_ce0 : OUT STD_LOGIC;
    patch_buffer_2_7_we0 : OUT STD_LOGIC;
    patch_buffer_2_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_7_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_8_ce0 : OUT STD_LOGIC;
    patch_buffer_2_8_we0 : OUT STD_LOGIC;
    patch_buffer_2_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_8_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_9_ce0 : OUT STD_LOGIC;
    patch_buffer_2_9_we0 : OUT STD_LOGIC;
    patch_buffer_2_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_9_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_10_ce0 : OUT STD_LOGIC;
    patch_buffer_2_10_we0 : OUT STD_LOGIC;
    patch_buffer_2_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_10_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_11_ce0 : OUT STD_LOGIC;
    patch_buffer_2_11_we0 : OUT STD_LOGIC;
    patch_buffer_2_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_11_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_12_ce0 : OUT STD_LOGIC;
    patch_buffer_2_12_we0 : OUT STD_LOGIC;
    patch_buffer_2_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_12_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_13_ce0 : OUT STD_LOGIC;
    patch_buffer_2_13_we0 : OUT STD_LOGIC;
    patch_buffer_2_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_13_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_14_ce0 : OUT STD_LOGIC;
    patch_buffer_2_14_we0 : OUT STD_LOGIC;
    patch_buffer_2_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_14_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_15_ce0 : OUT STD_LOGIC;
    patch_buffer_2_15_we0 : OUT STD_LOGIC;
    patch_buffer_2_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_15_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_0_ce0 : OUT STD_LOGIC;
    patch_buffer_3_0_we0 : OUT STD_LOGIC;
    patch_buffer_3_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_0_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_1_ce0 : OUT STD_LOGIC;
    patch_buffer_3_1_we0 : OUT STD_LOGIC;
    patch_buffer_3_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_1_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_2_ce0 : OUT STD_LOGIC;
    patch_buffer_3_2_we0 : OUT STD_LOGIC;
    patch_buffer_3_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_2_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_3_ce0 : OUT STD_LOGIC;
    patch_buffer_3_3_we0 : OUT STD_LOGIC;
    patch_buffer_3_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_3_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_4_ce0 : OUT STD_LOGIC;
    patch_buffer_3_4_we0 : OUT STD_LOGIC;
    patch_buffer_3_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_4_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_5_ce0 : OUT STD_LOGIC;
    patch_buffer_3_5_we0 : OUT STD_LOGIC;
    patch_buffer_3_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_5_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_6_ce0 : OUT STD_LOGIC;
    patch_buffer_3_6_we0 : OUT STD_LOGIC;
    patch_buffer_3_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_6_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_7_ce0 : OUT STD_LOGIC;
    patch_buffer_3_7_we0 : OUT STD_LOGIC;
    patch_buffer_3_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_7_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_8_ce0 : OUT STD_LOGIC;
    patch_buffer_3_8_we0 : OUT STD_LOGIC;
    patch_buffer_3_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_8_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_9_ce0 : OUT STD_LOGIC;
    patch_buffer_3_9_we0 : OUT STD_LOGIC;
    patch_buffer_3_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_9_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_10_ce0 : OUT STD_LOGIC;
    patch_buffer_3_10_we0 : OUT STD_LOGIC;
    patch_buffer_3_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_10_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_11_ce0 : OUT STD_LOGIC;
    patch_buffer_3_11_we0 : OUT STD_LOGIC;
    patch_buffer_3_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_11_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_12_ce0 : OUT STD_LOGIC;
    patch_buffer_3_12_we0 : OUT STD_LOGIC;
    patch_buffer_3_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_12_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_13_ce0 : OUT STD_LOGIC;
    patch_buffer_3_13_we0 : OUT STD_LOGIC;
    patch_buffer_3_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_13_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_14_ce0 : OUT STD_LOGIC;
    patch_buffer_3_14_we0 : OUT STD_LOGIC;
    patch_buffer_3_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_14_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_15_ce0 : OUT STD_LOGIC;
    patch_buffer_3_15_we0 : OUT STD_LOGIC;
    patch_buffer_3_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_15_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_0_ce0 : OUT STD_LOGIC;
    patch_buffer_4_0_we0 : OUT STD_LOGIC;
    patch_buffer_4_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_0_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_1_ce0 : OUT STD_LOGIC;
    patch_buffer_4_1_we0 : OUT STD_LOGIC;
    patch_buffer_4_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_1_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_2_ce0 : OUT STD_LOGIC;
    patch_buffer_4_2_we0 : OUT STD_LOGIC;
    patch_buffer_4_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_2_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_3_ce0 : OUT STD_LOGIC;
    patch_buffer_4_3_we0 : OUT STD_LOGIC;
    patch_buffer_4_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_3_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_4_ce0 : OUT STD_LOGIC;
    patch_buffer_4_4_we0 : OUT STD_LOGIC;
    patch_buffer_4_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_4_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_5_ce0 : OUT STD_LOGIC;
    patch_buffer_4_5_we0 : OUT STD_LOGIC;
    patch_buffer_4_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_5_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_6_ce0 : OUT STD_LOGIC;
    patch_buffer_4_6_we0 : OUT STD_LOGIC;
    patch_buffer_4_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_6_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_7_ce0 : OUT STD_LOGIC;
    patch_buffer_4_7_we0 : OUT STD_LOGIC;
    patch_buffer_4_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_7_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_8_ce0 : OUT STD_LOGIC;
    patch_buffer_4_8_we0 : OUT STD_LOGIC;
    patch_buffer_4_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_8_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_9_ce0 : OUT STD_LOGIC;
    patch_buffer_4_9_we0 : OUT STD_LOGIC;
    patch_buffer_4_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_9_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_10_ce0 : OUT STD_LOGIC;
    patch_buffer_4_10_we0 : OUT STD_LOGIC;
    patch_buffer_4_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_10_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_11_ce0 : OUT STD_LOGIC;
    patch_buffer_4_11_we0 : OUT STD_LOGIC;
    patch_buffer_4_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_11_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_12_ce0 : OUT STD_LOGIC;
    patch_buffer_4_12_we0 : OUT STD_LOGIC;
    patch_buffer_4_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_12_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_13_ce0 : OUT STD_LOGIC;
    patch_buffer_4_13_we0 : OUT STD_LOGIC;
    patch_buffer_4_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_13_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_14_ce0 : OUT STD_LOGIC;
    patch_buffer_4_14_we0 : OUT STD_LOGIC;
    patch_buffer_4_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_14_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_15_ce0 : OUT STD_LOGIC;
    patch_buffer_4_15_we0 : OUT STD_LOGIC;
    patch_buffer_4_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_15_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_valid_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_valid_ce0 : OUT STD_LOGIC;
    patch_buffer_valid_we0 : OUT STD_LOGIC;
    patch_buffer_valid_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    patch_buffer_valid_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    patch_buffer_order_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_order_ce0 : OUT STD_LOGIC;
    patch_buffer_order_we0 : OUT STD_LOGIC;
    patch_buffer_order_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_order_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_patches_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of system_top_patch_buffer_add_patch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (87 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (87 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (87 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (87 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (87 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (87 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (87 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (87 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (87 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (87 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal patch_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal patch_buffer_valid_load_reg_3115 : STD_LOGIC_VECTOR (0 downto 0);
    signal patch_buffer_valid_load_1_reg_3124 : STD_LOGIC_VECTOR (0 downto 0);
    signal patch_buffer_valid_load_2_reg_3133 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_patch_index_reg_3137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln52_fu_3041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_reg_3142 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal zext_ln69_fu_3046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_reg_3790 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal next_patch_index_1_reg_3020 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op426_write_state85 : BOOLEAN;
    signal ap_block_state85 : BOOLEAN;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal add_ln83_fu_3083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (87 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    next_patch_index_1_reg_3020_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((patch_buffer_valid_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                next_patch_index_1_reg_3020 <= ap_const_lv32_2;
            elsif (((patch_buffer_valid_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                next_patch_index_1_reg_3020 <= ap_const_lv32_1;
            elsif (((patch_buffer_valid_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                next_patch_index_1_reg_3020 <= ap_const_lv32_0;
            elsif ((not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85) and (patch_buffer_valid_load_2_reg_3133 = ap_const_lv1_1) and (patch_buffer_valid_load_1_reg_3124 = ap_const_lv1_1) and (patch_buffer_valid_load_reg_3115 = ap_const_lv1_1))) then 
                next_patch_index_1_reg_3020 <= next_patch_index_reg_3137;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                next_patch_index_reg_3137 <= patch_buffer_order_q0;
                    zext_ln52_reg_3142(31 downto 0) <= zext_ln52_fu_3041_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                patch_buffer_valid_load_1_reg_3124 <= patch_buffer_valid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                patch_buffer_valid_load_2_reg_3133 <= patch_buffer_valid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                patch_buffer_valid_load_reg_3115 <= patch_buffer_valid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                    zext_ln69_reg_3790(31 downto 0) <= zext_ln69_fu_3046_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln52_reg_3142(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln69_reg_3790(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, patch_stream_V_full_n, patch_buffer_valid_q0, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_predicate_op426_write_state85)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((patch_buffer_valid_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((patch_buffer_valid_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((patch_buffer_valid_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state83) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (patch_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if ((not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln83_fu_3083_p2 <= std_logic_vector(unsigned(num_patches_read) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state85_assign_proc : process(patch_stream_V_full_n, ap_predicate_op426_write_state85)
    begin
                ap_block_state85 <= ((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op426_write_state85_assign_proc : process(patch_buffer_valid_load_reg_3115, patch_buffer_valid_load_1_reg_3124, patch_buffer_valid_load_2_reg_3133)
    begin
                ap_predicate_op426_write_state85 <= ((patch_buffer_valid_load_2_reg_3133 = ap_const_lv1_1) and (patch_buffer_valid_load_1_reg_3124 = ap_const_lv1_1) and (patch_buffer_valid_load_reg_3115 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= next_patch_index_1_reg_3020;
    ap_return_1 <= add_ln83_fu_3083_p2;

    new_patch_0_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_0_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_0_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_0_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_0_address0 <= "XXX";
        end if; 
    end process;


    new_patch_0_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_0_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_0_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_0_address1 <= "XXX";
        end if; 
    end process;


    new_patch_0_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_0_ce0 <= ap_const_logic_1;
        else 
            new_patch_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_0_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_0_ce1 <= ap_const_logic_1;
        else 
            new_patch_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_10_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_10_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_10_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_10_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_10_address0 <= "XXX";
        end if; 
    end process;


    new_patch_10_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_10_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_10_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_10_address1 <= "XXX";
        end if; 
    end process;


    new_patch_10_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_10_ce0 <= ap_const_logic_1;
        else 
            new_patch_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_10_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_10_ce1 <= ap_const_logic_1;
        else 
            new_patch_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_11_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_11_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_11_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_11_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_11_address0 <= "XXX";
        end if; 
    end process;


    new_patch_11_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_11_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_11_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_11_address1 <= "XXX";
        end if; 
    end process;


    new_patch_11_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_11_ce0 <= ap_const_logic_1;
        else 
            new_patch_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_11_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_11_ce1 <= ap_const_logic_1;
        else 
            new_patch_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_12_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_12_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_12_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_12_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_12_address0 <= "XXX";
        end if; 
    end process;


    new_patch_12_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_12_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_12_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_12_address1 <= "XXX";
        end if; 
    end process;


    new_patch_12_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_12_ce0 <= ap_const_logic_1;
        else 
            new_patch_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_12_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_12_ce1 <= ap_const_logic_1;
        else 
            new_patch_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_13_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_13_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_13_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_13_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_13_address0 <= "XXX";
        end if; 
    end process;


    new_patch_13_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_13_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_13_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_13_address1 <= "XXX";
        end if; 
    end process;


    new_patch_13_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_13_ce0 <= ap_const_logic_1;
        else 
            new_patch_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_13_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_13_ce1 <= ap_const_logic_1;
        else 
            new_patch_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_14_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_14_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_14_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_14_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_14_address0 <= "XXX";
        end if; 
    end process;


    new_patch_14_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_14_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_14_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_14_address1 <= "XXX";
        end if; 
    end process;


    new_patch_14_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_14_ce0 <= ap_const_logic_1;
        else 
            new_patch_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_14_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_14_ce1 <= ap_const_logic_1;
        else 
            new_patch_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_15_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_15_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_15_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_15_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_15_address0 <= "XXX";
        end if; 
    end process;


    new_patch_15_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_15_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_15_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_15_address1 <= "XXX";
        end if; 
    end process;


    new_patch_15_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_15_ce0 <= ap_const_logic_1;
        else 
            new_patch_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_15_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_15_ce1 <= ap_const_logic_1;
        else 
            new_patch_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_1_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_1_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_1_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_1_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_1_address0 <= "XXX";
        end if; 
    end process;


    new_patch_1_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_1_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_1_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_1_address1 <= "XXX";
        end if; 
    end process;


    new_patch_1_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_1_ce0 <= ap_const_logic_1;
        else 
            new_patch_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_1_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_1_ce1 <= ap_const_logic_1;
        else 
            new_patch_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_2_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_2_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_2_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_2_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_2_address0 <= "XXX";
        end if; 
    end process;


    new_patch_2_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_2_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_2_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_2_address1 <= "XXX";
        end if; 
    end process;


    new_patch_2_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_2_ce0 <= ap_const_logic_1;
        else 
            new_patch_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_2_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_2_ce1 <= ap_const_logic_1;
        else 
            new_patch_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_3_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_3_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_3_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_3_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_3_address0 <= "XXX";
        end if; 
    end process;


    new_patch_3_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_3_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_3_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_3_address1 <= "XXX";
        end if; 
    end process;


    new_patch_3_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_3_ce0 <= ap_const_logic_1;
        else 
            new_patch_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_3_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_3_ce1 <= ap_const_logic_1;
        else 
            new_patch_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_4_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_4_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_4_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_4_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_4_address0 <= "XXX";
        end if; 
    end process;


    new_patch_4_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_4_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_4_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_4_address1 <= "XXX";
        end if; 
    end process;


    new_patch_4_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_4_ce0 <= ap_const_logic_1;
        else 
            new_patch_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_4_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_4_ce1 <= ap_const_logic_1;
        else 
            new_patch_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_5_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_5_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_5_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_5_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_5_address0 <= "XXX";
        end if; 
    end process;


    new_patch_5_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_5_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_5_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_5_address1 <= "XXX";
        end if; 
    end process;


    new_patch_5_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_5_ce0 <= ap_const_logic_1;
        else 
            new_patch_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_5_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_5_ce1 <= ap_const_logic_1;
        else 
            new_patch_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_6_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_6_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_6_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_6_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_6_address0 <= "XXX";
        end if; 
    end process;


    new_patch_6_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_6_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_6_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_6_address1 <= "XXX";
        end if; 
    end process;


    new_patch_6_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_6_ce0 <= ap_const_logic_1;
        else 
            new_patch_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_6_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_6_ce1 <= ap_const_logic_1;
        else 
            new_patch_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_7_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_7_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_7_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_7_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_7_address0 <= "XXX";
        end if; 
    end process;


    new_patch_7_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_7_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_7_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_7_address1 <= "XXX";
        end if; 
    end process;


    new_patch_7_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_7_ce0 <= ap_const_logic_1;
        else 
            new_patch_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_7_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_7_ce1 <= ap_const_logic_1;
        else 
            new_patch_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_8_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_8_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_8_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_8_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_8_address0 <= "XXX";
        end if; 
    end process;


    new_patch_8_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_8_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_8_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_8_address1 <= "XXX";
        end if; 
    end process;


    new_patch_8_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_8_ce0 <= ap_const_logic_1;
        else 
            new_patch_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_8_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_8_ce1 <= ap_const_logic_1;
        else 
            new_patch_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_9_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            new_patch_9_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_9_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_9_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            new_patch_9_address0 <= "XXX";
        end if; 
    end process;


    new_patch_9_address1_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            new_patch_9_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            new_patch_9_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_patch_9_address1 <= "XXX";
        end if; 
    end process;


    new_patch_9_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_9_ce0 <= ap_const_logic_1;
        else 
            new_patch_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_9_ce1_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op426_write_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            new_patch_9_ce1 <= ap_const_logic_1;
        else 
            new_patch_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_0_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln52_fu_3041_p1, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_0_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patch_buffer_0_0_address0 <= zext_ln52_fu_3041_p1(2 - 1 downto 0);
        else 
            patch_buffer_0_0_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            patch_buffer_0_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_0_d0 <= new_patch_0_q1;

    patch_buffer_0_0_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_10_address0_assign_proc : process(ap_CS_fsm_state15, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_10_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patch_buffer_0_10_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_10_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_10_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state15, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_10_d0 <= new_patch_10_q1;

    patch_buffer_0_10_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_11_address0_assign_proc : process(ap_CS_fsm_state16, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_11_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_0_11_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_11_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_11_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state16, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_11_d0 <= new_patch_11_q1;

    patch_buffer_0_11_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_12_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_12_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            patch_buffer_0_12_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_12_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_12_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state17, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_12_d0 <= new_patch_12_q1;

    patch_buffer_0_12_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_13_address0_assign_proc : process(ap_CS_fsm_state18, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_13_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            patch_buffer_0_13_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_13_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_13_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state18, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_13_d0 <= new_patch_13_q1;

    patch_buffer_0_13_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_14_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_14_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            patch_buffer_0_14_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_14_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_14_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state19, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_14_d0 <= new_patch_14_q1;

    patch_buffer_0_14_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_15_address0_assign_proc : process(ap_CS_fsm_state20, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_15_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            patch_buffer_0_15_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_15_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_15_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state20, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_15_d0 <= new_patch_15_q1;

    patch_buffer_0_15_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_1_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_1_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_buffer_0_1_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_1_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_1_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_1_d0 <= new_patch_1_q1;

    patch_buffer_0_1_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_2_address0_assign_proc : process(ap_CS_fsm_state7, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_2_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            patch_buffer_0_2_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_2_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_2_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_2_d0 <= new_patch_2_q1;

    patch_buffer_0_2_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_3_address0_assign_proc : process(ap_CS_fsm_state8, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_3_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            patch_buffer_0_3_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_3_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_3_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state8, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_3_d0 <= new_patch_3_q1;

    patch_buffer_0_3_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_4_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_4_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            patch_buffer_0_4_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_4_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_4_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state9, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_4_d0 <= new_patch_4_q1;

    patch_buffer_0_4_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_5_address0_assign_proc : process(ap_CS_fsm_state10, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_5_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patch_buffer_0_5_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_5_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_5_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state10, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_5_d0 <= new_patch_5_q1;

    patch_buffer_0_5_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_6_address0_assign_proc : process(ap_CS_fsm_state11, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_6_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patch_buffer_0_6_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_6_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_6_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state11, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_6_d0 <= new_patch_6_q1;

    patch_buffer_0_6_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_7_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_7_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_0_7_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_7_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_7_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state12, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_7_d0 <= new_patch_7_q1;

    patch_buffer_0_7_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_8_address0_assign_proc : process(ap_CS_fsm_state13, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_8_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patch_buffer_0_8_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_8_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_8_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state13, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_8_d0 <= new_patch_8_q1;

    patch_buffer_0_8_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_0_9_address0_assign_proc : process(ap_CS_fsm_state14, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_9_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            patch_buffer_0_9_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_0_9_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_0_9_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state14, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_0_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_9_d0 <= new_patch_9_q1;

    patch_buffer_0_9_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_0_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_0_address0_assign_proc : process(ap_CS_fsm_state21, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_0_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            patch_buffer_1_0_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_0_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_0_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state21, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_0_d0 <= new_patch_0_q0;

    patch_buffer_1_0_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_10_address0_assign_proc : process(ap_CS_fsm_state31, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_10_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            patch_buffer_1_10_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_10_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_10_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state31, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_10_d0 <= new_patch_10_q0;

    patch_buffer_1_10_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_11_address0_assign_proc : process(ap_CS_fsm_state32, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_11_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            patch_buffer_1_11_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_11_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_11_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state32, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_11_d0 <= new_patch_11_q0;

    patch_buffer_1_11_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_12_address0_assign_proc : process(ap_CS_fsm_state33, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_12_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            patch_buffer_1_12_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_12_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_12_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state33, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_12_d0 <= new_patch_12_q0;

    patch_buffer_1_12_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_13_address0_assign_proc : process(ap_CS_fsm_state34, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_13_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            patch_buffer_1_13_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_13_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_13_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state34, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_13_d0 <= new_patch_13_q0;

    patch_buffer_1_13_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_14_address0_assign_proc : process(ap_CS_fsm_state35, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_14_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            patch_buffer_1_14_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_14_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_14_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state35, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_14_d0 <= new_patch_14_q0;

    patch_buffer_1_14_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_15_address0_assign_proc : process(ap_CS_fsm_state36, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_15_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            patch_buffer_1_15_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_15_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_15_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state36, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_15_d0 <= new_patch_15_q0;

    patch_buffer_1_15_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_1_address0_assign_proc : process(ap_CS_fsm_state22, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_1_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            patch_buffer_1_1_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_1_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_1_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state22, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_1_d0 <= new_patch_1_q0;

    patch_buffer_1_1_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_2_address0_assign_proc : process(ap_CS_fsm_state23, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_2_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            patch_buffer_1_2_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_2_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_2_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state23, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_2_d0 <= new_patch_2_q0;

    patch_buffer_1_2_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_3_address0_assign_proc : process(ap_CS_fsm_state24, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_3_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            patch_buffer_1_3_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_3_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_3_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state24, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_3_d0 <= new_patch_3_q0;

    patch_buffer_1_3_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_4_address0_assign_proc : process(ap_CS_fsm_state25, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_4_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            patch_buffer_1_4_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_4_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_4_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state25, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_4_d0 <= new_patch_4_q0;

    patch_buffer_1_4_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_5_address0_assign_proc : process(ap_CS_fsm_state26, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_5_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            patch_buffer_1_5_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_5_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_5_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state26, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_5_d0 <= new_patch_5_q0;

    patch_buffer_1_5_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_6_address0_assign_proc : process(ap_CS_fsm_state27, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_6_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            patch_buffer_1_6_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_6_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_6_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state27, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_6_d0 <= new_patch_6_q0;

    patch_buffer_1_6_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_7_address0_assign_proc : process(ap_CS_fsm_state28, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_7_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            patch_buffer_1_7_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_7_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_7_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state28, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_7_d0 <= new_patch_7_q0;

    patch_buffer_1_7_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_8_address0_assign_proc : process(ap_CS_fsm_state29, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_8_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            patch_buffer_1_8_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_8_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_8_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state29, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_8_d0 <= new_patch_8_q0;

    patch_buffer_1_8_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_1_9_address0_assign_proc : process(ap_CS_fsm_state30, zext_ln52_reg_3142, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_9_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            patch_buffer_1_9_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_1_9_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_1_9_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state30, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_1_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_9_d0 <= new_patch_9_q0;

    patch_buffer_1_9_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_1_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_0_address0_assign_proc : process(ap_CS_fsm_state37, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_0_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            patch_buffer_2_0_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_0_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_0_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state37, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_0_d0 <= new_patch_0_q1;

    patch_buffer_2_0_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_10_address0_assign_proc : process(ap_CS_fsm_state47, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_10_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            patch_buffer_2_10_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_10_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_10_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state47, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_10_d0 <= new_patch_10_q1;

    patch_buffer_2_10_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_11_address0_assign_proc : process(ap_CS_fsm_state48, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_11_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            patch_buffer_2_11_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_11_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_11_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state48, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_11_d0 <= new_patch_11_q1;

    patch_buffer_2_11_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_12_address0_assign_proc : process(ap_CS_fsm_state49, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_12_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            patch_buffer_2_12_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_12_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_12_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_12_d0 <= new_patch_12_q1;

    patch_buffer_2_12_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_13_address0_assign_proc : process(ap_CS_fsm_state50, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_13_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            patch_buffer_2_13_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_13_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_13_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state50, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_13_d0 <= new_patch_13_q1;

    patch_buffer_2_13_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_14_address0_assign_proc : process(ap_CS_fsm_state51, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_14_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            patch_buffer_2_14_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_14_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_14_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state51, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_14_d0 <= new_patch_14_q1;

    patch_buffer_2_14_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_15_address0_assign_proc : process(ap_CS_fsm_state52, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_15_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            patch_buffer_2_15_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_15_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_15_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state52, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_15_d0 <= new_patch_15_q1;

    patch_buffer_2_15_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_1_address0_assign_proc : process(ap_CS_fsm_state38, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_1_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            patch_buffer_2_1_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_1_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_1_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state38, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_1_d0 <= new_patch_1_q1;

    patch_buffer_2_1_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_2_address0_assign_proc : process(ap_CS_fsm_state39, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_2_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            patch_buffer_2_2_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_2_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_2_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state39, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_2_d0 <= new_patch_2_q1;

    patch_buffer_2_2_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_3_address0_assign_proc : process(ap_CS_fsm_state40, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_3_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            patch_buffer_2_3_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_3_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_3_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state40, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_3_d0 <= new_patch_3_q1;

    patch_buffer_2_3_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_4_address0_assign_proc : process(ap_CS_fsm_state41, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_4_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            patch_buffer_2_4_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_4_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_4_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state41, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_4_d0 <= new_patch_4_q1;

    patch_buffer_2_4_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_5_address0_assign_proc : process(ap_CS_fsm_state42, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_5_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            patch_buffer_2_5_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_5_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_5_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state42, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_5_d0 <= new_patch_5_q1;

    patch_buffer_2_5_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_6_address0_assign_proc : process(ap_CS_fsm_state43, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_6_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            patch_buffer_2_6_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_6_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_6_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state43, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_6_d0 <= new_patch_6_q1;

    patch_buffer_2_6_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_7_address0_assign_proc : process(ap_CS_fsm_state44, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_7_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            patch_buffer_2_7_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_7_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_7_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state44, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_7_d0 <= new_patch_7_q1;

    patch_buffer_2_7_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_8_address0_assign_proc : process(ap_CS_fsm_state45, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_8_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            patch_buffer_2_8_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_8_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_8_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state45, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_8_d0 <= new_patch_8_q1;

    patch_buffer_2_8_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_2_9_address0_assign_proc : process(ap_CS_fsm_state46, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_9_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            patch_buffer_2_9_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_2_9_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_2_9_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state46, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_2_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_9_d0 <= new_patch_9_q1;

    patch_buffer_2_9_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_2_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_0_address0_assign_proc : process(ap_CS_fsm_state53, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_0_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            patch_buffer_3_0_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_0_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_0_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state53, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_0_d0 <= new_patch_0_q0;

    patch_buffer_3_0_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_10_address0_assign_proc : process(ap_CS_fsm_state63, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_10_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            patch_buffer_3_10_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_10_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_10_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state63, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_10_d0 <= new_patch_10_q0;

    patch_buffer_3_10_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_11_address0_assign_proc : process(ap_CS_fsm_state64, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_11_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            patch_buffer_3_11_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_11_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_11_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state64, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_11_d0 <= new_patch_11_q0;

    patch_buffer_3_11_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_12_address0_assign_proc : process(ap_CS_fsm_state65, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_12_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            patch_buffer_3_12_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_12_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_12_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state65, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_12_d0 <= new_patch_12_q0;

    patch_buffer_3_12_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_13_address0_assign_proc : process(ap_CS_fsm_state66, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_13_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            patch_buffer_3_13_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_13_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_13_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state66, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_13_d0 <= new_patch_13_q0;

    patch_buffer_3_13_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_14_address0_assign_proc : process(ap_CS_fsm_state67, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_14_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            patch_buffer_3_14_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_14_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_14_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state67, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_14_d0 <= new_patch_14_q0;

    patch_buffer_3_14_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_15_address0_assign_proc : process(ap_CS_fsm_state68, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_15_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            patch_buffer_3_15_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_15_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_15_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state68, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_15_d0 <= new_patch_15_q0;

    patch_buffer_3_15_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_1_address0_assign_proc : process(ap_CS_fsm_state54, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_1_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            patch_buffer_3_1_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_1_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_1_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state54, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_1_d0 <= new_patch_1_q0;

    patch_buffer_3_1_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_2_address0_assign_proc : process(ap_CS_fsm_state55, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_2_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            patch_buffer_3_2_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_2_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_2_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state55, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_2_d0 <= new_patch_2_q0;

    patch_buffer_3_2_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_3_address0_assign_proc : process(ap_CS_fsm_state56, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_3_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            patch_buffer_3_3_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_3_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_3_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state56, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_3_d0 <= new_patch_3_q0;

    patch_buffer_3_3_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_4_address0_assign_proc : process(ap_CS_fsm_state57, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_4_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            patch_buffer_3_4_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_4_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_4_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state57, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_4_d0 <= new_patch_4_q0;

    patch_buffer_3_4_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_5_address0_assign_proc : process(ap_CS_fsm_state58, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_5_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            patch_buffer_3_5_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_5_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_5_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state58, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_5_d0 <= new_patch_5_q0;

    patch_buffer_3_5_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_6_address0_assign_proc : process(ap_CS_fsm_state59, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_6_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            patch_buffer_3_6_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_6_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_6_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state59, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_6_d0 <= new_patch_6_q0;

    patch_buffer_3_6_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_7_address0_assign_proc : process(ap_CS_fsm_state60, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_7_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            patch_buffer_3_7_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_7_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_7_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state60, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_7_d0 <= new_patch_7_q0;

    patch_buffer_3_7_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_8_address0_assign_proc : process(ap_CS_fsm_state61, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_8_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            patch_buffer_3_8_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_8_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_8_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state61, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_8_d0 <= new_patch_8_q0;

    patch_buffer_3_8_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_3_9_address0_assign_proc : process(ap_CS_fsm_state62, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_9_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            patch_buffer_3_9_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_3_9_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_3_9_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state62, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state62) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_3_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_9_d0 <= new_patch_9_q0;

    patch_buffer_3_9_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_3_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_0_address0_assign_proc : process(ap_CS_fsm_state69, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_0_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            patch_buffer_4_0_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_0_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_0_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state69, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_0_d0 <= new_patch_0_q0;

    patch_buffer_4_0_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_10_address0_assign_proc : process(ap_CS_fsm_state79, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_10_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            patch_buffer_4_10_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_10_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_10_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state79, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_10_d0 <= new_patch_10_q0;

    patch_buffer_4_10_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_11_address0_assign_proc : process(ap_CS_fsm_state80, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_11_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            patch_buffer_4_11_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_11_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_11_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state80, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_11_d0 <= new_patch_11_q0;

    patch_buffer_4_11_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_12_address0_assign_proc : process(ap_CS_fsm_state81, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_12_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            patch_buffer_4_12_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_12_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_12_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state81, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state81) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_12_d0 <= new_patch_12_q0;

    patch_buffer_4_12_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_13_address0_assign_proc : process(ap_CS_fsm_state82, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_13_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            patch_buffer_4_13_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_13_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_13_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state82, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_13_d0 <= new_patch_13_q0;

    patch_buffer_4_13_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_14_address0_assign_proc : process(ap_CS_fsm_state83, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_14_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            patch_buffer_4_14_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_14_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_14_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state83, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_14_d0 <= new_patch_14_q0;

    patch_buffer_4_14_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_15_address0_assign_proc : process(ap_CS_fsm_state84, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_15_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            patch_buffer_4_15_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_15_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_15_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state84, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_15_d0 <= new_patch_15_q0;

    patch_buffer_4_15_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_1_address0_assign_proc : process(ap_CS_fsm_state70, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_1_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            patch_buffer_4_1_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_1_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_1_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state70, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_1_d0 <= new_patch_1_q0;

    patch_buffer_4_1_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_2_address0_assign_proc : process(ap_CS_fsm_state71, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_2_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            patch_buffer_4_2_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_2_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_2_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state71, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_2_d0 <= new_patch_2_q0;

    patch_buffer_4_2_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_3_address0_assign_proc : process(ap_CS_fsm_state72, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_3_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            patch_buffer_4_3_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_3_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_3_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state72, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_3_d0 <= new_patch_3_q0;

    patch_buffer_4_3_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_4_address0_assign_proc : process(ap_CS_fsm_state73, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_4_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            patch_buffer_4_4_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_4_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_4_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state73, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state73) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_4_d0 <= new_patch_4_q0;

    patch_buffer_4_4_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_5_address0_assign_proc : process(ap_CS_fsm_state74, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_5_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            patch_buffer_4_5_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_5_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_5_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state74, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_5_d0 <= new_patch_5_q0;

    patch_buffer_4_5_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_6_address0_assign_proc : process(ap_CS_fsm_state75, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_6_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            patch_buffer_4_6_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_6_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_6_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state75, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state75) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_6_d0 <= new_patch_6_q0;

    patch_buffer_4_6_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_7_address0_assign_proc : process(ap_CS_fsm_state76, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_7_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            patch_buffer_4_7_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_7_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_7_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state76, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state76) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_7_d0 <= new_patch_7_q0;

    patch_buffer_4_7_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_8_address0_assign_proc : process(ap_CS_fsm_state77, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_8_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            patch_buffer_4_8_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_8_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_8_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state77, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state77) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_8_d0 <= new_patch_8_q0;

    patch_buffer_4_8_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_4_9_address0_assign_proc : process(ap_CS_fsm_state78, zext_ln52_reg_3142, zext_ln69_reg_3790, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_9_address0 <= zext_ln69_reg_3790(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            patch_buffer_4_9_address0 <= zext_ln52_reg_3142(2 - 1 downto 0);
        else 
            patch_buffer_4_9_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_4_9_ce0_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state78, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_buffer_4_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_9_d0 <= new_patch_9_q0;

    patch_buffer_4_9_we0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            patch_buffer_4_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_order_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            patch_buffer_order_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_order_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            patch_buffer_order_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            patch_buffer_order_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_order_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            patch_buffer_order_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_order_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_order_d0_assign_proc : process(patch_buffer_order_q0, ap_CS_fsm_state86, ap_CS_fsm_state87, next_patch_index_1_reg_3020, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            patch_buffer_order_d0 <= patch_buffer_order_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_order_d0 <= next_patch_index_1_reg_3020;
        else 
            patch_buffer_order_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patch_buffer_order_we0_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            patch_buffer_order_we0 <= ap_const_logic_1;
        else 
            patch_buffer_order_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_valid_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state86, zext_ln69_fu_3046_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_valid_address0 <= zext_ln69_fu_3046_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patch_buffer_valid_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patch_buffer_valid_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            patch_buffer_valid_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            patch_buffer_valid_address0 <= "XX";
        end if; 
    end process;


    patch_buffer_valid_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            patch_buffer_valid_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_valid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_valid_d0 <= ap_const_lv1_1;

    patch_buffer_valid_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            patch_buffer_valid_we0 <= ap_const_logic_1;
        else 
            patch_buffer_valid_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_stream_V_blk_n_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, patch_buffer_valid_load_reg_3115, patch_buffer_valid_load_1_reg_3124, patch_buffer_valid_load_2_reg_3133)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (patch_buffer_valid_load_2_reg_3133 = ap_const_lv1_1) and (patch_buffer_valid_load_1_reg_3124 = ap_const_lv1_1) and (patch_buffer_valid_load_reg_3115 = ap_const_lv1_1)))) then 
            patch_stream_V_blk_n <= patch_stream_V_full_n;
        else 
            patch_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    patch_stream_V_din_assign_proc : process(patch_stream_V_full_n, patch_buffer_0_0_q0, patch_buffer_0_1_q0, patch_buffer_0_2_q0, patch_buffer_0_3_q0, patch_buffer_0_4_q0, patch_buffer_0_5_q0, patch_buffer_0_6_q0, patch_buffer_0_7_q0, patch_buffer_0_8_q0, patch_buffer_0_9_q0, patch_buffer_0_10_q0, patch_buffer_0_11_q0, patch_buffer_0_12_q0, patch_buffer_0_13_q0, patch_buffer_0_14_q0, patch_buffer_0_15_q0, patch_buffer_1_0_q0, patch_buffer_1_1_q0, patch_buffer_1_2_q0, patch_buffer_1_3_q0, patch_buffer_1_4_q0, patch_buffer_1_5_q0, patch_buffer_1_6_q0, patch_buffer_1_7_q0, patch_buffer_1_8_q0, patch_buffer_1_9_q0, patch_buffer_1_10_q0, patch_buffer_1_11_q0, patch_buffer_1_12_q0, patch_buffer_1_13_q0, patch_buffer_1_14_q0, patch_buffer_1_15_q0, patch_buffer_2_0_q0, patch_buffer_2_1_q0, patch_buffer_2_2_q0, patch_buffer_2_3_q0, patch_buffer_2_4_q0, patch_buffer_2_5_q0, patch_buffer_2_6_q0, patch_buffer_2_7_q0, patch_buffer_2_8_q0, patch_buffer_2_9_q0, patch_buffer_2_10_q0, patch_buffer_2_11_q0, patch_buffer_2_12_q0, patch_buffer_2_13_q0, patch_buffer_2_14_q0, patch_buffer_2_15_q0, patch_buffer_3_0_q0, patch_buffer_3_1_q0, patch_buffer_3_2_q0, patch_buffer_3_3_q0, patch_buffer_3_4_q0, patch_buffer_3_5_q0, patch_buffer_3_6_q0, patch_buffer_3_7_q0, patch_buffer_3_8_q0, patch_buffer_3_9_q0, patch_buffer_3_10_q0, patch_buffer_3_11_q0, patch_buffer_3_12_q0, patch_buffer_3_13_q0, patch_buffer_3_14_q0, patch_buffer_3_15_q0, patch_buffer_4_0_q0, patch_buffer_4_1_q0, patch_buffer_4_2_q0, patch_buffer_4_3_q0, patch_buffer_4_4_q0, patch_buffer_4_5_q0, patch_buffer_4_6_q0, patch_buffer_4_7_q0, patch_buffer_4_8_q0, patch_buffer_4_9_q0, patch_buffer_4_10_q0, patch_buffer_4_11_q0, patch_buffer_4_12_q0, patch_buffer_4_13_q0, patch_buffer_4_14_q0, patch_buffer_4_15_q0, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_predicate_op426_write_state85)
    begin
        if ((not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85) and (ap_predicate_op426_write_state85 = ap_const_boolean_1))) then 
            patch_stream_V_din <= patch_buffer_4_15_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_14_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_13_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_12_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_11_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_10_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_9_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_8_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_7_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_6_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_5_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_4_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state70) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_4_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state69) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_15_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_14_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_13_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_12_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_11_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_10_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_9_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_8_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_7_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_6_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_5_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_4_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_3_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_15_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_14_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_13_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_12_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_11_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_10_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_9_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_8_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_7_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_6_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_5_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_4_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_2_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_15_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_14_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_13_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_12_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_11_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_10_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_9_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_8_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_7_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_6_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_5_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_4_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_1_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_15_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_14_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_13_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_12_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_11_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_10_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_9_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_8_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_7_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_6_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_5_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_4_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (patch_stream_V_full_n = ap_const_logic_1))) then 
            patch_stream_V_din <= patch_buffer_0_0_q0;
        else 
            patch_stream_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patch_stream_V_write_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_predicate_op426_write_state85)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (patch_stream_V_full_n = ap_const_logic_1)) or (not(((ap_predicate_op426_write_state85 = ap_const_boolean_1) and (patch_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state85) and (ap_predicate_op426_write_state85 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state81) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state77) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state76) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state75) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state73) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state62) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (patch_stream_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (patch_stream_V_full_n = ap_const_logic_1)))) then 
            patch_stream_V_write <= ap_const_logic_1;
        else 
            patch_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln52_fu_3041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(patch_buffer_order_q0),64));
    zext_ln69_fu_3046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_patch_index_1_reg_3020),64));
end behav;
