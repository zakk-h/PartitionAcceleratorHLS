-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_areWedgeSuperPointsEqual is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wsp1_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wsp1_2_ce0 : OUT STD_LOGIC;
    wsp1_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wsp1_2_ce1 : OUT STD_LOGIC;
    wsp1_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
    wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp23 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MPSQ_areWedgeSuperPointsEqual is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv18_78 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001111000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv37_66667 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001100110011001100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal reg_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal wsp23_read_reg_552 : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp2_read_reg_557 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp11_read_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp11_read_reg_563_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp1_read_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp1_read_reg_568_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_589_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_fu_302_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln870_reg_593 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln870_reg_593_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln870_reg_593_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln870_reg_593_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln870_reg_593_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln870_reg_593_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1350_fu_367_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1350_reg_603 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1350_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1350_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1350_reg_603_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1350_reg_603_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal urem_ln870_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln3_cast_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_reg_633 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_11_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_143_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln870_6_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1350_6_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln870_8_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1350_8_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_168_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln870_5_fu_176_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln870_4_fu_164_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln870_2_fu_180_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal wsp23_cast_fu_160_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln870_3_fu_186_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_192_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_213_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1350_5_fu_221_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1350_4_fu_209_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1350_2_fu_225_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal wsp11_cast_fu_205_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1350_3_fu_231_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_237_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln215_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln870_1_fu_259_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln870_2_fu_270_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_281_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln870_1_fu_277_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln870_2_fu_288_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln870_1_fu_292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln870_3_fu_298_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln870_fu_266_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1350_1_fu_324_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1350_2_fu_335_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_346_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1350_1_fu_342_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1350_2_fu_353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1350_1_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1350_3_fu_363_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1350_fu_331_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1350_fu_389_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln870_fu_398_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_57_fu_434_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_128_cast_fu_443_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln_cast_fu_425_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_4_fu_451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln870_fu_457_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_5_fu_460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_130_cast_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln870_1_fu_474_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_132_cast_fu_485_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1350_4_fu_492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1350_fu_497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1350_5_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_134_cast_fu_507_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1350_1_fu_515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_1_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_536_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_536_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_544_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_544_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to9 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_536_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_544_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_urem_11ns_4ns_8_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_mul_mul_18ns_20ns_37_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    urem_11ns_4ns_8_15_1_U78 : component MPSQ_urem_11ns_4ns_8_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_318_p0,
        din1 => grp_fu_318_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p2);

    urem_11ns_4ns_8_15_1_U79 : component MPSQ_urem_11ns_4ns_8_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_383_p0,
        din1 => grp_fu_383_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    mul_mul_18ns_20ns_37_4_1_U80 : component MPSQ_mul_mul_18ns_20ns_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_536_p0,
        din1 => grp_fu_536_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_536_p2);

    mul_mul_18ns_20ns_37_4_1_U81 : component MPSQ_mul_mul_18ns_20ns_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_544_p0,
        din1 => grp_fu_544_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_544_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln31_fu_253_p2 = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter1_empty_reg_139 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_empty_reg_139 <= ap_phi_reg_pp0_iter0_empty_reg_139;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln31_reg_589 = ap_const_lv1_0))) then
                    add_ln1350_reg_603(17 downto 7) <= add_ln1350_fu_367_p2(17 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    add_ln1350_reg_603_pp0_iter2_reg(17 downto 7) <= add_ln1350_reg_603(17 downto 7);
                    add_ln1350_reg_603_pp0_iter3_reg(17 downto 7) <= add_ln1350_reg_603_pp0_iter2_reg(17 downto 7);
                    add_ln1350_reg_603_pp0_iter4_reg(17 downto 7) <= add_ln1350_reg_603_pp0_iter3_reg(17 downto 7);
                    add_ln1350_reg_603_pp0_iter5_reg(17 downto 7) <= add_ln1350_reg_603_pp0_iter4_reg(17 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln31_fu_253_p2 = ap_const_lv1_0))) then
                    add_ln870_reg_593(17 downto 7) <= add_ln870_fu_302_p2(17 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln870_reg_593_pp0_iter2_reg(17 downto 7) <= add_ln870_reg_593(17 downto 7);
                    add_ln870_reg_593_pp0_iter3_reg(17 downto 7) <= add_ln870_reg_593_pp0_iter2_reg(17 downto 7);
                    add_ln870_reg_593_pp0_iter4_reg(17 downto 7) <= add_ln870_reg_593_pp0_iter3_reg(17 downto 7);
                    add_ln870_reg_593_pp0_iter5_reg(17 downto 7) <= add_ln870_reg_593_pp0_iter4_reg(17 downto 7);
                    add_ln870_reg_593_pp0_iter6_reg(17 downto 7) <= add_ln870_reg_593_pp0_iter5_reg(17 downto 7);
                icmp_ln31_reg_589 <= icmp_ln31_fu_253_p2;
                icmp_ln31_reg_589_pp0_iter2_reg <= icmp_ln31_reg_589;
                icmp_ln31_reg_589_pp0_iter3_reg <= icmp_ln31_reg_589_pp0_iter2_reg;
                icmp_ln31_reg_589_pp0_iter4_reg <= icmp_ln31_reg_589_pp0_iter3_reg;
                icmp_ln31_reg_589_pp0_iter5_reg <= icmp_ln31_reg_589_pp0_iter4_reg;
                icmp_ln31_reg_589_pp0_iter6_reg <= icmp_ln31_reg_589_pp0_iter5_reg;
                icmp_ln31_reg_589_pp0_iter7_reg <= icmp_ln31_reg_589_pp0_iter6_reg;
                icmp_ln31_reg_589_pp0_iter8_reg <= icmp_ln31_reg_589_pp0_iter7_reg;
                icmp_ln31_reg_589_pp0_iter9_reg <= icmp_ln31_reg_589_pp0_iter8_reg;
                wsp11_read_reg_563 <= wsp11;
                wsp11_read_reg_563_pp0_iter1_reg <= wsp11_read_reg_563;
                wsp1_read_reg_568 <= wsp1;
                wsp1_read_reg_568_pp0_iter1_reg <= wsp1_read_reg_568;
                wsp23_read_reg_552 <= wsp23;
                wsp2_read_reg_557 <= wsp2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_empty_reg_139 <= ap_phi_reg_pp0_iter1_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_empty_reg_139 <= ap_phi_reg_pp0_iter2_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_empty_reg_139 <= ap_phi_reg_pp0_iter3_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_empty_reg_139 <= ap_phi_reg_pp0_iter4_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter6_empty_reg_139 <= ap_phi_reg_pp0_iter5_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_empty_reg_139 <= ap_phi_reg_pp0_iter6_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_empty_reg_139 <= ap_phi_reg_pp0_iter7_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter9_empty_reg_139 <= ap_phi_reg_pp0_iter8_empty_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln31_reg_589_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_156 <= wsp1_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln31_reg_589_pp0_iter8_reg = ap_const_lv1_0))) then
                rhs_11_reg_648 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                rhs_reg_584 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln31_reg_589_pp0_iter7_reg = ap_const_lv1_0))) then
                tmp_58_reg_633 <= grp_fu_536_p2(33 downto 28);
                udiv_ln3_cast_reg_628 <= grp_fu_536_p2(35 downto 28);
                urem_ln870_reg_623 <= grp_fu_318_p2;
            end if;
        end if;
    end process;
    add_ln870_reg_593(6 downto 0) <= "0000000";
    add_ln870_reg_593_pp0_iter2_reg(6 downto 0) <= "0000000";
    add_ln870_reg_593_pp0_iter3_reg(6 downto 0) <= "0000000";
    add_ln870_reg_593_pp0_iter4_reg(6 downto 0) <= "0000000";
    add_ln870_reg_593_pp0_iter5_reg(6 downto 0) <= "0000000";
    add_ln870_reg_593_pp0_iter6_reg(6 downto 0) <= "0000000";
    add_ln1350_reg_603(6 downto 0) <= "0000000";
    add_ln1350_reg_603_pp0_iter2_reg(6 downto 0) <= "0000000";
    add_ln1350_reg_603_pp0_iter3_reg(6 downto 0) <= "0000000";
    add_ln1350_reg_603_pp0_iter4_reg(6 downto 0) <= "0000000";
    add_ln1350_reg_603_pp0_iter5_reg(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to9, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1350_1_fu_357_p2 <= std_logic_vector(unsigned(zext_ln1350_1_fu_342_p1) + unsigned(zext_ln1350_2_fu_353_p1));
    add_ln1350_2_fu_225_p2 <= std_logic_vector(unsigned(zext_ln1350_5_fu_221_p1) + unsigned(zext_ln1350_4_fu_209_p1));
    add_ln1350_3_fu_231_p2 <= std_logic_vector(unsigned(add_ln1350_2_fu_225_p2) + unsigned(wsp11_cast_fu_205_p1));
    add_ln1350_4_fu_492_p2 <= std_logic_vector(unsigned(tmp_132_cast_fu_485_p3) + unsigned(udiv_ln3_cast_reg_628));
    add_ln1350_5_fu_501_p2 <= std_logic_vector(unsigned(add_ln1350_4_fu_492_p2) + unsigned(trunc_ln1350_fu_497_p1));
    add_ln1350_fu_367_p2 <= std_logic_vector(unsigned(zext_ln1350_3_fu_363_p1) + unsigned(zext_ln1350_fu_331_p1));
    add_ln870_1_fu_292_p2 <= std_logic_vector(unsigned(zext_ln870_1_fu_277_p1) + unsigned(zext_ln870_2_fu_288_p1));
    add_ln870_2_fu_180_p2 <= std_logic_vector(unsigned(zext_ln870_5_fu_176_p1) + unsigned(zext_ln870_4_fu_164_p1));
    add_ln870_3_fu_186_p2 <= std_logic_vector(unsigned(add_ln870_2_fu_180_p2) + unsigned(wsp23_cast_fu_160_p1));
    add_ln870_4_fu_451_p2 <= std_logic_vector(unsigned(tmp_128_cast_fu_443_p3) + unsigned(udiv_ln_cast_fu_425_p4));
    add_ln870_5_fu_460_p2 <= std_logic_vector(unsigned(add_ln870_4_fu_451_p2) + unsigned(trunc_ln870_fu_457_p1));
    add_ln870_fu_302_p2 <= std_logic_vector(unsigned(zext_ln870_3_fu_298_p1) + unsigned(zext_ln870_fu_266_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_143_p4_assign_proc : process(icmp_ln31_reg_589_pp0_iter9_reg, icmp_ln31_1_fu_529_p2, ap_phi_reg_pp0_iter9_empty_reg_139)
    begin
        if ((icmp_ln31_reg_589_pp0_iter9_reg = ap_const_lv1_0)) then 
            ap_phi_mux_empty_phi_fu_143_p4 <= icmp_ln31_1_fu_529_p2;
        else 
            ap_phi_mux_empty_phi_fu_143_p4 <= ap_phi_reg_pp0_iter9_empty_reg_139;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_139 <= "X";

    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to8)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to8 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_empty_phi_fu_143_p4;
    grp_fu_150_p2 <= "1" when (wsp1_2_q1 = ap_const_lv64_0) else "0";
    grp_fu_318_p0 <= add_ln870_fu_302_p2(17 downto 7);
    grp_fu_318_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_383_p0 <= add_ln1350_fu_367_p2(17 downto 7);
    grp_fu_383_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_536_p0 <= grp_fu_536_p00(18 - 1 downto 0);
    grp_fu_536_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1350_fu_389_p2),37));
    grp_fu_536_p1 <= ap_const_lv37_66667(20 - 1 downto 0);
    grp_fu_544_p0 <= grp_fu_544_p00(18 - 1 downto 0);
    grp_fu_544_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln870_fu_398_p2),37));
    grp_fu_544_p1 <= ap_const_lv37_66667(20 - 1 downto 0);
    icmp_ln31_1_fu_529_p2 <= "0" when (reg_156 = zext_ln215_1_fu_526_p1) else "1";
    icmp_ln31_fu_253_p2 <= "1" when (reg_156 = zext_ln215_fu_250_p1) else "0";
    or_ln1350_1_fu_515_p2 <= (tmp_134_cast_fu_507_p3 or ap_const_lv12_F);
    or_ln1350_fu_389_p2 <= (ap_const_lv18_78 or add_ln1350_reg_603_pp0_iter5_reg);
    or_ln870_1_fu_474_p2 <= (tmp_130_cast_fu_466_p3 or ap_const_lv12_F);
    or_ln870_fu_398_p2 <= (ap_const_lv18_78 or add_ln870_reg_593_pp0_iter6_reg);
    shl_ln1350_1_fu_324_p3 <= (wsp1_read_reg_568_pp0_iter1_reg & ap_const_lv9_0);
    shl_ln1350_2_fu_335_p3 <= (wsp1_read_reg_568_pp0_iter1_reg & ap_const_lv7_0);
    shl_ln1_fu_346_p3 <= (wsp11_read_reg_563_pp0_iter1_reg & ap_const_lv7_0);
    shl_ln870_1_fu_259_p3 <= (wsp2_read_reg_557 & ap_const_lv9_0);
    shl_ln870_2_fu_270_p3 <= (wsp2_read_reg_557 & ap_const_lv7_0);
    shl_ln_fu_281_p3 <= (wsp23_read_reg_552 & ap_const_lv7_0);
    tmp_128_cast_fu_443_p3 <= (tmp_57_fu_434_p4 & ap_const_lv2_0);
    tmp_130_cast_fu_466_p3 <= (add_ln870_5_fu_460_p2 & ap_const_lv4_0);
    tmp_132_cast_fu_485_p3 <= (tmp_58_reg_633 & ap_const_lv2_0);
    tmp_134_cast_fu_507_p3 <= (add_ln1350_5_fu_501_p2 & ap_const_lv4_0);
    tmp_55_fu_192_p3 <= (add_ln870_3_fu_186_p2 & ap_const_lv4_0);
    tmp_56_fu_237_p3 <= (add_ln1350_3_fu_231_p2 & ap_const_lv4_0);
    tmp_57_fu_434_p4 <= grp_fu_544_p2(33 downto 28);
    tmp_fu_168_p3 <= (wsp2 & ap_const_lv2_0);
    tmp_s_fu_213_p3 <= (wsp1 & ap_const_lv2_0);
    trunc_ln1350_fu_497_p1 <= grp_fu_383_p2(8 - 1 downto 0);
    trunc_ln870_fu_457_p1 <= urem_ln870_reg_623(8 - 1 downto 0);
    udiv_ln_cast_fu_425_p4 <= grp_fu_544_p2(35 downto 28);
    wsp11_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp11),11));

    wsp1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, zext_ln1350_6_fu_245_p1, ap_block_pp0_stage1, zext_ln1350_8_fu_521_p1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wsp1_2_address0 <= zext_ln1350_8_fu_521_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            wsp1_2_address0 <= zext_ln1350_6_fu_245_p1(12 - 1 downto 0);
        else 
            wsp1_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wsp1_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, zext_ln870_6_fu_200_p1, zext_ln870_8_fu_480_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wsp1_2_address1 <= zext_ln870_8_fu_480_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            wsp1_2_address1 <= zext_ln870_6_fu_200_p1(12 - 1 downto 0);
        else 
            wsp1_2_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wsp1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            wsp1_2_ce0 <= ap_const_logic_1;
        else 
            wsp1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wsp1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            wsp1_2_ce1 <= ap_const_logic_1;
        else 
            wsp1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    wsp23_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp23),11));
    zext_ln1350_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1350_2_fu_335_p3),16));
    zext_ln1350_2_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_346_p3),16));
    zext_ln1350_3_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1350_1_fu_357_p2),18));
    zext_ln1350_4_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp1),11));
    zext_ln1350_5_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_213_p3),11));
    zext_ln1350_6_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_237_p3),64));
    zext_ln1350_8_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1350_1_fu_515_p2),64));
    zext_ln1350_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1350_1_fu_324_p3),18));
    zext_ln215_1_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_11_reg_648),64));
    zext_ln215_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_reg_584),64));
    zext_ln870_1_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_2_fu_270_p3),16));
    zext_ln870_2_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_281_p3),16));
    zext_ln870_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_1_fu_292_p2),18));
    zext_ln870_4_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp2),11));
    zext_ln870_5_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_168_p3),11));
    zext_ln870_6_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_192_p3),64));
    zext_ln870_8_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln870_1_fu_474_p2),64));
    zext_ln870_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_1_fu_259_p3),18));
end behav;
