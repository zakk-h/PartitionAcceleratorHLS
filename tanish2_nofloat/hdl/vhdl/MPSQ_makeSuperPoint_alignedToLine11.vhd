-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_makeSuperPoint_alignedToLine11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    z_top : IN STD_LOGIC_VECTOR (31 downto 0);
    apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
    original_ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
    init_patch_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch_ce0 : OUT STD_LOGIC;
    init_patch_we0 : OUT STD_LOGIC;
    init_patch_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1065_p_din0 : OUT STD_LOGIC_VECTOR (57 downto 0);
    grp_fu_1065_p_din1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    grp_fu_1065_p_dout0 : IN STD_LOGIC_VECTOR (116 downto 0);
    grp_fu_1065_p_ce : OUT STD_LOGIC );
end;


architecture behav of MPSQ_makeSuperPoint_alignedToLine11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv25_1B3B4C0 : STD_LOGIC_VECTOR (24 downto 0) := "1101100111011010011000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv117_6B5FCA6AF2BD216 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000011010110101111111001010011010101111001010111101001000010110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv117_0 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_FFFFFFFFFFFFFFF6 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111110110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal radii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal radii_ce0 : STD_LOGIC;
    signal radii_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal row_list_size_reg_232 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_256 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_267 : STD_LOGIC_VECTOR (4 downto 0);
    signal z_reg_278 : STD_LOGIC_VECTOR (1 downto 0);
    signal leftRight_read_read_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_reg_802 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1452_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1452_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_328_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_812 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_reg_818 : STD_LOGIC_VECTOR (24 downto 0);
    signal GDn_points_load_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1450_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1450_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1450_fu_341_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1450_reg_832 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1452_fu_345_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1452_reg_837 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1450_1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1450_1_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_395_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_851 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln1364_fu_401_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1364_reg_856 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1364_fu_412_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1364_reg_861 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_42_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_2_fu_426_p1 : STD_LOGIC_VECTOR (116 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (116 downto 0);
    signal mul_ln1364_2_reg_877 : STD_LOGIC_VECTOR (116 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_44_reg_882 : STD_LOGIC_VECTOR (33 downto 0);
    signal projectionToRow_fu_481_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal projectionToRow_reg_888 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal start_index_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1484_1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1484_1_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1540_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1540_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1535_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1535_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal start_index_2_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_index_2_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_start_fu_647_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal temp_start_reg_923 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln1596_2_fu_654_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln1596_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1596_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1596_reg_933_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1596_fu_678_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1596_reg_937 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1596_reg_937_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1596_1_fu_686_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1596_1_reg_943 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1596_1_reg_943_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1602_fu_694_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_mSP_findLRBounds_fu_297_ap_ready : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_297_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal row_list_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_list_V_ce0 : STD_LOGIC;
    signal row_list_V_we0 : STD_LOGIC;
    signal row_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mSP_findStartIndex_fu_289_ap_start : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_289_ap_done : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_289_ap_idle : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_289_ap_ready : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_289_row_list_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mSP_findStartIndex_fu_289_row_list_ce0 : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_289_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mSP_findStartIndex_fu_289_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mSP_findLRBounds_fu_297_ap_start : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_297_ap_idle : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_297_row_list_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mSP_findLRBounds_fu_297_row_list_ce0 : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_297_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mSP_findLRBounds_fu_297_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_row_list_size_phi_fu_236_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal row_list_size_0_lcssa_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_1_phi_fu_271_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_mSP_findStartIndex_fu_289_ap_start_reg : STD_LOGIC := '0';
    signal grp_mSP_findLRBounds_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln1445_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1452_1_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_list_size_cast_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1607_4_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1607_3_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_317_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1452_fu_356_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1452_1_fu_360_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_60_cast_fu_365_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1452_fu_373_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln215_24_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_fu_389_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_24_fu_392_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1364_fu_412_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal sub_ln1364_fu_445_p2 : STD_LOGIC_VECTOR (116 downto 0);
    signal tmp_43_fu_450_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln1364_fu_460_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1364_1_fu_466_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln534_fu_478_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_1_fu_472_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln534_fu_478_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln1535_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1484_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1484_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_index_1_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1484_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1489_1_fu_563_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1489_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1489_1_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1489_2_fu_573_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1489_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1508_fu_585_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1489_fu_554_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln1535_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1535_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1550_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1550_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1550_fu_613_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1550_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1571_fu_629_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1571_fu_633_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1489_fu_590_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1571_fu_639_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1602_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1596_fu_666_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1596_fu_700_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1596_1_fu_703_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1607_1_fu_708_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_cast_fu_713_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1607_1_fu_721_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1607_3_fu_724_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1607_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1607_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1596_fu_743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1607_2_fu_749_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1607_2_fu_752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_429_ce : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln1364_fu_412_p00 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_mSP_findStartIndex IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        row_list_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        row_list_ce0 : OUT STD_LOGIC;
        row_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row_list_size : IN STD_LOGIC_VECTOR (31 downto 0);
        projectionToRow : IN STD_LOGIC_VECTOR (33 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_mSP_findLRBounds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        row_list_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        row_list_ce0 : OUT STD_LOGIC;
        row_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row_list_size : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_25ns_33s_58_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component MPSQ_mul_58s_60ns_117_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (57 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (116 downto 0) );
    end component;


    component MPSQ_makeSuperPoint_alignedToLine11_radii IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component MPSQ_makeSuperPoint_alignedToLine11_row_list_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    radii_U : component MPSQ_makeSuperPoint_alignedToLine11_radii
    generic map (
        DataWidth => 25,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => radii_address0,
        ce0 => radii_ce0,
        q0 => radii_q0);

    row_list_V_U : component MPSQ_makeSuperPoint_alignedToLine11_row_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_list_V_address0,
        ce0 => row_list_V_ce0,
        we0 => row_list_V_we0,
        d0 => GDarrayDecoded_q0,
        q0 => row_list_V_q0);

    grp_mSP_findStartIndex_fu_289 : component MPSQ_mSP_findStartIndex
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mSP_findStartIndex_fu_289_ap_start,
        ap_done => grp_mSP_findStartIndex_fu_289_ap_done,
        ap_idle => grp_mSP_findStartIndex_fu_289_ap_idle,
        ap_ready => grp_mSP_findStartIndex_fu_289_ap_ready,
        row_list_address0 => grp_mSP_findStartIndex_fu_289_row_list_address0,
        row_list_ce0 => grp_mSP_findStartIndex_fu_289_row_list_ce0,
        row_list_q0 => row_list_V_q0,
        row_list_size => row_list_size_0_lcssa_reg_244,
        projectionToRow => projectionToRow_reg_888,
        ap_return_0 => grp_mSP_findStartIndex_fu_289_ap_return_0,
        ap_return_1 => grp_mSP_findStartIndex_fu_289_ap_return_1);

    grp_mSP_findLRBounds_fu_297 : component MPSQ_mSP_findLRBounds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mSP_findLRBounds_fu_297_ap_start,
        ap_done => grp_mSP_findLRBounds_fu_297_ap_done,
        ap_idle => grp_mSP_findLRBounds_fu_297_ap_idle,
        ap_ready => grp_mSP_findLRBounds_fu_297_ap_ready,
        i => i,
        row_list_address0 => grp_mSP_findLRBounds_fu_297_row_list_address0,
        row_list_ce0 => grp_mSP_findLRBounds_fu_297_row_list_ce0,
        row_list_q0 => row_list_V_q0,
        row_list_size => row_list_size_0_lcssa_reg_244,
        ap_return_0 => grp_mSP_findLRBounds_fu_297_ap_return_0,
        ap_return_1 => grp_mSP_findLRBounds_fu_297_ap_return_1);

    mul_25ns_33s_58_1_1_U29 : component MPSQ_mul_25ns_33s_58_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 33,
        dout_WIDTH => 58)
    port map (
        din0 => mul_ln1364_fu_412_p0,
        din1 => ret_reg_851,
        dout => mul_ln1364_fu_412_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1450_fu_335_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1450_fu_335_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_mSP_findLRBounds_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((grp_mSP_findLRBounds_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mSP_findLRBounds_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mSP_findLRBounds_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_mSP_findLRBounds_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mSP_findLRBounds_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_mSP_findLRBounds_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mSP_findStartIndex_fu_289_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mSP_findStartIndex_fu_289_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_mSP_findStartIndex_fu_289_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mSP_findStartIndex_fu_289_ap_ready = ap_const_logic_1)) then 
                    grp_mSP_findStartIndex_fu_289_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1596_fu_660_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_256 <= add_ln1596_2_fu_654_p2;
            elsif (((grp_mSP_findLRBounds_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                indvar_flatten_reg_256 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1596_reg_933 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_1_reg_267 <= select_ln1596_1_reg_943;
            elsif (((grp_mSP_findLRBounds_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_1_reg_267 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    row_list_size_0_lcssa_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1450_reg_828 = ap_const_lv1_1))) then 
                row_list_size_0_lcssa_reg_244 <= GDn_points_load_reg_823;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1450_fu_335_p2 = ap_const_lv1_0))) then 
                row_list_size_0_lcssa_reg_244 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_list_size_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1450_fu_335_p2 = ap_const_lv1_1))) then 
                row_list_size_reg_232 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1450_1_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_list_size_reg_232 <= add_ln1452_reg_837;
            end if; 
        end if;
    end process;

    z_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1596_fu_660_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                z_reg_278 <= add_ln1602_fu_694_p2;
            elsif (((grp_mSP_findLRBounds_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                z_reg_278 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                GDn_points_load_reg_823 <= GDn_points_q0;
                empty_reg_802 <= empty_fu_313_p1;
                icmp_ln1450_reg_828 <= icmp_ln1450_fu_335_p2;
                    tmp_s_reg_812(10 downto 8) <= tmp_s_fu_328_p3(10 downto 8);
                y_reg_818 <= radii_q0;
                    zext_ln1452_reg_807(6 downto 4) <= zext_ln1452_fu_324_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln1364_reg_856 <= add_ln1364_fu_401_p2;
                ret_reg_851 <= ret_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln1452_reg_837 <= add_ln1452_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1450_1_reg_842 <= icmp_ln1450_1_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((leftRight_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln1484_1_reg_903 <= icmp_ln1484_1_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((leftRight_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                icmp_ln1535_reg_913 <= icmp_ln1535_fu_514_p2;
                start_index_2_reg_918 <= start_index_2_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((leftRight_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln1540_reg_908 <= icmp_ln1540_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1596_reg_933 <= icmp_ln1596_fu_660_p2;
                icmp_ln1596_reg_933_pp1_iter1_reg <= icmp_ln1596_reg_933;
                select_ln1596_1_reg_943_pp1_iter1_reg <= select_ln1596_1_reg_943;
                select_ln1596_reg_937_pp1_iter1_reg <= select_ln1596_reg_937;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln1364_2_reg_877 <= grp_fu_1065_p_dout0;
                tmp_44_reg_882 <= grp_fu_1065_p_dout0(116 downto 83);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1364_reg_861 <= mul_ln1364_fu_412_p2;
                tmp_42_reg_866 <= mul_ln1364_fu_412_p2(57 downto 57);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                projectionToRow_reg_888 <= projectionToRow_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1596_fu_660_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln1596_1_reg_943 <= select_ln1596_1_fu_686_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1596_fu_660_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln1596_reg_937 <= select_ln1596_fu_678_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                start_index_reg_893 <= grp_mSP_findStartIndex_fu_289_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                temp_start_reg_923 <= temp_start_fu_647_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1450_fu_335_p2 = ap_const_lv1_1))) then
                trunc_ln1450_reg_832 <= trunc_ln1450_fu_341_p1;
            end if;
        end if;
    end process;
    zext_ln1452_reg_807(3 downto 0) <= "0000";
    zext_ln1452_reg_807(7) <= '0';
    tmp_s_reg_812(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1450_fu_335_p2, ap_enable_reg_pp0_iter0, icmp_ln1450_1_fu_351_p2, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_enable_reg_pp1_iter0, icmp_ln1596_fu_660_p2, ap_block_pp0_stage0_subdone, grp_mSP_findLRBounds_fu_297_ap_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, grp_mSP_findStartIndex_fu_289_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1450_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln1450_1_fu_351_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln1450_1_fu_351_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_mSP_findStartIndex_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_mSP_findLRBounds_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln1596_fu_660_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln1596_fu_660_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln1452_1_fu_379_p1, zext_ln1607_4_fu_730_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            GDarrayDecoded_address0 <= zext_ln1607_4_fu_730_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            GDarrayDecoded_address0 <= zext_ln1452_1_fu_379_p1(12 - 1 downto 0);
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    GDarrayDecoded_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    GDn_points_address0 <= zext_ln1445_fu_307_p1(3 - 1 downto 0);

    GDn_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1364_fu_401_p2 <= std_logic_vector(unsigned(y_reg_818) + unsigned(ap_const_lv25_1B3B4C0));
    add_ln1452_1_fu_360_p2 <= std_logic_vector(unsigned(tmp_s_reg_812) + unsigned(trunc_ln1452_fu_356_p1));
    add_ln1452_fu_345_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_list_size_phi_fu_236_p4) + unsigned(ap_const_lv31_1));
    add_ln1489_1_fu_567_p2 <= std_logic_vector(unsigned(grp_mSP_findLRBounds_fu_297_ap_return_1) + unsigned(ap_const_lv32_1));
    add_ln1489_2_fu_573_p2 <= std_logic_vector(unsigned(trunc_ln1489_1_fu_563_p1) + unsigned(ap_const_lv11_1));
    add_ln1489_fu_558_p2 <= std_logic_vector(unsigned(select_ln1484_fu_547_p3) + unsigned(original_ppl));
    add_ln1535_fu_508_p2 <= std_logic_vector(unsigned(row_list_size_0_lcssa_reg_244) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1550_fu_617_p2 <= std_logic_vector(unsigned(sub_ln1550_fu_608_p2) + unsigned(ap_const_lv32_1));
    add_ln1571_fu_633_p2 <= std_logic_vector(unsigned(trunc_ln1550_fu_613_p1) + unsigned(ap_const_lv11_1));
    add_ln1596_1_fu_703_p2 <= std_logic_vector(unsigned(zext_ln1596_fu_700_p1) + unsigned(temp_start_reg_923));
    add_ln1596_2_fu_654_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_256) + unsigned(ap_const_lv6_1));
    add_ln1596_fu_666_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_271_p4) + unsigned(ap_const_lv5_1));
    add_ln1602_fu_694_p2 <= std_logic_vector(unsigned(select_ln1596_fu_678_p3) + unsigned(ap_const_lv2_1));
    add_ln1607_1_fu_708_p2 <= std_logic_vector(unsigned(tmp_s_reg_812) + unsigned(add_ln1596_1_fu_703_p2));
    add_ln1607_2_fu_752_p2 <= std_logic_vector(unsigned(shl_ln1596_fu_743_p2) + unsigned(zext_ln1607_2_fu_749_p1));
    add_ln1607_3_fu_724_p2 <= std_logic_vector(unsigned(tmp_68_cast_fu_713_p3) + unsigned(zext_ln1607_1_fu_721_p1));
    add_ln1607_fu_738_p2 <= std_logic_vector(unsigned(zext_ln1452_reg_807) + unsigned(zext_ln1607_fu_735_p1));
    and_ln1484_fu_537_p2 <= (icmp_ln1484_fu_532_p2 and icmp_ln1484_1_reg_903);
    and_ln1535_fu_598_p2 <= (icmp_ln1540_reg_908 and icmp_ln1535_reg_913);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1450_1_fu_351_p2)
    begin
        if ((icmp_ln1450_1_fu_351_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln1596_fu_660_p2)
    begin
        if ((icmp_ln1596_fu_660_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_271_p4_assign_proc : process(j_1_reg_267, ap_CS_fsm_pp1_stage0, icmp_ln1596_reg_933, select_ln1596_1_reg_943, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1596_reg_933 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_j_1_phi_fu_271_p4 <= select_ln1596_1_reg_943;
        else 
            ap_phi_mux_j_1_phi_fu_271_p4 <= j_1_reg_267;
        end if; 
    end process;


    ap_phi_mux_row_list_size_phi_fu_236_p4_assign_proc : process(row_list_size_reg_232, add_ln1452_reg_837, ap_CS_fsm_pp0_stage0, icmp_ln1450_1_reg_842, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1450_1_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_row_list_size_phi_fu_236_p4 <= add_ln1452_reg_837;
        else 
            ap_phi_mux_row_list_size_phi_fu_236_p4 <= row_list_size_reg_232;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= original_ppl;
    empty_fu_313_p1 <= original_ppl(11 - 1 downto 0);
    grp_fu_1065_p_ce <= ap_const_logic_1;
    grp_fu_1065_p_din0 <= sext_ln1364_2_fu_426_p1(58 - 1 downto 0);
    grp_fu_1065_p_din1 <= ap_const_lv117_6B5FCA6AF2BD216(60 - 1 downto 0);
    grp_fu_429_ce <= ap_const_logic_1;
    grp_fu_429_p0 <= sext_ln1364_2_fu_426_p1(58 - 1 downto 0);
    grp_fu_429_p1 <= ap_const_lv117_6B5FCA6AF2BD216(60 - 1 downto 0);
    grp_fu_429_p2 <= grp_fu_1065_p_dout0;
    grp_mSP_findLRBounds_fu_297_ap_start <= grp_mSP_findLRBounds_fu_297_ap_start_reg;
    grp_mSP_findStartIndex_fu_289_ap_start <= grp_mSP_findStartIndex_fu_289_ap_start_reg;
    icmp_ln1450_1_fu_351_p2 <= "1" when (ap_phi_mux_row_list_size_phi_fu_236_p4 = trunc_ln1450_reg_832) else "0";
    icmp_ln1450_fu_335_p2 <= "1" when (signed(GDn_points_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1484_1_fu_496_p2 <= "1" when (signed(grp_mSP_findStartIndex_fu_289_ap_return_1) > signed(ap_const_lv64_A)) else "0";
    icmp_ln1484_fu_532_p2 <= "0" when (start_index_reg_893 = ap_const_lv32_0) else "1";
    icmp_ln1489_fu_579_p2 <= "1" when (signed(add_ln1489_fu_558_p2) > signed(add_ln1489_1_fu_567_p2)) else "0";
    icmp_ln1535_fu_514_p2 <= "0" when (start_index_reg_893 = add_ln1535_fu_508_p2) else "1";
    icmp_ln1540_fu_502_p2 <= "1" when (signed(grp_mSP_findStartIndex_fu_289_ap_return_1) < signed(ap_const_lv64_FFFFFFFFFFFFFFF6)) else "0";
    icmp_ln1550_fu_623_p2 <= "1" when (signed(add_ln1550_fu_617_p2) < signed(grp_mSP_findLRBounds_fu_297_ap_return_0)) else "0";
    icmp_ln1596_fu_660_p2 <= "1" when (indvar_flatten_reg_256 = ap_const_lv6_20) else "0";
    icmp_ln1602_fu_672_p2 <= "1" when (z_reg_278 = ap_const_lv2_2) else "0";
    init_patch_address0 <= zext_ln1607_3_fu_758_p1(8 - 1 downto 0);

    init_patch_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            init_patch_ce0 <= ap_const_logic_1;
        else 
            init_patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    init_patch_d0 <= GDarrayDecoded_q0;

    init_patch_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln1596_reg_933_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln1596_reg_933_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            init_patch_we0 <= ap_const_logic_1;
        else 
            init_patch_we0 <= ap_const_logic_0;
        end if; 
    end process;

    leftRight_read_read_fu_134_p2 <= leftRight;
    mul_ln1364_fu_412_p0 <= mul_ln1364_fu_412_p00(25 - 1 downto 0);
    mul_ln1364_fu_412_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1364_reg_856),58));
    or_ln1452_fu_373_p2 <= (tmp_60_cast_fu_365_p3 or ap_const_lv12_1);
    projectionToRow_fu_481_p2 <= std_logic_vector(unsigned(select_ln1364_1_fu_472_p3) + unsigned(sext_ln534_fu_478_p1));
    radii_address0 <= zext_ln1445_fu_307_p1(3 - 1 downto 0);

    radii_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            radii_ce0 <= ap_const_logic_1;
        else 
            radii_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_395_p2 <= std_logic_vector(signed(sext_ln215_fu_389_p1) - signed(sext_ln215_24_fu_392_p1));

    row_list_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_enable_reg_pp0_iter1, grp_mSP_findStartIndex_fu_289_row_list_address0, grp_mSP_findLRBounds_fu_297_row_list_address0, ap_block_pp0_stage0, row_list_size_cast_fu_384_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_list_V_address0 <= row_list_size_cast_fu_384_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            row_list_V_address0 <= grp_mSP_findLRBounds_fu_297_row_list_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            row_list_V_address0 <= grp_mSP_findStartIndex_fu_289_row_list_address0;
        else 
            row_list_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    row_list_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_enable_reg_pp0_iter1, grp_mSP_findStartIndex_fu_289_row_list_ce0, grp_mSP_findLRBounds_fu_297_row_list_ce0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_list_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            row_list_V_ce0 <= grp_mSP_findLRBounds_fu_297_row_list_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            row_list_V_ce0 <= grp_mSP_findStartIndex_fu_289_row_list_ce0;
        else 
            row_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_list_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1450_1_reg_842, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1450_1_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_list_V_we0 <= ap_const_logic_1;
        else 
            row_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_list_size_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_list_size_reg_232),64));
    select_ln1364_1_fu_472_p3 <= 
        sub_ln1364_1_fu_466_p2 when (tmp_42_reg_866(0) = '1') else 
        tmp_44_reg_882;
    select_ln1364_fu_460_p3 <= 
        tmp_43_fu_450_p4 when (tmp_42_reg_866(0) = '1') else 
        tmp_44_reg_882;
    select_ln1484_fu_547_p3 <= 
        start_index_1_fu_542_p2 when (and_ln1484_fu_537_p2(0) = '1') else 
        start_index_reg_893;
    select_ln1489_fu_590_p3 <= 
        sub_ln1508_fu_585_p2 when (icmp_ln1489_fu_579_p2(0) = '1') else 
        trunc_ln1489_fu_554_p1;
    select_ln1535_fu_602_p3 <= 
        start_index_2_reg_918 when (and_ln1535_fu_598_p2(0) = '1') else 
        start_index_reg_893;
    select_ln1571_fu_639_p3 <= 
        trunc_ln1571_fu_629_p1 when (icmp_ln1550_fu_623_p2(0) = '1') else 
        add_ln1571_fu_633_p2;
    select_ln1596_1_fu_686_p3 <= 
        add_ln1596_fu_666_p2 when (icmp_ln1602_fu_672_p2(0) = '1') else 
        ap_phi_mux_j_1_phi_fu_271_p4;
    select_ln1596_fu_678_p3 <= 
        ap_const_lv2_0 when (icmp_ln1602_fu_672_p2(0) = '1') else 
        z_reg_278;
        sext_ln1364_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1364_reg_861),117));

    sext_ln215_24_fu_392_p0 <= apexZ0;
        sext_ln215_24_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln215_24_fu_392_p0),33));

        sext_ln215_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_top),33));

    sext_ln534_fu_478_p0 <= apexZ0;
        sext_ln534_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln534_fu_478_p0),34));

    shl_ln1596_fu_743_p2 <= std_logic_vector(shift_left(unsigned(add_ln1607_fu_738_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    start_index_1_fu_542_p2 <= std_logic_vector(unsigned(start_index_reg_893) + unsigned(ap_const_lv32_FFFFFFFF));
    start_index_2_fu_519_p2 <= std_logic_vector(unsigned(start_index_reg_893) + unsigned(ap_const_lv32_1));
    sub_ln1364_1_fu_466_p2 <= std_logic_vector(unsigned(ap_const_lv34_0) - unsigned(select_ln1364_fu_460_p3));
    sub_ln1364_fu_445_p2 <= std_logic_vector(unsigned(ap_const_lv117_0) - unsigned(mul_ln1364_2_reg_877));
    sub_ln1508_fu_585_p2 <= std_logic_vector(unsigned(add_ln1489_2_fu_573_p2) - unsigned(empty_reg_802));
    sub_ln1550_fu_608_p2 <= std_logic_vector(unsigned(select_ln1535_fu_602_p3) - unsigned(original_ppl));
    temp_start_fu_647_p3 <= 
        select_ln1489_fu_590_p3 when (leftRight(0) = '1') else 
        select_ln1571_fu_639_p3;
    tmp_43_fu_450_p4 <= sub_ln1364_fu_445_p2(116 downto 83);
    tmp_60_cast_fu_365_p3 <= (add_ln1452_1_fu_360_p2 & ap_const_lv1_0);
    tmp_68_cast_fu_713_p3 <= (add_ln1607_1_fu_708_p2 & ap_const_lv1_0);
    tmp_fu_317_p3 <= (i & ap_const_lv4_0);
    tmp_s_fu_328_p3 <= (i & ap_const_lv8_0);
    trunc_ln1450_fu_341_p1 <= GDn_points_q0(31 - 1 downto 0);
    trunc_ln1452_fu_356_p1 <= ap_phi_mux_row_list_size_phi_fu_236_p4(11 - 1 downto 0);
    trunc_ln1489_1_fu_563_p1 <= grp_mSP_findLRBounds_fu_297_ap_return_1(11 - 1 downto 0);
    trunc_ln1489_fu_554_p1 <= select_ln1484_fu_547_p3(11 - 1 downto 0);
    trunc_ln1550_fu_613_p1 <= sub_ln1550_fu_608_p2(11 - 1 downto 0);
    trunc_ln1571_fu_629_p1 <= grp_mSP_findLRBounds_fu_297_ap_return_0(11 - 1 downto 0);
    zext_ln1445_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),64));
    zext_ln1452_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1452_fu_373_p2),64));
    zext_ln1452_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_317_p3),8));
    zext_ln1596_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1596_1_reg_943),11));
    zext_ln1607_1_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1596_reg_937),12));
    zext_ln1607_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1596_reg_937_pp1_iter1_reg),8));
    zext_ln1607_3_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1607_2_fu_752_p2),64));
    zext_ln1607_4_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1607_3_fu_724_p2),64));
    zext_ln1607_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1596_1_reg_943_pp1_iter1_reg),8));
end behav;
