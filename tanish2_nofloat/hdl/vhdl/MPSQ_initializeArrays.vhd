-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_initializeArrays is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_V_ce0 : OUT STD_LOGIC;
    patches_parameters_V_we0 : OUT STD_LOGIC;
    patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_initializeArrays is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F00 : STD_LOGIC_VECTOR (11 downto 0) := "111100000000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_124 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_reg_135 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_157 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten59_reg_179 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_1_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten35_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_3_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten21_reg_223 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_3_reg_234 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_245 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln536_1_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln536_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln536_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln536_1_fu_288_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln536_1_reg_698 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln540_fu_326_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln540_reg_705 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln540_1_fu_334_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln540_1_reg_710 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln546_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln540_2_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln557_1_fu_409_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln557_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln557_1_fu_441_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln557_1_reg_735 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln561_1_fu_521_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln561_1_reg_740 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln578_1_fu_533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln578_1_reg_745 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln567_fu_575_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln567_reg_750 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln567_1_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln567_1_reg_755 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln573_fu_591_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln567_2_fu_603_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln561_2_fu_617_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_a_phi_fu_139_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_161_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_1_phi_fu_194_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_3_phi_fu_216_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_3_phi_fu_238_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln551_3_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln578_5_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln540_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln536_fu_268_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln546_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln536_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln536_fu_280_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln536_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln540_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln540_fu_314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_1_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln551_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln551_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln551_1_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln551_1_fu_381_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_cast_fu_387_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln551_2_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln551_2_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln561_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln557_fu_421_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln578_1_fu_461_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln578_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln573_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln557_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln567_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln557_fu_433_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln557_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln561_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln561_fu_501_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln578_fu_465_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln578_2_fu_529_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln561_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln557_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln561_1_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln561_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln561_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln567_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln567_1_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln567_fu_557_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln567_1_fu_597_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln561_1_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_625_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln567_fu_632_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln578_3_fu_636_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln578_2_fu_639_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln578_fu_645_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln578_1_fu_657_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_649_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_661_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln578_fu_669_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln578_4_fu_675_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln578_3_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                a_1_reg_190 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
                a_1_reg_190 <= select_ln557_1_reg_735;
            end if; 
        end if;
    end process;

    a_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_135 <= select_ln536_1_reg_698;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_135 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    b_3_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_3_reg_212 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
                b_3_reg_212 <= select_ln561_1_reg_740;
            end if; 
        end if;
    end process;

    b_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_157 <= select_ln540_1_reg_710;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_157 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_3_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c_3_reg_234 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
                c_3_reg_234 <= select_ln567_1_reg_755;
            end if; 
        end if;
    end process;

    c_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_168 <= add_ln546_fu_342_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_reg_245 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln557_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                d_reg_245 <= add_ln573_fu_591_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_124 <= add_ln536_1_fu_256_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_124 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten21_reg_223 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln557_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten21_reg_223 <= select_ln567_2_fu_603_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten35_reg_201 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln557_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten35_reg_201 <= select_ln561_2_fu_617_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten59_reg_179 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln557_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten59_reg_179 <= add_ln557_1_fu_409_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_146 <= select_ln540_2_fu_354_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_146 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln557_fu_415_p2 = ap_const_lv1_0))) then
                add_ln578_1_reg_745 <= add_ln578_1_fu_533_p2;
                select_ln567_reg_750 <= select_ln567_fu_575_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln536_reg_694 <= icmp_ln536_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln557_reg_731 <= icmp_ln557_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln536_1_reg_698 <= select_ln536_1_fu_288_p3;
                select_ln540_1_reg_710 <= select_ln540_1_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln540_reg_705 <= select_ln540_fu_326_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln557_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln557_1_reg_735 <= select_ln557_1_fu_441_p3;
                select_ln561_1_reg_740 <= select_ln561_1_fu_521_p3;
                select_ln567_1_reg_755 <= select_ln567_1_fu_583_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln536_fu_262_p2, ap_enable_reg_pp1_iter0, icmp_ln557_fu_415_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln536_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln536_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln557_fu_415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln557_fu_415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln536_1_fu_256_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_124) + unsigned(ap_const_lv12_1));
    add_ln536_fu_268_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_139_p4) + unsigned(ap_const_lv6_1));
    add_ln540_1_fu_348_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_146) + unsigned(ap_const_lv8_1));
    add_ln540_fu_314_p2 <= std_logic_vector(unsigned(select_ln536_fu_280_p3) + unsigned(ap_const_lv3_1));
    add_ln546_fu_342_p2 <= std_logic_vector(unsigned(select_ln540_fu_326_p3) + unsigned(ap_const_lv5_1));
    add_ln551_1_fu_381_p2 <= std_logic_vector(unsigned(add_ln551_fu_372_p2) + unsigned(zext_ln551_1_fu_378_p1));
    add_ln551_2_fu_398_p2 <= std_logic_vector(unsigned(tmp_78_cast_fu_387_p3) + unsigned(zext_ln551_2_fu_395_p1));
    add_ln551_fu_372_p2 <= std_logic_vector(unsigned(tmp_fu_365_p3) + unsigned(zext_ln551_fu_362_p1));
    add_ln557_1_fu_409_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_179) + unsigned(ap_const_lv12_1));
    add_ln557_fu_421_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_1_phi_fu_194_p4) + unsigned(ap_const_lv6_1));
    add_ln561_1_fu_611_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_201) + unsigned(ap_const_lv8_1));
    add_ln561_fu_501_p2 <= std_logic_vector(unsigned(select_ln557_fu_433_p3) + unsigned(ap_const_lv3_1));
    add_ln567_1_fu_597_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_223) + unsigned(ap_const_lv6_1));
    add_ln567_fu_557_p2 <= std_logic_vector(unsigned(select_ln561_fu_513_p3) + unsigned(ap_const_lv3_1));
    add_ln573_fu_591_p2 <= std_logic_vector(unsigned(select_ln567_fu_575_p3) + unsigned(ap_const_lv3_1));
    add_ln578_1_fu_533_p2 <= std_logic_vector(unsigned(add_ln578_fu_465_p2) + unsigned(zext_ln578_2_fu_529_p1));
    add_ln578_2_fu_639_p2 <= std_logic_vector(unsigned(zext_ln567_fu_632_p1) + unsigned(zext_ln578_3_fu_636_p1));
    add_ln578_3_fu_678_p2 <= std_logic_vector(unsigned(sub_ln578_fu_669_p2) + unsigned(zext_ln578_4_fu_675_p1));
    add_ln578_fu_465_p2 <= std_logic_vector(unsigned(zext_ln578_1_fu_461_p1) + unsigned(zext_ln578_fu_449_p1));
    and_ln536_fu_308_p2 <= (xor_ln536_fu_296_p2 and icmp_ln546_fu_302_p2);
    and_ln557_1_fu_495_p2 <= (xor_ln557_fu_471_p2 and icmp_ln567_fu_489_p2);
    and_ln557_fu_483_p2 <= (xor_ln557_fu_471_p2 and icmp_ln573_fu_477_p2);
    and_ln561_fu_551_p2 <= (or_ln561_1_fu_545_p2 and and_ln557_fu_483_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln536_fu_262_p2)
    begin
        if ((icmp_ln536_fu_262_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln557_fu_415_p2)
    begin
        if ((icmp_ln557_fu_415_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_1_phi_fu_194_p4_assign_proc : process(a_1_reg_190, ap_CS_fsm_pp1_stage0, icmp_ln557_reg_731, select_ln557_1_reg_735, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
            ap_phi_mux_a_1_phi_fu_194_p4 <= select_ln557_1_reg_735;
        else 
            ap_phi_mux_a_1_phi_fu_194_p4 <= a_1_reg_190;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_139_p4_assign_proc : process(a_reg_135, ap_CS_fsm_pp0_stage0, icmp_ln536_reg_694, select_ln536_1_reg_698, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln536_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_139_p4 <= select_ln536_1_reg_698;
        else 
            ap_phi_mux_a_phi_fu_139_p4 <= a_reg_135;
        end if; 
    end process;


    ap_phi_mux_b_3_phi_fu_216_p4_assign_proc : process(b_3_reg_212, ap_CS_fsm_pp1_stage0, icmp_ln557_reg_731, select_ln561_1_reg_740, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
            ap_phi_mux_b_3_phi_fu_216_p4 <= select_ln561_1_reg_740;
        else 
            ap_phi_mux_b_3_phi_fu_216_p4 <= b_3_reg_212;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_161_p4_assign_proc : process(b_reg_157, ap_CS_fsm_pp0_stage0, icmp_ln536_reg_694, select_ln540_1_reg_710, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln536_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_161_p4 <= select_ln540_1_reg_710;
        else 
            ap_phi_mux_b_phi_fu_161_p4 <= b_reg_157;
        end if; 
    end process;


    ap_phi_mux_c_3_phi_fu_238_p4_assign_proc : process(c_3_reg_234, ap_CS_fsm_pp1_stage0, icmp_ln557_reg_731, select_ln567_1_reg_755, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
            ap_phi_mux_c_3_phi_fu_238_p4 <= select_ln567_1_reg_755;
        else 
            ap_phi_mux_c_3_phi_fu_238_p4 <= c_3_reg_234;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln536_fu_262_p2 <= "1" when (indvar_flatten13_reg_124 = ap_const_lv12_A00) else "0";
    icmp_ln540_fu_274_p2 <= "1" when (indvar_flatten_reg_146 = ap_const_lv8_50) else "0";
    icmp_ln546_fu_302_p2 <= "1" when (c_reg_168 = ap_const_lv5_10) else "0";
    icmp_ln557_fu_415_p2 <= "1" when (indvar_flatten59_reg_179 = ap_const_lv12_F00) else "0";
    icmp_ln561_fu_427_p2 <= "1" when (indvar_flatten35_reg_201 = ap_const_lv8_78) else "0";
    icmp_ln567_fu_489_p2 <= "1" when (indvar_flatten21_reg_223 = ap_const_lv6_18) else "0";
    icmp_ln573_fu_477_p2 <= "1" when (d_reg_245 = ap_const_lv3_6) else "0";
    or_ln540_fu_320_p2 <= (icmp_ln540_fu_274_p2 or and_ln536_fu_308_p2);
    or_ln561_1_fu_545_p2 <= (xor_ln561_fu_539_p2 or icmp_ln561_fu_427_p2);
    or_ln561_fu_507_p2 <= (icmp_ln561_fu_427_p2 or and_ln557_1_fu_495_p2);
    or_ln567_1_fu_569_p2 <= (or_ln567_fu_563_p2 or icmp_ln561_fu_427_p2);
    or_ln567_fu_563_p2 <= (and_ln561_fu_551_p2 or and_ln557_1_fu_495_p2);
    p_shl2_cast_fu_649_p3 <= (trunc_ln578_fu_645_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_661_p3 <= (trunc_ln578_1_fu_657_p1 & ap_const_lv1_0);
    patches_parameters_V_address0 <= zext_ln578_5_fu_684_p1(12 - 1 downto 0);

    patches_parameters_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            patches_parameters_V_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_V_d0 <= ap_const_lv32_0;

    patches_parameters_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln557_reg_731, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln557_reg_731 = ap_const_lv1_0))) then 
            patches_parameters_V_we0 <= ap_const_logic_1;
        else 
            patches_parameters_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= zext_ln551_3_fu_404_p1(12 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= ap_const_lv64_0;

    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln536_reg_694, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln536_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln536_1_fu_288_p3 <= 
        add_ln536_fu_268_p2 when (icmp_ln540_fu_274_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_139_p4;
    select_ln536_fu_280_p3 <= 
        ap_const_lv3_0 when (icmp_ln540_fu_274_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_161_p4;
    select_ln540_1_fu_334_p3 <= 
        add_ln540_fu_314_p2 when (and_ln536_fu_308_p2(0) = '1') else 
        select_ln536_fu_280_p3;
    select_ln540_2_fu_354_p3 <= 
        ap_const_lv8_1 when (icmp_ln540_fu_274_p2(0) = '1') else 
        add_ln540_1_fu_348_p2;
    select_ln540_fu_326_p3 <= 
        ap_const_lv5_0 when (or_ln540_fu_320_p2(0) = '1') else 
        c_reg_168;
    select_ln557_1_fu_441_p3 <= 
        add_ln557_fu_421_p2 when (icmp_ln561_fu_427_p2(0) = '1') else 
        ap_phi_mux_a_1_phi_fu_194_p4;
    select_ln557_fu_433_p3 <= 
        ap_const_lv3_0 when (icmp_ln561_fu_427_p2(0) = '1') else 
        ap_phi_mux_b_3_phi_fu_216_p4;
    select_ln561_1_fu_521_p3 <= 
        add_ln561_fu_501_p2 when (and_ln557_1_fu_495_p2(0) = '1') else 
        select_ln557_fu_433_p3;
    select_ln561_2_fu_617_p3 <= 
        ap_const_lv8_1 when (icmp_ln561_fu_427_p2(0) = '1') else 
        add_ln561_1_fu_611_p2;
    select_ln561_fu_513_p3 <= 
        ap_const_lv3_0 when (or_ln561_fu_507_p2(0) = '1') else 
        ap_phi_mux_c_3_phi_fu_238_p4;
    select_ln567_1_fu_583_p3 <= 
        add_ln567_fu_557_p2 when (and_ln561_fu_551_p2(0) = '1') else 
        select_ln561_fu_513_p3;
    select_ln567_2_fu_603_p3 <= 
        ap_const_lv6_1 when (or_ln561_fu_507_p2(0) = '1') else 
        add_ln567_1_fu_597_p2;
    select_ln567_fu_575_p3 <= 
        ap_const_lv3_0 when (or_ln567_1_fu_569_p2(0) = '1') else 
        d_reg_245;
    sub_ln578_fu_669_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_649_p3) - unsigned(p_shl3_cast_fu_661_p3));
    tmp_46_fu_625_p3 <= (add_ln578_1_reg_745 & ap_const_lv2_0);
    tmp_78_cast_fu_387_p3 <= (add_ln551_1_fu_381_p2 & ap_const_lv4_0);
    tmp_fu_365_p3 <= (select_ln536_1_reg_698 & ap_const_lv2_0);
    tmp_s_fu_453_p3 <= (select_ln557_1_fu_441_p3 & ap_const_lv2_0);
    trunc_ln578_1_fu_657_p1 <= add_ln578_2_fu_639_p2(11 - 1 downto 0);
    trunc_ln578_fu_645_p1 <= add_ln578_2_fu_639_p2(9 - 1 downto 0);
    xor_ln536_fu_296_p2 <= (icmp_ln540_fu_274_p2 xor ap_const_lv1_1);
    xor_ln557_fu_471_p2 <= (icmp_ln561_fu_427_p2 xor ap_const_lv1_1);
    xor_ln561_fu_539_p2 <= (icmp_ln567_fu_489_p2 xor ap_const_lv1_1);
    zext_ln551_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln540_1_reg_710),8));
    zext_ln551_2_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln540_reg_705),12));
    zext_ln551_3_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln551_2_fu_398_p2),64));
    zext_ln551_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln536_1_reg_698),8));
    zext_ln567_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_625_p3),63));
    zext_ln578_1_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_453_p3),9));
    zext_ln578_2_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln561_1_fu_521_p3),9));
    zext_ln578_3_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln567_1_reg_755),63));
    zext_ln578_4_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln567_reg_750),12));
    zext_ln578_5_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln578_3_fu_678_p2),64));
    zext_ln578_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln557_1_fu_441_p3),9));
end behav;
