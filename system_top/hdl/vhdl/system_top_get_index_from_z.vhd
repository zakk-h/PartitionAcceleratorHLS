-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_get_index_from_z is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce0 : OUT STD_LOGIC;
    points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce0 : OUT STD_LOGIC;
    num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    z_value : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of system_top_get_index_from_z is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7FF00000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111100000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_94_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal index_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal minVal_V_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal num_points_load_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_135_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln566_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln566_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln566_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln566_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln566_reg_300_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal z_V_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_V_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal minVal_V_1_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal index_1_fu_261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_98_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln569_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln569_fu_153_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln569_1_fu_157_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln569_fu_165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_170_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln569_1_fu_180_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_184_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_1_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_2_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln569_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln570_fu_239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln566_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_94 <= add_ln566_reg_295;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_94 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln566_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                index_reg_106 <= index_1_fu_261_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                index_reg_106 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minVal_V_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln566_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                minVal_V_reg_118 <= minVal_V_1_fu_253_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minVal_V_reg_118 <= ap_const_lv32_7FF00000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln566_reg_295 <= add_ln566_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_94_pp0_iter1_reg <= i_reg_94;
                icmp_ln566_reg_300 <= icmp_ln566_fu_148_p2;
                icmp_ln566_reg_300_pp0_iter1_reg <= icmp_ln566_reg_300;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                num_points_load_reg_285 <= num_points_q0;
                    shl_ln_reg_290(15 downto 13) <= shl_ln_fu_135_p3(15 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln566_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_V_reg_309 <= z_V_fu_197_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_290(12 downto 0) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln566_fu_142_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_98_p4) + unsigned(ap_const_lv32_1));
    add_ln569_fu_165_p2 <= std_logic_vector(unsigned(shl_ln569_1_fu_157_p3) + unsigned(shl_ln_reg_290));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln566_fu_148_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln566_fu_148_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_98_p4_assign_proc : process(i_reg_94, ap_CS_fsm_pp0_stage0, add_ln566_reg_295, icmp_ln566_reg_300, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln566_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_98_p4 <= add_ln566_reg_295;
        else 
            ap_phi_mux_i_phi_fu_98_p4 <= i_reg_94;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= index_reg_106;
    icmp_ln1495_fu_247_p2 <= "1" when (signed(select_ln569_fu_217_p3) < signed(select_ln570_fu_239_p3)) else "0";
    icmp_ln566_fu_148_p2 <= "1" when (ap_phi_mux_i_phi_fu_98_p4 = num_points_load_reg_285) else "0";
    idxprom_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),64));
    index_1_fu_261_p3 <= 
        i_reg_94_pp0_iter1_reg when (icmp_ln1495_fu_247_p2(0) = '1') else 
        index_reg_106;
    lshr_ln_fu_170_p4 <= add_ln569_fu_165_p2(15 downto 13);
    minVal_V_1_fu_253_p3 <= 
        select_ln569_fu_217_p3 when (icmp_ln1495_fu_247_p2(0) = '1') else 
        minVal_V_reg_118;
    num_points_address0 <= idxprom_fu_130_p1(3 - 1 downto 0);

    num_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_points_ce0 <= ap_const_logic_1;
        else 
            num_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    points_address0 <= zext_ln569_fu_192_p1(12 - 1 downto 0);

    points_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            points_ce0 <= ap_const_logic_1;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln569_fu_217_p3 <= 
        sub_ln703_1_fu_213_p2 when (tmp_fu_205_p3(0) = '1') else 
        sub_ln703_fu_201_p2;
    select_ln570_fu_239_p3 <= 
        sub_ln703_2_fu_233_p2 when (tmp_3_fu_225_p3(0) = '1') else 
        minVal_V_reg_118;
    shl_ln569_1_fu_157_p3 <= (trunc_ln569_fu_153_p1 & ap_const_lv4_0);
    shl_ln_fu_135_p3 <= (layer & ap_const_lv13_0);
    sub_ln703_1_fu_213_p2 <= std_logic_vector(unsigned(z_value) - unsigned(z_V_reg_309));
    sub_ln703_2_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(minVal_V_reg_118));
    sub_ln703_fu_201_p2 <= std_logic_vector(unsigned(z_V_reg_309) - unsigned(z_value));
    tmp_3_fu_225_p3 <= minVal_V_reg_118(31 downto 31);
    tmp_8_fu_184_p3 <= (lshr_ln_fu_170_p4 & trunc_ln569_1_fu_180_p1);
    tmp_fu_205_p3 <= sub_ln703_fu_201_p2(31 downto 31);
    trunc_ln569_1_fu_180_p1 <= ap_phi_mux_i_phi_fu_98_p4(9 - 1 downto 0);
    trunc_ln569_fu_153_p1 <= ap_phi_mux_i_phi_fu_98_p4(12 - 1 downto 0);
    z_V_fu_197_p1 <= points_q0(32 - 1 downto 0);
    zext_ln569_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_184_p3),64));
end behav;
