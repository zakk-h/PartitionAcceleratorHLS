-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_makePatch_alignedToLine is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce0 : OUT STD_LOGIC;
    points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce1 : OUT STD_LOGIC;
    points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce0 : OUT STD_LOGIC;
    num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce1 : OUT STD_LOGIC;
    num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    patch_stream_V_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_stream_V_full_n : IN STD_LOGIC;
    patch_stream_V_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
    patch_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patch_buffer_ce0 : OUT STD_LOGIC;
    patch_buffer_we0 : OUT STD_LOGIC;
    patch_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patch_buffer_ce1 : OUT STD_LOGIC;
    patch_buffer_we1 : OUT STD_LOGIC;
    patch_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_is_empty_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_is_empty_ce0 : OUT STD_LOGIC;
    patch_buffer_is_empty_we0 : OUT STD_LOGIC;
    patch_buffer_is_empty_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of system_top_makePatch_alignedToLine is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal patch_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln79_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_150 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal point_reg_172 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_patch_buffer_add_patch7_fu_213_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret1_reg_320_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret1_reg_320_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln79_1_fu_226_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln79_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_1_fu_258_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln79_1_reg_333 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_ap_ready : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal init_patch_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_ce0 : STD_LOGIC;
    signal init_patch_V_we0 : STD_LOGIC;
    signal init_patch_V_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal init_patch_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_ce1 : STD_LOGIC;
    signal init_patch_V_we1 : STD_LOGIC;
    signal init_patch_V_q1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_ap_start : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_ap_done : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_ap_idle : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_ap_ready : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_points_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_points_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_points_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_points_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_num_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_num_points_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_d0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop8_fu_183_init_patch_d1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_i_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_ap_start : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_ap_idle : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_new_patch_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_new_patch_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_new_patch_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_new_patch_ce1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_we0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_ce1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_we1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_we0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_layer_phi_fu_165_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop8_fu_183_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_patch_buffer_add_patch7_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln82_1_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln81_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_238_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln79_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_266_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln82_fu_274_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_fu_278_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_alignedtoline_per_layer_loop8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce0 : OUT STD_LOGIC;
        points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce1 : OUT STD_LOGIC;
        points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
        num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce0 : OUT STD_LOGIC;
        num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce1 : OUT STD_LOGIC;
        num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        init_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        init_patch_ce0 : OUT STD_LOGIC;
        init_patch_we0 : OUT STD_LOGIC;
        init_patch_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
        init_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        init_patch_ce1 : OUT STD_LOGIC;
        init_patch_we1 : OUT STD_LOGIC;
        init_patch_d1 : OUT STD_LOGIC_VECTOR (95 downto 0);
        i_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component system_top_patch_buffer_add_patch7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        new_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        new_patch_ce0 : OUT STD_LOGIC;
        new_patch_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
        new_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        new_patch_ce1 : OUT STD_LOGIC;
        new_patch_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
        patch_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patch_buffer_ce0 : OUT STD_LOGIC;
        patch_buffer_we0 : OUT STD_LOGIC;
        patch_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patch_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patch_buffer_ce1 : OUT STD_LOGIC;
        patch_buffer_we1 : OUT STD_LOGIC;
        patch_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patch_buffer_is_empty_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        patch_buffer_is_empty_ce0 : OUT STD_LOGIC;
        patch_buffer_is_empty_we0 : OUT STD_LOGIC;
        patch_buffer_is_empty_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        latest_patch_index_read : IN STD_LOGIC_VECTOR (31 downto 0);
        num_patches_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_makePatch_alignedToLine_init_patch_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (95 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (95 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (95 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    init_patch_V_U : component system_top_makePatch_alignedToLine_init_patch_V
    generic map (
        DataWidth => 96,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => init_patch_V_address0,
        ce0 => init_patch_V_ce0,
        we0 => init_patch_V_we0,
        d0 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_d0,
        q0 => init_patch_V_q0,
        address1 => init_patch_V_address1,
        ce1 => init_patch_V_ce1,
        we1 => init_patch_V_we1,
        d1 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_d1,
        q1 => init_patch_V_q1);

    grp_alignedtoline_per_layer_loop8_fu_183 : component system_top_alignedtoline_per_layer_loop8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_alignedtoline_per_layer_loop8_fu_183_ap_start,
        ap_done => grp_alignedtoline_per_layer_loop8_fu_183_ap_done,
        ap_idle => grp_alignedtoline_per_layer_loop8_fu_183_ap_idle,
        ap_ready => grp_alignedtoline_per_layer_loop8_fu_183_ap_ready,
        points_address0 => grp_alignedtoline_per_layer_loop8_fu_183_points_address0,
        points_ce0 => grp_alignedtoline_per_layer_loop8_fu_183_points_ce0,
        points_q0 => points_q0,
        points_address1 => grp_alignedtoline_per_layer_loop8_fu_183_points_address1,
        points_ce1 => grp_alignedtoline_per_layer_loop8_fu_183_points_ce1,
        points_q1 => points_q1,
        num_points_address0 => grp_alignedtoline_per_layer_loop8_fu_183_num_points_address0,
        num_points_ce0 => grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce0,
        num_points_q0 => num_points_q0,
        num_points_address1 => grp_alignedtoline_per_layer_loop8_fu_183_num_points_address1,
        num_points_ce1 => grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce1,
        num_points_q1 => num_points_q1,
        p_read => p_read,
        z_top => z_top,
        leftRight => leftRight,
        init_patch_address0 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address0,
        init_patch_ce0 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce0,
        init_patch_we0 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we0,
        init_patch_d0 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_d0,
        init_patch_address1 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address1,
        init_patch_ce1 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce1,
        init_patch_we1 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we1,
        init_patch_d1 => grp_alignedtoline_per_layer_loop8_fu_183_init_patch_d1,
        i_offset => grp_alignedtoline_per_layer_loop8_fu_183_i_offset);

    grp_patch_buffer_add_patch7_fu_213 : component system_top_patch_buffer_add_patch7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_patch_buffer_add_patch7_fu_213_ap_start,
        ap_done => grp_patch_buffer_add_patch7_fu_213_ap_done,
        ap_idle => grp_patch_buffer_add_patch7_fu_213_ap_idle,
        ap_ready => grp_patch_buffer_add_patch7_fu_213_ap_ready,
        new_patch_address0 => grp_patch_buffer_add_patch7_fu_213_new_patch_address0,
        new_patch_ce0 => grp_patch_buffer_add_patch7_fu_213_new_patch_ce0,
        new_patch_q0 => init_patch_V_q0,
        new_patch_address1 => grp_patch_buffer_add_patch7_fu_213_new_patch_address1,
        new_patch_ce1 => grp_patch_buffer_add_patch7_fu_213_new_patch_ce1,
        new_patch_q1 => init_patch_V_q1,
        patch_buffer_address0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_address0,
        patch_buffer_ce0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_ce0,
        patch_buffer_we0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_we0,
        patch_buffer_d0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_d0,
        patch_buffer_address1 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_address1,
        patch_buffer_ce1 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_ce1,
        patch_buffer_we1 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_we1,
        patch_buffer_d1 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_d1,
        patch_buffer_is_empty_address0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_address0,
        patch_buffer_is_empty_ce0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_ce0,
        patch_buffer_is_empty_we0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_we0,
        patch_buffer_is_empty_d0 => grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_d0,
        latest_patch_index_read => p_read1,
        num_patches_read => p_read2,
        ap_return_0 => grp_patch_buffer_add_patch7_fu_213_ap_return_0,
        ap_return_1 => grp_patch_buffer_add_patch7_fu_213_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch7_fu_213_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch7_fu_213_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_alignedtoline_per_layer_loop8_fu_183_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_alignedtoline_per_layer_loop8_fu_183_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_alignedtoline_per_layer_loop8_fu_183_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_alignedtoline_per_layer_loop8_fu_183_ap_ready = ap_const_logic_1)) then 
                    grp_alignedtoline_per_layer_loop8_fu_183_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_patch_buffer_add_patch7_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_patch_buffer_add_patch7_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_patch_buffer_add_patch7_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_patch_buffer_add_patch7_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_patch_buffer_add_patch7_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_150 <= add_ln79_1_fu_226_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch7_fu_213_ap_done = ap_const_logic_1))) then 
                indvar_flatten_reg_150 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    layer_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                layer_reg_161 <= select_ln79_1_reg_333;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch7_fu_213_ap_done = ap_const_logic_1))) then 
                layer_reg_161 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    point_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                point_reg_172 <= add_ln81_fu_289_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch7_fu_213_ap_done = ap_const_logic_1))) then 
                point_reg_172 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                call_ret1_reg_320_0 <= grp_patch_buffer_add_patch7_fu_213_ap_return_0;
                call_ret1_reg_320_1 <= grp_patch_buffer_add_patch7_fu_213_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln79_reg_329 <= icmp_ln79_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln79_1_reg_333 <= select_ln79_1_fu_258_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_enable_reg_pp0_iter0, icmp_ln79_fu_232_p2, grp_patch_buffer_add_patch7_fu_213_ap_done, ap_block_pp0_stage0_subdone, grp_alignedtoline_per_layer_loop8_fu_183_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_alignedtoline_per_layer_loop8_fu_183_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_alignedtoline_per_layer_loop8_fu_183_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_alignedtoline_per_layer_loop8_fu_183_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_alignedtoline_per_layer_loop8_fu_183_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_alignedtoline_per_layer_loop8_fu_183_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch7_fu_213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln79_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln79_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln79_1_fu_226_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_150) + unsigned(ap_const_lv7_1));
    add_ln79_fu_238_p2 <= std_logic_vector(unsigned(ap_phi_mux_layer_phi_fu_165_p4) + unsigned(ap_const_lv3_1));
    add_ln81_fu_289_p2 <= std_logic_vector(unsigned(select_ln79_fu_250_p3) + unsigned(ap_const_lv5_1));
    add_ln82_fu_278_p2 <= std_logic_vector(unsigned(tmp_fu_266_p3) + unsigned(zext_ln82_fu_274_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln79_reg_329)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln79_reg_329)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln79_reg_329)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(patch_stream_V_full_n, icmp_ln79_reg_329)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((icmp_ln79_reg_329 = ap_const_lv1_0) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln79_fu_232_p2)
    begin
        if ((icmp_ln79_fu_232_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_layer_phi_fu_165_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln79_reg_329, layer_reg_161, select_ln79_1_reg_333)
    begin
        if (((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_layer_phi_fu_165_p4 <= select_ln79_1_reg_333;
        else 
            ap_phi_mux_layer_phi_fu_165_p4 <= layer_reg_161;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= call_ret1_reg_320_0;
    ap_return_1 <= call_ret1_reg_320_1;
    grp_alignedtoline_per_layer_loop8_fu_183_ap_start <= grp_alignedtoline_per_layer_loop8_fu_183_ap_start_reg;

    grp_alignedtoline_per_layer_loop8_fu_183_i_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_alignedtoline_per_layer_loop8_fu_183_i_offset <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_alignedtoline_per_layer_loop8_fu_183_i_offset <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_alignedtoline_per_layer_loop8_fu_183_i_offset <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_alignedtoline_per_layer_loop8_fu_183_i_offset <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_alignedtoline_per_layer_loop8_fu_183_i_offset <= ap_const_lv3_0;
        else 
            grp_alignedtoline_per_layer_loop8_fu_183_i_offset <= "XXX";
        end if; 
    end process;

    grp_patch_buffer_add_patch7_fu_213_ap_start <= grp_patch_buffer_add_patch7_fu_213_ap_start_reg;
    icmp_ln79_fu_232_p2 <= "1" when (indvar_flatten_reg_150 = ap_const_lv7_50) else "0";
    icmp_ln81_fu_244_p2 <= "1" when (point_reg_172 = ap_const_lv5_10) else "0";

    init_patch_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state12, ap_enable_reg_pp0_iter0, grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address0, grp_patch_buffer_add_patch7_fu_213_new_patch_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln82_1_fu_284_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            init_patch_V_address0 <= zext_ln82_1_fu_284_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_address0 <= grp_patch_buffer_add_patch7_fu_213_new_patch_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_address0 <= grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address0;
        else 
            init_patch_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_address1_assign_proc : process(ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address1, grp_patch_buffer_add_patch7_fu_213_new_patch_address1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_address1 <= grp_patch_buffer_add_patch7_fu_213_new_patch_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_address1 <= grp_alignedtoline_per_layer_loop8_fu_183_init_patch_address1;
        else 
            init_patch_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state12, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce0, grp_patch_buffer_add_patch7_fu_213_new_patch_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            init_patch_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_ce0 <= grp_patch_buffer_add_patch7_fu_213_new_patch_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_ce0 <= grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce0;
        else 
            init_patch_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_ce1_assign_proc : process(ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce1, grp_patch_buffer_add_patch7_fu_213_new_patch_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_ce1 <= grp_patch_buffer_add_patch7_fu_213_new_patch_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_ce1 <= grp_alignedtoline_per_layer_loop8_fu_183_init_patch_ce1;
        else 
            init_patch_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_we0_assign_proc : process(grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_we0 <= grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we0;
        else 
            init_patch_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_we1_assign_proc : process(grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_we1 <= grp_alignedtoline_per_layer_loop8_fu_183_init_patch_we1;
        else 
            init_patch_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    num_points_address0 <= grp_alignedtoline_per_layer_loop8_fu_183_num_points_address0;
    num_points_address1 <= grp_alignedtoline_per_layer_loop8_fu_183_num_points_address1;

    num_points_ce0_assign_proc : process(grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_ce0 <= grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce0;
        else 
            num_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    num_points_ce1_assign_proc : process(grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_ce1 <= grp_alignedtoline_per_layer_loop8_fu_183_num_points_ce1;
        else 
            num_points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_address0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_address0;
    patch_buffer_address1 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_address1;
    patch_buffer_ce0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_ce0;
    patch_buffer_ce1 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_ce1;
    patch_buffer_d0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_d0;
    patch_buffer_d1 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_d1;
    patch_buffer_is_empty_address0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_address0;
    patch_buffer_is_empty_ce0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_ce0;
    patch_buffer_is_empty_d0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_d0;
    patch_buffer_is_empty_we0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_is_empty_we0;
    patch_buffer_we0 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_we0;
    patch_buffer_we1 <= grp_patch_buffer_add_patch7_fu_213_patch_buffer_we1;

    patch_stream_V_blk_n_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln79_reg_329)
    begin
        if (((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            patch_stream_V_blk_n <= patch_stream_V_full_n;
        else 
            patch_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    patch_stream_V_din <= init_patch_V_q0;

    patch_stream_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_329, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_reg_329 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            patch_stream_V_write <= ap_const_logic_1;
        else 
            patch_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    points_address0 <= grp_alignedtoline_per_layer_loop8_fu_183_points_address0;
    points_address1 <= grp_alignedtoline_per_layer_loop8_fu_183_points_address1;

    points_ce0_assign_proc : process(grp_alignedtoline_per_layer_loop8_fu_183_points_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_ce0 <= grp_alignedtoline_per_layer_loop8_fu_183_points_ce0;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    points_ce1_assign_proc : process(grp_alignedtoline_per_layer_loop8_fu_183_points_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_ce1 <= grp_alignedtoline_per_layer_loop8_fu_183_points_ce1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln79_1_fu_258_p3 <= 
        add_ln79_fu_238_p2 when (icmp_ln81_fu_244_p2(0) = '1') else 
        ap_phi_mux_layer_phi_fu_165_p4;
    select_ln79_fu_250_p3 <= 
        ap_const_lv5_0 when (icmp_ln81_fu_244_p2(0) = '1') else 
        point_reg_172;
    tmp_fu_266_p3 <= (select_ln79_1_fu_258_p3 & ap_const_lv4_0);
    zext_ln82_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_fu_278_p2),64));
    zext_ln82_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_fu_250_p3),7));
end behav;
