-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_get_index_from_z is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce0 : OUT STD_LOGIC;
    points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce0 : OUT STD_LOGIC;
    num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    z_value : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of system_top_get_index_from_z is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7FF00000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111100000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_174_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_174_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_174_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal minVal_V_2_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_points_load_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tobool_i_i11_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_i_i11_reg_1576 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_reg_1581 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_246_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_5_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_reg_1593 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_258_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1599 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln563_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln563_reg_1604 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln563_reg_1604_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln563_reg_1604_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln563_reg_1604_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln944_1_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_reg_1613 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_1_reg_1619 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_2_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_2_reg_1624 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_1_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_1629 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln563_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln563_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln935_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1639 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_471_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1644 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_17_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_17_reg_1649 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1660 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_fu_625_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_reg_1665 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_633_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1670 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln935_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i73_fu_873_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i73_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln351_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln351_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_fu_896_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_reg_1695 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_21_reg_1700 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_11_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_2_fu_1130_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_2_reg_1710 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln564_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln564_reg_1715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln564_1_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln564_1_reg_1720 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln555_fu_1164_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln555_reg_1725 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_29_reg_1730 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_1735 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_1186_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1740 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln564_2_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln564_2_reg_1750 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln564_3_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln564_3_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1760 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_1291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_1766 : STD_LOGIC_VECTOR (11 downto 0);
    signal minVal_V_fu_1537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal i_2_fu_1553_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state10 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_178_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_minVal_V_2_phi_fu_190_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxprom_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln564_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal d_fu_214_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_i15_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln564_fu_270_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln564_1_fu_274_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln564_fu_282_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_287_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln564_1_fu_297_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_301_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_21_fu_314_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_343_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_1_fu_359_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_1_fu_363_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_1_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_1_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_1_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_2_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_1_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_3_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_bits_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_fu_493_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_523_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_539_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_543_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_3_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_597_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_fu_640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_3_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_fu_664_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_670_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_6_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_18_fu_686_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_708_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_727_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_19_fu_734_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln959_1_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_1_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_1_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_1_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_1_fu_784_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_1_fu_770_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_10_fu_789_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_1_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_11_fu_799_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_19_fu_805_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_5_fu_819_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_1_fu_835_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_1_fu_827_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_840_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_1_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_846_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_23_fu_853_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_1_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_1_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_24_fu_883_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_3_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_20_fu_910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_26_fu_918_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_2_fu_928_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_2_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_2_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_948_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_2_fu_964_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_2_fu_968_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_2_fu_974_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_2_fu_978_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_2_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_4_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_4_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_1022_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_2_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_2_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_4_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_2_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_2_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_2_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_2_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_2_fu_1076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_2_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_2_fu_1062_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_5_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_2_fu_1080_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_2_fu_1056_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_4_fu_1086_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_14_fu_1094_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_2_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_15_fu_1106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln564_2_fu_1144_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal d_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_1160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_2_fu_1206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_2_fu_1199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_2_fu_1211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_2_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_1217_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_28_fu_1224_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln935_1_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal LD_2_fu_1236_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_1_fu_1240_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_1_fu_1248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1257_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln564_3_fu_1267_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln455_fu_1283_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln564_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln564_1_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln564_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_1317_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_1324_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_1328_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_1346_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_1351_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_1356_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_1334_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_19_fu_1383_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln586_fu_1399_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_fu_1403_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1407_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln583_fu_1373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_fu_1364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln564_1_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_1434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_1_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_1_fu_1413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln582_fu_1440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln603_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_fu_1472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_fu_1498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln585_fu_1519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_1_fu_1514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln585_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln564_fu_1506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_2_fu_1545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_fsub_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component system_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_3_full_dsp_1_U106 : component system_top_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln935_reg_1675,
        din1 => retval_0_i_i73_reg_1680,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    fpext_32ns_64_1_no_dsp_1_U107 : component system_top_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => d_fu_214_p0,
        dout => d_fu_214_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U108 : component system_top_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln351_reg_1690,
        din1 => grp_fu_217_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_217_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_174 <= add_ln563_reg_1634;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_174 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                index_reg_198 <= i_2_fu_1553_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                index_reg_198 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minVal_V_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                minVal_V_2_reg_186 <= minVal_V_fu_1537_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minVal_V_2_reg_186 <= ap_const_lv32_7FF00000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                F2_reg_1766 <= F2_fu_1291_p2;
                icmp_ln564_2_reg_1750 <= icmp_ln564_2_fu_1271_p2;
                icmp_ln564_3_reg_1755 <= icmp_ln564_3_fu_1277_p2;
                icmp_ln571_reg_1760 <= icmp_ln571_fu_1286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln563_reg_1634 <= add_ln563_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    bitcast_ln351_reg_1690(30 downto 0) <= bitcast_ln351_fu_891_p1(30 downto 0);
                exp_tmp_reg_1735 <= ireg_fu_1160_p1(62 downto 52);
                icmp_ln564_1_reg_1720 <= icmp_ln564_1_fu_1154_p2;
                icmp_ln564_reg_1715 <= icmp_ln564_fu_1148_p2;
                m_21_reg_1700 <= m_15_fu_1106_p2(63 downto 1);
                p_Result_11_reg_1705 <= m_15_fu_1106_p2(25 downto 25);
                p_Result_25_reg_1695 <= ap_phi_mux_minVal_V_2_phi_fu_190_p4(31 downto 31);
                p_Result_29_reg_1730 <= ireg_fu_1160_p1(63 downto 63);
                trunc_ln555_reg_1725 <= trunc_ln555_fu_1164_p1;
                trunc_ln565_reg_1740 <= trunc_ln565_fu_1186_p1;
                trunc_ln943_2_reg_1710 <= trunc_ln943_2_fu_1130_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dc_reg_1685 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_174_pp0_iter1_reg <= i_reg_174;
                i_reg_174_pp0_iter2_reg <= i_reg_174_pp0_iter1_reg;
                i_reg_174_pp0_iter3_reg <= i_reg_174_pp0_iter2_reg;
                icmp_ln563_reg_1604 <= icmp_ln563_fu_265_p2;
                icmp_ln563_reg_1604_pp0_iter1_reg <= icmp_ln563_reg_1604;
                icmp_ln563_reg_1604_pp0_iter2_reg <= icmp_ln563_reg_1604_pp0_iter1_reg;
                icmp_ln563_reg_1604_pp0_iter3_reg <= icmp_ln563_reg_1604_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln935_reg_1639 <= icmp_ln935_fu_465_p2;
                icmp_ln958_reg_1660 <= icmp_ln958_fu_605_p2;
                m_17_reg_1649 <= m_17_fu_485_p3;
                p_Result_16_reg_1644 <= points_q0(31 downto 31);
                select_ln958_reg_1665 <= select_ln958_fu_625_p3;
                sub_ln944_reg_1654 <= sub_ln944_fu_511_p2;
                trunc_ln943_reg_1670 <= trunc_ln943_fu_633_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_fu_265_p2 = ap_const_lv1_0) and (tobool_i_i11_reg_1576 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln958_1_reg_1619 <= icmp_ln958_1_fu_423_p2;
                select_ln958_2_reg_1624 <= select_ln958_2_fu_443_p3;
                sub_ln944_1_reg_1613 <= sub_ln944_1_fu_331_p2;
                trunc_ln943_1_reg_1629 <= trunc_ln943_1_fu_451_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    m_5_reg_1593(31 downto 0) <= m_5_fu_254_p1(31 downto 0);
                num_points_load_reg_1571 <= num_points_q0;
                p_Result_20_reg_1581 <= z_value(31 downto 31);
                    shl_ln_reg_1599(15 downto 13) <= shl_ln_fu_258_p3(15 downto 13);
                tmp_V_5_reg_1586 <= tmp_V_5_fu_246_p3;
                tobool_i_i11_reg_1576 <= tobool_i_i11_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_reg_1604 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                retval_0_i_i73_reg_1680 <= retval_0_i_i73_fu_873_p3;
                select_ln935_reg_1675 <= select_ln935_fu_754_p3;
            end if;
        end if;
    end process;
    m_5_reg_1593(63 downto 32) <= "00000000000000000000000000000000";
    shl_ln_reg_1599(12 downto 0) <= "0000000000000";
    bitcast_ln351_reg_1690(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    F2_fu_1291_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_1283_p1));
    LD_1_fu_865_p1 <= p_Result_23_fu_853_p5(32 - 1 downto 0);
    LD_2_fu_1236_p1 <= p_Result_28_fu_1224_p5(31 - 1 downto 0);
    LD_fu_746_p1 <= p_Result_19_fu_734_p5(32 - 1 downto 0);
    add_ln563_fu_455_p2 <= std_logic_vector(unsigned(i_reg_174) + unsigned(ap_const_lv32_1));
    add_ln564_fu_282_p2 <= std_logic_vector(unsigned(shl_ln564_1_fu_274_p3) + unsigned(shl_ln_reg_1599));
    add_ln581_fu_1346_p2 <= std_logic_vector(unsigned(F2_reg_1766) + unsigned(ap_const_lv12_FEC));
    add_ln958_1_fu_775_p2 <= std_logic_vector(unsigned(sub_ln944_1_reg_1613) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_2_fu_1070_p2 <= std_logic_vector(unsigned(sub_ln944_2_fu_936_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_fu_655_p2 <= std_logic_vector(unsigned(sub_ln944_reg_1654) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_1_fu_840_p2 <= std_logic_vector(unsigned(sub_ln964_1_fu_835_p2) + unsigned(select_ln943_1_fu_827_p3));
    add_ln964_2_fu_1211_p2 <= std_logic_vector(unsigned(sub_ln964_2_fu_1206_p2) + unsigned(select_ln943_2_fu_1199_p3));
    add_ln964_fu_721_p2 <= std_logic_vector(unsigned(sub_ln964_fu_716_p2) + unsigned(select_ln943_fu_708_p3));
    and_ln564_1_fu_1311_p2 <= (grp_fu_217_p2 and and_ln564_fu_1305_p2);
    and_ln564_fu_1305_p2 <= (or_ln564_fu_1297_p2 and or_ln564_1_fu_1301_p2);
    and_ln571_1_fu_1514_p2 <= (icmp_ln571_reg_1760 and and_ln564_1_fu_1311_p2);
    and_ln571_fu_1428_p2 <= (xor_ln571_fu_1423_p2 and and_ln564_1_fu_1311_p2);
    and_ln581_fu_1460_p2 <= (icmp_ln581_fu_1341_p2 and and_ln582_1_fu_1454_p2);
    and_ln582_1_fu_1454_p2 <= (xor_ln582_fu_1448_p2 and and_ln571_fu_1428_p2);
    and_ln582_fu_1434_p2 <= (icmp_ln582_fu_1368_p2 and and_ln571_fu_1428_p2);
    and_ln585_1_fu_1525_p2 <= (xor_ln585_fu_1519_p2 and and_ln581_fu_1460_p2);
    and_ln585_fu_1466_p2 <= (icmp_ln585_fu_1377_p2 and and_ln581_fu_1460_p2);
    and_ln603_1_fu_1492_p2 <= (and_ln603_fu_1486_p2 and and_ln582_1_fu_1454_p2);
    and_ln603_fu_1486_p2 <= (xor_ln581_fu_1480_p2 and icmp_ln603_fu_1393_p2);
    and_ln949_1_fu_611_p2 <= (xor_ln949_fu_591_p2 and p_Result_18_fu_597_p3);
    and_ln949_2_fu_391_p2 <= (tmp_V_5_reg_1586 and or_ln949_fu_385_p2);
    and_ln949_3_fu_429_p2 <= (xor_ln949_1_fu_410_p2 and p_Result_22_fu_416_p3);
    and_ln949_4_fu_996_p2 <= (or_ln949_4_fu_990_p2 and m_20_fu_910_p3);
    and_ln949_5_fu_1036_p2 <= (xor_ln949_2_fu_1016_p2 and p_Result_27_fu_1022_p3);
    and_ln949_fu_571_p2 <= (or_ln949_3_fu_565_p2 and m_17_fu_485_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter3_state10_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter3_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln563_reg_1604, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln563_reg_1604 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_178_p4_assign_proc : process(i_reg_174, ap_CS_fsm_pp0_stage0, icmp_ln563_reg_1604, add_ln563_reg_1634, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln563_reg_1604 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_178_p4 <= add_ln563_reg_1634;
        else 
            ap_phi_mux_i_phi_fu_178_p4 <= i_reg_174;
        end if; 
    end process;


    ap_phi_mux_minVal_V_2_phi_fu_190_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, minVal_V_2_reg_186, icmp_ln563_reg_1604_pp0_iter3_reg, minVal_V_fu_1537_p3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((icmp_ln563_reg_1604_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_minVal_V_2_phi_fu_190_p4 <= minVal_V_fu_1537_p3;
        else 
            ap_phi_mux_minVal_V_2_phi_fu_190_p4 <= minVal_V_2_reg_186;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= index_reg_198;
    ashr_ln586_fu_1407_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_1334_p3),to_integer(unsigned('0' & zext_ln586_fu_1403_p1(31-1 downto 0)))));
    bitcast_ln351_fu_891_p1 <= zext_ln368_fu_887_p1;
    bitcast_ln744_1_fu_869_p1 <= LD_1_fu_865_p1;
    bitcast_ln744_fu_750_p1 <= LD_fu_746_p1;
    d_fu_214_p0 <= zext_ln368_fu_887_p1;
    data_V_1_fu_1240_p3 <= 
        ap_const_lv31_0 when (icmp_ln935_1_fu_1190_p2(0) = '1') else 
        LD_2_fu_1236_p1;
    data_V_fu_880_p1 <= dc_reg_1685;
    grp_fu_217_p1 <= zext_ln368_1_fu_1248_p1;
    i_2_fu_1553_p3 <= 
        i_reg_174_pp0_iter3_reg when (or_ln585_fu_1531_p2(0) = '1') else 
        select_ln585_2_fu_1545_p3;
    icmp_ln563_fu_265_p2 <= "1" when (ap_phi_mux_i_phi_fu_178_p4 = num_points_load_reg_1571) else "0";
    icmp_ln564_1_fu_1154_p2 <= "1" when (trunc_ln564_2_fu_1144_p1 = ap_const_lv23_0) else "0";
    icmp_ln564_2_fu_1271_p2 <= "0" when (tmp_9_fu_1257_p4 = ap_const_lv8_FF) else "1";
    icmp_ln564_3_fu_1277_p2 <= "1" when (trunc_ln564_3_fu_1267_p1 = ap_const_lv23_0) else "0";
    icmp_ln564_fu_1148_p2 <= "0" when (tmp_7_fu_1134_p4 = ap_const_lv8_FF) else "1";
    icmp_ln571_fu_1286_p2 <= "1" when (trunc_ln555_reg_1725 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_1341_p2 <= "1" when (signed(F2_reg_1766) > signed(ap_const_lv12_14)) else "0";
    icmp_ln582_fu_1368_p2 <= "1" when (F2_reg_1766 = ap_const_lv12_14) else "0";
    icmp_ln585_fu_1377_p2 <= "1" when (unsigned(sh_amt_fu_1356_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_1393_p2 <= "1" when (tmp_19_fu_1383_p4 = ap_const_lv7_0) else "0";
    icmp_ln935_1_fu_1190_p2 <= "1" when (minVal_V_2_reg_186 = ap_const_lv32_0) else "0";
    icmp_ln935_fu_465_p2 <= "1" when (z_bits_fu_461_p1 = ap_const_lv32_0) else "0";
    icmp_ln946_1_fu_353_p2 <= "1" when (signed(tmp_fu_343_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_2_fu_958_p2 <= "1" when (signed(tmp_15_fu_948_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_fu_533_p2 <= "1" when (signed(tmp_8_fu_523_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_1_fu_396_p2 <= "0" when (and_ln949_2_fu_391_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_2_fu_1002_p2 <= "0" when (and_ln949_4_fu_996_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_fu_577_p2 <= "0" when (and_ln949_fu_571_p2 = ap_const_lv32_0) else "1";
    icmp_ln958_1_fu_423_p2 <= "1" when (signed(lsb_index_1_fu_337_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_2_fu_1030_p2 <= "1" when (signed(lsb_index_2_fu_942_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_605_p2 <= "1" when (signed(lsb_index_fu_517_p2) > signed(ap_const_lv32_0)) else "0";
    idxprom_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),64));
    ireg_fu_1160_p1 <= d_fu_214_p1;
    
    l_1_fu_323_p3_proc : process(p_Result_21_fu_314_p4)
    begin
        l_1_fu_323_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_21_fu_314_p4(i) = '1' then
                l_1_fu_323_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_2_fu_928_p3_proc : process(p_Result_26_fu_918_p4)
    begin
        l_2_fu_928_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_26_fu_918_p4(i) = '1' then
                l_2_fu_928_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_503_p3_proc : process(p_Result_17_fu_493_p4)
    begin
        l_fu_503_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_17_fu_493_p4(i) = '1' then
                l_fu_503_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_337_p2 <= std_logic_vector(unsigned(sub_ln944_1_fu_331_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_2_fu_942_p2 <= std_logic_vector(unsigned(sub_ln944_2_fu_936_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_517_p2 <= std_logic_vector(unsigned(sub_ln944_fu_511_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln947_1_fu_373_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_1_fu_369_p1(31-1 downto 0)))));
    lshr_ln947_2_fu_978_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_2_fu_974_p1(31-1 downto 0)))));
    lshr_ln947_fu_553_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_549_p1(31-1 downto 0)))));
    lshr_ln958_1_fu_784_p2 <= std_logic_vector(shift_right(unsigned(m_5_reg_1593),to_integer(unsigned('0' & zext_ln958_1_fu_780_p1(31-1 downto 0)))));
    lshr_ln958_2_fu_1080_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_4_fu_1042_p1),to_integer(unsigned('0' & zext_ln958_2_fu_1076_p1(31-1 downto 0)))));
    lshr_ln958_fu_664_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_3_fu_637_p1),to_integer(unsigned('0' & zext_ln958_fu_660_p1(31-1 downto 0)))));
    lshr_ln_fu_287_p4 <= add_ln564_fu_282_p2(15 downto 13);
    m_10_fu_789_p3 <= 
        lshr_ln958_1_fu_784_p2 when (icmp_ln958_1_reg_1619(0) = '1') else 
        shl_ln959_1_fu_770_p2;
    m_11_fu_799_p2 <= std_logic_vector(unsigned(m_10_fu_789_p3) + unsigned(zext_ln961_1_fu_796_p1));
    m_14_fu_1094_p3 <= 
        lshr_ln958_2_fu_1080_p2 when (icmp_ln958_2_fu_1030_p2(0) = '1') else 
        shl_ln959_2_fu_1056_p2;
    m_15_fu_1106_p2 <= std_logic_vector(unsigned(m_14_fu_1094_p3) + unsigned(zext_ln961_2_fu_1102_p1));
    m_17_fu_485_p3 <= 
        tmp_V_fu_479_p2 when (p_Result_16_fu_471_p3(0) = '1') else 
        z_bits_fu_461_p1;
    m_18_fu_686_p4 <= m_6_fu_680_p2(63 downto 1);
    m_19_fu_805_p4 <= m_11_fu_799_p2(63 downto 1);
    m_20_fu_910_p3 <= 
        tmp_V_3_fu_904_p2 when (p_Result_25_fu_896_p3(0) = '1') else 
        ap_phi_mux_minVal_V_2_phi_fu_190_p4;
    m_5_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_fu_246_p3),64));
    m_6_fu_680_p2 <= std_logic_vector(unsigned(m_fu_670_p3) + unsigned(zext_ln961_fu_677_p1));
    m_fu_670_p3 <= 
        lshr_ln958_fu_664_p2 when (icmp_ln958_reg_1660(0) = '1') else 
        shl_ln959_fu_649_p2;
    man_V_1_fu_1328_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_1324_p1));
    man_V_2_fu_1334_p3 <= 
        man_V_1_fu_1328_p2 when (p_Result_29_reg_1730(0) = '1') else 
        zext_ln569_fu_1324_p1;
    minVal_V_fu_1537_p3 <= 
        ap_const_lv32_0 when (or_ln585_fu_1531_p2(0) = '1') else 
        select_ln564_fu_1506_p3;
    num_points_address0 <= idxprom_fu_221_p1(3 - 1 downto 0);

    num_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            num_points_ce0 <= ap_const_logic_1;
        else 
            num_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln564_1_fu_1301_p2 <= (icmp_ln564_3_reg_1755 or icmp_ln564_2_reg_1750);
    or_ln564_fu_1297_p2 <= (icmp_ln564_reg_1715 or icmp_ln564_1_reg_1720);
    or_ln585_fu_1531_p2 <= (and_ln585_1_fu_1525_p2 or and_ln571_1_fu_1514_p2);
    or_ln949_3_fu_565_p2 <= (shl_ln949_fu_559_p2 or lshr_ln947_fu_553_p2);
    or_ln949_4_fu_990_p2 <= (shl_ln949_2_fu_984_p2 or lshr_ln947_2_fu_978_p2);
    or_ln949_fu_385_p2 <= (shl_ln949_1_fu_379_p2 or lshr_ln947_1_fu_373_p2);
    p_Result_16_fu_471_p3 <= points_q0(31 downto 31);
    
    p_Result_17_fu_493_p4_proc : process(m_17_fu_485_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_17_fu_493_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_17_fu_485_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_17_fu_493_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_17_fu_493_p4_i) := m_17_fu_485_p3(32-1-p_Result_17_fu_493_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_17_fu_493_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_18_fu_597_p3 <= m_17_fu_485_p3(to_integer(unsigned(lsb_index_fu_517_p2)) downto to_integer(unsigned(lsb_index_fu_517_p2))) when (to_integer(unsigned(lsb_index_fu_517_p2))>= 0 and to_integer(unsigned(lsb_index_fu_517_p2))<=31) else "-";
    p_Result_19_fu_734_p5 <= (zext_ln962_fu_696_p1(63 downto 32) & tmp_4_fu_727_p3 & zext_ln962_fu_696_p1(22 downto 0));
    p_Result_20_fu_232_p3 <= z_value(31 downto 31);
    
    p_Result_21_fu_314_p4_proc : process(tmp_V_5_reg_1586)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_21_fu_314_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_reg_1586;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_21_fu_314_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_21_fu_314_p4_i) := tmp_V_5_reg_1586(32-1-p_Result_21_fu_314_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_21_fu_314_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_22_fu_416_p3 <= tmp_V_5_reg_1586(to_integer(unsigned(lsb_index_1_fu_337_p2)) downto to_integer(unsigned(lsb_index_1_fu_337_p2))) when (to_integer(unsigned(lsb_index_1_fu_337_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_337_p2))<=31) else "-";
    p_Result_23_fu_853_p5 <= (zext_ln962_1_fu_815_p1(63 downto 32) & tmp_5_fu_846_p3 & zext_ln962_1_fu_815_p1(22 downto 0));
    p_Result_24_fu_883_p1 <= data_V_fu_880_p1(31 - 1 downto 0);
    p_Result_25_fu_896_p3 <= ap_phi_mux_minVal_V_2_phi_fu_190_p4(31 downto 31);
    
    p_Result_26_fu_918_p4_proc : process(m_20_fu_910_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_26_fu_918_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_20_fu_910_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_26_fu_918_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_26_fu_918_p4_i) := m_20_fu_910_p3(32-1-p_Result_26_fu_918_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_26_fu_918_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_27_fu_1022_p3 <= m_20_fu_910_p3(to_integer(unsigned(lsb_index_2_fu_942_p2)) downto to_integer(unsigned(lsb_index_2_fu_942_p2))) when (to_integer(unsigned(lsb_index_2_fu_942_p2))>= 0 and to_integer(unsigned(lsb_index_2_fu_942_p2))<=31) else "-";
    p_Result_28_fu_1224_p5 <= (zext_ln962_2_fu_1196_p1(63 downto 32) & tmp_6_fu_1217_p3 & zext_ln962_2_fu_1196_p1(22 downto 0));
    p_Result_30_fu_1317_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1740);
    p_Result_5_fu_819_p3 <= m_11_fu_799_p2(25 downto 25);
    p_Result_s_fu_700_p3 <= m_6_fu_680_p2(25 downto 25);
    points_address0 <= zext_ln564_fu_309_p1(12 - 1 downto 0);

    points_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            points_ce0 <= ap_const_logic_1;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    retval_0_i_i73_fu_873_p3 <= 
        bitcast_ln744_1_fu_869_p1 when (tobool_i_i11_reg_1576(0) = '1') else 
        ap_const_lv32_0;
    select_ln564_fu_1506_p3 <= 
        select_ln603_fu_1498_p3 when (and_ln564_1_fu_1311_p2(0) = '1') else 
        minVal_V_2_reg_186;
    select_ln582_fu_1440_p3 <= 
        trunc_ln583_fu_1373_p1 when (and_ln582_fu_1434_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln585_2_fu_1545_p3 <= 
        i_reg_174_pp0_iter3_reg when (and_ln564_1_fu_1311_p2(0) = '1') else 
        index_reg_198;
    select_ln585_fu_1472_p3 <= 
        trunc_ln586_1_fu_1413_p1 when (and_ln585_fu_1466_p2(0) = '1') else 
        select_ln582_fu_1440_p3;
    select_ln603_fu_1498_p3 <= 
        shl_ln604_fu_1417_p2 when (and_ln603_1_fu_1492_p2(0) = '1') else 
        select_ln585_fu_1472_p3;
    select_ln935_fu_754_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1639(0) = '1') else 
        bitcast_ln744_fu_750_p1;
    select_ln943_1_fu_827_p3 <= 
        ap_const_lv8_7F when (p_Result_5_fu_819_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_2_fu_1199_p3 <= 
        ap_const_lv8_7F when (p_Result_11_reg_1705(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_fu_708_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_700_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_1_fu_435_p3 <= 
        icmp_ln949_1_fu_396_p2 when (icmp_ln946_1_fu_353_p2(0) = '1') else 
        p_Result_22_fu_416_p3;
    select_ln946_2_fu_1062_p3 <= 
        icmp_ln949_2_fu_1002_p2 when (icmp_ln946_2_fu_958_p2(0) = '1') else 
        p_Result_27_fu_1022_p3;
    select_ln946_fu_617_p3 <= 
        icmp_ln949_fu_577_p2 when (icmp_ln946_fu_533_p2(0) = '1') else 
        p_Result_18_fu_597_p3;
    select_ln958_2_fu_443_p3 <= 
        select_ln946_1_fu_435_p3 when (icmp_ln958_1_fu_423_p2(0) = '1') else 
        and_ln949_3_fu_429_p2;
    select_ln958_4_fu_1086_p3 <= 
        select_ln946_2_fu_1062_p3 when (icmp_ln958_2_fu_1030_p2(0) = '1') else 
        and_ln949_5_fu_1036_p2;
    select_ln958_fu_625_p3 <= 
        select_ln946_fu_617_p3 when (icmp_ln958_fu_605_p2(0) = '1') else 
        and_ln949_1_fu_611_p2;
        sext_ln581_fu_1364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1356_p3),32));

    sh_amt_fu_1356_p3 <= 
        add_ln581_fu_1346_p2 when (icmp_ln581_fu_1341_p2(0) = '1') else 
        sub_ln581_fu_1351_p2;
    shl_ln564_1_fu_274_p3 <= (trunc_ln564_fu_270_p1 & ap_const_lv4_0);
    shl_ln604_fu_1417_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_1373_p1),to_integer(unsigned('0' & sext_ln581_fu_1364_p1(31-1 downto 0)))));
    shl_ln949_1_fu_379_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_1_fu_337_p2(31-1 downto 0)))));
    shl_ln949_2_fu_984_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_2_fu_942_p2(31-1 downto 0)))));
    shl_ln949_fu_559_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_517_p2(31-1 downto 0)))));
    shl_ln959_1_fu_770_p2 <= std_logic_vector(shift_left(unsigned(m_5_reg_1593),to_integer(unsigned('0' & zext_ln959_1_fu_766_p1(31-1 downto 0)))));
    shl_ln959_2_fu_1056_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_4_fu_1042_p1),to_integer(unsigned('0' & zext_ln959_2_fu_1052_p1(31-1 downto 0)))));
    shl_ln959_fu_649_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_3_fu_637_p1),to_integer(unsigned('0' & zext_ln959_fu_645_p1(31-1 downto 0)))));
    shl_ln_fu_258_p3 <= (layer & ap_const_lv13_0);
    sub_i_i15_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(z_value));
    sub_ln581_fu_1351_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_reg_1766));
    sub_ln944_1_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_1_fu_323_p3));
    sub_ln944_2_fu_936_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_2_fu_928_p3));
    sub_ln944_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_503_p3));
    sub_ln947_1_fu_363_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_1_fu_359_p1));
    sub_ln947_2_fu_968_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_2_fu_964_p1));
    sub_ln947_fu_543_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_fu_539_p1));
    sub_ln959_1_fu_761_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_reg_1613));
    sub_ln959_2_fu_1046_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_2_fu_936_p2));
    sub_ln959_fu_640_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1654));
    sub_ln964_1_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_1_reg_1629));
    sub_ln964_2_fu_1206_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_2_reg_1710));
    sub_ln964_fu_716_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_reg_1670));
    tmp_10_fu_583_p3 <= lsb_index_fu_517_p2(31 downto 31);
    tmp_12_fu_402_p3 <= lsb_index_1_fu_337_p2(31 downto 31);
    tmp_15_fu_948_p4 <= lsb_index_2_fu_942_p2(31 downto 1);
    tmp_16_fu_1008_p3 <= lsb_index_2_fu_942_p2(31 downto 31);
    tmp_19_fu_1383_p4 <= sh_amt_fu_1356_p3(11 downto 5);
    tmp_4_fu_727_p3 <= (p_Result_16_reg_1644 & add_ln964_fu_721_p2);
    tmp_5_fu_846_p3 <= (p_Result_20_reg_1581 & add_ln964_1_fu_840_p2);
    tmp_6_fu_1217_p3 <= (p_Result_25_reg_1695 & add_ln964_2_fu_1211_p2);
    tmp_7_fu_1134_p4 <= data_V_fu_880_p1(30 downto 23);
    tmp_8_fu_523_p4 <= lsb_index_fu_517_p2(31 downto 1);
    tmp_9_fu_1257_p4 <= data_V_1_fu_1240_p3(30 downto 23);
    tmp_V_3_fu_904_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ap_phi_mux_minVal_V_2_phi_fu_190_p4));
    tmp_V_5_fu_246_p3 <= 
        sub_i_i15_fu_240_p2 when (p_Result_20_fu_232_p3(0) = '1') else 
        z_value;
    tmp_V_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(z_bits_fu_461_p1));
    tmp_fu_343_p4 <= lsb_index_1_fu_337_p2(31 downto 1);
    tmp_s_fu_301_p3 <= (lshr_ln_fu_287_p4 & trunc_ln564_1_fu_297_p1);
    tobool_i_i11_fu_226_p2 <= "0" when (z_value = ap_const_lv32_0) else "1";
    trunc_ln555_fu_1164_p1 <= ireg_fu_1160_p1(63 - 1 downto 0);
    trunc_ln564_1_fu_297_p1 <= ap_phi_mux_i_phi_fu_178_p4(9 - 1 downto 0);
    trunc_ln564_2_fu_1144_p1 <= data_V_fu_880_p1(23 - 1 downto 0);
    trunc_ln564_3_fu_1267_p1 <= data_V_1_fu_1240_p3(23 - 1 downto 0);
    trunc_ln564_fu_270_p1 <= ap_phi_mux_i_phi_fu_178_p4(12 - 1 downto 0);
    trunc_ln565_fu_1186_p1 <= ireg_fu_1160_p1(52 - 1 downto 0);
    trunc_ln583_fu_1373_p1 <= man_V_2_fu_1334_p3(32 - 1 downto 0);
    trunc_ln586_1_fu_1413_p1 <= ashr_ln586_fu_1407_p2(32 - 1 downto 0);
    trunc_ln586_fu_1399_p1 <= sh_amt_fu_1356_p3(6 - 1 downto 0);
    trunc_ln943_1_fu_451_p1 <= l_1_fu_323_p3(8 - 1 downto 0);
    trunc_ln943_2_fu_1130_p1 <= l_2_fu_928_p3(8 - 1 downto 0);
    trunc_ln943_fu_633_p1 <= l_fu_503_p3(8 - 1 downto 0);
    trunc_ln947_1_fu_359_p1 <= sub_ln944_1_fu_331_p2(6 - 1 downto 0);
    trunc_ln947_2_fu_964_p1 <= sub_ln944_2_fu_936_p2(6 - 1 downto 0);
    trunc_ln947_fu_539_p1 <= sub_ln944_fu_511_p2(6 - 1 downto 0);
    xor_ln571_fu_1423_p2 <= (icmp_ln571_reg_1760 xor ap_const_lv1_1);
    xor_ln581_fu_1480_p2 <= (icmp_ln581_fu_1341_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1448_p2 <= (icmp_ln582_fu_1368_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1519_p2 <= (icmp_ln585_fu_1377_p2 xor ap_const_lv1_1);
    xor_ln949_1_fu_410_p2 <= (tmp_12_fu_402_p3 xor ap_const_lv1_1);
    xor_ln949_2_fu_1016_p2 <= (tmp_16_fu_1008_p3 xor ap_const_lv1_1);
    xor_ln949_fu_591_p2 <= (tmp_10_fu_583_p3 xor ap_const_lv1_1);
    z_bits_fu_461_p1 <= points_q0(32 - 1 downto 0);
    zext_ln368_1_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_V_1_fu_1240_p3),32));
    zext_ln368_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_24_fu_883_p1),32));
    zext_ln455_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_1735),12));
    zext_ln564_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_301_p3),64));
    zext_ln569_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_30_fu_1317_p3),54));
    zext_ln586_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_1399_p1),54));
    zext_ln947_1_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_fu_363_p2),32));
    zext_ln947_2_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_2_fu_968_p2),32));
    zext_ln947_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_543_p2),32));
    zext_ln958_1_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_1_fu_775_p2),64));
    zext_ln958_2_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_2_fu_1070_p2),64));
    zext_ln958_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_fu_655_p2),64));
    zext_ln959_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_1_fu_761_p2),64));
    zext_ln959_2_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_2_fu_1046_p2),64));
    zext_ln959_3_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_17_reg_1649),64));
    zext_ln959_4_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_20_fu_910_p3),64));
    zext_ln959_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_fu_640_p2),64));
    zext_ln961_1_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_2_reg_1624),64));
    zext_ln961_2_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_4_fu_1086_p3),64));
    zext_ln961_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_reg_1665),64));
    zext_ln962_1_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_19_fu_805_p4),64));
    zext_ln962_2_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_21_reg_1700),64));
    zext_ln962_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_18_fu_686_p4),64));
end behav;
