-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_get_acceptanceCorners is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_min_ce0 : OUT STD_LOGIC;
    z1_min_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_max_ce0 : OUT STD_LOGIC;
    z1_max_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_0_ce0 : OUT STD_LOGIC;
    a_corner_0_we0 : OUT STD_LOGIC;
    a_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_1_ce0 : OUT STD_LOGIC;
    a_corner_1_we0 : OUT STD_LOGIC;
    a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_0_ce0 : OUT STD_LOGIC;
    b_corner_0_we0 : OUT STD_LOGIC;
    b_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_1_ce0 : OUT STD_LOGIC;
    b_corner_1_we0 : OUT STD_LOGIC;
    b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_0_ce0 : OUT STD_LOGIC;
    c_corner_0_we0 : OUT STD_LOGIC;
    c_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_1_ce0 : OUT STD_LOGIC;
    c_corner_1_we0 : OUT STD_LOGIC;
    c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_0_ce0 : OUT STD_LOGIC;
    d_corner_0_we0 : OUT STD_LOGIC;
    d_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_1_ce0 : OUT STD_LOGIC;
    d_corner_1_we0 : OUT STD_LOGIC;
    d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    squareAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    squareAcceptance_ce0 : OUT STD_LOGIC;
    squareAcceptance_we0 : OUT STD_LOGIC;
    squareAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    flatTop_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    flatTop_ce0 : OUT STD_LOGIC;
    flatTop_we0 : OUT STD_LOGIC;
    flatTop_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    flatBottom_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    flatBottom_ce0 : OUT STD_LOGIC;
    flatBottom_we0 : OUT STD_LOGIC;
    flatBottom_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    triangleAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    triangleAcceptance_ce0 : OUT STD_LOGIC;
    triangleAcceptance_we0 : OUT STD_LOGIC;
    triangleAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    latest_patch_index_constprop : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of system_top_get_acceptanceCorners is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7FF00000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111100000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_702 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_corner_min_V_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_min_V_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_fu_796_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln174_reg_966 : STD_LOGIC_VECTOR (3 downto 0);
    signal z1_min_addr_reg_1012 : STD_LOGIC_VECTOR (3 downto 0);
    signal z1_max_addr_reg_1017 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal idxprom_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom_reg_1062 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shadow_bottomL_jR_load_3_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal shadow_bottomR_jR_load_3_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal shadow_bottomL_jL_load_3_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal shadow_bottomR_jL_load_3_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln195_fu_855_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln195_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_corner_min_V_1_fu_881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal b_corner_min_V_2_fu_895_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_1_fu_909_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_2_fu_923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1499_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_corner_1_addr_reg_1157 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal b_corner_1_addr_reg_1162 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_corner_1_addr_reg_1167 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_corner_1_addr_reg_1172 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1499_1_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_1_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_2_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_2_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1499_3_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_3_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln1495_2_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_2_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal a_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_corner_list_V_ce0 : STD_LOGIC;
    signal a_corner_list_V_we0 : STD_LOGIC;
    signal a_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_corner_list_V_ce1 : STD_LOGIC;
    signal a_corner_list_V_we1 : STD_LOGIC;
    signal b_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_corner_list_V_ce0 : STD_LOGIC;
    signal b_corner_list_V_we0 : STD_LOGIC;
    signal b_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_corner_list_V_ce1 : STD_LOGIC;
    signal b_corner_list_V_we1 : STD_LOGIC;
    signal c_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_corner_list_V_ce0 : STD_LOGIC;
    signal c_corner_list_V_we0 : STD_LOGIC;
    signal c_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_corner_list_V_ce1 : STD_LOGIC;
    signal c_corner_list_V_we1 : STD_LOGIC;
    signal d_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_corner_list_V_ce0 : STD_LOGIC;
    signal d_corner_list_V_we0 : STD_LOGIC;
    signal d_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_corner_list_V_ce1 : STD_LOGIC;
    signal d_corner_list_V_we1 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_2_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln174_1_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_2_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_3_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_4_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln195_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal squareAcceptance_addr_1_gep_fu_626_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flatTop_addr_1_gep_fu_634_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal squareAcceptance_addr_2_gep_fu_656_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flatBottom_addr_1_gep_fu_664_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal squareAcceptance_addr_3_gep_fu_672_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal triangleAcceptance_addr_1_gep_fu_694_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_788_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln174_fu_784_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln174_1_fu_812_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln174_2_fu_826_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln174_3_fu_839_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1495_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_1_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_get_acceptanceCorners_a_corner_list_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_corner_list_V_address0,
        ce0 => a_corner_list_V_ce0,
        we0 => a_corner_list_V_we0,
        d0 => shadow_bottomL_jR_q0,
        q0 => a_corner_list_V_q0,
        address1 => a_corner_list_V_address1,
        ce1 => a_corner_list_V_ce1,
        we1 => a_corner_list_V_we1,
        d1 => shadow_bottomL_jR_q1);

    b_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_corner_list_V_address0,
        ce0 => b_corner_list_V_ce0,
        we0 => b_corner_list_V_we0,
        d0 => shadow_bottomR_jR_q0,
        q0 => b_corner_list_V_q0,
        address1 => b_corner_list_V_address1,
        ce1 => b_corner_list_V_ce1,
        we1 => b_corner_list_V_we1,
        d1 => shadow_bottomR_jR_q1);

    c_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_corner_list_V_address0,
        ce0 => c_corner_list_V_ce0,
        we0 => c_corner_list_V_we0,
        d0 => shadow_bottomL_jL_q0,
        q0 => c_corner_list_V_q0,
        address1 => c_corner_list_V_address1,
        ce1 => c_corner_list_V_ce1,
        we1 => c_corner_list_V_we1,
        d1 => shadow_bottomL_jL_q1);

    d_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_corner_list_V_address0,
        ce0 => d_corner_list_V_ce0,
        we0 => d_corner_list_V_we0,
        d0 => shadow_bottomR_jL_q0,
        q0 => d_corner_list_V_q0,
        address1 => d_corner_list_V_address1,
        ce1 => d_corner_list_V_ce1,
        we1 => d_corner_list_V_we1,
        d1 => shadow_bottomR_jL_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_corner_min_V_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln195_reg_1109 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_corner_min_V_reg_713 <= a_corner_min_V_1_fu_881_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                a_corner_min_V_reg_713 <= ap_const_lv32_7FF00000;
            end if; 
        end if;
    end process;

    b_corner_min_V_reg_726_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln195_reg_1109 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_corner_min_V_reg_726 <= b_corner_min_V_2_fu_895_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                b_corner_min_V_reg_726 <= ap_const_lv32_7FF00000;
            end if; 
        end if;
    end process;

    c_corner_max_V_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln195_reg_1109 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_corner_max_V_reg_741 <= c_corner_max_V_1_fu_909_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                c_corner_max_V_reg_741 <= ap_const_lv32_80000000;
            end if; 
        end if;
    end process;

    d_corner_max_V_reg_754_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln195_reg_1109 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                d_corner_max_V_reg_754 <= d_corner_max_V_2_fu_923_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_corner_max_V_reg_754 <= ap_const_lv32_80000000;
            end if; 
        end if;
    end process;

    i_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_861_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_702 <= add_ln195_fu_855_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_702 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_corner_1_addr_reg_1157 <= idxprom_reg_1062(2 - 1 downto 0);
                b_corner_1_addr_reg_1162 <= idxprom_reg_1062(2 - 1 downto 0);
                c_corner_1_addr_reg_1167 <= idxprom_reg_1062(2 - 1 downto 0);
                d_corner_1_addr_reg_1172 <= idxprom_reg_1062(2 - 1 downto 0);
                icmp_ln1499_1_reg_1177 <= icmp_ln1499_1_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln174_reg_966 <= add_ln174_fu_796_p2;
                z1_max_addr_reg_1017 <= zext_ln174_1_fu_802_p1(4 - 1 downto 0);
                z1_min_addr_reg_1012 <= zext_ln174_1_fu_802_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln1495_2_reg_1192 <= icmp_ln1495_2_fu_957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln1499_2_reg_1181 <= icmp_ln1499_2_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln1499_3_reg_1185 <= icmp_ln1499_3_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln1499_reg_1153 <= icmp_ln1499_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln195_reg_1109 <= icmp_ln195_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    idxprom_reg_1062(1 downto 0) <= idxprom_fu_852_p1(1 downto 0);
                shadow_bottomL_jL_load_3_reg_1094 <= shadow_bottomL_jL_q0;
                shadow_bottomL_jR_load_3_reg_1084 <= shadow_bottomL_jR_q0;
                shadow_bottomR_jL_load_3_reg_1099 <= shadow_bottomR_jL_q0;
                shadow_bottomR_jR_load_3_reg_1089 <= shadow_bottomR_jR_q0;
            end if;
        end if;
    end process;
    idxprom_reg_1062(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln195_fu_861_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln195_fu_861_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln195_fu_861_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_corner_0_address0 <= idxprom_reg_1062(2 - 1 downto 0);

    a_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_0_ce0 <= ap_const_logic_1;
        else 
            a_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_0_d0 <= z1_min_q0;

    a_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_0_we0 <= ap_const_logic_1;
        else 
            a_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_1_address0_assign_proc : process(idxprom_reg_1062, a_corner_1_addr_reg_1157, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_corner_1_address0 <= a_corner_1_addr_reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_1_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            a_corner_1_address0 <= "XX";
        end if; 
    end process;


    a_corner_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            a_corner_1_ce0 <= ap_const_logic_1;
        else 
            a_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_1_d0_assign_proc : process(a_corner_min_V_reg_713, b_corner_min_V_reg_726, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_corner_1_d0 <= b_corner_min_V_reg_726;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_1_d0 <= a_corner_min_V_reg_713;
        else 
            a_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_corner_1_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, icmp_ln1494_2_fu_951_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln1494_2_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            a_corner_1_we0 <= ap_const_logic_1;
        else 
            a_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln195_fu_867_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_corner_list_V_address0 <= zext_ln195_fu_867_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            a_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    a_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            a_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    a_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            a_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            a_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            a_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_corner_list_V_we0 <= ap_const_logic_1;
        else 
            a_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_corner_list_V_we1 <= ap_const_logic_1;
        else 
            a_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_min_V_1_fu_881_p3 <= 
        a_corner_list_V_q0 when (icmp_ln1495_fu_875_p2(0) = '1') else 
        a_corner_min_V_reg_713;
    add_ln174_1_fu_812_p2 <= std_logic_vector(unsigned(add_ln174_fu_796_p2) + unsigned(ap_const_lv4_1));
    add_ln174_2_fu_826_p2 <= std_logic_vector(unsigned(add_ln174_reg_966) + unsigned(ap_const_lv4_2));
    add_ln174_3_fu_839_p2 <= std_logic_vector(unsigned(add_ln174_reg_966) + unsigned(ap_const_lv4_3));
    add_ln174_fu_796_p2 <= std_logic_vector(unsigned(tmp_fu_788_p3) + unsigned(zext_ln174_fu_784_p1));
    add_ln195_fu_855_p2 <= std_logic_vector(unsigned(i_reg_702) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln195_fu_861_p2)
    begin
        if ((icmp_ln195_fu_861_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4_assign_proc : process(b_corner_min_V_reg_726, c_corner_max_V_reg_741, ap_CS_fsm_state10, icmp_ln1494_2_fu_951_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            if ((icmp_ln1494_2_fu_951_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 <= c_corner_max_V_reg_741;
            elsif ((icmp_ln1494_2_fu_951_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 <= b_corner_min_V_reg_726;
            else 
                ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_address0 <= idxprom_reg_1062(2 - 1 downto 0);

    b_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_0_ce0 <= ap_const_logic_1;
        else 
            b_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_d0 <= z1_max_q0;

    b_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_0_we0 <= ap_const_logic_1;
        else 
            b_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_1_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state7, b_corner_1_addr_reg_1162, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_corner_1_address0 <= b_corner_1_addr_reg_1162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_1_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            b_corner_1_address0 <= "XX";
        end if; 
    end process;


    b_corner_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            b_corner_1_ce0 <= ap_const_logic_1;
        else 
            b_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_1_d0_assign_proc : process(b_corner_min_V_reg_726, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_corner_1_d0 <= ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_1_d0 <= b_corner_min_V_reg_726;
        else 
            b_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_corner_1_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln1495_2_fu_957_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln1495_2_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            b_corner_1_we0 <= ap_const_logic_1;
        else 
            b_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln195_fu_867_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_corner_list_V_address0 <= zext_ln195_fu_867_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            b_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    b_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            b_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    b_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            b_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            b_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            b_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_corner_list_V_we0 <= ap_const_logic_1;
        else 
            b_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_corner_list_V_we1 <= ap_const_logic_1;
        else 
            b_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_min_V_2_fu_895_p3 <= 
        b_corner_list_V_q0 when (icmp_ln1495_1_fu_889_p2(0) = '1') else 
        b_corner_min_V_reg_726;
    c_corner_0_address0 <= idxprom_reg_1062(2 - 1 downto 0);

    c_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_0_ce0 <= ap_const_logic_1;
        else 
            c_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_0_d0 <= z1_min_q0;

    c_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_0_we0 <= ap_const_logic_1;
        else 
            c_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_1_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state7, c_corner_1_addr_reg_1167, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c_corner_1_address0 <= c_corner_1_addr_reg_1167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_1_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            c_corner_1_address0 <= "XX";
        end if; 
    end process;


    c_corner_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            c_corner_1_ce0 <= ap_const_logic_1;
        else 
            c_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_1_d0_assign_proc : process(b_corner_min_V_reg_726, c_corner_max_V_reg_741, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c_corner_1_d0 <= b_corner_min_V_reg_726;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_1_d0 <= c_corner_max_V_reg_741;
        else 
            c_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_corner_1_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, icmp_ln1494_2_fu_951_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln1494_2_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            c_corner_1_we0 <= ap_const_logic_1;
        else 
            c_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln195_fu_867_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_corner_list_V_address0 <= zext_ln195_fu_867_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            c_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    c_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            c_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    c_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            c_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            c_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_corner_list_V_we0 <= ap_const_logic_1;
        else 
            c_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_corner_list_V_we1 <= ap_const_logic_1;
        else 
            c_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_max_V_1_fu_909_p3 <= 
        c_corner_list_V_q0 when (icmp_ln1494_fu_903_p2(0) = '1') else 
        c_corner_max_V_reg_741;
    d_corner_0_address0 <= idxprom_reg_1062(2 - 1 downto 0);

    d_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_0_ce0 <= ap_const_logic_1;
        else 
            d_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_0_d0 <= z1_max_q0;

    d_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_0_we0 <= ap_const_logic_1;
        else 
            d_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_1_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state7, d_corner_1_addr_reg_1172, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            d_corner_1_address0 <= d_corner_1_addr_reg_1172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_1_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            d_corner_1_address0 <= "XX";
        end if; 
    end process;


    d_corner_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            d_corner_1_ce0 <= ap_const_logic_1;
        else 
            d_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_1_d0_assign_proc : process(d_corner_max_V_reg_754, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            d_corner_1_d0 <= ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_1_d0 <= d_corner_max_V_reg_754;
        else 
            d_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_corner_1_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln1495_2_fu_957_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln1495_2_fu_957_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            d_corner_1_we0 <= ap_const_logic_1;
        else 
            d_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln195_fu_867_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_corner_list_V_address0 <= zext_ln195_fu_867_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            d_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    d_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            d_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    d_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            d_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            d_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            d_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            d_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            d_corner_list_V_we0 <= ap_const_logic_1;
        else 
            d_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            d_corner_list_V_we1 <= ap_const_logic_1;
        else 
            d_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_max_V_2_fu_923_p3 <= 
        d_corner_list_V_q0 when (icmp_ln1494_1_fu_917_p2(0) = '1') else 
        d_corner_max_V_reg_754;
    flatBottom_addr_1_gep_fu_664_p3 <= idxprom_reg_1062(2 - 1 downto 0);

    flatBottom_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state8, ap_CS_fsm_state9, flatBottom_addr_1_gep_fu_664_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            flatBottom_address0 <= flatBottom_addr_1_gep_fu_664_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            flatBottom_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            flatBottom_address0 <= "XX";
        end if; 
    end process;


    flatBottom_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            flatBottom_ce0 <= ap_const_logic_1;
        else 
            flatBottom_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatBottom_d0 <= ap_const_lv1_0;

    flatBottom_we0_assign_proc : process(icmp_ln1499_2_fu_941_p2, ap_CS_fsm_state8, icmp_ln1499_3_fu_946_p2, ap_CS_fsm_state9)
    begin
        if ((((icmp_ln1499_3_fu_946_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln1499_2_fu_941_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            flatBottom_we0 <= ap_const_logic_1;
        else 
            flatBottom_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flatTop_addr_1_gep_fu_634_p3 <= idxprom_reg_1062(2 - 1 downto 0);

    flatTop_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state7, ap_CS_fsm_state8, flatTop_addr_1_gep_fu_634_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            flatTop_address0 <= flatTop_addr_1_gep_fu_634_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            flatTop_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            flatTop_address0 <= "XX";
        end if; 
    end process;


    flatTop_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            flatTop_ce0 <= ap_const_logic_1;
        else 
            flatTop_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatTop_d0 <= ap_const_lv1_0;

    flatTop_we0_assign_proc : process(icmp_ln1499_reg_1153, ap_CS_fsm_state7, icmp_ln1499_1_reg_1177, ap_CS_fsm_state8)
    begin
        if ((((icmp_ln1499_1_reg_1177 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln1499_reg_1153 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            flatTop_we0 <= ap_const_logic_1;
        else 
            flatTop_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_1_fu_917_p2 <= "1" when (signed(d_corner_list_V_q0) > signed(d_corner_max_V_reg_754)) else "0";
    icmp_ln1494_2_fu_951_p2 <= "1" when (signed(c_corner_max_V_reg_741) > signed(a_corner_min_V_reg_713)) else "0";
    icmp_ln1494_fu_903_p2 <= "1" when (signed(c_corner_list_V_q0) > signed(c_corner_max_V_reg_741)) else "0";
    icmp_ln1495_1_fu_889_p2 <= "1" when (signed(b_corner_list_V_q0) < signed(b_corner_min_V_reg_726)) else "0";
    icmp_ln1495_2_fu_957_p2 <= "1" when (signed(b_corner_min_V_reg_726) < signed(d_corner_max_V_reg_754)) else "0";
    icmp_ln1495_fu_875_p2 <= "1" when (signed(a_corner_list_V_q0) < signed(a_corner_min_V_reg_713)) else "0";
    icmp_ln1499_1_fu_936_p2 <= "1" when (b_corner_min_V_reg_726 = shadow_bottomR_jR_load_3_reg_1089) else "0";
    icmp_ln1499_2_fu_941_p2 <= "1" when (c_corner_max_V_reg_741 = shadow_bottomL_jL_load_3_reg_1094) else "0";
    icmp_ln1499_3_fu_946_p2 <= "1" when (d_corner_max_V_reg_754 = shadow_bottomR_jL_load_3_reg_1099) else "0";
    icmp_ln1499_fu_931_p2 <= "1" when (a_corner_min_V_reg_713 = shadow_bottomL_jR_load_3_reg_1084) else "0";
    icmp_ln195_fu_861_p2 <= "1" when (i_reg_702 = ap_const_lv3_4) else "0";
    idxprom_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop),64));

    shadow_bottomL_jL_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_2_fu_818_p1, zext_ln174_4_fu_844_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_address0 <= zext_ln174_4_fu_844_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jL_address0 <= zext_ln174_2_fu_818_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jL_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jL_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_1_fu_802_p1, zext_ln174_3_fu_831_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_address1 <= zext_ln174_3_fu_831_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jL_address1 <= zext_ln174_1_fu_802_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jL_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jL_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jL_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jL_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jL_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_2_fu_818_p1, zext_ln174_4_fu_844_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_address0 <= zext_ln174_4_fu_844_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jR_address0 <= zext_ln174_2_fu_818_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jR_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jR_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_1_fu_802_p1, zext_ln174_3_fu_831_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_address1 <= zext_ln174_3_fu_831_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jR_address1 <= zext_ln174_1_fu_802_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jR_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jR_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jR_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jR_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_2_fu_818_p1, zext_ln174_4_fu_844_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_address0 <= zext_ln174_4_fu_844_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jL_address0 <= zext_ln174_2_fu_818_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jL_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jL_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_1_fu_802_p1, zext_ln174_3_fu_831_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_address1 <= zext_ln174_3_fu_831_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jL_address1 <= zext_ln174_1_fu_802_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jL_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jL_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jL_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jL_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_2_fu_818_p1, zext_ln174_4_fu_844_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_address0 <= zext_ln174_4_fu_844_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jR_address0 <= zext_ln174_2_fu_818_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jR_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jR_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_1_fu_802_p1, zext_ln174_3_fu_831_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_address1 <= zext_ln174_3_fu_831_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jR_address1 <= zext_ln174_1_fu_802_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jR_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jR_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jR_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jR_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    squareAcceptance_addr_1_gep_fu_626_p3 <= idxprom_reg_1062(2 - 1 downto 0);
    squareAcceptance_addr_2_gep_fu_656_p3 <= idxprom_reg_1062(2 - 1 downto 0);
    squareAcceptance_addr_3_gep_fu_672_p3 <= idxprom_reg_1062(2 - 1 downto 0);

    squareAcceptance_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, squareAcceptance_addr_1_gep_fu_626_p3, squareAcceptance_addr_2_gep_fu_656_p3, squareAcceptance_addr_3_gep_fu_672_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            squareAcceptance_address0 <= squareAcceptance_addr_3_gep_fu_672_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            squareAcceptance_address0 <= squareAcceptance_addr_2_gep_fu_656_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            squareAcceptance_address0 <= squareAcceptance_addr_1_gep_fu_626_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            squareAcceptance_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            squareAcceptance_address0 <= "XX";
        end if; 
    end process;


    squareAcceptance_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            squareAcceptance_ce0 <= ap_const_logic_1;
        else 
            squareAcceptance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    squareAcceptance_d0 <= ap_const_lv1_0;

    squareAcceptance_we0_assign_proc : process(icmp_ln1499_reg_1153, ap_CS_fsm_state7, icmp_ln1499_1_reg_1177, icmp_ln1499_2_reg_1181, ap_CS_fsm_state8, icmp_ln1499_3_reg_1185, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((((icmp_ln1499_3_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln1499_2_reg_1181 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln1499_1_reg_1177 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln1499_reg_1153 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            squareAcceptance_we0 <= ap_const_logic_1;
        else 
            squareAcceptance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_788_p3 <= (latest_patch_index_constprop & ap_const_lv2_0);
    triangleAcceptance_addr_1_gep_fu_694_p3 <= idxprom_reg_1062(2 - 1 downto 0);

    triangleAcceptance_address0_assign_proc : process(idxprom_reg_1062, ap_CS_fsm_state10, triangleAcceptance_addr_1_gep_fu_694_p3, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            triangleAcceptance_address0 <= triangleAcceptance_addr_1_gep_fu_694_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            triangleAcceptance_address0 <= idxprom_reg_1062(2 - 1 downto 0);
        else 
            triangleAcceptance_address0 <= "XX";
        end if; 
    end process;


    triangleAcceptance_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            triangleAcceptance_ce0 <= ap_const_logic_1;
        else 
            triangleAcceptance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangleAcceptance_d0 <= ap_const_lv1_1;

    triangleAcceptance_we0_assign_proc : process(icmp_ln1495_2_reg_1192, ap_CS_fsm_state10, icmp_ln1494_2_fu_951_p2, ap_CS_fsm_state11)
    begin
        if ((((icmp_ln1495_2_reg_1192 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln1494_2_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            triangleAcceptance_we0 <= ap_const_logic_1;
        else 
            triangleAcceptance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_max_address0 <= z1_max_addr_reg_1017;

    z1_max_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z1_max_ce0 <= ap_const_logic_1;
        else 
            z1_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_address0 <= z1_min_addr_reg_1012;

    z1_min_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z1_min_ce0 <= ap_const_logic_1;
        else 
            z1_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln174_1_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_fu_796_p2),64));
    zext_ln174_2_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_1_fu_812_p2),64));
    zext_ln174_3_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_2_fu_826_p2),64));
    zext_ln174_4_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_3_fu_839_p2),64));
    zext_ln174_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop),4));
    zext_ln195_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_702),64));
end behav;
