// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_get_acceptanceCorners (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        shadow_bottomL_jR_address0,
        shadow_bottomL_jR_ce0,
        shadow_bottomL_jR_q0,
        shadow_bottomL_jR_address1,
        shadow_bottomL_jR_ce1,
        shadow_bottomL_jR_q1,
        shadow_bottomR_jR_address0,
        shadow_bottomR_jR_ce0,
        shadow_bottomR_jR_q0,
        shadow_bottomR_jR_address1,
        shadow_bottomR_jR_ce1,
        shadow_bottomR_jR_q1,
        shadow_bottomL_jL_address0,
        shadow_bottomL_jL_ce0,
        shadow_bottomL_jL_q0,
        shadow_bottomL_jL_address1,
        shadow_bottomL_jL_ce1,
        shadow_bottomL_jL_q1,
        shadow_bottomR_jL_address0,
        shadow_bottomR_jL_ce0,
        shadow_bottomR_jL_q0,
        shadow_bottomR_jL_address1,
        shadow_bottomR_jL_ce1,
        shadow_bottomR_jL_q1,
        z1_min_address0,
        z1_min_ce0,
        z1_min_q0,
        z1_max_address0,
        z1_max_ce0,
        z1_max_q0,
        a_corner_0_address0,
        a_corner_0_ce0,
        a_corner_0_we0,
        a_corner_0_d0,
        a_corner_1_address0,
        a_corner_1_ce0,
        a_corner_1_we0,
        a_corner_1_d0,
        b_corner_0_address0,
        b_corner_0_ce0,
        b_corner_0_we0,
        b_corner_0_d0,
        b_corner_1_address0,
        b_corner_1_ce0,
        b_corner_1_we0,
        b_corner_1_d0,
        c_corner_0_address0,
        c_corner_0_ce0,
        c_corner_0_we0,
        c_corner_0_d0,
        c_corner_1_address0,
        c_corner_1_ce0,
        c_corner_1_we0,
        c_corner_1_d0,
        d_corner_0_address0,
        d_corner_0_ce0,
        d_corner_0_we0,
        d_corner_0_d0,
        d_corner_1_address0,
        d_corner_1_ce0,
        d_corner_1_we0,
        d_corner_1_d0,
        squareAcceptance_address0,
        squareAcceptance_ce0,
        squareAcceptance_we0,
        squareAcceptance_d0,
        flatTop_address0,
        flatTop_ce0,
        flatTop_we0,
        flatTop_d0,
        flatBottom_address0,
        flatBottom_ce0,
        flatBottom_we0,
        flatBottom_d0,
        triangleAcceptance_address0,
        triangleAcceptance_ce0,
        triangleAcceptance_we0,
        triangleAcceptance_d0,
        latest_patch_index_constprop
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_pp0_stage0 = 10'd8;
parameter    ap_ST_fsm_state6 = 10'd16;
parameter    ap_ST_fsm_state7 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_state10 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] shadow_bottomL_jR_address0;
output   shadow_bottomL_jR_ce0;
input  [31:0] shadow_bottomL_jR_q0;
output  [3:0] shadow_bottomL_jR_address1;
output   shadow_bottomL_jR_ce1;
input  [31:0] shadow_bottomL_jR_q1;
output  [3:0] shadow_bottomR_jR_address0;
output   shadow_bottomR_jR_ce0;
input  [31:0] shadow_bottomR_jR_q0;
output  [3:0] shadow_bottomR_jR_address1;
output   shadow_bottomR_jR_ce1;
input  [31:0] shadow_bottomR_jR_q1;
output  [3:0] shadow_bottomL_jL_address0;
output   shadow_bottomL_jL_ce0;
input  [31:0] shadow_bottomL_jL_q0;
output  [3:0] shadow_bottomL_jL_address1;
output   shadow_bottomL_jL_ce1;
input  [31:0] shadow_bottomL_jL_q1;
output  [3:0] shadow_bottomR_jL_address0;
output   shadow_bottomR_jL_ce0;
input  [31:0] shadow_bottomR_jL_q0;
output  [3:0] shadow_bottomR_jL_address1;
output   shadow_bottomR_jL_ce1;
input  [31:0] shadow_bottomR_jL_q1;
output  [3:0] z1_min_address0;
output   z1_min_ce0;
input  [25:0] z1_min_q0;
output  [3:0] z1_max_address0;
output   z1_max_ce0;
input  [25:0] z1_max_q0;
output  [1:0] a_corner_0_address0;
output   a_corner_0_ce0;
output   a_corner_0_we0;
output  [25:0] a_corner_0_d0;
output  [1:0] a_corner_1_address0;
output   a_corner_1_ce0;
output   a_corner_1_we0;
output  [31:0] a_corner_1_d0;
output  [1:0] b_corner_0_address0;
output   b_corner_0_ce0;
output   b_corner_0_we0;
output  [25:0] b_corner_0_d0;
output  [1:0] b_corner_1_address0;
output   b_corner_1_ce0;
output   b_corner_1_we0;
output  [31:0] b_corner_1_d0;
output  [1:0] c_corner_0_address0;
output   c_corner_0_ce0;
output   c_corner_0_we0;
output  [25:0] c_corner_0_d0;
output  [1:0] c_corner_1_address0;
output   c_corner_1_ce0;
output   c_corner_1_we0;
output  [31:0] c_corner_1_d0;
output  [1:0] d_corner_0_address0;
output   d_corner_0_ce0;
output   d_corner_0_we0;
output  [25:0] d_corner_0_d0;
output  [1:0] d_corner_1_address0;
output   d_corner_1_ce0;
output   d_corner_1_we0;
output  [31:0] d_corner_1_d0;
output  [1:0] squareAcceptance_address0;
output   squareAcceptance_ce0;
output   squareAcceptance_we0;
output  [0:0] squareAcceptance_d0;
output  [1:0] flatTop_address0;
output   flatTop_ce0;
output   flatTop_we0;
output  [0:0] flatTop_d0;
output  [1:0] flatBottom_address0;
output   flatBottom_ce0;
output   flatBottom_we0;
output  [0:0] flatBottom_d0;
output  [1:0] triangleAcceptance_address0;
output   triangleAcceptance_ce0;
output   triangleAcceptance_we0;
output  [0:0] triangleAcceptance_d0;
input  [1:0] latest_patch_index_constprop;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] shadow_bottomL_jR_address0;
reg shadow_bottomL_jR_ce0;
reg[3:0] shadow_bottomL_jR_address1;
reg shadow_bottomL_jR_ce1;
reg[3:0] shadow_bottomR_jR_address0;
reg shadow_bottomR_jR_ce0;
reg[3:0] shadow_bottomR_jR_address1;
reg shadow_bottomR_jR_ce1;
reg[3:0] shadow_bottomL_jL_address0;
reg shadow_bottomL_jL_ce0;
reg[3:0] shadow_bottomL_jL_address1;
reg shadow_bottomL_jL_ce1;
reg[3:0] shadow_bottomR_jL_address0;
reg shadow_bottomR_jL_ce0;
reg[3:0] shadow_bottomR_jL_address1;
reg shadow_bottomR_jL_ce1;
reg z1_min_ce0;
reg z1_max_ce0;
reg a_corner_0_ce0;
reg a_corner_0_we0;
reg[1:0] a_corner_1_address0;
reg a_corner_1_ce0;
reg a_corner_1_we0;
reg[31:0] a_corner_1_d0;
reg b_corner_0_ce0;
reg b_corner_0_we0;
reg[1:0] b_corner_1_address0;
reg b_corner_1_ce0;
reg b_corner_1_we0;
reg[31:0] b_corner_1_d0;
reg c_corner_0_ce0;
reg c_corner_0_we0;
reg[1:0] c_corner_1_address0;
reg c_corner_1_ce0;
reg c_corner_1_we0;
reg[31:0] c_corner_1_d0;
reg d_corner_0_ce0;
reg d_corner_0_we0;
reg[1:0] d_corner_1_address0;
reg d_corner_1_ce0;
reg d_corner_1_we0;
reg[31:0] d_corner_1_d0;
reg[1:0] squareAcceptance_address0;
reg squareAcceptance_ce0;
reg squareAcceptance_we0;
reg[1:0] flatTop_address0;
reg flatTop_ce0;
reg flatTop_we0;
reg[1:0] flatBottom_address0;
reg flatBottom_ce0;
reg flatBottom_we0;
reg[1:0] triangleAcceptance_address0;
reg triangleAcceptance_ce0;
reg triangleAcceptance_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i_reg_702;
reg   [31:0] a_corner_min_V_reg_713;
reg   [31:0] b_corner_min_V_reg_726;
reg   [31:0] c_corner_max_V_reg_741;
reg   [31:0] d_corner_max_V_reg_754;
wire   [3:0] add_ln174_fu_796_p2;
reg   [3:0] add_ln174_reg_966;
reg   [3:0] z1_min_addr_reg_1012;
reg   [3:0] z1_max_addr_reg_1017;
wire    ap_CS_fsm_state2;
wire   [63:0] idxprom_fu_852_p1;
reg   [63:0] idxprom_reg_1062;
wire    ap_CS_fsm_state3;
reg   [31:0] shadow_bottomL_jR_load_3_reg_1084;
reg   [31:0] shadow_bottomR_jR_load_3_reg_1089;
reg   [31:0] shadow_bottomL_jL_load_3_reg_1094;
reg   [31:0] shadow_bottomR_jL_load_3_reg_1099;
wire   [2:0] add_ln195_fu_855_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln195_fu_861_p2;
reg   [0:0] icmp_ln195_reg_1109;
wire   [31:0] a_corner_min_V_1_fu_881_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] b_corner_min_V_2_fu_895_p3;
wire   [31:0] c_corner_max_V_1_fu_909_p3;
wire   [31:0] d_corner_max_V_2_fu_923_p3;
wire   [0:0] icmp_ln1499_fu_931_p2;
reg   [0:0] icmp_ln1499_reg_1153;
wire    ap_CS_fsm_state6;
reg   [1:0] a_corner_1_addr_reg_1157;
wire    ap_CS_fsm_state7;
reg   [1:0] b_corner_1_addr_reg_1162;
reg   [1:0] c_corner_1_addr_reg_1167;
reg   [1:0] d_corner_1_addr_reg_1172;
wire   [0:0] icmp_ln1499_1_fu_936_p2;
reg   [0:0] icmp_ln1499_1_reg_1177;
wire   [0:0] icmp_ln1499_2_fu_941_p2;
reg   [0:0] icmp_ln1499_2_reg_1181;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln1499_3_fu_946_p2;
reg   [0:0] icmp_ln1499_3_reg_1185;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln1495_2_fu_957_p2;
reg   [0:0] icmp_ln1495_2_reg_1192;
wire    ap_CS_fsm_state10;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [1:0] a_corner_list_V_address0;
reg    a_corner_list_V_ce0;
reg    a_corner_list_V_we0;
wire   [31:0] a_corner_list_V_q0;
reg   [1:0] a_corner_list_V_address1;
reg    a_corner_list_V_ce1;
reg    a_corner_list_V_we1;
reg   [1:0] b_corner_list_V_address0;
reg    b_corner_list_V_ce0;
reg    b_corner_list_V_we0;
wire   [31:0] b_corner_list_V_q0;
reg   [1:0] b_corner_list_V_address1;
reg    b_corner_list_V_ce1;
reg    b_corner_list_V_we1;
reg   [1:0] c_corner_list_V_address0;
reg    c_corner_list_V_ce0;
reg    c_corner_list_V_we0;
wire   [31:0] c_corner_list_V_q0;
reg   [1:0] c_corner_list_V_address1;
reg    c_corner_list_V_ce1;
reg    c_corner_list_V_we1;
reg   [1:0] d_corner_list_V_address0;
reg    d_corner_list_V_ce0;
reg    d_corner_list_V_we0;
wire   [31:0] d_corner_list_V_q0;
reg   [1:0] d_corner_list_V_address1;
reg    d_corner_list_V_ce1;
reg    d_corner_list_V_we1;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4;
wire   [0:0] icmp_ln1494_2_fu_951_p2;
wire   [63:0] zext_ln174_1_fu_802_p1;
wire   [63:0] zext_ln174_2_fu_818_p1;
wire   [63:0] zext_ln174_3_fu_831_p1;
wire   [63:0] zext_ln174_4_fu_844_p1;
wire   [63:0] zext_ln195_fu_867_p1;
wire   [1:0] squareAcceptance_addr_1_gep_fu_626_p3;
wire   [1:0] flatTop_addr_1_gep_fu_634_p3;
wire   [1:0] squareAcceptance_addr_2_gep_fu_656_p3;
wire   [1:0] flatBottom_addr_1_gep_fu_664_p3;
wire   [1:0] squareAcceptance_addr_3_gep_fu_672_p3;
wire   [1:0] triangleAcceptance_addr_1_gep_fu_694_p3;
wire    ap_CS_fsm_state11;
wire   [3:0] tmp_fu_788_p3;
wire   [3:0] zext_ln174_fu_784_p1;
wire   [3:0] add_ln174_1_fu_812_p2;
wire   [3:0] add_ln174_2_fu_826_p2;
wire   [3:0] add_ln174_3_fu_839_p2;
wire   [0:0] icmp_ln1495_fu_875_p2;
wire   [0:0] icmp_ln1495_1_fu_889_p2;
wire   [0:0] icmp_ln1494_fu_903_p2;
wire   [0:0] icmp_ln1494_1_fu_917_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

system_top_get_acceptanceCorners_a_corner_list_V #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
a_corner_list_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_corner_list_V_address0),
    .ce0(a_corner_list_V_ce0),
    .we0(a_corner_list_V_we0),
    .d0(shadow_bottomL_jR_q0),
    .q0(a_corner_list_V_q0),
    .address1(a_corner_list_V_address1),
    .ce1(a_corner_list_V_ce1),
    .we1(a_corner_list_V_we1),
    .d1(shadow_bottomL_jR_q1)
);

system_top_get_acceptanceCorners_a_corner_list_V #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
b_corner_list_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_corner_list_V_address0),
    .ce0(b_corner_list_V_ce0),
    .we0(b_corner_list_V_we0),
    .d0(shadow_bottomR_jR_q0),
    .q0(b_corner_list_V_q0),
    .address1(b_corner_list_V_address1),
    .ce1(b_corner_list_V_ce1),
    .we1(b_corner_list_V_we1),
    .d1(shadow_bottomR_jR_q1)
);

system_top_get_acceptanceCorners_a_corner_list_V #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
c_corner_list_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_corner_list_V_address0),
    .ce0(c_corner_list_V_ce0),
    .we0(c_corner_list_V_we0),
    .d0(shadow_bottomL_jL_q0),
    .q0(c_corner_list_V_q0),
    .address1(c_corner_list_V_address1),
    .ce1(c_corner_list_V_ce1),
    .we1(c_corner_list_V_we1),
    .d1(shadow_bottomL_jL_q1)
);

system_top_get_acceptanceCorners_a_corner_list_V #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
d_corner_list_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(d_corner_list_V_address0),
    .ce0(d_corner_list_V_ce0),
    .we0(d_corner_list_V_we0),
    .d0(shadow_bottomR_jL_q0),
    .q0(d_corner_list_V_q0),
    .address1(d_corner_list_V_address1),
    .ce1(d_corner_list_V_ce1),
    .we1(d_corner_list_V_we1),
    .d1(shadow_bottomR_jL_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln195_reg_1109 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_corner_min_V_reg_713 <= a_corner_min_V_1_fu_881_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_corner_min_V_reg_713 <= 32'd2146435072;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln195_reg_1109 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_corner_min_V_reg_726 <= b_corner_min_V_2_fu_895_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_corner_min_V_reg_726 <= 32'd2146435072;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln195_reg_1109 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_corner_max_V_reg_741 <= c_corner_max_V_1_fu_909_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c_corner_max_V_reg_741 <= 32'd2147483648;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln195_reg_1109 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_corner_max_V_reg_754 <= d_corner_max_V_2_fu_923_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_corner_max_V_reg_754 <= 32'd2147483648;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_fu_861_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_702 <= add_ln195_fu_855_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_702 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_1_addr_reg_1157 <= idxprom_reg_1062;
        b_corner_1_addr_reg_1162 <= idxprom_reg_1062;
        c_corner_1_addr_reg_1167 <= idxprom_reg_1062;
        d_corner_1_addr_reg_1172 <= idxprom_reg_1062;
        icmp_ln1499_1_reg_1177 <= icmp_ln1499_1_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln174_reg_966 <= add_ln174_fu_796_p2;
        z1_max_addr_reg_1017 <= zext_ln174_1_fu_802_p1;
        z1_min_addr_reg_1012 <= zext_ln174_1_fu_802_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln1495_2_reg_1192 <= icmp_ln1495_2_fu_957_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln1499_2_reg_1181 <= icmp_ln1499_2_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln1499_3_reg_1185 <= icmp_ln1499_3_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln1499_reg_1153 <= icmp_ln1499_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln195_reg_1109 <= icmp_ln195_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idxprom_reg_1062[1 : 0] <= idxprom_fu_852_p1[1 : 0];
        shadow_bottomL_jL_load_3_reg_1094 <= shadow_bottomL_jL_q0;
        shadow_bottomL_jR_load_3_reg_1084 <= shadow_bottomL_jR_q0;
        shadow_bottomR_jL_load_3_reg_1099 <= shadow_bottomR_jL_q0;
        shadow_bottomR_jR_load_3_reg_1089 <= shadow_bottomR_jR_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_0_ce0 = 1'b1;
    end else begin
        a_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_0_we0 = 1'b1;
    end else begin
        a_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_corner_1_address0 = a_corner_1_addr_reg_1157;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_1_address0 = idxprom_reg_1062;
    end else begin
        a_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        a_corner_1_ce0 = 1'b1;
    end else begin
        a_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_corner_1_d0 = b_corner_min_V_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_corner_1_d0 = a_corner_min_V_reg_713;
    end else begin
        a_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln1494_2_fu_951_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        a_corner_1_we0 = 1'b1;
    end else begin
        a_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_corner_list_V_address0 = zext_ln195_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_corner_list_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_corner_list_V_address0 = 64'd1;
    end else begin
        a_corner_list_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_corner_list_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_corner_list_V_address1 = 64'd0;
    end else begin
        a_corner_list_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_corner_list_V_ce0 = 1'b1;
    end else begin
        a_corner_list_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_corner_list_V_ce1 = 1'b1;
    end else begin
        a_corner_list_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_corner_list_V_we0 = 1'b1;
    end else begin
        a_corner_list_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_corner_list_V_we1 = 1'b1;
    end else begin
        a_corner_list_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln195_fu_861_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((icmp_ln1494_2_fu_951_p2 == 1'd0)) begin
            ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 = c_corner_max_V_reg_741;
        end else if ((icmp_ln1494_2_fu_951_p2 == 1'd1)) begin
            ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 = b_corner_min_V_reg_726;
        end else begin
            ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_corner_0_ce0 = 1'b1;
    end else begin
        b_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_corner_0_we0 = 1'b1;
    end else begin
        b_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_corner_1_address0 = b_corner_1_addr_reg_1162;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_corner_1_address0 = idxprom_reg_1062;
    end else begin
        b_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        b_corner_1_ce0 = 1'b1;
    end else begin
        b_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_corner_1_d0 = ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_corner_1_d0 = b_corner_min_V_reg_726;
    end else begin
        b_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln1495_2_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        b_corner_1_we0 = 1'b1;
    end else begin
        b_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_corner_list_V_address0 = zext_ln195_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_corner_list_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_corner_list_V_address0 = 64'd1;
    end else begin
        b_corner_list_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_corner_list_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_corner_list_V_address1 = 64'd0;
    end else begin
        b_corner_list_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_corner_list_V_ce0 = 1'b1;
    end else begin
        b_corner_list_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_corner_list_V_ce1 = 1'b1;
    end else begin
        b_corner_list_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_corner_list_V_we0 = 1'b1;
    end else begin
        b_corner_list_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_corner_list_V_we1 = 1'b1;
    end else begin
        b_corner_list_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_0_ce0 = 1'b1;
    end else begin
        c_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_0_we0 = 1'b1;
    end else begin
        c_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_corner_1_address0 = c_corner_1_addr_reg_1167;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_1_address0 = idxprom_reg_1062;
    end else begin
        c_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        c_corner_1_ce0 = 1'b1;
    end else begin
        c_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_corner_1_d0 = b_corner_min_V_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        c_corner_1_d0 = c_corner_max_V_reg_741;
    end else begin
        c_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln1494_2_fu_951_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        c_corner_1_we0 = 1'b1;
    end else begin
        c_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_corner_list_V_address0 = zext_ln195_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c_corner_list_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_corner_list_V_address0 = 64'd1;
    end else begin
        c_corner_list_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_corner_list_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_corner_list_V_address1 = 64'd0;
    end else begin
        c_corner_list_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c_corner_list_V_ce0 = 1'b1;
    end else begin
        c_corner_list_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        c_corner_list_V_ce1 = 1'b1;
    end else begin
        c_corner_list_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        c_corner_list_V_we0 = 1'b1;
    end else begin
        c_corner_list_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        c_corner_list_V_we1 = 1'b1;
    end else begin
        c_corner_list_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        d_corner_0_ce0 = 1'b1;
    end else begin
        d_corner_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        d_corner_0_we0 = 1'b1;
    end else begin
        d_corner_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        d_corner_1_address0 = d_corner_1_addr_reg_1172;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_corner_1_address0 = idxprom_reg_1062;
    end else begin
        d_corner_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        d_corner_1_ce0 = 1'b1;
    end else begin
        d_corner_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        d_corner_1_d0 = ap_phi_mux_arrayidx158191_load_0_phi_fu_770_p4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_corner_1_d0 = d_corner_max_V_reg_754;
    end else begin
        d_corner_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln1495_2_fu_957_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        d_corner_1_we0 = 1'b1;
    end else begin
        d_corner_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_corner_list_V_address0 = zext_ln195_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_corner_list_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_corner_list_V_address0 = 64'd1;
    end else begin
        d_corner_list_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_corner_list_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_corner_list_V_address1 = 64'd0;
    end else begin
        d_corner_list_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        d_corner_list_V_ce0 = 1'b1;
    end else begin
        d_corner_list_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        d_corner_list_V_ce1 = 1'b1;
    end else begin
        d_corner_list_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        d_corner_list_V_we0 = 1'b1;
    end else begin
        d_corner_list_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        d_corner_list_V_we1 = 1'b1;
    end else begin
        d_corner_list_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        flatBottom_address0 = flatBottom_addr_1_gep_fu_664_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        flatBottom_address0 = idxprom_reg_1062;
    end else begin
        flatBottom_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        flatBottom_ce0 = 1'b1;
    end else begin
        flatBottom_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1499_3_fu_946_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln1499_2_fu_941_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        flatBottom_we0 = 1'b1;
    end else begin
        flatBottom_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        flatTop_address0 = flatTop_addr_1_gep_fu_634_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flatTop_address0 = idxprom_reg_1062;
    end else begin
        flatTop_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        flatTop_ce0 = 1'b1;
    end else begin
        flatTop_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1499_1_reg_1177 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln1499_reg_1153 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        flatTop_we0 = 1'b1;
    end else begin
        flatTop_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jL_address0 = zext_ln174_4_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomL_jL_address0 = zext_ln174_2_fu_818_p1;
    end else begin
        shadow_bottomL_jL_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jL_address1 = zext_ln174_3_fu_831_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomL_jL_address1 = zext_ln174_1_fu_802_p1;
    end else begin
        shadow_bottomL_jL_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomL_jL_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomL_jL_ce1 = 1'b1;
    end else begin
        shadow_bottomL_jL_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jR_address0 = zext_ln174_4_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomL_jR_address0 = zext_ln174_2_fu_818_p1;
    end else begin
        shadow_bottomL_jR_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomL_jR_address1 = zext_ln174_3_fu_831_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomL_jR_address1 = zext_ln174_1_fu_802_p1;
    end else begin
        shadow_bottomL_jR_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomL_jR_ce0 = 1'b1;
    end else begin
        shadow_bottomL_jR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomL_jR_ce1 = 1'b1;
    end else begin
        shadow_bottomL_jR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jL_address0 = zext_ln174_4_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomR_jL_address0 = zext_ln174_2_fu_818_p1;
    end else begin
        shadow_bottomR_jL_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jL_address1 = zext_ln174_3_fu_831_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomR_jL_address1 = zext_ln174_1_fu_802_p1;
    end else begin
        shadow_bottomR_jL_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomR_jL_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomR_jL_ce1 = 1'b1;
    end else begin
        shadow_bottomR_jL_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jR_address0 = zext_ln174_4_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomR_jR_address0 = zext_ln174_2_fu_818_p1;
    end else begin
        shadow_bottomR_jR_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shadow_bottomR_jR_address1 = zext_ln174_3_fu_831_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shadow_bottomR_jR_address1 = zext_ln174_1_fu_802_p1;
    end else begin
        shadow_bottomR_jR_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomR_jR_ce0 = 1'b1;
    end else begin
        shadow_bottomR_jR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shadow_bottomR_jR_ce1 = 1'b1;
    end else begin
        shadow_bottomR_jR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        squareAcceptance_address0 = squareAcceptance_addr_3_gep_fu_672_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        squareAcceptance_address0 = squareAcceptance_addr_2_gep_fu_656_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        squareAcceptance_address0 = squareAcceptance_addr_1_gep_fu_626_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        squareAcceptance_address0 = idxprom_reg_1062;
    end else begin
        squareAcceptance_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        squareAcceptance_ce0 = 1'b1;
    end else begin
        squareAcceptance_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1499_3_reg_1185 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln1499_2_reg_1181 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln1499_1_reg_1177 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln1499_reg_1153 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        squareAcceptance_we0 = 1'b1;
    end else begin
        squareAcceptance_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        triangleAcceptance_address0 = triangleAcceptance_addr_1_gep_fu_694_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        triangleAcceptance_address0 = idxprom_reg_1062;
    end else begin
        triangleAcceptance_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        triangleAcceptance_ce0 = 1'b1;
    end else begin
        triangleAcceptance_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1495_2_reg_1192 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln1494_2_fu_951_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        triangleAcceptance_we0 = 1'b1;
    end else begin
        triangleAcceptance_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        z1_max_ce0 = 1'b1;
    end else begin
        z1_max_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        z1_min_ce0 = 1'b1;
    end else begin
        z1_min_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln195_fu_861_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln195_fu_861_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_corner_0_address0 = idxprom_reg_1062;

assign a_corner_0_d0 = z1_min_q0;

assign a_corner_min_V_1_fu_881_p3 = ((icmp_ln1495_fu_875_p2[0:0] == 1'b1) ? a_corner_list_V_q0 : a_corner_min_V_reg_713);

assign add_ln174_1_fu_812_p2 = (add_ln174_fu_796_p2 + 4'd1);

assign add_ln174_2_fu_826_p2 = (add_ln174_reg_966 + 4'd2);

assign add_ln174_3_fu_839_p2 = (add_ln174_reg_966 + 4'd3);

assign add_ln174_fu_796_p2 = (tmp_fu_788_p3 + zext_ln174_fu_784_p1);

assign add_ln195_fu_855_p2 = (i_reg_702 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_corner_0_address0 = idxprom_reg_1062;

assign b_corner_0_d0 = z1_max_q0;

assign b_corner_min_V_2_fu_895_p3 = ((icmp_ln1495_1_fu_889_p2[0:0] == 1'b1) ? b_corner_list_V_q0 : b_corner_min_V_reg_726);

assign c_corner_0_address0 = idxprom_reg_1062;

assign c_corner_0_d0 = z1_min_q0;

assign c_corner_max_V_1_fu_909_p3 = ((icmp_ln1494_fu_903_p2[0:0] == 1'b1) ? c_corner_list_V_q0 : c_corner_max_V_reg_741);

assign d_corner_0_address0 = idxprom_reg_1062;

assign d_corner_0_d0 = z1_max_q0;

assign d_corner_max_V_2_fu_923_p3 = ((icmp_ln1494_1_fu_917_p2[0:0] == 1'b1) ? d_corner_list_V_q0 : d_corner_max_V_reg_754);

assign flatBottom_addr_1_gep_fu_664_p3 = idxprom_reg_1062;

assign flatBottom_d0 = 1'd0;

assign flatTop_addr_1_gep_fu_634_p3 = idxprom_reg_1062;

assign flatTop_d0 = 1'd0;

assign icmp_ln1494_1_fu_917_p2 = (($signed(d_corner_list_V_q0) > $signed(d_corner_max_V_reg_754)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_951_p2 = (($signed(c_corner_max_V_reg_741) > $signed(a_corner_min_V_reg_713)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_903_p2 = (($signed(c_corner_list_V_q0) > $signed(c_corner_max_V_reg_741)) ? 1'b1 : 1'b0);

assign icmp_ln1495_1_fu_889_p2 = (($signed(b_corner_list_V_q0) < $signed(b_corner_min_V_reg_726)) ? 1'b1 : 1'b0);

assign icmp_ln1495_2_fu_957_p2 = (($signed(b_corner_min_V_reg_726) < $signed(d_corner_max_V_reg_754)) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_875_p2 = (($signed(a_corner_list_V_q0) < $signed(a_corner_min_V_reg_713)) ? 1'b1 : 1'b0);

assign icmp_ln1499_1_fu_936_p2 = ((b_corner_min_V_reg_726 == shadow_bottomR_jR_load_3_reg_1089) ? 1'b1 : 1'b0);

assign icmp_ln1499_2_fu_941_p2 = ((c_corner_max_V_reg_741 == shadow_bottomL_jL_load_3_reg_1094) ? 1'b1 : 1'b0);

assign icmp_ln1499_3_fu_946_p2 = ((d_corner_max_V_reg_754 == shadow_bottomR_jL_load_3_reg_1099) ? 1'b1 : 1'b0);

assign icmp_ln1499_fu_931_p2 = ((a_corner_min_V_reg_713 == shadow_bottomL_jR_load_3_reg_1084) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_861_p2 = ((i_reg_702 == 3'd4) ? 1'b1 : 1'b0);

assign idxprom_fu_852_p1 = latest_patch_index_constprop;

assign squareAcceptance_addr_1_gep_fu_626_p3 = idxprom_reg_1062;

assign squareAcceptance_addr_2_gep_fu_656_p3 = idxprom_reg_1062;

assign squareAcceptance_addr_3_gep_fu_672_p3 = idxprom_reg_1062;

assign squareAcceptance_d0 = 1'd0;

assign tmp_fu_788_p3 = {{latest_patch_index_constprop}, {2'd0}};

assign triangleAcceptance_addr_1_gep_fu_694_p3 = idxprom_reg_1062;

assign triangleAcceptance_d0 = 1'd1;

assign z1_max_address0 = z1_max_addr_reg_1017;

assign z1_min_address0 = z1_min_addr_reg_1012;

assign zext_ln174_1_fu_802_p1 = add_ln174_fu_796_p2;

assign zext_ln174_2_fu_818_p1 = add_ln174_1_fu_812_p2;

assign zext_ln174_3_fu_831_p1 = add_ln174_2_fu_826_p2;

assign zext_ln174_4_fu_844_p1 = add_ln174_3_fu_839_p2;

assign zext_ln174_fu_784_p1 = latest_patch_index_constprop;

assign zext_ln195_fu_867_p1 = i_reg_702;

always @ (posedge ap_clk) begin
    idxprom_reg_1062[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //system_top_get_acceptanceCorners
