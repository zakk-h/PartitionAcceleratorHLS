-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_p_find_starting_index_and_value8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce1 : OUT STD_LOGIC;
    num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce1 : OUT STD_LOGIC;
    points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    projectionToRow_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    projectionToRow_empty_n : IN STD_LOGIC;
    projectionToRow_read : OUT STD_LOGIC;
    start_index : OUT STD_LOGIC_VECTOR (31 downto 0);
    start_index_ap_vld : OUT STD_LOGIC;
    start_value_i : IN STD_LOGIC_VECTOR (31 downto 0);
    start_value_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    start_value_o_ap_vld : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC );
end;


architecture behav of system_top_p_find_starting_index_and_value8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal projectionToRow_blk_n : STD_LOGIC;
    signal i_blk_n : STD_LOGIC;
    signal j_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_196_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_reg_196_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_61_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_16_reg_1290 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_185_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_points_load_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tobool_i19_i_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_i19_i_reg_1311 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_35_fu_240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_35_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_113_i_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_113_i_reg_1323 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_250_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1329 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln296_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln296_reg_1334 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_0_i81_i_fu_564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i81_i_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_bits_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_bits_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal z_bits_reg_1348_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_181_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_181_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_93_fu_589_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_93_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1370 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_fu_729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1380 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln296_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln296_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln935_fu_869_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_9_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_9_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_190_fu_883_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_190_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_97_reg_1410 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_178_reg_1415 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_12_fu_1117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_12_reg_1420 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln298_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_1_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_1_reg_1440 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_2_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_2_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_3_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_3_reg_1450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_j_phi_fu_201_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_i_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln297_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal start_index_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal and_ln298_1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_fu_1277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_value_o_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i23_i_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln297_fu_262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln297_1_fu_266_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln297_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_279_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln297_1_fu_289_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_93_fu_293_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_186_fu_306_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_12_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_11_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_12_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_335_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_11_fu_351_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_11_fu_355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_11_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_11_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_11_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_25_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_187_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_11_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_8_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_16_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_11_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_11_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_8_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_8_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_8_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_11_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_23_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_8_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_8_fu_437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_18_fu_465_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_84_fu_473_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_11_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_85_fu_485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_95_fu_491_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_172_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_11_fu_521_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_11_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_11_fu_513_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_11_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_8_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_fu_537_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_188_fu_544_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_15_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_10_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_V_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_182_fu_597_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_627_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_647_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_17_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_183_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_22_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sub_ln959_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_15_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_fu_779_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_fu_764_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_785_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_80_fu_795_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_94_fu_801_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_815_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_823_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_842_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_184_fu_849_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln744_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_32_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_96_fu_897_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_191_fu_905_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_13_fu_915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_12_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_13_fu_929_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_935_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_12_fu_951_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_12_fu_955_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_12_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_12_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_12_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_18_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_26_fu_983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_fu_995_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_192_fu_1009_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_12_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_9_fu_1033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_17_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_18_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_12_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_12_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_9_fu_1057_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_9_fu_1063_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_9_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_12_fu_1049_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_24_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_9_fu_1067_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_9_fu_1043_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_20_fu_1073_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_89_fu_1081_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_12_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_90_fu_1093_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_1121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_1124_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_189_fu_1132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_12_fu_1155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_12_fu_1148_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_12_fu_1160_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_9_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_i_fu_1166_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_193_fu_1173_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_16_fu_1185_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_5_fu_1189_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_194_fu_1200_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1213_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln298_fu_1128_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_30_fu_1223_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln298_1_fu_1196_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln298_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln298_1_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln298_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_fsub_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_3_full_dsp_1_U19 : component system_top_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln935_reg_1390,
        din1 => retval_0_i81_i_reg_1343,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U20 : component system_top_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_213_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_index_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_index_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln298_1_fu_1271_p2))) then 
                    start_index_preg <= j_reg_196_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    start_value_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_value_o_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln298_1_fu_1271_p2))) then 
                    start_value_o_preg <= sub_ln703_fu_1277_p2;
                end if; 
            end if;
        end if;
    end process;


    j_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln296_reg_1334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_196 <= add_ln296_reg_1385;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln296_reg_1385 <= add_ln296_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                dc_reg_1395 <= grp_fu_209_p2;
                icmp_ln935_9_reg_1400 <= icmp_ln935_9_fu_877_p2;
                m_97_reg_1410 <= m_90_fu_1093_p2(63 downto 1);
                p_Result_178_reg_1415 <= m_90_fu_1093_p2(25 downto 25);
                p_Result_190_reg_1405 <= start_value_i(31 downto 31);
                trunc_ln943_12_reg_1420 <= trunc_ln943_12_fu_1117_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                i_16_reg_1290 <= i_dout;
                p_Result_185_reg_1300 <= projectionToRow_dout(31 downto 31);
                p_Val2_61_reg_1282 <= projectionToRow_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln296_reg_1334 <= icmp_ln296_fu_257_p2;
                icmp_ln298_1_reg_1440 <= icmp_ln298_1_fu_1239_p2;
                icmp_ln298_2_reg_1445 <= icmp_ln298_2_fu_1245_p2;
                icmp_ln298_3_reg_1450 <= icmp_ln298_3_fu_1251_p2;
                icmp_ln298_reg_1435 <= icmp_ln298_fu_1233_p2;
                j_reg_196_pp0_iter1_reg <= j_reg_196;
                j_reg_196_pp0_iter2_reg <= j_reg_196_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln296_reg_1334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln958_reg_1370 <= icmp_ln958_fu_709_p2;
                m_93_reg_1359 <= m_93_fu_589_p3;
                p_Result_181_reg_1354 <= points_q1(31 downto 31);
                select_ln958_reg_1375 <= select_ln958_fu_729_p3;
                sub_ln944_reg_1364 <= sub_ln944_fu_615_p2;
                trunc_ln943_reg_1380 <= trunc_ln943_fu_737_p1;
                z_bits_reg_1348 <= z_bits_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    m_113_i_reg_1323(31 downto 0) <= m_113_i_fu_246_p1(31 downto 0);
                num_points_load_reg_1306 <= num_points_q1;
                    shl_ln_reg_1329(15 downto 13) <= shl_ln_fu_250_p3(15 downto 13);
                tmp_V_35_reg_1316 <= tmp_V_35_fu_240_p3;
                tobool_i19_i_reg_1311 <= tobool_i19_i_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln296_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                retval_0_i81_i_reg_1343 <= retval_0_i81_i_fu_564_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln296_reg_1334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                select_ln935_reg_1390 <= select_ln935_fu_869_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                z_bits_reg_1348_pp0_iter1_reg <= z_bits_reg_1348;
            end if;
        end if;
    end process;
    m_113_i_reg_1323(63 downto 32) <= "00000000000000000000000000000000";
    shl_ln_reg_1329(12 downto 0) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n, icmp_ln296_reg_1334, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln296_reg_1334 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln296_reg_1334 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    LD_15_fu_556_p1 <= p_Result_188_fu_544_p5(32 - 1 downto 0);
    LD_16_fu_1185_p1 <= p_Result_193_fu_1173_p5(31 - 1 downto 0);
    LD_fu_861_p1 <= p_Result_184_fu_849_p5(32 - 1 downto 0);
    add_ln296_fu_741_p2 <= std_logic_vector(unsigned(j_reg_196) + unsigned(ap_const_lv32_1));
    add_ln297_fu_274_p2 <= std_logic_vector(unsigned(shl_ln297_1_fu_266_p3) + unsigned(shl_ln_reg_1329));
    add_ln958_8_fu_450_p2 <= std_logic_vector(unsigned(sub_ln944_11_fu_323_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_9_fu_1057_p2 <= std_logic_vector(unsigned(sub_ln944_12_fu_923_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_fu_770_p2 <= std_logic_vector(unsigned(sub_ln944_reg_1364) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_11_fu_531_p2 <= std_logic_vector(unsigned(sub_ln964_11_fu_525_p2) + unsigned(select_ln943_11_fu_513_p3));
    add_ln964_12_fu_1160_p2 <= std_logic_vector(unsigned(sub_ln964_12_fu_1155_p2) + unsigned(select_ln943_12_fu_1148_p3));
    add_ln964_fu_836_p2 <= std_logic_vector(unsigned(sub_ln964_fu_831_p2) + unsigned(select_ln943_fu_823_p3));
    and_ln298_1_fu_1271_p2 <= (grp_fu_213_p2 and and_ln298_fu_1265_p2);
    and_ln298_fu_1265_p2 <= (or_ln298_fu_1257_p2 and or_ln298_1_fu_1261_p2);
    and_ln949_22_fu_715_p2 <= (xor_ln949_fu_695_p2 and p_Result_183_fu_701_p3);
    and_ln949_23_fu_421_p2 <= (xor_ln949_11_fu_402_p2 and p_Result_187_fu_408_p3);
    and_ln949_24_fu_1023_p2 <= (xor_ln949_12_fu_1003_p2 and p_Result_192_fu_1009_p3);
    and_ln949_25_fu_383_p2 <= (tmp_V_35_reg_1316 and or_ln949_fu_377_p2);
    and_ln949_26_fu_983_p2 <= (or_ln949_18_fu_977_p2 and m_96_fu_897_p3);
    and_ln949_fu_675_p2 <= (or_ln949_17_fu_669_p2 and m_93_fu_589_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, projectionToRow_empty_n, i_empty_n)
    begin
                ap_block_state1 <= ((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln296_reg_1334)
    begin
        if ((icmp_ln296_reg_1334 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_201_p4_assign_proc : process(j_reg_196, ap_CS_fsm_pp0_stage0, icmp_ln296_reg_1334, add_ln296_reg_1385, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln296_reg_1334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_201_p4 <= add_ln296_reg_1385;
        else 
            ap_phi_mux_j_phi_fu_201_p4 <= j_reg_196;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln744_10_fu_560_p1 <= LD_15_fu_556_p1;
    bitcast_ln744_fu_865_p1 <= LD_fu_861_p1;
    data_V_5_fu_1189_p3 <= 
        ap_const_lv31_0 when (icmp_ln935_9_reg_1400(0) = '1') else 
        LD_16_fu_1185_p1;
    data_V_fu_1121_p1 <= dc_reg_1395;
    grp_fu_213_p0 <= p_Result_189_fu_1132_p3;
    grp_fu_213_p1 <= p_Result_194_fu_1200_p3;

    i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln296_fu_257_p2 <= "1" when (ap_phi_mux_j_phi_fu_201_p4 = num_points_load_reg_1306) else "0";
    icmp_ln298_1_fu_1239_p2 <= "1" when (trunc_ln298_fu_1128_p1 = ap_const_lv23_0) else "0";
    icmp_ln298_2_fu_1245_p2 <= "0" when (tmp_30_fu_1223_p4 = ap_const_lv8_FF) else "1";
    icmp_ln298_3_fu_1251_p2 <= "1" when (trunc_ln298_1_fu_1196_p1 = ap_const_lv23_0) else "0";
    icmp_ln298_fu_1233_p2 <= "0" when (tmp_s_fu_1213_p4 = ap_const_lv8_FF) else "1";
    icmp_ln935_9_fu_877_p2 <= "1" when (start_value_i = ap_const_lv32_0) else "0";
    icmp_ln935_fu_747_p2 <= "1" when (z_bits_reg_1348 = ap_const_lv32_0) else "0";
    icmp_ln946_11_fu_345_p2 <= "1" when (signed(tmp_fu_335_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_12_fu_945_p2 <= "1" when (signed(tmp_116_fu_935_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_fu_637_p2 <= "1" when (signed(tmp_110_fu_627_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_11_fu_388_p2 <= "0" when (and_ln949_25_fu_383_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_12_fu_989_p2 <= "0" when (and_ln949_26_fu_983_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_fu_681_p2 <= "0" when (and_ln949_fu_675_p2 = ap_const_lv32_0) else "1";
    icmp_ln958_8_fu_415_p2 <= "1" when (signed(lsb_index_12_fu_329_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_9_fu_1017_p2 <= "1" when (signed(lsb_index_13_fu_929_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_709_p2 <= "1" when (signed(lsb_index_fu_621_p2) > signed(ap_const_lv32_0)) else "0";
    idxprom_i_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_dout),64));
    
    l_12_fu_315_p3_proc : process(p_Result_186_fu_306_p4)
    begin
        l_12_fu_315_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_186_fu_306_p4(i) = '1' then
                l_12_fu_315_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_13_fu_915_p3_proc : process(p_Result_191_fu_905_p4)
    begin
        l_13_fu_915_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_191_fu_905_p4(i) = '1' then
                l_13_fu_915_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_607_p3_proc : process(p_Result_182_fu_597_p4)
    begin
        l_fu_607_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_182_fu_597_p4(i) = '1' then
                l_fu_607_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_12_fu_329_p2 <= std_logic_vector(unsigned(sub_ln944_11_fu_323_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_13_fu_929_p2 <= std_logic_vector(unsigned(sub_ln944_12_fu_923_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_621_p2 <= std_logic_vector(unsigned(sub_ln944_fu_615_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln947_11_fu_365_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_11_fu_361_p1(31-1 downto 0)))));
    lshr_ln947_12_fu_965_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_12_fu_961_p1(31-1 downto 0)))));
    lshr_ln947_fu_657_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_653_p1(31-1 downto 0)))));
    lshr_ln958_8_fu_460_p2 <= std_logic_vector(shift_right(unsigned(m_113_i_reg_1323),to_integer(unsigned('0' & zext_ln958_8_fu_456_p1(31-1 downto 0)))));
    lshr_ln958_9_fu_1067_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_17_fu_1029_p1),to_integer(unsigned('0' & zext_ln958_9_fu_1063_p1(31-1 downto 0)))));
    lshr_ln958_fu_779_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_fu_752_p1),to_integer(unsigned('0' & zext_ln958_fu_775_p1(31-1 downto 0)))));
    lshr_ln_fu_279_p4 <= add_ln297_fu_274_p2(15 downto 13);
    m_113_i_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_35_fu_240_p3),64));
    m_80_fu_795_p2 <= std_logic_vector(unsigned(m_fu_785_p3) + unsigned(zext_ln961_fu_792_p1));
    m_84_fu_473_p3 <= 
        lshr_ln958_8_fu_460_p2 when (icmp_ln958_8_fu_415_p2(0) = '1') else 
        shl_ln959_8_fu_437_p2;
    m_85_fu_485_p2 <= std_logic_vector(unsigned(m_84_fu_473_p3) + unsigned(zext_ln961_11_fu_481_p1));
    m_89_fu_1081_p3 <= 
        lshr_ln958_9_fu_1067_p2 when (icmp_ln958_9_fu_1017_p2(0) = '1') else 
        shl_ln959_9_fu_1043_p2;
    m_90_fu_1093_p2 <= std_logic_vector(unsigned(m_89_fu_1081_p3) + unsigned(zext_ln961_12_fu_1089_p1));
    m_93_fu_589_p3 <= 
        tmp_V_fu_583_p2 when (p_Result_181_fu_575_p3(0) = '1') else 
        z_bits_fu_571_p1;
    m_94_fu_801_p4 <= m_80_fu_795_p2(63 downto 1);
    m_95_fu_491_p4 <= m_85_fu_485_p2(63 downto 1);
    m_96_fu_897_p3 <= 
        tmp_V_32_fu_891_p2 when (p_Result_190_fu_883_p3(0) = '1') else 
        start_value_i;
    m_fu_785_p3 <= 
        lshr_ln958_fu_779_p2 when (icmp_ln958_reg_1370(0) = '1') else 
        shl_ln959_fu_764_p2;
    num_points_address1 <= idxprom_i_fu_217_p1(3 - 1 downto 0);

    num_points_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_points_ce1 <= ap_const_logic_1;
        else 
            num_points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln298_1_fu_1261_p2 <= (icmp_ln298_3_reg_1450 or icmp_ln298_2_reg_1445);
    or_ln298_fu_1257_p2 <= (icmp_ln298_reg_1435 or icmp_ln298_1_reg_1440);
    or_ln949_17_fu_669_p2 <= (shl_ln949_fu_663_p2 or lshr_ln947_fu_657_p2);
    or_ln949_18_fu_977_p2 <= (shl_ln949_12_fu_971_p2 or lshr_ln947_12_fu_965_p2);
    or_ln949_fu_377_p2 <= (shl_ln949_11_fu_371_p2 or lshr_ln947_11_fu_365_p2);
    p_Result_172_fu_505_p3 <= m_85_fu_485_p2(25 downto 25);
    p_Result_181_fu_575_p3 <= points_q1(31 downto 31);
    
    p_Result_182_fu_597_p4_proc : process(m_93_fu_589_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_182_fu_597_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_93_fu_589_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_182_fu_597_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_182_fu_597_p4_i) := m_93_fu_589_p3(32-1-p_Result_182_fu_597_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_182_fu_597_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_183_fu_701_p3 <= m_93_fu_589_p3(to_integer(unsigned(lsb_index_fu_621_p2)) downto to_integer(unsigned(lsb_index_fu_621_p2))) when (to_integer(unsigned(lsb_index_fu_621_p2))>= 0 and to_integer(unsigned(lsb_index_fu_621_p2))<=31) else "-";
    p_Result_184_fu_849_p5 <= (zext_ln962_fu_811_p1(63 downto 32) & tmp_i_fu_842_p3 & zext_ln962_fu_811_p1(22 downto 0));
    
    p_Result_186_fu_306_p4_proc : process(tmp_V_35_reg_1316)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_186_fu_306_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_35_reg_1316;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_186_fu_306_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_186_fu_306_p4_i) := tmp_V_35_reg_1316(32-1-p_Result_186_fu_306_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_186_fu_306_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_187_fu_408_p3 <= tmp_V_35_reg_1316(to_integer(unsigned(lsb_index_12_fu_329_p2)) downto to_integer(unsigned(lsb_index_12_fu_329_p2))) when (to_integer(unsigned(lsb_index_12_fu_329_p2))>= 0 and to_integer(unsigned(lsb_index_12_fu_329_p2))<=31) else "-";
    p_Result_188_fu_544_p5 <= (zext_ln962_8_fu_501_p1(63 downto 32) & tmp_36_i_fu_537_p3 & zext_ln962_8_fu_501_p1(22 downto 0));
    p_Result_189_fu_1132_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_1124_p1);
    p_Result_190_fu_883_p3 <= start_value_i(31 downto 31);
    
    p_Result_191_fu_905_p4_proc : process(m_96_fu_897_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_191_fu_905_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_96_fu_897_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_191_fu_905_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_191_fu_905_p4_i) := m_96_fu_897_p3(32-1-p_Result_191_fu_905_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_191_fu_905_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_192_fu_1009_p3 <= m_96_fu_897_p3(to_integer(unsigned(lsb_index_13_fu_929_p2)) downto to_integer(unsigned(lsb_index_13_fu_929_p2))) when (to_integer(unsigned(lsb_index_13_fu_929_p2))>= 0 and to_integer(unsigned(lsb_index_13_fu_929_p2))<=31) else "-";
    p_Result_193_fu_1173_p5 <= (zext_ln962_9_fu_1145_p1(63 downto 32) & tmp_38_i_fu_1166_p3 & zext_ln962_9_fu_1145_p1(22 downto 0));
    p_Result_194_fu_1200_p3 <= (ap_const_lv1_0 & data_V_5_fu_1189_p3);
    p_Result_s_fu_815_p3 <= m_80_fu_795_p2(25 downto 25);
    points_address1 <= zext_ln297_fu_301_p1(12 - 1 downto 0);

    points_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            points_ce1 <= ap_const_logic_1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    projectionToRow_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            projectionToRow_blk_n <= projectionToRow_empty_n;
        else 
            projectionToRow_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    projectionToRow_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            projectionToRow_read <= ap_const_logic_1;
        else 
            projectionToRow_read <= ap_const_logic_0;
        end if; 
    end process;

    retval_0_i81_i_fu_564_p3 <= 
        ap_const_lv32_0 when (tobool_i19_i_reg_1311(0) = '1') else 
        bitcast_ln744_10_fu_560_p1;
    select_ln935_fu_869_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_747_p2(0) = '1') else 
        bitcast_ln744_fu_865_p1;
    select_ln943_11_fu_513_p3 <= 
        ap_const_lv8_7F when (p_Result_172_fu_505_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_12_fu_1148_p3 <= 
        ap_const_lv8_7F when (p_Result_178_reg_1415(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_fu_823_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_815_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_11_fu_442_p3 <= 
        icmp_ln949_11_fu_388_p2 when (icmp_ln946_11_fu_345_p2(0) = '1') else 
        p_Result_187_fu_408_p3;
    select_ln946_12_fu_1049_p3 <= 
        icmp_ln949_12_fu_989_p2 when (icmp_ln946_12_fu_945_p2(0) = '1') else 
        p_Result_192_fu_1009_p3;
    select_ln946_fu_721_p3 <= 
        icmp_ln949_fu_681_p2 when (icmp_ln946_fu_637_p2(0) = '1') else 
        p_Result_183_fu_701_p3;
    select_ln958_18_fu_465_p3 <= 
        select_ln946_11_fu_442_p3 when (icmp_ln958_8_fu_415_p2(0) = '1') else 
        and_ln949_23_fu_421_p2;
    select_ln958_20_fu_1073_p3 <= 
        select_ln946_12_fu_1049_p3 when (icmp_ln958_9_fu_1017_p2(0) = '1') else 
        and_ln949_24_fu_1023_p2;
    select_ln958_fu_729_p3 <= 
        select_ln946_fu_721_p3 when (icmp_ln958_fu_709_p2(0) = '1') else 
        and_ln949_22_fu_715_p2;
    shl_ln297_1_fu_266_p3 <= (trunc_ln297_fu_262_p1 & ap_const_lv4_0);
    shl_ln949_11_fu_371_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_12_fu_329_p2(31-1 downto 0)))));
    shl_ln949_12_fu_971_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_13_fu_929_p2(31-1 downto 0)))));
    shl_ln949_fu_663_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_621_p2(31-1 downto 0)))));
    shl_ln959_8_fu_437_p2 <= std_logic_vector(shift_left(unsigned(m_113_i_reg_1323),to_integer(unsigned('0' & zext_ln959_16_fu_433_p1(31-1 downto 0)))));
    shl_ln959_9_fu_1043_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_17_fu_1029_p1),to_integer(unsigned('0' & zext_ln959_18_fu_1039_p1(31-1 downto 0)))));
    shl_ln959_fu_764_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_fu_752_p1),to_integer(unsigned('0' & zext_ln959_15_fu_760_p1(31-1 downto 0)))));
    shl_ln_fu_250_p3 <= (i_16_reg_1290 & ap_const_lv13_0);

    start_index_assign_proc : process(j_reg_196_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, start_index_preg, ap_block_pp0_stage1_01001, and_ln298_1_fu_1271_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln298_1_fu_1271_p2))) then 
            start_index <= j_reg_196_pp0_iter2_reg;
        else 
            start_index <= start_index_preg;
        end if; 
    end process;


    start_index_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, and_ln298_1_fu_1271_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln298_1_fu_1271_p2))) then 
            start_index_ap_vld <= ap_const_logic_1;
        else 
            start_index_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    start_value_o_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_01001, and_ln298_1_fu_1271_p2, sub_ln703_fu_1277_p2, start_value_o_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln298_1_fu_1271_p2))) then 
            start_value_o <= sub_ln703_fu_1277_p2;
        else 
            start_value_o <= start_value_o_preg;
        end if; 
    end process;


    start_value_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, and_ln298_1_fu_1271_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln298_1_fu_1271_p2))) then 
            start_value_o_ap_vld <= ap_const_logic_1;
        else 
            start_value_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_i23_i_fu_235_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_61_reg_1282));
    sub_ln703_fu_1277_p2 <= std_logic_vector(unsigned(z_bits_reg_1348_pp0_iter1_reg) - unsigned(p_Val2_61_reg_1282));
    sub_ln944_11_fu_323_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_12_fu_315_p3));
    sub_ln944_12_fu_923_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_13_fu_915_p3));
    sub_ln944_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_607_p3));
    sub_ln947_11_fu_355_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_11_fu_351_p1));
    sub_ln947_12_fu_955_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_12_fu_951_p1));
    sub_ln947_fu_647_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_fu_643_p1));
    sub_ln959_8_fu_427_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_11_fu_323_p2));
    sub_ln959_9_fu_1033_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_12_fu_923_p2));
    sub_ln959_fu_755_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1364));
    sub_ln964_11_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_11_fu_521_p1));
    sub_ln964_12_fu_1155_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_12_reg_1420));
    sub_ln964_fu_831_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_reg_1380));
    tmp_110_fu_627_p4 <= lsb_index_fu_621_p2(31 downto 1);
    tmp_111_fu_687_p3 <= lsb_index_fu_621_p2(31 downto 31);
    tmp_113_fu_394_p3 <= lsb_index_12_fu_329_p2(31 downto 31);
    tmp_116_fu_935_p4 <= lsb_index_13_fu_929_p2(31 downto 1);
    tmp_117_fu_995_p3 <= lsb_index_13_fu_929_p2(31 downto 31);
    tmp_30_fu_1223_p4 <= data_V_5_fu_1189_p3(30 downto 23);
    tmp_36_i_fu_537_p3 <= (p_Result_185_reg_1300 & add_ln964_11_fu_531_p2);
    tmp_38_i_fu_1166_p3 <= (p_Result_190_reg_1405 & add_ln964_12_fu_1160_p2);
    tmp_93_fu_293_p3 <= (lshr_ln_fu_279_p4 & trunc_ln297_1_fu_289_p1);
    tmp_V_32_fu_891_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(start_value_i));
    tmp_V_35_fu_240_p3 <= 
        sub_i23_i_fu_235_p2 when (p_Result_185_reg_1300(0) = '1') else 
        p_Val2_61_reg_1282;
    tmp_V_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(z_bits_fu_571_p1));
    tmp_fu_335_p4 <= lsb_index_12_fu_329_p2(31 downto 1);
    tmp_i_fu_842_p3 <= (p_Result_181_reg_1354 & add_ln964_fu_836_p2);
    tmp_s_fu_1213_p4 <= data_V_fu_1121_p1(30 downto 23);
    tobool_i19_i_fu_230_p2 <= "1" when (p_Val2_61_reg_1282 = ap_const_lv32_0) else "0";
    trunc_ln297_1_fu_289_p1 <= ap_phi_mux_j_phi_fu_201_p4(9 - 1 downto 0);
    trunc_ln297_fu_262_p1 <= ap_phi_mux_j_phi_fu_201_p4(12 - 1 downto 0);
    trunc_ln298_1_fu_1196_p1 <= data_V_5_fu_1189_p3(23 - 1 downto 0);
    trunc_ln298_fu_1128_p1 <= data_V_fu_1121_p1(23 - 1 downto 0);
    trunc_ln368_fu_1124_p1 <= data_V_fu_1121_p1(31 - 1 downto 0);
    trunc_ln943_11_fu_521_p1 <= l_12_fu_315_p3(8 - 1 downto 0);
    trunc_ln943_12_fu_1117_p1 <= l_13_fu_915_p3(8 - 1 downto 0);
    trunc_ln943_fu_737_p1 <= l_fu_607_p3(8 - 1 downto 0);
    trunc_ln947_11_fu_351_p1 <= sub_ln944_11_fu_323_p2(6 - 1 downto 0);
    trunc_ln947_12_fu_951_p1 <= sub_ln944_12_fu_923_p2(6 - 1 downto 0);
    trunc_ln947_fu_643_p1 <= sub_ln944_fu_615_p2(6 - 1 downto 0);
    xor_ln949_11_fu_402_p2 <= (tmp_113_fu_394_p3 xor ap_const_lv1_1);
    xor_ln949_12_fu_1003_p2 <= (tmp_117_fu_995_p3 xor ap_const_lv1_1);
    xor_ln949_fu_695_p2 <= (tmp_111_fu_687_p3 xor ap_const_lv1_1);
    z_bits_fu_571_p1 <= points_q1(32 - 1 downto 0);
    zext_ln297_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_293_p3),64));
    zext_ln947_11_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_11_fu_355_p2),32));
    zext_ln947_12_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_12_fu_955_p2),32));
    zext_ln947_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_647_p2),32));
    zext_ln958_8_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_8_fu_450_p2),64));
    zext_ln958_9_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_9_fu_1057_p2),64));
    zext_ln958_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_fu_770_p2),64));
    zext_ln959_15_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_fu_755_p2),64));
    zext_ln959_16_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_8_fu_427_p2),64));
    zext_ln959_17_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_96_fu_897_p3),64));
    zext_ln959_18_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_9_fu_1033_p2),64));
    zext_ln959_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_93_reg_1359),64));
    zext_ln961_11_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_18_fu_465_p3),64));
    zext_ln961_12_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_20_fu_1073_p3),64));
    zext_ln961_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_reg_1375),64));
    zext_ln962_8_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_95_fu_491_p4),64));
    zext_ln962_9_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_97_reg_1410),64));
    zext_ln962_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_94_fu_801_p4),64));
end behav;
