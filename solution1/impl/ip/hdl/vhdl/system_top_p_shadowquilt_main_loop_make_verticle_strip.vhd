-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_p_shadowquilt_main_loop_make_verticle_strip is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce0 : OUT STD_LOGIC;
    points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce1 : OUT STD_LOGIC;
    points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce0 : OUT STD_LOGIC;
    num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce1 : OUT STD_LOGIC;
    num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    patch_stream_V_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_stream_V_full_n : IN STD_LOGIC;
    patch_stream_V_write : OUT STD_LOGIC;
    patch_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patch_buffer_ce0 : OUT STD_LOGIC;
    patch_buffer_we0 : OUT STD_LOGIC;
    patch_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patch_buffer_ce1 : OUT STD_LOGIC;
    patch_buffer_we1 : OUT STD_LOGIC;
    patch_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pSlope_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pSlope_ce0 : OUT STD_LOGIC;
    pSlope_we0 : OUT STD_LOGIC;
    pSlope_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_we0 : OUT STD_LOGIC;
    shadow_bottomL_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_we0 : OUT STD_LOGIC;
    shadow_bottomR_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_we0 : OUT STD_LOGIC;
    shadow_bottomL_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_we0 : OUT STD_LOGIC;
    shadow_bottomR_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_min_ce0 : OUT STD_LOGIC;
    z1_min_we0 : OUT STD_LOGIC;
    z1_min_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    z1_min_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_max_ce0 : OUT STD_LOGIC;
    z1_max_we0 : OUT STD_LOGIC;
    z1_max_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    z1_max_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_0_ce0 : OUT STD_LOGIC;
    a_corner_0_we0 : OUT STD_LOGIC;
    a_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_1_ce0 : OUT STD_LOGIC;
    a_corner_1_we0 : OUT STD_LOGIC;
    a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_corner_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_0_ce0 : OUT STD_LOGIC;
    b_corner_0_we0 : OUT STD_LOGIC;
    b_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_1_ce0 : OUT STD_LOGIC;
    b_corner_1_we0 : OUT STD_LOGIC;
    b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_corner_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_0_ce0 : OUT STD_LOGIC;
    c_corner_0_we0 : OUT STD_LOGIC;
    c_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    c_corner_0_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_1_ce0 : OUT STD_LOGIC;
    c_corner_1_we0 : OUT STD_LOGIC;
    c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_corner_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_0_ce0 : OUT STD_LOGIC;
    d_corner_0_we0 : OUT STD_LOGIC;
    d_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_1_ce0 : OUT STD_LOGIC;
    d_corner_1_we0 : OUT STD_LOGIC;
    d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_corner_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    squareAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    squareAcceptance_ce0 : OUT STD_LOGIC;
    squareAcceptance_we0 : OUT STD_LOGIC;
    squareAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    squareAcceptance_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    flatTop_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    flatTop_ce0 : OUT STD_LOGIC;
    flatTop_we0 : OUT STD_LOGIC;
    flatTop_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    flatBottom_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    flatBottom_ce0 : OUT STD_LOGIC;
    flatBottom_we0 : OUT STD_LOGIC;
    flatBottom_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    flatBottom_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    triangleAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    triangleAcceptance_ce0 : OUT STD_LOGIC;
    triangleAcceptance_we0 : OUT STD_LOGIC;
    triangleAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    triangleAcceptance_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    latest_patch_index_constprop_i : IN STD_LOGIC_VECTOR (1 downto 0);
    latest_patch_index_constprop_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    latest_patch_index_constprop_o_ap_vld : OUT STD_LOGIC;
    num_patches_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
    num_patches_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_patches_constprop_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of system_top_p_shadowquilt_main_loop_make_verticle_strip is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp10_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp11_stage0 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (87 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (87 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (87 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (87 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (87 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (87 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (87 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (87 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (87 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (87 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_FCE00000 : STD_LOGIC_VECTOR (31 downto 0) := "11111100111000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7FF00000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111100000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1600068 : STD_LOGIC_VECTOR (31 downto 0) := "00000001011000000000000001101000";
    constant ap_const_lv32_3200000 : STD_LOGIC_VECTOR (31 downto 0) := "00000011001000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_C248001A : STD_LOGIC_VECTOR (31 downto 0) := "11000010010010000000000000011010";
    constant ap_const_lv32_C2480000 : STD_LOGIC_VECTOR (31 downto 0) := "11000010010010000000000000000000";
    constant ap_const_lv64_3EB0C6F7A0B5ED8E : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_100000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_F00000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111100000000000000000000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_C049000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000001001001000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv26_3B00000 : STD_LOGIC_VECTOR (25 downto 0) := "11101100000000000000000000";
    constant ap_const_lv100_33333333333334 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000110011001100110011001100110011001100110011001100110100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv100_0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_FFF00000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111100000000000000000000";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv46_140000000000 : STD_LOGIC_VECTOR (45 downto 0) := "0101000000000000000000000000000000000000000000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_6000 : STD_LOGIC_VECTOR (15 downto 0) := "0110000000000000";
    constant ap_const_lv16_4000 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal get_radiiradii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal get_radiiradii_ce0 : STD_LOGIC;
    signal get_radiiradii_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patch_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln37_reg_6884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln37_1_reg_7165 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_818 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_reg_829 : STD_LOGIC_VECTOR (2 downto 0);
    signal point_reg_840 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_851 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_z_V_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_258_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_886 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_z_V_2_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_260_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten7_reg_985 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_1_reg_996 : STD_LOGIC_VECTOR (2 downto 0);
    signal point_1_reg_1007 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1054 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_1075 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_1096 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_reg_1107 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_1118 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_12_reg_1129 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_13_reg_1141 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_15_reg_1152 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerWithSmallestShift_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerSMin_V_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1437 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal new_z_i_atTop_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp11_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp11_stage0 : signal is "none";
    signal ap_enable_reg_pp11_iter1 : STD_LOGIC := '0';
    signal ap_block_state137_pp11_stage0_iter0 : BOOLEAN;
    signal ap_block_state138_pp11_stage0_iter1 : BOOLEAN;
    signal ap_block_state139_pp11_stage0_iter2 : BOOLEAN;
    signal ap_block_state140_pp11_stage0_iter3 : BOOLEAN;
    signal ap_block_state141_pp11_stage0_iter4 : BOOLEAN;
    signal ap_block_state142_pp11_stage0_iter5 : BOOLEAN;
    signal ap_block_state143_pp11_stage0_iter6 : BOOLEAN;
    signal ap_block_state144_pp11_stage0_iter7 : BOOLEAN;
    signal ap_block_state145_pp11_stage0_iter8 : BOOLEAN;
    signal ap_block_pp11_stage0_11001 : BOOLEAN;
    signal icmp_ln1027_reg_7705 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal grp_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal add_ln37_2_fu_1459_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln37_fu_1465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_1491_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln37_1_reg_6888 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_fu_1522_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln671_fu_1528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln671_reg_6903 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln50_fu_1558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln50_reg_6938 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln50_4_fu_1564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln50_4_reg_6943 : STD_LOGIC_VECTOR (7 downto 0);
    signal original_d_V_reg_6948 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_7_fu_1574_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_7_reg_6954 : STD_LOGIC_VECTOR (32 downto 0);
    signal nPatchesAtOriginal_V_reg_6962 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_1656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_6967 : STD_LOGIC_VECTOR (0 downto 0);
    signal notChoppedPatch_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_120_fu_1662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_120_reg_6972 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_67_fu_1676_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_67_reg_6977 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_1702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_6982 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_6988 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_fu_1816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_reg_6993 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_1824_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_6998 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_fu_1828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_reg_7003 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln744_fu_1947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln971_fu_1962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln971_reg_7013 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln971_1_fu_1968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln971_1_reg_7018 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln741_fu_1989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln49_fu_1994_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln49_fu_2000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_7032 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_z_V_1_fu_2026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal select_ln51_2_fu_2034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln49_1_fu_2042_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state27_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln49_1_fu_2048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_7065 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_z_V_3_fu_2074_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal select_ln51_3_fu_2082_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_2_fu_2090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_2_reg_7084 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal p_Result_124_fu_2096_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_124_reg_7089 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_70_reg_7094 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_54_reg_7099 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_3_fu_2330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_3_reg_7104 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln935_fu_2382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln224_fu_2409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_7115 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_fu_2415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_7120 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_2567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln571_fu_2499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_2541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_2511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_2561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_2587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln585_fu_2573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_3_fu_2609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_fu_2613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_3_fu_2617_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state44_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln37_1_fu_2623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_3_fu_2649_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln37_3_reg_7169 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_1_fu_2680_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal cmp_i_i_fu_2686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_7184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_53_reg_7213 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_cast_fu_2745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_v_cast_reg_7227 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_7237 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_11_fu_2753_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_11_reg_7242 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_12_fu_2757_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal lhs_12_reg_7248 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln985_fu_2765_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln985_reg_7254 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_get_index_from_z_fu_1317_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_V_reg_7259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal sext_ln703_12_fu_2771_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_12_reg_7265 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1115_1_fu_2780_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln1115_1_reg_7273 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln933_fu_2784_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln933_reg_7278 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal zext_ln931_fu_2790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln931_reg_7283 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln931_fu_2795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_2801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_7292 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_fu_2807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_reg_7302 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1148_fu_2854_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal mul_ln1148_reg_7306 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_55_reg_7311 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_7317 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_5_fu_2920_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_5_reg_7322 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal z_value_tmp_V_reg_7327 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal add_ln952_fu_2947_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state59_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state60_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln952_fu_2953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln952_reg_7337 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_cast_fu_2959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_7341 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln974_fu_2970_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state62_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state63_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln974_fu_2976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln974_reg_7356 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_cast_fu_2982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast_reg_7360 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln967_fu_3001_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state65_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state66_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln967_fu_3007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln967_reg_7375 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_cast_fu_3013_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_reg_7379 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln987_fu_3025_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state67_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state68_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state69_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state70_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state71_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_state72_pp7_stage0_iter5 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln987_fu_3031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_reg_7394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_reg_7394_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_reg_7394_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_reg_7394_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_reg_7394_pp7_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_V_addr_3_reg_7398 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_3_reg_7398_pp7_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_3_reg_7398_pp7_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_3_reg_7398_pp7_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_3_reg_7398_pp7_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln935_3_fu_3043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_3_reg_7409 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_130_fu_3049_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_130_reg_7414 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_71_fu_3063_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_71_reg_7419 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_4_fu_3089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_4_reg_7424 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_4_fu_3183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_4_reg_7430 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_9_fu_3203_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_9_reg_7435 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_4_fu_3211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_4_reg_7440 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal select_ln935_1_fu_3332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_1_reg_7450 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_7457 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln989_fu_3422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln989_reg_7464 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln571_1_fu_3489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_1_reg_7470 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_3519_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_7476 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_1_fu_3527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_reg_7481 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_1_fu_3533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_1_reg_7486 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln581_fu_3602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_reg_7492 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_3638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_reg_7497 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_6_fu_3644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_6_reg_7503 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln997_fu_3703_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal ap_block_state74_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state75_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state76_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state77_pp8_stage0_iter3 : BOOLEAN;
    signal ap_block_state78_pp8_stage0_iter4 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal icmp_ln997_fu_3709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_reg_7513 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_reg_7513_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_reg_7513_pp8_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_reg_7513_pp8_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_V_addr_4_reg_7517 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_4_reg_7517_pp8_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_4_reg_7517_pp8_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_addr_4_reg_7517_pp8_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln935_4_fu_3720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_4_reg_7523 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_136_fu_3726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_136_reg_7528 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_73_fu_3740_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_73_reg_7533 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_5_fu_3766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_5_reg_7538 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_5_fu_3860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_5_reg_7544 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_11_fu_3880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_11_reg_7549 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_5_fu_3888_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_5_reg_7554 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln935_2_fu_4009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln224_2_fu_4036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_2_reg_7565 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_3_fu_4042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_3_reg_7570 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_2_fu_4126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_2_reg_7575 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_4156_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_reg_7581 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_2_fu_4164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_2_reg_7586 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_2_fu_4170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_2_reg_7591 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln581_1_fu_4236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_reg_7597 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_5_fu_4272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_5_reg_7602 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_11_fu_4278_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_11_reg_7608 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1003_fu_4337_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1003_reg_7613 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal ap_block_state80_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state81_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state82_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal icmp_ln1003_fu_4343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_reg_7618 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_reg_7618_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_cast4_fu_4349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_cast4_reg_7622 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_cast4_reg_7622_pp9_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1013_fu_4458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp10_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp10_stage0 : signal is "none";
    signal ap_block_state84_pp10_stage0_iter0 : BOOLEAN;
    signal ap_block_state85_pp10_stage0_iter1 : BOOLEAN;
    signal ap_block_state86_pp10_stage0_iter2 : BOOLEAN;
    signal ap_block_state87_pp10_stage0_iter3 : BOOLEAN;
    signal ap_block_state88_pp10_stage0_iter4 : BOOLEAN;
    signal ap_block_state89_pp10_stage0_iter5 : BOOLEAN;
    signal ap_block_state90_pp10_stage0_iter6 : BOOLEAN;
    signal ap_block_state91_pp10_stage0_iter7 : BOOLEAN;
    signal ap_block_state92_pp10_stage0_iter8 : BOOLEAN;
    signal ap_block_state93_pp10_stage0_iter9 : BOOLEAN;
    signal ap_block_state94_pp10_stage0_iter10 : BOOLEAN;
    signal ap_block_state95_pp10_stage0_iter11 : BOOLEAN;
    signal ap_block_state96_pp10_stage0_iter12 : BOOLEAN;
    signal ap_block_state97_pp10_stage0_iter13 : BOOLEAN;
    signal ap_block_state98_pp10_stage0_iter14 : BOOLEAN;
    signal ap_block_state99_pp10_stage0_iter15 : BOOLEAN;
    signal ap_block_state100_pp10_stage0_iter16 : BOOLEAN;
    signal ap_block_state101_pp10_stage0_iter17 : BOOLEAN;
    signal ap_block_state102_pp10_stage0_iter18 : BOOLEAN;
    signal ap_block_state103_pp10_stage0_iter19 : BOOLEAN;
    signal ap_block_state104_pp10_stage0_iter20 : BOOLEAN;
    signal ap_block_state105_pp10_stage0_iter21 : BOOLEAN;
    signal ap_block_state106_pp10_stage0_iter22 : BOOLEAN;
    signal ap_block_state107_pp10_stage0_iter23 : BOOLEAN;
    signal ap_block_state108_pp10_stage0_iter24 : BOOLEAN;
    signal ap_block_state109_pp10_stage0_iter25 : BOOLEAN;
    signal ap_block_state110_pp10_stage0_iter26 : BOOLEAN;
    signal ap_block_state111_pp10_stage0_iter27 : BOOLEAN;
    signal ap_block_state112_pp10_stage0_iter28 : BOOLEAN;
    signal ap_block_state113_pp10_stage0_iter29 : BOOLEAN;
    signal ap_block_state114_pp10_stage0_iter30 : BOOLEAN;
    signal ap_block_state115_pp10_stage0_iter31 : BOOLEAN;
    signal ap_block_state116_pp10_stage0_iter32 : BOOLEAN;
    signal ap_block_state117_pp10_stage0_iter33 : BOOLEAN;
    signal ap_block_state118_pp10_stage0_iter34 : BOOLEAN;
    signal ap_block_state119_pp10_stage0_iter35 : BOOLEAN;
    signal ap_block_state120_pp10_stage0_iter36 : BOOLEAN;
    signal ap_block_state121_pp10_stage0_iter37 : BOOLEAN;
    signal ap_block_state122_pp10_stage0_iter38 : BOOLEAN;
    signal ap_block_state123_pp10_stage0_iter39 : BOOLEAN;
    signal ap_block_state124_pp10_stage0_iter40 : BOOLEAN;
    signal ap_block_state125_pp10_stage0_iter41 : BOOLEAN;
    signal ap_block_state126_pp10_stage0_iter42 : BOOLEAN;
    signal ap_block_state127_pp10_stage0_iter43 : BOOLEAN;
    signal ap_block_state128_pp10_stage0_iter44 : BOOLEAN;
    signal ap_block_state129_pp10_stage0_iter45 : BOOLEAN;
    signal ap_block_state130_pp10_stage0_iter46 : BOOLEAN;
    signal ap_block_state131_pp10_stage0_iter47 : BOOLEAN;
    signal ap_block_state132_pp10_stage0_iter48 : BOOLEAN;
    signal ap_block_state133_pp10_stage0_iter49 : BOOLEAN;
    signal ap_block_state134_pp10_stage0_iter50 : BOOLEAN;
    signal ap_block_state135_pp10_stage0_iter51 : BOOLEAN;
    signal ap_block_pp10_stage0_11001 : BOOLEAN;
    signal icmp_ln1013_reg_7637_pp10_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_7637_pp10_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1015_fu_4464_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1015_reg_7641 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp10_iter0 : STD_LOGIC := '0';
    signal trunc_ln1015_cast_fu_4470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter46_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter47_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1015_cast_reg_7647_pp10_iter48_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1014_fu_4475_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter36_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter37_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter38_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter39_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter40_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter41_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter42_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter43_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter44_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter45_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter46_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter47_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter48_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter49_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1014_reg_7657_pp10_iter50_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal this_V_write_assign_reg_7672 : STD_LOGIC_VECTOR (31 downto 0);
    signal tobool_i_i483_fu_4572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_i_i483_reg_7677 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal p_Result_146_fu_4578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_146_reg_7682 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_26_fu_4592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_26_reg_7687 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_75_fu_4600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_75_reg_7694 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1027_fu_4604_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp11_iter0 : STD_LOGIC := '0';
    signal icmp_ln1027_fu_4610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_7705_pp11_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1033_fu_4621_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1033_reg_7714_pp11_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_142_reg_7719 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_17_fu_4633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_17_reg_7725 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_3_fu_4918_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_3_reg_7730 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i545_fu_5184_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i545_reg_7735 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_150_fu_5195_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_150_reg_7740 : STD_LOGIC_VECTOR (30 downto 0);
    signal bitcast_ln351_2_fu_5202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_151_reg_7750 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_3_reg_7755 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_3_fu_5233_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_3_reg_7760 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_3_fu_5237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_3_reg_7765 : STD_LOGIC_VECTOR (0 downto 0);
    signal layerSMin_V_2_fu_5472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp11_iter8 : STD_LOGIC := '0';
    signal layerWithSmallestShift_2_fu_5480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln985_fu_5497_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln985_reg_7782 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal p_Result_153_fu_5528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_153_reg_7800 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_5_fu_5522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_27_fu_5542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_27_reg_7805 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_7_fu_5853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal bitcast_ln351_fu_5869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal icmp_ln1050_fu_5892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_reg_7821 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_1_fu_5898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_1_reg_7826 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal and_ln1050_fu_5908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_bits_1_fu_5945_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal p_Result_158_fu_5968_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_158_reg_7847 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal icmp_ln935_7_fu_5962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_28_fu_5982_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_28_reg_7852 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_8_fu_6293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal bitcast_ln351_3_fu_6309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state155 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state155 : signal is "none";
    signal icmp_ln1055_fu_6332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1055_reg_7868 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1055_1_fu_6338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1055_1_reg_7873 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal and_ln1055_fu_6348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_bits_2_fu_6393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state158 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state158 : signal is "none";
    signal p_Result_163_fu_6416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_163_reg_7894 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal icmp_ln935_8_fu_6410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_29_fu_6430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_29_reg_7899 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_9_fu_6741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal bitcast_ln351_4_fu_6757_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal icmp_ln1060_fu_6780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1060_reg_7915 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1060_1_fu_6786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1060_1_reg_7920 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1060_fu_6796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1060_reg_7925 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state163 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state163 : signal is "none";
    signal z_bits_3_fu_6841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state164 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state164 : signal is "none";
    signal z_top_min_V_10_fu_6871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state165 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state165 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_patch_buffer_add_patch2_fu_1330_ap_ready : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state23 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state27 : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state44 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state59 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state62 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state65 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state67 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter5 : STD_LOGIC := '0';
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state74 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state80 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_block_pp10_stage0_subdone : BOOLEAN;
    signal ap_condition_pp10_exit_iter0_state84 : STD_LOGIC;
    signal ap_enable_reg_pp10_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp10_iter51 : STD_LOGIC := '0';
    signal ap_block_pp11_stage0_subdone : BOOLEAN;
    signal ap_condition_pp11_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp11_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp11_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp11_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp11_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp11_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp11_iter7 : STD_LOGIC := '0';
    signal init_patch_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_ce0 : STD_LOGIC;
    signal init_patch_V_we0 : STD_LOGIC;
    signal init_patch_V_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal init_patch_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_ce1 : STD_LOGIC;
    signal init_patch_V_we1 : STD_LOGIC;
    signal init_patch_V_q1 : STD_LOGIC_VECTOR (95 downto 0);
    signal init_patch_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_1_ce0 : STD_LOGIC;
    signal init_patch_V_1_we0 : STD_LOGIC;
    signal init_patch_V_1_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal init_patch_V_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_1_ce1 : STD_LOGIC;
    signal init_patch_V_1_we1 : STD_LOGIC;
    signal init_patch_V_1_q1 : STD_LOGIC_VECTOR (95 downto 0);
    signal current_z_i_index_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_V_ce0 : STD_LOGIC;
    signal current_z_i_index_V_we0 : STD_LOGIC;
    signal current_z_i_index_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_i_index_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_index_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_ce0 : STD_LOGIC;
    signal new_z_i_index_V_we0 : STD_LOGIC;
    signal new_z_i_index_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_index_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_index_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_V_ce1 : STD_LOGIC;
    signal new_z_i_index_V_we1 : STD_LOGIC;
    signal new_z_i_index_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_index_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_V_ce0 : STD_LOGIC;
    signal new_z_i_V_we0 : STD_LOGIC;
    signal new_z_i_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_atTop_V_ce0 : STD_LOGIC;
    signal new_z_i_atTop_V_we0 : STD_LOGIC;
    signal new_z_i_atTop_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_ap_start : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_ap_done : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_ap_idle : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_ap_ready : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_points_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_points_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_points_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_points_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_z_top : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_leftRight_offset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_i_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getParallelograms_fu_1285_ap_start : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_ap_done : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_ap_idle : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_ap_ready : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_superpoints_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getParallelograms_fu_1285_superpoints_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_superpoints_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getParallelograms_fu_1285_superpoints_ce1 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_pSlope_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_pSlope_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_pSlope_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_pSlope_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jR_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jR_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jR_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jR_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jR_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jR_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jL_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jL_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomL_jL_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jL_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jL_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_shadow_bottomR_jL_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_1285_z1_min_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_z1_min_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_z1_min_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_z1_min_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_getParallelograms_fu_1285_z1_max_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_1285_z1_max_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_z1_max_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_1285_z1_max_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_index_from_z_fu_1317_ap_start : STD_LOGIC;
    signal grp_get_index_from_z_fu_1317_ap_done : STD_LOGIC;
    signal grp_get_index_from_z_fu_1317_ap_idle : STD_LOGIC;
    signal grp_get_index_from_z_fu_1317_ap_ready : STD_LOGIC;
    signal grp_get_index_from_z_fu_1317_points_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_get_index_from_z_fu_1317_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_1317_num_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_1317_num_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_1317_layer : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_1317_z_value : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_ap_start : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_ap_idle : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_new_patch_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_new_patch_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_new_patch_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_new_patch_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_new_patch_ce1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_new_patch_q1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_patch_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_ap_start : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_ap_done : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_ap_idle : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_ap_ready : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_z1_min_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_z1_min_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_z1_max_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_z1_max_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_a_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_a_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_a_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_a_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_a_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_a_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_a_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_a_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_b_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_b_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_b_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_b_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_b_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_b_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_b_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_b_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_c_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_c_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_c_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_c_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_c_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_c_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_c_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_c_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_d_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_d_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_d_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_d_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_d_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_d_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_d_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_d_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_squareAcceptance_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_squareAcceptance_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_squareAcceptance_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_squareAcceptance_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_flatTop_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_flatTop_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_flatTop_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_flatTop_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_flatBottom_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_flatBottom_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_flatBottom_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_flatBottom_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_triangleAcceptance_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_1341_triangleAcceptance_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_triangleAcceptance_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_1341_triangleAcceptance_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_layer_phi_fu_833_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal rhs_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_V_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_layer_1_phi_fu_1000_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal z_top_min_V_11_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal previous_z_top_min_V_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_1042 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal current_z_top_index_V_1_fu_2964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_V_2_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_V_3_fu_2994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_V_5_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_V_4_fu_2987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_12_phi_fu_1133_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal ap_phi_mux_i_13_phi_fu_1145_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp10_stage0 : BOOLEAN;
    signal dc_1_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_V_13_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_2_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_V_14_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_3_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_V_15_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_1250_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getParallelograms_fu_1285_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_get_index_from_z_fu_1317_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_patch_buffer_add_patch2_fu_1330_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_get_acceptanceCorners_fu_1341_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal zext_ln40_1_fu_1517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_23_fu_2015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_25_fu_2063_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_3_fu_2675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln875_fu_2691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal i_10_cast_fu_3037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal i_11_cast_fu_3715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal zext_ln1004_fu_4448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1014_fu_4568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_cast_fu_4616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp11_stage0 : BOOLEAN;
    signal zext_ln1048_fu_5504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1052_fu_5940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1057_fu_6388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1062_fu_6836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal shl_ln731_fu_2940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_1_fu_3018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_9_fu_3694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_bits_fu_4453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1390_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1393_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_1471_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln37_fu_1483_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_85_fu_1499_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_fu_1507_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_1511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_fu_1546_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_fu_1538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln50_fu_1554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_7_fu_1574_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_fu_1570_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_23_fu_1578_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1118_fu_1584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_1596_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal shl_ln_fu_1588_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln1118_2_fu_1604_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal lhs_7_fu_1614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_1608_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal lhs_7_fu_1614_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_9_fu_1622_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1494_fu_1638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1494_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_1656_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_120_fu_1662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_1670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_1670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_67_fu_1676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_121_fu_1684_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_1714_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_1730_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_1734_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_1740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_1744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_fu_1750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_12_fu_1756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_fu_1762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_1774_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_122_fu_1788_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_1724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_1768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_1808_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_6_fu_1802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal projectionOfCornerToBeam_V_fu_1628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln959_fu_1837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_10_fu_1834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_fu_1842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_fu_1852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_fu_1861_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_fu_1846_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_1867_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_1874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_35_fu_1877_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_68_fu_1883_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_1897_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_1913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_1905_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1918_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_1893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1924_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_123_fu_1931_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_1943_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_1952_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln971_fu_1974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln971_fu_1978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln935_fu_1984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_22_fu_2006_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln50_5_fu_2010_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_6_fu_2020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_24_fu_2054_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln50_6_fu_2058_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_7_fu_2068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_10_fu_2104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_69_fu_2110_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_125_fu_2118_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_4_fu_2128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_3_fu_2136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_4_fu_2142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_2148_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_3_fu_2164_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_3_fu_2168_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_3_fu_2174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_3_fu_2178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_3_fu_2184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_fu_2190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_7_fu_2196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_2208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_126_fu_2222_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_3_fu_2216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_3_fu_2246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_11_fu_2242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_5_fu_2252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_3_fu_2158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_3_fu_2202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_3_fu_2270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_3_fu_2276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_3_fu_2230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_3_fu_2262_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_9_fu_2236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_3_fu_2280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_3_fu_2256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_7_fu_2286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_39_fu_2294_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_3_fu_2302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_40_fu_2306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_3_fu_2344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_3_fu_2337_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_3_fu_2349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_3_fu_2334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_2355_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_127_fu_2362_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_5_fu_2374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_2_fu_2378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln224_fu_2391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_2395_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln224_fu_2405_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln224_fu_2421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_fu_2425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln702_fu_2431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_2435_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_2455_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_2469_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_129_fu_2473_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_2481_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_128_fu_2447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_5_fu_2485_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_fu_2443_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_2465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_2505_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_2517_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_2523_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_2529_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_6_fu_2491_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_51_fu_2551_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln602_fu_2547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_fu_2537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_2579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_2595_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_fu_2599_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_2603_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln39_1_fu_2635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_1_fu_2629_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln37_2_fu_2641_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_86_fu_2657_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_2_fu_2665_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_1_fu_2669_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln703_3_fu_2697_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_4_fu_2706_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_5_fu_2709_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_2701_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_10_fu_2713_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1495_8_fu_2719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln703_fu_2725_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal white_space_height_V_fu_2733_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln984_fu_2749_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_24_fu_2775_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln731_fu_2813_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal radius_k_V_fu_2817_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_k_V_2_fu_2825_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1193_fu_2832_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_11_fu_2836_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_87_fu_2842_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1148_fu_2854_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln1148_fu_2878_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal tmp_56_fu_2883_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln1148_fu_2893_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1148_2_fu_2899_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1148_2_fu_2903_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln1148_2_fu_2909_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_5_fu_2920_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_5_fu_2920_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_13_fu_2925_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_13_fu_3057_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_131_fu_3071_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_5_fu_3081_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_5_fu_3095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_3101_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_4_fu_3117_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_4_fu_3121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_4_fu_3127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_4_fu_3131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_4_fu_3137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_13_fu_3143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_11_fu_3149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_3161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_132_fu_3175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_4_fu_3169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_4_fu_3111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_4_fu_3155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_4_fu_3195_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_13_fu_3189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_4_fu_3218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_12_fu_3215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_6_fu_3223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_4_fu_3233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_4_fu_3238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_4_fu_3242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_4_fu_3227_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_43_fu_3248_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_4_fu_3255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_44_fu_3258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_72_fu_3264_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_63_fu_3278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_4_fu_3294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_4_fu_3286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_4_fu_3299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_4_fu_3274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_3305_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_133_fu_3312_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_6_fu_3324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_3_fu_3328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln200_fu_3340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln200_1_fu_3357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_3343_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln200_fu_3353_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln200_2_fu_3380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_fu_3374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_3360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln200_1_fu_3370_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln200_4_fu_3398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_3_fu_3392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln200_fu_3386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln200_1_fu_3404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln200_fu_3410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln200_1_fu_3416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ireg_1_fu_3429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_1_fu_3445_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_1_fu_3459_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_135_fu_3463_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_1_fu_3471_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_134_fu_3437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_8_fu_3475_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_1_fu_3433_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_1_fu_3455_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_3495_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_3501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_3507_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_3513_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_9_fu_3481_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_63_fu_3537_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln586_4_fu_3553_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_1_fu_3557_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_3561_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln702_3_fu_3571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_3574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_3590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_3596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_3608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_3620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_3547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_3626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_3632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_3614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_1_fu_3582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_5_fu_3567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_1_fu_3652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln571_fu_3660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_3655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_3665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_3670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_4_fu_3690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_8_fu_3684_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_7_fu_3677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_15_fu_3734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_137_fu_3748_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_6_fu_3758_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_6_fu_3772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_3778_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_5_fu_3794_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_5_fu_3798_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_5_fu_3804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_5_fu_3808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_5_fu_3814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_14_fu_3820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_14_fu_3826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_3838_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_138_fu_3852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_5_fu_3846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_5_fu_3788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_5_fu_3832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_5_fu_3872_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_15_fu_3866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_5_fu_3895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_13_fu_3892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_7_fu_3900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_5_fu_3910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_5_fu_3915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_5_fu_3919_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_5_fu_3904_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_47_fu_3925_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_5_fu_3932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_48_fu_3935_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_74_fu_3941_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_70_fu_3955_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_5_fu_3971_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_5_fu_3963_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_5_fu_3976_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_5_fu_3951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_3982_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_139_fu_3989_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_8_fu_4001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_4_fu_4005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln224_1_fu_4018_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_4022_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln224_1_fu_4032_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln224_1_fu_4048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_1_fu_4052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln702_2_fu_4058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_2_fu_4062_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_2_fu_4082_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_2_fu_4096_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_141_fu_4100_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_2_fu_4108_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_140_fu_4074_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_11_fu_4112_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_2_fu_4070_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_2_fu_4092_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_4132_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_2_fu_4138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_2_fu_4144_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_2_fu_4150_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_12_fu_4118_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_70_fu_4174_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln586_6_fu_4190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_2_fu_4194_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_2_fu_4198_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_71_fu_4208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_fu_4224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_4230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_2_fu_4242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_1_fu_4254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_2_fu_4184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_4260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_4266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_2_fu_4248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_2_fu_4216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_7_fu_4204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_2_fu_4286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln571_1_fu_4294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_2_fu_4289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_2_fu_4299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_10_fu_4304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_6_fu_4324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_13_fu_4318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_12_fu_4311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln851_fu_4372_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_7_fu_4354_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln851_fu_4376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_14_fu_4382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_74_fu_4364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_4388_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_15_fu_4396_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1004_1_fu_4412_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln5_fu_4404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1004_fu_4420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_4426_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1004_fu_4436_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_88_fu_4440_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln731_1_fu_4486_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln870_1_fu_4481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal radius_j_V_fu_4490_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_j_V_4_fu_4498_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1193_1_fu_4506_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_16_fu_4510_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_4520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_13_fu_4530_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_25_fu_4534_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal radii_leverArm_fu_4526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_fu_4547_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_18_fu_4553_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal sub_i_i487_fu_4586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_76_fu_4645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_143_fu_4651_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_7_fu_4661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_6_fu_4669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_7_fu_4675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_4681_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_6_fu_4697_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_6_fu_4701_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_6_fu_4707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_6_fu_4711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_6_fu_4717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_15_fu_4723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_16_fu_4729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_4741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_144_fu_4755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_6_fu_4749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_6_fu_4779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_14_fu_4775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_8_fu_4785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_6_fu_4691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_6_fu_4735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_6_fu_4803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_6_fu_4809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_6_fu_4763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_6_fu_4795_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_17_fu_4769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_6_fu_4813_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_6_fu_4789_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_13_fu_4819_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_51_fu_4827_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_6_fu_4835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_52_fu_4839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_77_fu_4845_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_80_fu_4859_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_6_fu_4875_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_6_fu_4879_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_6_fu_4867_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_6_fu_4885_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_6_fu_4855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_4891_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_145_fu_4898_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_9_fu_4910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_6_fu_4639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln744_5_fu_4914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_147_fu_4926_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_8_fu_4935_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_7_fu_4943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_8_fu_4949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_4955_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_7_fu_4971_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_7_fu_4975_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_7_fu_4981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_7_fu_4985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_7_fu_4991_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_16_fu_4997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_22_fu_5003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_5014_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_148_fu_5028_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_7_fu_5022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_7_fu_5047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_9_fu_5053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_7_fu_4965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_7_fu_5008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_7_fu_5070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_7_fu_5076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_7_fu_5035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_7_fu_5062_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_18_fu_5041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_7_fu_5080_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_7_fu_5057_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_15_fu_5085_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_55_fu_5093_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_7_fu_5101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_56_fu_5105_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_78_fu_5111_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_85_fu_5125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_7_fu_5141_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_7_fu_5145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_7_fu_5133_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_7_fu_5151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_7_fu_5121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_5157_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_149_fu_5164_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_10_fu_5176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_6_fu_5180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_5191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln368_2_fu_5199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ireg_3_fu_5207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln555_3_fu_5211_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_152_fu_5246_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_3_fu_5253_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_14_fu_5257_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln455_3_fu_5243_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_3_fu_5270_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_3_fu_5276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_3_fu_5282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_3_fu_5288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_3_fu_5294_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_15_fu_5263_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_91_fu_5322_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln586_8_fu_5338_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_3_fu_5342_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_3_fu_5346_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln583_3_fu_5312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_3_fu_5302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln582_3_fu_5306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_2_fu_5362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_3_fu_5367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_2_fu_5381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_2_fu_5386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_2_fu_5392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_3_fu_5316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_3_fu_5398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_9_fu_5352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln582_fu_5373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln581_2_fu_5412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_3_fu_5332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_2_fu_5418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_3_fu_5424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_3_fu_5356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_fu_5404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln585_fu_5438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_4_fu_5444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln585_fu_5450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_5430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerSMin_V_1_fu_5455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_9_fu_5463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1033_fu_5469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln200_fu_5488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln985_fu_5493_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_6_fu_5509_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_6_fu_5509_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_26_fu_5513_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln935_5_fu_5522_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1193_fu_5518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_20_fu_5536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln937_fu_5550_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_91_fu_5553_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_154_fu_5563_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_5571_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_9_fu_5579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_8_fu_5583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_9_fu_5589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_5595_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_8_fu_5611_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_8_fu_5615_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_8_fu_5621_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln947_8_fu_5625_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln949_fu_5637_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln949_8_fu_5641_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln949_fu_5647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_93_fu_5631_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln949_1_fu_5656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_8_fu_5651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_9_fu_5660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_8_fu_5666_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_94_fu_5680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_155_fu_5694_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_8_fu_5688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_fu_5714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_fu_5720_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln946_8_fu_5605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_8_fu_5674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_fu_5738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_5744_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln954_fu_5702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_8_fu_5730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_19_fu_5708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln954_fu_5748_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln955_fu_5724_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_58_fu_5762_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln954_fu_5754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln951_fu_5770_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln961_8_fu_5774_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_59_fu_5778_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_9_fu_5784_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_95_fu_5798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_8_fu_5814_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_8_fu_5818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_8_fu_5806_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_8_fu_5824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln951_1_fu_5794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_5830_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_156_fu_5837_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_12_fu_5849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_2_fu_5857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_157_fu_5861_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_5865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1050_fu_5874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_5878_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1050_fu_5888_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1050_fu_5904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_fu_5914_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1052_fu_5923_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1052_fu_5929_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_fu_5932_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_8_fu_5949_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_27_fu_5953_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1193_1_fu_5958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_22_fu_5976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln937_1_fu_5990_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_101_fu_5993_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_159_fu_6003_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_6011_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_10_fu_6019_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_9_fu_6023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_10_fu_6029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_6035_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_9_fu_6051_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_9_fu_6055_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_9_fu_6061_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln947_9_fu_6065_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln949_1_fu_6077_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln949_9_fu_6081_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln949_2_fu_6087_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_103_fu_6071_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln949_3_fu_6096_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_10_fu_6091_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_10_fu_6100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_s_fu_6106_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_99_fu_6120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_160_fu_6134_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_9_fu_6128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_1_fu_6154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_1_fu_6160_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln946_9_fu_6045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_9_fu_6114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_1_fu_6178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_1_fu_6184_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln954_1_fu_6142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_9_fu_6170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_20_fu_6148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln954_1_fu_6188_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln955_1_fu_6164_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_61_fu_6202_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln954_2_fu_6194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln951_2_fu_6210_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln961_9_fu_6214_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_62_fu_6218_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_s_fu_6224_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_105_fu_6238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_9_fu_6254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_9_fu_6258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_9_fu_6246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_9_fu_6264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln951_3_fu_6234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_6270_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_161_fu_6277_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_13_fu_6289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_3_fu_6297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_162_fu_6301_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_3_fu_6305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1055_fu_6314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_6318_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1055_fu_6328_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1055_fu_6344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln6_fu_6354_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1057_fu_6361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln4_fu_6367_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1057_fu_6377_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_90_fu_6380_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_9_fu_6397_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_28_fu_6401_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1193_2_fu_6406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_24_fu_6424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln937_2_fu_6438_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_111_fu_6441_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_164_fu_6451_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_6459_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_11_fu_6467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_10_fu_6471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_11_fu_6477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_6483_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_10_fu_6499_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_10_fu_6503_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_10_fu_6509_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln947_10_fu_6513_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln949_2_fu_6525_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln949_10_fu_6529_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln949_4_fu_6535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_113_fu_6519_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln949_5_fu_6544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_12_fu_6539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_11_fu_6548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_1_fu_6554_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_104_fu_6568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_165_fu_6582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_10_fu_6576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_2_fu_6602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_2_fu_6608_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln946_10_fu_6493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_10_fu_6562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_2_fu_6626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_2_fu_6632_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln954_2_fu_6590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_10_fu_6618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_21_fu_6596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln954_2_fu_6636_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln955_2_fu_6612_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_64_fu_6650_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln954_4_fu_6642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln951_4_fu_6658_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln961_10_fu_6662_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_65_fu_6666_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_1_fu_6672_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_115_fu_6686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_10_fu_6702_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_10_fu_6706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_10_fu_6694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_10_fu_6712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln951_5_fu_6682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_6718_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_166_fu_6725_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_14_fu_6737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_4_fu_6745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_167_fu_6749_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_4_fu_6753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1060_fu_6762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_6766_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1060_fu_6776_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1060_fu_6792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln7_fu_6802_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1062_fu_6809_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln5_fu_6815_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1062_fu_6825_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_fu_6828_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_10_fu_6845_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_29_fu_6849_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_9_fu_6858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_6858_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_fu_6863_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1393_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp7_stage0_00001 : BOOLEAN;
    signal ap_block_pp8_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (87 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal ap_idle_pp10 : STD_LOGIC;
    signal ap_enable_pp10 : STD_LOGIC;
    signal ap_idle_pp11 : STD_LOGIC;
    signal ap_enable_pp11 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_alignedtoline_per_layer_loop3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce0 : OUT STD_LOGIC;
        points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce1 : OUT STD_LOGIC;
        points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
        num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce0 : OUT STD_LOGIC;
        num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce1 : OUT STD_LOGIC;
        num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight_offset : IN STD_LOGIC_VECTOR (0 downto 0);
        init_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        init_patch_ce0 : OUT STD_LOGIC;
        init_patch_we0 : OUT STD_LOGIC;
        init_patch_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
        init_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        init_patch_ce1 : OUT STD_LOGIC;
        init_patch_we1 : OUT STD_LOGIC;
        init_patch_d1 : OUT STD_LOGIC_VECTOR (95 downto 0);
        i_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component system_top_getParallelograms IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        superpoints_ce0 : OUT STD_LOGIC;
        superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        superpoints_ce1 : OUT STD_LOGIC;
        superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        superpoints_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        pSlope_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pSlope_ce0 : OUT STD_LOGIC;
        pSlope_we0 : OUT STD_LOGIC;
        pSlope_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pSlope_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jR_we0 : OUT STD_LOGIC;
        shadow_bottomL_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jR_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jR_we0 : OUT STD_LOGIC;
        shadow_bottomR_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jR_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jL_we0 : OUT STD_LOGIC;
        shadow_bottomL_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jL_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jL_we0 : OUT STD_LOGIC;
        shadow_bottomR_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jL_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_min_ce0 : OUT STD_LOGIC;
        z1_min_we0 : OUT STD_LOGIC;
        z1_min_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        z1_min_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_max_ce0 : OUT STD_LOGIC;
        z1_max_we0 : OUT STD_LOGIC;
        z1_max_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        z1_max_offset : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component system_top_get_index_from_z IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce0 : OUT STD_LOGIC;
        points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce0 : OUT STD_LOGIC;
        num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        z_value : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_patch_buffer_add_patch2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        new_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        new_patch_ce0 : OUT STD_LOGIC;
        new_patch_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
        new_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        new_patch_ce1 : OUT STD_LOGIC;
        new_patch_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
        patch_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patch_buffer_ce0 : OUT STD_LOGIC;
        patch_buffer_we0 : OUT STD_LOGIC;
        patch_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patch_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patch_buffer_ce1 : OUT STD_LOGIC;
        patch_buffer_we1 : OUT STD_LOGIC;
        patch_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        latest_patch_index_constprop_i : IN STD_LOGIC_VECTOR (1 downto 0);
        latest_patch_index_constprop_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        latest_patch_index_constprop_o_ap_vld : OUT STD_LOGIC;
        num_patches_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
        num_patches_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_patches_constprop_o_ap_vld : OUT STD_LOGIC );
    end component;


    component system_top_get_acceptanceCorners IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jR_ce1 : OUT STD_LOGIC;
        shadow_bottomL_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jR_ce1 : OUT STD_LOGIC;
        shadow_bottomR_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jL_ce1 : OUT STD_LOGIC;
        shadow_bottomL_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jL_ce1 : OUT STD_LOGIC;
        shadow_bottomR_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_min_ce0 : OUT STD_LOGIC;
        z1_min_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_max_ce0 : OUT STD_LOGIC;
        z1_max_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        a_corner_0_ce0 : OUT STD_LOGIC;
        a_corner_0_we0 : OUT STD_LOGIC;
        a_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        a_corner_1_ce0 : OUT STD_LOGIC;
        a_corner_1_we0 : OUT STD_LOGIC;
        a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        b_corner_0_ce0 : OUT STD_LOGIC;
        b_corner_0_we0 : OUT STD_LOGIC;
        b_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        b_corner_1_ce0 : OUT STD_LOGIC;
        b_corner_1_we0 : OUT STD_LOGIC;
        b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        c_corner_0_ce0 : OUT STD_LOGIC;
        c_corner_0_we0 : OUT STD_LOGIC;
        c_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        c_corner_1_ce0 : OUT STD_LOGIC;
        c_corner_1_we0 : OUT STD_LOGIC;
        c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        d_corner_0_ce0 : OUT STD_LOGIC;
        d_corner_0_we0 : OUT STD_LOGIC;
        d_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        d_corner_1_ce0 : OUT STD_LOGIC;
        d_corner_1_we0 : OUT STD_LOGIC;
        d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        squareAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        squareAcceptance_ce0 : OUT STD_LOGIC;
        squareAcceptance_we0 : OUT STD_LOGIC;
        squareAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        flatTop_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        flatTop_ce0 : OUT STD_LOGIC;
        flatTop_we0 : OUT STD_LOGIC;
        flatTop_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        flatBottom_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        flatBottom_ce0 : OUT STD_LOGIC;
        flatBottom_we0 : OUT STD_LOGIC;
        flatBottom_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        triangleAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        triangleAcceptance_ce0 : OUT STD_LOGIC;
        triangleAcceptance_we0 : OUT STD_LOGIC;
        triangleAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        latest_patch_index_constprop : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component system_top_fsub_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_uitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component system_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component system_top_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component system_top_mul_46s_55ns_100_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (45 downto 0);
        din1 : IN STD_LOGIC_VECTOR (54 downto 0);
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component system_top_mul_33s_24s_52_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component system_top_sdiv_46ns_26s_32_50_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (45 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_mul_33s_32s_52_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component system_top_mul_33s_32s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component system_top_alignedtoline_per_layer_loop3_get_radiiradii IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_p_shadowquilt_main_loop_make_verticle_strip_init_patch_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (95 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (95 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (95 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_p_shadowquilt_main_loop_make_verticle_strip_new_z_i_index_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    get_radiiradii_U : component system_top_alignedtoline_per_layer_loop3_get_radiiradii
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => get_radiiradii_address0,
        ce0 => get_radiiradii_ce0,
        q0 => get_radiiradii_q0);

    init_patch_V_U : component system_top_p_shadowquilt_main_loop_make_verticle_strip_init_patch_V
    generic map (
        DataWidth => 96,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => init_patch_V_address0,
        ce0 => init_patch_V_ce0,
        we0 => init_patch_V_we0,
        d0 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d0,
        q0 => init_patch_V_q0,
        address1 => init_patch_V_address1,
        ce1 => init_patch_V_ce1,
        we1 => init_patch_V_we1,
        d1 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d1,
        q1 => init_patch_V_q1);

    init_patch_V_1_U : component system_top_p_shadowquilt_main_loop_make_verticle_strip_init_patch_V
    generic map (
        DataWidth => 96,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => init_patch_V_1_address0,
        ce0 => init_patch_V_1_ce0,
        we0 => init_patch_V_1_we0,
        d0 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d0,
        q0 => init_patch_V_1_q0,
        address1 => init_patch_V_1_address1,
        ce1 => init_patch_V_1_ce1,
        we1 => init_patch_V_1_we1,
        d1 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d1,
        q1 => init_patch_V_1_q1);

    current_z_i_index_V_U : component system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_V_address0,
        ce0 => current_z_i_index_V_ce0,
        we0 => current_z_i_index_V_we0,
        d0 => current_z_i_index_V_d0,
        q0 => current_z_i_index_V_q0);

    new_z_i_index_V_U : component system_top_p_shadowquilt_main_loop_make_verticle_strip_new_z_i_index_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_V_address0,
        ce0 => new_z_i_index_V_ce0,
        we0 => new_z_i_index_V_we0,
        d0 => new_z_i_index_V_d0,
        q0 => new_z_i_index_V_q0,
        address1 => new_z_i_index_V_address1,
        ce1 => new_z_i_index_V_ce1,
        we1 => new_z_i_index_V_we1,
        d1 => new_z_i_index_V_d1,
        q1 => new_z_i_index_V_q1);

    new_z_i_V_U : component system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_V_address0,
        ce0 => new_z_i_V_ce0,
        we0 => new_z_i_V_we0,
        d0 => new_z_i_V_d0,
        q0 => new_z_i_V_q0);

    new_z_i_atTop_V_U : component system_top_p_shadowquilt_main_loop_make_verticle_strip_current_z_i_index_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_atTop_V_address0,
        ce0 => new_z_i_atTop_V_ce0,
        we0 => new_z_i_atTop_V_we0,
        d0 => new_z_i_atTop_V_d0,
        q0 => new_z_i_atTop_V_q0);

    grp_alignedtoline_per_layer_loop3_fu_1250 : component system_top_alignedtoline_per_layer_loop3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_alignedtoline_per_layer_loop3_fu_1250_ap_start,
        ap_done => grp_alignedtoline_per_layer_loop3_fu_1250_ap_done,
        ap_idle => grp_alignedtoline_per_layer_loop3_fu_1250_ap_idle,
        ap_ready => grp_alignedtoline_per_layer_loop3_fu_1250_ap_ready,
        points_address0 => grp_alignedtoline_per_layer_loop3_fu_1250_points_address0,
        points_ce0 => grp_alignedtoline_per_layer_loop3_fu_1250_points_ce0,
        points_q0 => points_q0,
        points_address1 => grp_alignedtoline_per_layer_loop3_fu_1250_points_address1,
        points_ce1 => grp_alignedtoline_per_layer_loop3_fu_1250_points_ce1,
        points_q1 => points_q1,
        num_points_address0 => grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address0,
        num_points_ce0 => grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce0,
        num_points_q0 => num_points_q0,
        num_points_address1 => grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address1,
        num_points_ce1 => grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce1,
        num_points_q1 => num_points_q1,
        p_read => grp_alignedtoline_per_layer_loop3_fu_1250_p_read,
        z_top => grp_alignedtoline_per_layer_loop3_fu_1250_z_top,
        leftRight_offset => grp_alignedtoline_per_layer_loop3_fu_1250_leftRight_offset,
        init_patch_address0 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address0,
        init_patch_ce0 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce0,
        init_patch_we0 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we0,
        init_patch_d0 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d0,
        init_patch_address1 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address1,
        init_patch_ce1 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce1,
        init_patch_we1 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we1,
        init_patch_d1 => grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_d1,
        i_offset => grp_alignedtoline_per_layer_loop3_fu_1250_i_offset);

    grp_getParallelograms_fu_1285 : component system_top_getParallelograms
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getParallelograms_fu_1285_ap_start,
        ap_done => grp_getParallelograms_fu_1285_ap_done,
        ap_idle => grp_getParallelograms_fu_1285_ap_idle,
        ap_ready => grp_getParallelograms_fu_1285_ap_ready,
        superpoints_address0 => grp_getParallelograms_fu_1285_superpoints_address0,
        superpoints_ce0 => grp_getParallelograms_fu_1285_superpoints_ce0,
        superpoints_q0 => patch_buffer_q0,
        superpoints_address1 => grp_getParallelograms_fu_1285_superpoints_address1,
        superpoints_ce1 => grp_getParallelograms_fu_1285_superpoints_ce1,
        superpoints_q1 => patch_buffer_q1,
        superpoints_offset => reg_1437,
        pSlope_address0 => grp_getParallelograms_fu_1285_pSlope_address0,
        pSlope_ce0 => grp_getParallelograms_fu_1285_pSlope_ce0,
        pSlope_we0 => grp_getParallelograms_fu_1285_pSlope_we0,
        pSlope_d0 => grp_getParallelograms_fu_1285_pSlope_d0,
        pSlope_offset => reg_1437,
        shadow_bottomL_jR_address0 => grp_getParallelograms_fu_1285_shadow_bottomL_jR_address0,
        shadow_bottomL_jR_ce0 => grp_getParallelograms_fu_1285_shadow_bottomL_jR_ce0,
        shadow_bottomL_jR_we0 => grp_getParallelograms_fu_1285_shadow_bottomL_jR_we0,
        shadow_bottomL_jR_d0 => grp_getParallelograms_fu_1285_shadow_bottomL_jR_d0,
        shadow_bottomL_jR_offset => reg_1437,
        shadow_bottomR_jR_address0 => grp_getParallelograms_fu_1285_shadow_bottomR_jR_address0,
        shadow_bottomR_jR_ce0 => grp_getParallelograms_fu_1285_shadow_bottomR_jR_ce0,
        shadow_bottomR_jR_we0 => grp_getParallelograms_fu_1285_shadow_bottomR_jR_we0,
        shadow_bottomR_jR_d0 => grp_getParallelograms_fu_1285_shadow_bottomR_jR_d0,
        shadow_bottomR_jR_offset => reg_1437,
        shadow_bottomL_jL_address0 => grp_getParallelograms_fu_1285_shadow_bottomL_jL_address0,
        shadow_bottomL_jL_ce0 => grp_getParallelograms_fu_1285_shadow_bottomL_jL_ce0,
        shadow_bottomL_jL_we0 => grp_getParallelograms_fu_1285_shadow_bottomL_jL_we0,
        shadow_bottomL_jL_d0 => grp_getParallelograms_fu_1285_shadow_bottomL_jL_d0,
        shadow_bottomL_jL_offset => reg_1437,
        shadow_bottomR_jL_address0 => grp_getParallelograms_fu_1285_shadow_bottomR_jL_address0,
        shadow_bottomR_jL_ce0 => grp_getParallelograms_fu_1285_shadow_bottomR_jL_ce0,
        shadow_bottomR_jL_we0 => grp_getParallelograms_fu_1285_shadow_bottomR_jL_we0,
        shadow_bottomR_jL_d0 => grp_getParallelograms_fu_1285_shadow_bottomR_jL_d0,
        shadow_bottomR_jL_offset => reg_1437,
        z1_min_address0 => grp_getParallelograms_fu_1285_z1_min_address0,
        z1_min_ce0 => grp_getParallelograms_fu_1285_z1_min_ce0,
        z1_min_we0 => grp_getParallelograms_fu_1285_z1_min_we0,
        z1_min_d0 => grp_getParallelograms_fu_1285_z1_min_d0,
        z1_min_offset => reg_1437,
        z1_max_address0 => grp_getParallelograms_fu_1285_z1_max_address0,
        z1_max_ce0 => grp_getParallelograms_fu_1285_z1_max_ce0,
        z1_max_we0 => grp_getParallelograms_fu_1285_z1_max_we0,
        z1_max_d0 => grp_getParallelograms_fu_1285_z1_max_d0,
        z1_max_offset => reg_1437);

    grp_get_index_from_z_fu_1317 : component system_top_get_index_from_z
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_index_from_z_fu_1317_ap_start,
        ap_done => grp_get_index_from_z_fu_1317_ap_done,
        ap_idle => grp_get_index_from_z_fu_1317_ap_idle,
        ap_ready => grp_get_index_from_z_fu_1317_ap_ready,
        points_address0 => grp_get_index_from_z_fu_1317_points_address0,
        points_ce0 => grp_get_index_from_z_fu_1317_points_ce0,
        points_q0 => points_q0,
        num_points_address0 => grp_get_index_from_z_fu_1317_num_points_address0,
        num_points_ce0 => grp_get_index_from_z_fu_1317_num_points_ce0,
        num_points_q0 => num_points_q0,
        layer => grp_get_index_from_z_fu_1317_layer,
        z_value => grp_get_index_from_z_fu_1317_z_value,
        ap_return => grp_get_index_from_z_fu_1317_ap_return);

    grp_patch_buffer_add_patch2_fu_1330 : component system_top_patch_buffer_add_patch2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_patch_buffer_add_patch2_fu_1330_ap_start,
        ap_done => grp_patch_buffer_add_patch2_fu_1330_ap_done,
        ap_idle => grp_patch_buffer_add_patch2_fu_1330_ap_idle,
        ap_ready => grp_patch_buffer_add_patch2_fu_1330_ap_ready,
        new_patch_address0 => grp_patch_buffer_add_patch2_fu_1330_new_patch_address0,
        new_patch_ce0 => grp_patch_buffer_add_patch2_fu_1330_new_patch_ce0,
        new_patch_q0 => grp_patch_buffer_add_patch2_fu_1330_new_patch_q0,
        new_patch_address1 => grp_patch_buffer_add_patch2_fu_1330_new_patch_address1,
        new_patch_ce1 => grp_patch_buffer_add_patch2_fu_1330_new_patch_ce1,
        new_patch_q1 => grp_patch_buffer_add_patch2_fu_1330_new_patch_q1,
        patch_buffer_address0 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address0,
        patch_buffer_ce0 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce0,
        patch_buffer_we0 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we0,
        patch_buffer_d0 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_d0,
        patch_buffer_address1 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address1,
        patch_buffer_ce1 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce1,
        patch_buffer_we1 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we1,
        patch_buffer_d1 => grp_patch_buffer_add_patch2_fu_1330_patch_buffer_d1,
        latest_patch_index_constprop_i => latest_patch_index_constprop_i,
        latest_patch_index_constprop_o => grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o,
        latest_patch_index_constprop_o_ap_vld => grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld,
        num_patches_constprop_i => num_patches_constprop_i,
        num_patches_constprop_o => grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o,
        num_patches_constprop_o_ap_vld => grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld);

    grp_get_acceptanceCorners_fu_1341 : component system_top_get_acceptanceCorners
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_acceptanceCorners_fu_1341_ap_start,
        ap_done => grp_get_acceptanceCorners_fu_1341_ap_done,
        ap_idle => grp_get_acceptanceCorners_fu_1341_ap_idle,
        ap_ready => grp_get_acceptanceCorners_fu_1341_ap_ready,
        shadow_bottomL_jR_address0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address0,
        shadow_bottomL_jR_ce0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce0,
        shadow_bottomL_jR_q0 => shadow_bottomL_jR_q0,
        shadow_bottomL_jR_address1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address1,
        shadow_bottomL_jR_ce1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce1,
        shadow_bottomL_jR_q1 => shadow_bottomL_jR_q1,
        shadow_bottomR_jR_address0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address0,
        shadow_bottomR_jR_ce0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce0,
        shadow_bottomR_jR_q0 => shadow_bottomR_jR_q0,
        shadow_bottomR_jR_address1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address1,
        shadow_bottomR_jR_ce1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce1,
        shadow_bottomR_jR_q1 => shadow_bottomR_jR_q1,
        shadow_bottomL_jL_address0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address0,
        shadow_bottomL_jL_ce0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce0,
        shadow_bottomL_jL_q0 => shadow_bottomL_jL_q0,
        shadow_bottomL_jL_address1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address1,
        shadow_bottomL_jL_ce1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce1,
        shadow_bottomL_jL_q1 => shadow_bottomL_jL_q1,
        shadow_bottomR_jL_address0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address0,
        shadow_bottomR_jL_ce0 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce0,
        shadow_bottomR_jL_q0 => shadow_bottomR_jL_q0,
        shadow_bottomR_jL_address1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address1,
        shadow_bottomR_jL_ce1 => grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce1,
        shadow_bottomR_jL_q1 => shadow_bottomR_jL_q1,
        z1_min_address0 => grp_get_acceptanceCorners_fu_1341_z1_min_address0,
        z1_min_ce0 => grp_get_acceptanceCorners_fu_1341_z1_min_ce0,
        z1_min_q0 => z1_min_q0,
        z1_max_address0 => grp_get_acceptanceCorners_fu_1341_z1_max_address0,
        z1_max_ce0 => grp_get_acceptanceCorners_fu_1341_z1_max_ce0,
        z1_max_q0 => z1_max_q0,
        a_corner_0_address0 => grp_get_acceptanceCorners_fu_1341_a_corner_0_address0,
        a_corner_0_ce0 => grp_get_acceptanceCorners_fu_1341_a_corner_0_ce0,
        a_corner_0_we0 => grp_get_acceptanceCorners_fu_1341_a_corner_0_we0,
        a_corner_0_d0 => grp_get_acceptanceCorners_fu_1341_a_corner_0_d0,
        a_corner_1_address0 => grp_get_acceptanceCorners_fu_1341_a_corner_1_address0,
        a_corner_1_ce0 => grp_get_acceptanceCorners_fu_1341_a_corner_1_ce0,
        a_corner_1_we0 => grp_get_acceptanceCorners_fu_1341_a_corner_1_we0,
        a_corner_1_d0 => grp_get_acceptanceCorners_fu_1341_a_corner_1_d0,
        b_corner_0_address0 => grp_get_acceptanceCorners_fu_1341_b_corner_0_address0,
        b_corner_0_ce0 => grp_get_acceptanceCorners_fu_1341_b_corner_0_ce0,
        b_corner_0_we0 => grp_get_acceptanceCorners_fu_1341_b_corner_0_we0,
        b_corner_0_d0 => grp_get_acceptanceCorners_fu_1341_b_corner_0_d0,
        b_corner_1_address0 => grp_get_acceptanceCorners_fu_1341_b_corner_1_address0,
        b_corner_1_ce0 => grp_get_acceptanceCorners_fu_1341_b_corner_1_ce0,
        b_corner_1_we0 => grp_get_acceptanceCorners_fu_1341_b_corner_1_we0,
        b_corner_1_d0 => grp_get_acceptanceCorners_fu_1341_b_corner_1_d0,
        c_corner_0_address0 => grp_get_acceptanceCorners_fu_1341_c_corner_0_address0,
        c_corner_0_ce0 => grp_get_acceptanceCorners_fu_1341_c_corner_0_ce0,
        c_corner_0_we0 => grp_get_acceptanceCorners_fu_1341_c_corner_0_we0,
        c_corner_0_d0 => grp_get_acceptanceCorners_fu_1341_c_corner_0_d0,
        c_corner_1_address0 => grp_get_acceptanceCorners_fu_1341_c_corner_1_address0,
        c_corner_1_ce0 => grp_get_acceptanceCorners_fu_1341_c_corner_1_ce0,
        c_corner_1_we0 => grp_get_acceptanceCorners_fu_1341_c_corner_1_we0,
        c_corner_1_d0 => grp_get_acceptanceCorners_fu_1341_c_corner_1_d0,
        d_corner_0_address0 => grp_get_acceptanceCorners_fu_1341_d_corner_0_address0,
        d_corner_0_ce0 => grp_get_acceptanceCorners_fu_1341_d_corner_0_ce0,
        d_corner_0_we0 => grp_get_acceptanceCorners_fu_1341_d_corner_0_we0,
        d_corner_0_d0 => grp_get_acceptanceCorners_fu_1341_d_corner_0_d0,
        d_corner_1_address0 => grp_get_acceptanceCorners_fu_1341_d_corner_1_address0,
        d_corner_1_ce0 => grp_get_acceptanceCorners_fu_1341_d_corner_1_ce0,
        d_corner_1_we0 => grp_get_acceptanceCorners_fu_1341_d_corner_1_we0,
        d_corner_1_d0 => grp_get_acceptanceCorners_fu_1341_d_corner_1_d0,
        squareAcceptance_address0 => grp_get_acceptanceCorners_fu_1341_squareAcceptance_address0,
        squareAcceptance_ce0 => grp_get_acceptanceCorners_fu_1341_squareAcceptance_ce0,
        squareAcceptance_we0 => grp_get_acceptanceCorners_fu_1341_squareAcceptance_we0,
        squareAcceptance_d0 => grp_get_acceptanceCorners_fu_1341_squareAcceptance_d0,
        flatTop_address0 => grp_get_acceptanceCorners_fu_1341_flatTop_address0,
        flatTop_ce0 => grp_get_acceptanceCorners_fu_1341_flatTop_ce0,
        flatTop_we0 => grp_get_acceptanceCorners_fu_1341_flatTop_we0,
        flatTop_d0 => grp_get_acceptanceCorners_fu_1341_flatTop_d0,
        flatBottom_address0 => grp_get_acceptanceCorners_fu_1341_flatBottom_address0,
        flatBottom_ce0 => grp_get_acceptanceCorners_fu_1341_flatBottom_ce0,
        flatBottom_we0 => grp_get_acceptanceCorners_fu_1341_flatBottom_we0,
        flatBottom_d0 => grp_get_acceptanceCorners_fu_1341_flatBottom_d0,
        triangleAcceptance_address0 => grp_get_acceptanceCorners_fu_1341_triangleAcceptance_address0,
        triangleAcceptance_ce0 => grp_get_acceptanceCorners_fu_1341_triangleAcceptance_ce0,
        triangleAcceptance_we0 => grp_get_acceptanceCorners_fu_1341_triangleAcceptance_we0,
        triangleAcceptance_d0 => grp_get_acceptanceCorners_fu_1341_triangleAcceptance_d0,
        latest_patch_index_constprop => latest_patch_index_constprop_i);

    fsub_32ns_32ns_32_3_full_dsp_1_U113 : component system_top_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln935_3_reg_7730,
        din1 => retval_0_i_i545_reg_7735,
        ce => ap_const_logic_1,
        dout => grp_fu_1383_p2);

    uitofp_32ns_32_2_no_dsp_1_U114 : component system_top_uitofp_32ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1387_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1387_p1);

    fpext_32ns_64_2_no_dsp_1_U115 : component system_top_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1390_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1390_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U116 : component system_top_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1393_p0,
        din1 => grp_fu_1393_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_1393_opcode,
        dout => grp_fu_1393_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U117 : component system_top_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1390_p1,
        din1 => ap_const_lv64_3EB0C6F7A0B5ED8E,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1401_p2);

    mul_46s_55ns_100_1_1_U118 : component system_top_mul_46s_55ns_100_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 46,
        din1_WIDTH => 55,
        dout_WIDTH => 100)
    port map (
        din0 => tmp_87_fu_2842_p3,
        din1 => mul_ln1148_fu_2854_p1,
        dout => mul_ln1148_fu_2854_p2);

    mul_33s_24s_52_1_1_U119 : component system_top_mul_33s_24s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 24,
        dout_WIDTH => 52)
    port map (
        din0 => r_V_5_fu_2920_p0,
        din1 => r_V_5_fu_2920_p1,
        dout => r_V_5_fu_2920_p2);

    sdiv_46ns_26s_32_50_1_U120 : component system_top_sdiv_46ns_26s_32_50_1
    generic map (
        ID => 1,
        NUM_STAGE => 50,
        din0_WIDTH => 46,
        din1_WIDTH => 26,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv46_140000000000,
        din1 => ret_V_16_fu_4510_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_4520_p2);

    mul_33s_32s_52_1_1_U121 : component system_top_mul_33s_32s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        din0 => ret_V_25_fu_4534_p2,
        din1 => radii_leverArm_fu_4526_p1,
        dout => r_V_7_fu_4547_p2);

    mul_33s_32s_64_1_1_U122 : component system_top_mul_33s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => ret_V_29_fu_6849_p2,
        din1 => r_V_9_fu_6858_p1,
        dout => r_V_9_fu_6858_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp10_exit_iter0_state84) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
                    ap_enable_reg_pp10_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_enable_reg_pp10_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp10_exit_iter0_state84)) then 
                        ap_enable_reg_pp10_iter1 <= (ap_const_logic_1 xor ap_condition_pp10_exit_iter0_state84);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp10_iter1 <= ap_enable_reg_pp10_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter10 <= ap_enable_reg_pp10_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter11 <= ap_enable_reg_pp10_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter12 <= ap_enable_reg_pp10_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter13 <= ap_enable_reg_pp10_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter14 <= ap_enable_reg_pp10_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter15 <= ap_enable_reg_pp10_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter16 <= ap_enable_reg_pp10_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter17 <= ap_enable_reg_pp10_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter18 <= ap_enable_reg_pp10_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter19 <= ap_enable_reg_pp10_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter2 <= ap_enable_reg_pp10_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter20 <= ap_enable_reg_pp10_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter21 <= ap_enable_reg_pp10_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter22 <= ap_enable_reg_pp10_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter23 <= ap_enable_reg_pp10_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter24 <= ap_enable_reg_pp10_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter25 <= ap_enable_reg_pp10_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter26 <= ap_enable_reg_pp10_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter27 <= ap_enable_reg_pp10_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter28 <= ap_enable_reg_pp10_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter29 <= ap_enable_reg_pp10_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter3 <= ap_enable_reg_pp10_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter30 <= ap_enable_reg_pp10_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter31 <= ap_enable_reg_pp10_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter32 <= ap_enable_reg_pp10_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter33 <= ap_enable_reg_pp10_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter34 <= ap_enable_reg_pp10_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter35 <= ap_enable_reg_pp10_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter36 <= ap_enable_reg_pp10_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter37 <= ap_enable_reg_pp10_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter38 <= ap_enable_reg_pp10_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter39 <= ap_enable_reg_pp10_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter4 <= ap_enable_reg_pp10_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter40 <= ap_enable_reg_pp10_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter41 <= ap_enable_reg_pp10_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter42 <= ap_enable_reg_pp10_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter43 <= ap_enable_reg_pp10_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter44 <= ap_enable_reg_pp10_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter45 <= ap_enable_reg_pp10_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter46 <= ap_enable_reg_pp10_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter47 <= ap_enable_reg_pp10_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter48 <= ap_enable_reg_pp10_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter49 <= ap_enable_reg_pp10_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter5 <= ap_enable_reg_pp10_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter50 <= ap_enable_reg_pp10_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter51 <= ap_enable_reg_pp10_iter50;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_enable_reg_pp10_iter51 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter6 <= ap_enable_reg_pp10_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter7 <= ap_enable_reg_pp10_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter8 <= ap_enable_reg_pp10_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter9 <= ap_enable_reg_pp10_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp11_flush_enable)) then 
                    ap_enable_reg_pp11_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
                    ap_enable_reg_pp11_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter1 <= ap_enable_reg_pp11_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter2 <= ap_enable_reg_pp11_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter3 <= ap_enable_reg_pp11_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter4 <= ap_enable_reg_pp11_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter5 <= ap_enable_reg_pp11_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter6 <= ap_enable_reg_pp11_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter7 <= ap_enable_reg_pp11_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp11_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp11_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp11_stage0_subdone)) then 
                    ap_enable_reg_pp11_iter8 <= ap_enable_reg_pp11_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
                    ap_enable_reg_pp11_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state23);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_lv1_1 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state27))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((triangleAcceptance_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state27))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state27);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((triangleAcceptance_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state44);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state59))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln1498_fu_2807_p2 = ap_const_lv1_1) and (icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state59))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state59);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((icmp_ln1498_fu_2807_p2 = ap_const_lv1_1) and (icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state62))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((tmp_53_reg_7213 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state62))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state62);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((tmp_53_reg_7213 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state65))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((tmp_53_reg_7213 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state65))) then 
                    ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state65);
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                elsif (((tmp_53_reg_7213 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state67))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state67)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state67);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state74))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state74)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state74);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter4 <= ap_enable_reg_pp8_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    ap_enable_reg_pp8_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state80) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state80)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state80);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                    ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_alignedtoline_per_layer_loop3_fu_1250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_alignedtoline_per_layer_loop3_fu_1250_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_alignedtoline_per_layer_loop3_fu_1250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_alignedtoline_per_layer_loop3_fu_1250_ap_ready = ap_const_logic_1)) then 
                    grp_alignedtoline_per_layer_loop3_fu_1250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getParallelograms_fu_1285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getParallelograms_fu_1285_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_getParallelograms_fu_1285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getParallelograms_fu_1285_ap_ready = ap_const_logic_1)) then 
                    grp_getParallelograms_fu_1285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_acceptanceCorners_fu_1341_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_acceptanceCorners_fu_1341_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_get_acceptanceCorners_fu_1341_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_acceptanceCorners_fu_1341_ap_ready = ap_const_logic_1)) then 
                    grp_get_acceptanceCorners_fu_1341_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_index_from_z_fu_1317_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_index_from_z_fu_1317_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    grp_get_index_from_z_fu_1317_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_index_from_z_fu_1317_ap_ready = ap_const_logic_1)) then 
                    grp_get_index_from_z_fu_1317_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_patch_buffer_add_patch2_fu_1330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_patch_buffer_add_patch2_fu_1330_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_patch_buffer_add_patch2_fu_1330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_patch_buffer_add_patch2_fu_1330_ap_ready = ap_const_logic_1)) then 
                    grp_patch_buffer_add_patch2_fu_1330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    current_z_top_index_V_2_reg_1065_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1498_fu_2807_p2 = ap_const_lv1_0) and (icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                current_z_top_index_V_2_reg_1065 <= current_z_top_index_V_reg_7259;
            elsif (((icmp_ln1498_reg_7302 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                current_z_top_index_V_2_reg_1065 <= current_z_top_index_V_1_fu_2964_p2;
            end if; 
        end if;
    end process;

    current_z_top_index_V_5_reg_1086_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                if ((tmp_53_reg_7213 = ap_const_lv1_0)) then 
                    current_z_top_index_V_5_reg_1086 <= current_z_top_index_V_4_fu_2987_p2;
                elsif ((tmp_53_reg_7213 = ap_const_lv1_1)) then 
                    current_z_top_index_V_5_reg_1086 <= current_z_top_index_V_3_fu_2994_p2;
                end if;
            end if; 
        end if;
    end process;

    dc_1_reg_1186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state147) and (icmp_ln935_5_fu_5522_p2 = ap_const_lv1_1))) then 
                dc_1_reg_1186 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
                dc_1_reg_1186 <= bitcast_ln744_7_fu_5853_p1;
            end if; 
        end if;
    end process;

    dc_2_reg_1207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state153) and (icmp_ln935_7_fu_5962_p2 = ap_const_lv1_1))) then 
                dc_2_reg_1207 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                dc_2_reg_1207 <= bitcast_ln744_8_fu_6293_p1;
            end if; 
        end if;
    end process;

    dc_3_reg_1229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state159) and (icmp_ln935_8_fu_6410_p2 = ap_const_lv1_1))) then 
                dc_3_reg_1229 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
                dc_3_reg_1229 <= bitcast_ln744_9_fu_6741_p1;
            end if; 
        end if;
    end process;

    empty_258_reg_874_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                empty_258_reg_874 <= ap_const_lv32_40000000;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln49_reg_7032 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                empty_258_reg_874 <= select_ln51_2_fu_2034_p3;
            end if; 
        end if;
    end process;

    empty_260_reg_909_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((triangleAcceptance_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                empty_260_reg_909 <= ap_const_lv32_40000000;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln49_1_reg_7065 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                empty_260_reg_909 <= select_ln51_3_fu_2082_p3;
            end if; 
        end if;
    end process;

    i_10_reg_1107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln987_fu_3031_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_10_reg_1107 <= add_ln987_fu_3025_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_10_reg_1107 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_11_reg_1118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                i_11_reg_1118 <= ap_const_lv3_0;
            elsif (((icmp_ln997_fu_3709_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                i_11_reg_1118 <= add_ln997_fu_3703_p2;
            end if; 
        end if;
    end process;

    i_12_reg_1129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (icmp_ln1003_reg_7618 = ap_const_lv1_0))) then 
                i_12_reg_1129 <= add_ln1003_reg_7613;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                i_12_reg_1129 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_13_reg_1141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (icmp_ln1013_reg_7637 = ap_const_lv1_0))) then 
                i_13_reg_1141 <= add_ln1015_reg_7641;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                i_13_reg_1141 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_15_reg_1152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0) and (icmp_ln1027_fu_4610_p2 = ap_const_lv1_0) and (ap_enable_reg_pp11_iter0 = ap_const_logic_1))) then 
                i_15_reg_1152 <= add_ln1027_fu_4604_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
                i_15_reg_1152 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_886_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((triangleAcceptance_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_5_reg_886 <= ap_const_lv5_0;
            elsif (((icmp_ln49_1_fu_2048_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_5_reg_886 <= add_ln49_1_fu_2042_p2;
            end if; 
        end if;
    end process;

    i_6_reg_1042_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_get_index_from_z_fu_1317_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    i_6_reg_1042 <= add_ln933_reg_7278;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                    i_6_reg_1042 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    i_7_reg_1054_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1498_fu_2807_p2 = ap_const_lv1_1) and (icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                i_7_reg_1054 <= ap_const_lv3_0;
            elsif (((icmp_ln952_fu_2953_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_7_reg_1054 <= add_ln952_fu_2947_p2;
            end if; 
        end if;
    end process;

    i_8_reg_1096_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_53_reg_7213 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                i_8_reg_1096 <= ap_const_lv3_0;
            elsif (((icmp_ln967_fu_3007_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_8_reg_1096 <= add_ln967_fu_3001_p2;
            end if; 
        end if;
    end process;

    i_9_reg_1075_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_53_reg_7213 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                i_9_reg_1075 <= ap_const_lv3_0;
            elsif (((icmp_ln974_fu_2976_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_9_reg_1075 <= add_ln974_fu_2970_p2;
            end if; 
        end if;
    end process;

    i_reg_851_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_reg_851 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_2000_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_reg_851 <= add_ln49_fu_1994_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_985_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_1_fu_2623_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten7_reg_985 <= add_ln37_3_fu_2617_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                indvar_flatten7_reg_985 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_818_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_1465_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_818 <= add_ln37_2_fu_1459_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                indvar_flatten_reg_818 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    layerSMin_V_reg_1175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_enable_reg_pp11_iter8 = ap_const_logic_1) and (icmp_ln1027_reg_7705_pp11_iter7_reg = ap_const_lv1_0))) then 
                layerSMin_V_reg_1175 <= layerSMin_V_2_fu_5472_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
                layerSMin_V_reg_1175 <= ap_const_lv32_7FF00000;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_1163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_enable_reg_pp11_iter8 = ap_const_logic_1) and (icmp_ln1027_reg_7705_pp11_iter7_reg = ap_const_lv1_0))) then 
                layerWithSmallestShift_reg_1163 <= layerWithSmallestShift_2_fu_5480_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
                layerWithSmallestShift_reg_1163 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    layer_1_reg_996_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                layer_1_reg_996 <= select_ln37_3_reg_7169;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                layer_1_reg_996 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    layer_reg_829_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                layer_reg_829 <= select_ln37_1_reg_6888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                layer_reg_829 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    min_z_V_2_reg_897_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((triangleAcceptance_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                min_z_V_2_reg_897 <= ap_const_lv32_40000000;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln49_1_reg_7065 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                min_z_V_2_reg_897 <= min_z_V_3_fu_2074_p3;
            end if; 
        end if;
    end process;

    min_z_V_reg_862_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                min_z_V_reg_862 <= ap_const_lv32_40000000;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln49_reg_7032 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                min_z_V_reg_862 <= min_z_V_1_fu_2026_p3;
            end if; 
        end if;
    end process;

    point_1_reg_1007_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_1_fu_2623_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                point_1_reg_1007 <= add_ln39_1_fu_2680_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                point_1_reg_1007 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    point_reg_840_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_1465_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                point_reg_840 <= add_ln39_fu_1522_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then 
                point_reg_840 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    previous_z_top_min_V_reg_1029_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp_i_i_reg_7184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state165))) then 
                previous_z_top_min_V_reg_1029 <= z_top_min_V_11_reg_1018;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                previous_z_top_min_V_reg_1029 <= ap_const_lv32_80000000;
            end if; 
        end if;
    end process;

    rhs_reg_921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln582_fu_2541_p2 = ap_const_lv1_1) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln585_fu_2573_p2 = ap_const_lv1_1) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_1) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln585_fu_2573_p2 = ap_const_lv1_0) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_1) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln603_fu_2561_p2 = ap_const_lv1_1) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_0) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln603_fu_2561_p2 = ap_const_lv1_0) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_0) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln571_fu_2499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((triangleAcceptance_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
                rhs_reg_921 <= min_z_V_reg_862;
            elsif ((((ap_const_lv1_0 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((notChoppedPatch_fu_1650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
                rhs_reg_921 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    z_top_min_V_11_reg_1018_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp_i_i_reg_7184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state165))) then 
                z_top_min_V_11_reg_1018 <= z_top_min_V_10_fu_6871_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                z_top_min_V_11_reg_1018 <= z_top_min_V_reg_955;
            end if; 
        end if;
    end process;

    z_top_min_V_13_reg_1197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1050_fu_5908_p2) and (ap_const_logic_1 = ap_CS_fsm_state151))) then 
                z_top_min_V_13_reg_1197 <= reg_1449;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
                z_top_min_V_13_reg_1197 <= z_bits_1_fu_5945_p1;
            end if; 
        end if;
    end process;

    z_top_min_V_14_reg_1218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1055_fu_6348_p2) and (ap_const_logic_1 = ap_CS_fsm_state157))) then 
                z_top_min_V_14_reg_1218 <= z_top_min_V_13_reg_1197;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state158)) then 
                z_top_min_V_14_reg_1218 <= z_bits_2_fu_6393_p1;
            end if; 
        end if;
    end process;

    z_top_min_V_15_reg_1240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1060_fu_6796_p2) and (ap_const_logic_1 = ap_CS_fsm_state163))) then 
                z_top_min_V_15_reg_1240 <= z_top_min_V_14_reg_1218;
            elsif (((ap_const_lv1_1 = and_ln1060_reg_7925) and (ap_const_logic_1 = ap_CS_fsm_state164))) then 
                z_top_min_V_15_reg_1240 <= z_bits_3_fu_6841_p1;
            end if; 
        end if;
    end process;

    z_top_min_V_reg_955_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln603_fu_2561_p2 = ap_const_lv1_1) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_0) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                z_top_min_V_reg_955 <= shl_ln604_fu_2567_p2;
            elsif (((icmp_ln585_fu_2573_p2 = ap_const_lv1_0) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_1) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                z_top_min_V_reg_955 <= select_ln588_fu_2587_p3;
            elsif (((icmp_ln585_fu_2573_p2 = ap_const_lv1_1) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_1) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                z_top_min_V_reg_955 <= trunc_ln586_3_fu_2609_p1;
            elsif (((icmp_ln582_fu_2541_p2 = ap_const_lv1_1) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                z_top_min_V_reg_955 <= trunc_ln583_fu_2613_p1;
            elsif ((((icmp_ln603_fu_2561_p2 = ap_const_lv1_0) and (icmp_ln581_fu_2511_p2 = ap_const_lv1_0) and (icmp_ln582_fu_2541_p2 = ap_const_lv1_0) and (icmp_ln571_fu_2499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln571_fu_2499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
                z_top_min_V_reg_955 <= ap_const_lv32_0;
            elsif (((triangleAcceptance_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                z_top_min_V_reg_955 <= original_d_V_reg_6948;
            elsif ((((ap_const_lv1_0 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((notChoppedPatch_fu_1650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
                z_top_min_V_reg_955 <= ap_const_lv32_FCE00000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1))) then
                add_ln1003_reg_7613 <= add_ln1003_fu_4337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (icmp_ln1013_fu_4458_p2 = ap_const_lv1_0))) then
                add_ln1014_reg_7657 <= add_ln1014_fu_4475_p2;
                    trunc_ln1015_cast_reg_7647(2 downto 0) <= trunc_ln1015_cast_fu_4470_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp10_stage0_11001)) then
                add_ln1014_reg_7657_pp10_iter10_reg <= add_ln1014_reg_7657_pp10_iter9_reg;
                add_ln1014_reg_7657_pp10_iter11_reg <= add_ln1014_reg_7657_pp10_iter10_reg;
                add_ln1014_reg_7657_pp10_iter12_reg <= add_ln1014_reg_7657_pp10_iter11_reg;
                add_ln1014_reg_7657_pp10_iter13_reg <= add_ln1014_reg_7657_pp10_iter12_reg;
                add_ln1014_reg_7657_pp10_iter14_reg <= add_ln1014_reg_7657_pp10_iter13_reg;
                add_ln1014_reg_7657_pp10_iter15_reg <= add_ln1014_reg_7657_pp10_iter14_reg;
                add_ln1014_reg_7657_pp10_iter16_reg <= add_ln1014_reg_7657_pp10_iter15_reg;
                add_ln1014_reg_7657_pp10_iter17_reg <= add_ln1014_reg_7657_pp10_iter16_reg;
                add_ln1014_reg_7657_pp10_iter18_reg <= add_ln1014_reg_7657_pp10_iter17_reg;
                add_ln1014_reg_7657_pp10_iter19_reg <= add_ln1014_reg_7657_pp10_iter18_reg;
                add_ln1014_reg_7657_pp10_iter20_reg <= add_ln1014_reg_7657_pp10_iter19_reg;
                add_ln1014_reg_7657_pp10_iter21_reg <= add_ln1014_reg_7657_pp10_iter20_reg;
                add_ln1014_reg_7657_pp10_iter22_reg <= add_ln1014_reg_7657_pp10_iter21_reg;
                add_ln1014_reg_7657_pp10_iter23_reg <= add_ln1014_reg_7657_pp10_iter22_reg;
                add_ln1014_reg_7657_pp10_iter24_reg <= add_ln1014_reg_7657_pp10_iter23_reg;
                add_ln1014_reg_7657_pp10_iter25_reg <= add_ln1014_reg_7657_pp10_iter24_reg;
                add_ln1014_reg_7657_pp10_iter26_reg <= add_ln1014_reg_7657_pp10_iter25_reg;
                add_ln1014_reg_7657_pp10_iter27_reg <= add_ln1014_reg_7657_pp10_iter26_reg;
                add_ln1014_reg_7657_pp10_iter28_reg <= add_ln1014_reg_7657_pp10_iter27_reg;
                add_ln1014_reg_7657_pp10_iter29_reg <= add_ln1014_reg_7657_pp10_iter28_reg;
                add_ln1014_reg_7657_pp10_iter2_reg <= add_ln1014_reg_7657_pp10_iter1_reg;
                add_ln1014_reg_7657_pp10_iter30_reg <= add_ln1014_reg_7657_pp10_iter29_reg;
                add_ln1014_reg_7657_pp10_iter31_reg <= add_ln1014_reg_7657_pp10_iter30_reg;
                add_ln1014_reg_7657_pp10_iter32_reg <= add_ln1014_reg_7657_pp10_iter31_reg;
                add_ln1014_reg_7657_pp10_iter33_reg <= add_ln1014_reg_7657_pp10_iter32_reg;
                add_ln1014_reg_7657_pp10_iter34_reg <= add_ln1014_reg_7657_pp10_iter33_reg;
                add_ln1014_reg_7657_pp10_iter35_reg <= add_ln1014_reg_7657_pp10_iter34_reg;
                add_ln1014_reg_7657_pp10_iter36_reg <= add_ln1014_reg_7657_pp10_iter35_reg;
                add_ln1014_reg_7657_pp10_iter37_reg <= add_ln1014_reg_7657_pp10_iter36_reg;
                add_ln1014_reg_7657_pp10_iter38_reg <= add_ln1014_reg_7657_pp10_iter37_reg;
                add_ln1014_reg_7657_pp10_iter39_reg <= add_ln1014_reg_7657_pp10_iter38_reg;
                add_ln1014_reg_7657_pp10_iter3_reg <= add_ln1014_reg_7657_pp10_iter2_reg;
                add_ln1014_reg_7657_pp10_iter40_reg <= add_ln1014_reg_7657_pp10_iter39_reg;
                add_ln1014_reg_7657_pp10_iter41_reg <= add_ln1014_reg_7657_pp10_iter40_reg;
                add_ln1014_reg_7657_pp10_iter42_reg <= add_ln1014_reg_7657_pp10_iter41_reg;
                add_ln1014_reg_7657_pp10_iter43_reg <= add_ln1014_reg_7657_pp10_iter42_reg;
                add_ln1014_reg_7657_pp10_iter44_reg <= add_ln1014_reg_7657_pp10_iter43_reg;
                add_ln1014_reg_7657_pp10_iter45_reg <= add_ln1014_reg_7657_pp10_iter44_reg;
                add_ln1014_reg_7657_pp10_iter46_reg <= add_ln1014_reg_7657_pp10_iter45_reg;
                add_ln1014_reg_7657_pp10_iter47_reg <= add_ln1014_reg_7657_pp10_iter46_reg;
                add_ln1014_reg_7657_pp10_iter48_reg <= add_ln1014_reg_7657_pp10_iter47_reg;
                add_ln1014_reg_7657_pp10_iter49_reg <= add_ln1014_reg_7657_pp10_iter48_reg;
                add_ln1014_reg_7657_pp10_iter4_reg <= add_ln1014_reg_7657_pp10_iter3_reg;
                add_ln1014_reg_7657_pp10_iter50_reg <= add_ln1014_reg_7657_pp10_iter49_reg;
                add_ln1014_reg_7657_pp10_iter5_reg <= add_ln1014_reg_7657_pp10_iter4_reg;
                add_ln1014_reg_7657_pp10_iter6_reg <= add_ln1014_reg_7657_pp10_iter5_reg;
                add_ln1014_reg_7657_pp10_iter7_reg <= add_ln1014_reg_7657_pp10_iter6_reg;
                add_ln1014_reg_7657_pp10_iter8_reg <= add_ln1014_reg_7657_pp10_iter7_reg;
                add_ln1014_reg_7657_pp10_iter9_reg <= add_ln1014_reg_7657_pp10_iter8_reg;
                icmp_ln1013_reg_7637_pp10_iter10_reg <= icmp_ln1013_reg_7637_pp10_iter9_reg;
                icmp_ln1013_reg_7637_pp10_iter11_reg <= icmp_ln1013_reg_7637_pp10_iter10_reg;
                icmp_ln1013_reg_7637_pp10_iter12_reg <= icmp_ln1013_reg_7637_pp10_iter11_reg;
                icmp_ln1013_reg_7637_pp10_iter13_reg <= icmp_ln1013_reg_7637_pp10_iter12_reg;
                icmp_ln1013_reg_7637_pp10_iter14_reg <= icmp_ln1013_reg_7637_pp10_iter13_reg;
                icmp_ln1013_reg_7637_pp10_iter15_reg <= icmp_ln1013_reg_7637_pp10_iter14_reg;
                icmp_ln1013_reg_7637_pp10_iter16_reg <= icmp_ln1013_reg_7637_pp10_iter15_reg;
                icmp_ln1013_reg_7637_pp10_iter17_reg <= icmp_ln1013_reg_7637_pp10_iter16_reg;
                icmp_ln1013_reg_7637_pp10_iter18_reg <= icmp_ln1013_reg_7637_pp10_iter17_reg;
                icmp_ln1013_reg_7637_pp10_iter19_reg <= icmp_ln1013_reg_7637_pp10_iter18_reg;
                icmp_ln1013_reg_7637_pp10_iter20_reg <= icmp_ln1013_reg_7637_pp10_iter19_reg;
                icmp_ln1013_reg_7637_pp10_iter21_reg <= icmp_ln1013_reg_7637_pp10_iter20_reg;
                icmp_ln1013_reg_7637_pp10_iter22_reg <= icmp_ln1013_reg_7637_pp10_iter21_reg;
                icmp_ln1013_reg_7637_pp10_iter23_reg <= icmp_ln1013_reg_7637_pp10_iter22_reg;
                icmp_ln1013_reg_7637_pp10_iter24_reg <= icmp_ln1013_reg_7637_pp10_iter23_reg;
                icmp_ln1013_reg_7637_pp10_iter25_reg <= icmp_ln1013_reg_7637_pp10_iter24_reg;
                icmp_ln1013_reg_7637_pp10_iter26_reg <= icmp_ln1013_reg_7637_pp10_iter25_reg;
                icmp_ln1013_reg_7637_pp10_iter27_reg <= icmp_ln1013_reg_7637_pp10_iter26_reg;
                icmp_ln1013_reg_7637_pp10_iter28_reg <= icmp_ln1013_reg_7637_pp10_iter27_reg;
                icmp_ln1013_reg_7637_pp10_iter29_reg <= icmp_ln1013_reg_7637_pp10_iter28_reg;
                icmp_ln1013_reg_7637_pp10_iter2_reg <= icmp_ln1013_reg_7637_pp10_iter1_reg;
                icmp_ln1013_reg_7637_pp10_iter30_reg <= icmp_ln1013_reg_7637_pp10_iter29_reg;
                icmp_ln1013_reg_7637_pp10_iter31_reg <= icmp_ln1013_reg_7637_pp10_iter30_reg;
                icmp_ln1013_reg_7637_pp10_iter32_reg <= icmp_ln1013_reg_7637_pp10_iter31_reg;
                icmp_ln1013_reg_7637_pp10_iter33_reg <= icmp_ln1013_reg_7637_pp10_iter32_reg;
                icmp_ln1013_reg_7637_pp10_iter34_reg <= icmp_ln1013_reg_7637_pp10_iter33_reg;
                icmp_ln1013_reg_7637_pp10_iter35_reg <= icmp_ln1013_reg_7637_pp10_iter34_reg;
                icmp_ln1013_reg_7637_pp10_iter36_reg <= icmp_ln1013_reg_7637_pp10_iter35_reg;
                icmp_ln1013_reg_7637_pp10_iter37_reg <= icmp_ln1013_reg_7637_pp10_iter36_reg;
                icmp_ln1013_reg_7637_pp10_iter38_reg <= icmp_ln1013_reg_7637_pp10_iter37_reg;
                icmp_ln1013_reg_7637_pp10_iter39_reg <= icmp_ln1013_reg_7637_pp10_iter38_reg;
                icmp_ln1013_reg_7637_pp10_iter3_reg <= icmp_ln1013_reg_7637_pp10_iter2_reg;
                icmp_ln1013_reg_7637_pp10_iter40_reg <= icmp_ln1013_reg_7637_pp10_iter39_reg;
                icmp_ln1013_reg_7637_pp10_iter41_reg <= icmp_ln1013_reg_7637_pp10_iter40_reg;
                icmp_ln1013_reg_7637_pp10_iter42_reg <= icmp_ln1013_reg_7637_pp10_iter41_reg;
                icmp_ln1013_reg_7637_pp10_iter43_reg <= icmp_ln1013_reg_7637_pp10_iter42_reg;
                icmp_ln1013_reg_7637_pp10_iter44_reg <= icmp_ln1013_reg_7637_pp10_iter43_reg;
                icmp_ln1013_reg_7637_pp10_iter45_reg <= icmp_ln1013_reg_7637_pp10_iter44_reg;
                icmp_ln1013_reg_7637_pp10_iter46_reg <= icmp_ln1013_reg_7637_pp10_iter45_reg;
                icmp_ln1013_reg_7637_pp10_iter47_reg <= icmp_ln1013_reg_7637_pp10_iter46_reg;
                icmp_ln1013_reg_7637_pp10_iter48_reg <= icmp_ln1013_reg_7637_pp10_iter47_reg;
                icmp_ln1013_reg_7637_pp10_iter49_reg <= icmp_ln1013_reg_7637_pp10_iter48_reg;
                icmp_ln1013_reg_7637_pp10_iter4_reg <= icmp_ln1013_reg_7637_pp10_iter3_reg;
                icmp_ln1013_reg_7637_pp10_iter50_reg <= icmp_ln1013_reg_7637_pp10_iter49_reg;
                icmp_ln1013_reg_7637_pp10_iter5_reg <= icmp_ln1013_reg_7637_pp10_iter4_reg;
                icmp_ln1013_reg_7637_pp10_iter6_reg <= icmp_ln1013_reg_7637_pp10_iter5_reg;
                icmp_ln1013_reg_7637_pp10_iter7_reg <= icmp_ln1013_reg_7637_pp10_iter6_reg;
                icmp_ln1013_reg_7637_pp10_iter8_reg <= icmp_ln1013_reg_7637_pp10_iter7_reg;
                icmp_ln1013_reg_7637_pp10_iter9_reg <= icmp_ln1013_reg_7637_pp10_iter8_reg;
                    trunc_ln1015_cast_reg_7647_pp10_iter10_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter9_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter11_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter10_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter12_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter11_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter13_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter12_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter14_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter13_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter15_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter14_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter16_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter15_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter17_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter16_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter18_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter17_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter19_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter18_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter20_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter19_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter21_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter20_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter22_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter21_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter23_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter22_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter24_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter23_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter25_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter24_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter26_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter25_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter27_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter26_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter28_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter27_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter29_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter28_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter2_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter1_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter30_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter29_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter31_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter30_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter32_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter31_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter33_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter32_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter34_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter33_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter35_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter34_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter36_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter35_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter37_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter36_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter38_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter37_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter39_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter38_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter3_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter2_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter40_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter39_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter41_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter40_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter42_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter41_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter43_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter42_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter44_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter43_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter45_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter44_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter46_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter45_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter47_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter46_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter48_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter47_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter4_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter3_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter5_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter4_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter6_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter5_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter7_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter6_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter8_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter7_reg(2 downto 0);
                    trunc_ln1015_cast_reg_7647_pp10_iter9_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647_pp10_iter8_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then
                add_ln1014_reg_7657_pp10_iter1_reg <= add_ln1014_reg_7657;
                icmp_ln1013_reg_7637 <= icmp_ln1013_fu_4458_p2;
                icmp_ln1013_reg_7637_pp10_iter1_reg <= icmp_ln1013_reg_7637;
                    trunc_ln1015_cast_reg_7647_pp10_iter1_reg(2 downto 0) <= trunc_ln1015_cast_reg_7647(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (icmp_ln1013_fu_4458_p2 = ap_const_lv1_0))) then
                add_ln1015_reg_7641 <= add_ln1015_fu_4464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    add_ln50_4_reg_6943(7 downto 4) <= add_ln50_4_fu_1564_p2(7 downto 4);
                    add_ln50_reg_6938(7 downto 4) <= add_ln50_fu_1558_p2(7 downto 4);
                nPatchesAtOriginal_V_reg_6962 <= num_patches_constprop_i;
                original_d_V_reg_6948 <= d_corner_1_q0;
                sext_ln703_7_reg_6954 <= sext_ln703_7_fu_1574_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                add_ln933_reg_7278 <= add_ln933_fu_2784_p2;
                    zext_ln931_reg_7283(2 downto 0) <= zext_ln931_fu_2790_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                add_ln985_reg_7254 <= add_ln985_fu_2765_p2;
                    lhs_12_reg_7248(51 downto 20) <= lhs_12_fu_2757_p3(51 downto 20);
                p_v_cast_reg_7227 <= p_v_cast_fu_2745_p1;
                sext_ln703_11_reg_7242 <= sext_ln703_11_fu_2753_p1;
                tmp_53_reg_7213 <= select_ln703_fu_2725_p3(31 downto 31);
                x_reg_7237 <= grp_fu_1423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state163)) then
                and_ln1060_reg_7925 <= and_ln1060_fu_6796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln997_reg_7513_pp8_iter2_reg = ap_const_lv1_0))) then
                and_ln581_1_reg_7597 <= and_ln581_1_fu_4236_p2;
                icmp_ln571_2_reg_7575 <= icmp_ln571_2_fu_4126_p2;
                icmp_ln582_2_reg_7586 <= icmp_ln582_2_fu_4164_p2;
                or_ln571_5_reg_7602 <= or_ln571_5_fu_4272_p2;
                select_ln571_11_reg_7608 <= select_ln571_11_fu_4278_p3;
                sh_amt_2_reg_7581 <= sh_amt_2_fu_4156_p3;
                trunc_ln583_2_reg_7591 <= trunc_ln583_2_fu_4170_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln987_reg_7394_pp7_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                and_ln581_reg_7492 <= and_ln581_fu_3602_p2;
                icmp_ln571_1_reg_7470 <= icmp_ln571_1_fu_3489_p2;
                icmp_ln582_1_reg_7481 <= icmp_ln582_1_fu_3527_p2;
                or_ln571_reg_7497 <= or_ln571_fu_3638_p2;
                select_ln571_6_reg_7503 <= select_ln571_6_fu_3644_p3;
                sh_amt_1_reg_7476 <= sh_amt_1_fu_3519_p3;
                trunc_ln583_1_reg_7486 <= trunc_ln583_1_fu_3533_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                cmp_i_i_reg_7184 <= cmp_i_i_fu_2686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln987_reg_7394_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                conv_reg_7457 <= grp_fu_1387_p1;
                select_ln935_1_reg_7450 <= select_ln935_1_fu_3332_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                current_z_top_index_V_reg_7259 <= grp_get_index_from_z_fu_1317_ap_return;
                sext_ln1115_1_reg_7273 <= sext_ln1115_1_fu_2780_p1;
                sext_ln703_12_reg_7265 <= sext_ln703_12_fu_2771_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (icmp_ln1027_reg_7705_pp11_iter6_reg = ap_const_lv1_0))) then
                exp_tmp_3_reg_7755 <= ireg_3_fu_5207_p1(62 downto 52);
                icmp_ln571_3_reg_7765 <= icmp_ln571_3_fu_5237_p2;
                p_Result_151_reg_7750 <= ireg_3_fu_5207_p1(63 downto 63);
                trunc_ln565_3_reg_7760 <= trunc_ln565_3_fu_5233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (icmp_ln1003_fu_4343_p2 = ap_const_lv1_0))) then
                    i_12_cast4_reg_7622(2 downto 0) <= i_12_cast4_fu_4349_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                    i_12_cast4_reg_7622_pp9_iter1_reg(2 downto 0) <= i_12_cast4_reg_7622(2 downto 0);
                icmp_ln1003_reg_7618 <= icmp_ln1003_fu_4343_p2;
                icmp_ln1003_reg_7618_pp9_iter1_reg <= icmp_ln1003_reg_7618;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln952_fu_2953_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    i_7_cast_reg_7341(2 downto 0) <= i_7_cast_fu_2959_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln967_fu_3007_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                    i_8_cast_reg_7379(2 downto 0) <= i_8_cast_fu_3013_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln974_fu_2976_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    i_9_cast_reg_7360(2 downto 0) <= i_9_cast_fu_2982_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0))) then
                icmp_ln1027_reg_7705 <= icmp_ln1027_fu_4610_p2;
                icmp_ln1027_reg_7705_pp11_iter1_reg <= icmp_ln1027_reg_7705;
                trunc_ln1033_reg_7714_pp11_iter1_reg <= trunc_ln1033_reg_7714;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp11_stage0_11001)) then
                icmp_ln1027_reg_7705_pp11_iter2_reg <= icmp_ln1027_reg_7705_pp11_iter1_reg;
                icmp_ln1027_reg_7705_pp11_iter3_reg <= icmp_ln1027_reg_7705_pp11_iter2_reg;
                icmp_ln1027_reg_7705_pp11_iter4_reg <= icmp_ln1027_reg_7705_pp11_iter3_reg;
                icmp_ln1027_reg_7705_pp11_iter5_reg <= icmp_ln1027_reg_7705_pp11_iter4_reg;
                icmp_ln1027_reg_7705_pp11_iter6_reg <= icmp_ln1027_reg_7705_pp11_iter5_reg;
                icmp_ln1027_reg_7705_pp11_iter7_reg <= icmp_ln1027_reg_7705_pp11_iter6_reg;
                trunc_ln1033_reg_7714_pp11_iter2_reg <= trunc_ln1033_reg_7714_pp11_iter1_reg;
                trunc_ln1033_reg_7714_pp11_iter3_reg <= trunc_ln1033_reg_7714_pp11_iter2_reg;
                trunc_ln1033_reg_7714_pp11_iter4_reg <= trunc_ln1033_reg_7714_pp11_iter3_reg;
                trunc_ln1033_reg_7714_pp11_iter5_reg <= trunc_ln1033_reg_7714_pp11_iter4_reg;
                trunc_ln1033_reg_7714_pp11_iter6_reg <= trunc_ln1033_reg_7714_pp11_iter5_reg;
                trunc_ln1033_reg_7714_pp11_iter7_reg <= trunc_ln1033_reg_7714_pp11_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state150)) then
                icmp_ln1050_1_reg_7826 <= icmp_ln1050_1_fu_5898_p2;
                icmp_ln1050_reg_7821 <= icmp_ln1050_fu_5892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state156)) then
                icmp_ln1055_1_reg_7873 <= icmp_ln1055_1_fu_6338_p2;
                icmp_ln1055_reg_7868 <= icmp_ln1055_fu_6332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state162)) then
                icmp_ln1060_1_reg_7920 <= icmp_ln1060_1_fu_6786_p2;
                icmp_ln1060_reg_7915 <= icmp_ln1060_fu_6780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((notChoppedPatch_fu_1650_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                icmp_ln1495_reg_7003 <= icmp_ln1495_fu_1828_p2;
                icmp_ln935_reg_6967 <= icmp_ln935_fu_1656_p2;
                icmp_ln958_reg_6988 <= icmp_ln958_fu_1796_p2;
                m_67_reg_6977 <= m_67_fu_1676_p3;
                p_Result_120_reg_6972 <= p_Result_120_fu_1662_p1(31 downto 31);
                select_ln958_reg_6993 <= select_ln958_fu_1816_p3;
                sub_ln944_reg_6982 <= sub_ln944_fu_1702_p2;
                trunc_ln943_reg_6998 <= trunc_ln943_fu_1824_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                icmp_ln1498_reg_7302 <= icmp_ln1498_fu_2807_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                icmp_ln224_1_reg_7120 <= icmp_ln224_1_fu_2415_p2;
                icmp_ln224_reg_7115 <= icmp_ln224_fu_2409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln997_reg_7513_pp8_iter1_reg = ap_const_lv1_0))) then
                icmp_ln224_2_reg_7565 <= icmp_ln224_2_fu_4036_p2;
                icmp_ln224_3_reg_7570 <= icmp_ln224_3_fu_4042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln37_1_reg_7165 <= icmp_ln37_1_fu_2623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln37_reg_6884 <= icmp_ln37_fu_1465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln49_1_reg_7065 <= icmp_ln49_1_fu_2048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln49_reg_7032 <= icmp_ln49_fu_2000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln931_fu_2795_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                icmp_ln870_reg_7292 <= icmp_ln870_fu_2801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                icmp_ln935_2_reg_7084 <= icmp_ln935_2_fu_2090_p2;
                m_70_reg_7094 <= m_40_fu_2306_p2(63 downto 1);
                p_Result_124_reg_7089 <= min_z_V_2_reg_897(31 downto 31);
                p_Result_54_reg_7099 <= m_40_fu_2306_p2(25 downto 25);
                trunc_ln943_3_reg_7104 <= trunc_ln943_3_fu_2330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln987_reg_7394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln935_3_reg_7409 <= icmp_ln935_3_fu_3043_p2;
                icmp_ln958_4_reg_7430 <= icmp_ln958_4_fu_3183_p2;
                m_71_reg_7419 <= m_71_fu_3063_p3;
                p_Result_130_reg_7414 <= new_z_i_index_V_q1(31 downto 31);
                select_ln958_9_reg_7435 <= select_ln958_9_fu_3203_p3;
                sub_ln944_4_reg_7424 <= sub_ln944_4_fu_3089_p2;
                trunc_ln943_4_reg_7440 <= trunc_ln943_4_fu_3211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln997_reg_7513 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln935_4_reg_7523 <= icmp_ln935_4_fu_3720_p2;
                icmp_ln958_5_reg_7544 <= icmp_ln958_5_fu_3860_p2;
                m_73_reg_7533 <= m_73_fu_3740_p3;
                p_Result_136_reg_7528 <= new_z_i_index_V_q0(31 downto 31);
                select_ln958_11_reg_7549 <= select_ln958_11_fu_3880_p3;
                sub_ln944_5_reg_7538 <= sub_ln944_5_fu_3766_p2;
                trunc_ln943_5_reg_7554 <= trunc_ln943_5_fu_3888_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln952_reg_7337 <= icmp_ln952_fu_2953_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln967_reg_7375 <= icmp_ln967_fu_3007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                icmp_ln971_1_reg_7018 <= icmp_ln971_1_fu_1968_p2;
                icmp_ln971_reg_7013 <= icmp_ln971_fu_1962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln974_reg_7356 <= icmp_ln974_fu_2976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln987_reg_7394 <= icmp_ln987_fu_3031_p2;
                icmp_ln987_reg_7394_pp7_iter1_reg <= icmp_ln987_reg_7394;
                new_z_i_index_V_addr_3_reg_7398_pp7_iter1_reg <= new_z_i_index_V_addr_3_reg_7398;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp7_stage0_11001)) then
                icmp_ln987_reg_7394_pp7_iter2_reg <= icmp_ln987_reg_7394_pp7_iter1_reg;
                icmp_ln987_reg_7394_pp7_iter3_reg <= icmp_ln987_reg_7394_pp7_iter2_reg;
                icmp_ln987_reg_7394_pp7_iter4_reg <= icmp_ln987_reg_7394_pp7_iter3_reg;
                new_z_i_index_V_addr_3_reg_7398_pp7_iter2_reg <= new_z_i_index_V_addr_3_reg_7398_pp7_iter1_reg;
                new_z_i_index_V_addr_3_reg_7398_pp7_iter3_reg <= new_z_i_index_V_addr_3_reg_7398_pp7_iter2_reg;
                new_z_i_index_V_addr_3_reg_7398_pp7_iter4_reg <= new_z_i_index_V_addr_3_reg_7398_pp7_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln997_reg_7513 <= icmp_ln997_fu_3709_p2;
                icmp_ln997_reg_7513_pp8_iter1_reg <= icmp_ln997_reg_7513;
                new_z_i_index_V_addr_4_reg_7517_pp8_iter1_reg <= new_z_i_index_V_addr_4_reg_7517;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp8_stage0_11001)) then
                icmp_ln997_reg_7513_pp8_iter2_reg <= icmp_ln997_reg_7513_pp8_iter1_reg;
                icmp_ln997_reg_7513_pp8_iter3_reg <= icmp_ln997_reg_7513_pp8_iter2_reg;
                new_z_i_index_V_addr_4_reg_7517_pp8_iter2_reg <= new_z_i_index_V_addr_4_reg_7517_pp8_iter1_reg;
                new_z_i_index_V_addr_4_reg_7517_pp8_iter3_reg <= new_z_i_index_V_addr_4_reg_7517_pp8_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state136)) then
                    m_75_reg_7694(31 downto 0) <= m_75_fu_4600_p1(31 downto 0);
                p_Result_146_reg_7682 <= z_top_min_V_11_reg_1018(31 downto 31);
                tmp_V_26_reg_7687 <= tmp_V_26_fu_4592_p3;
                tobool_i_i483_reg_7677 <= tobool_i_i483_fu_4572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                mul_ln1148_reg_7306 <= mul_ln1148_fu_2854_p2;
                tmp_55_reg_7311 <= ret_V_11_fu_2836_p2(25 downto 25);
                tmp_57_reg_7317 <= mul_ln1148_fu_2854_p2(99 downto 78);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln987_fu_3031_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                new_z_i_index_V_addr_3_reg_7398 <= i_10_cast_fu_3037_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln997_fu_3709_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                new_z_i_index_V_addr_4_reg_7517 <= i_11_cast_fu_3715_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_7705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0))) then
                p_Result_142_reg_7719 <= new_z_i_atTop_V_q0(31 downto 31);
                tmp_V_17_reg_7725 <= tmp_V_17_fu_4633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (icmp_ln1027_reg_7705_pp11_iter4_reg = ap_const_lv1_0))) then
                p_Result_150_reg_7740 <= p_Result_150_fu_5195_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state147) and (icmp_ln935_5_fu_5522_p2 = ap_const_lv1_0))) then
                p_Result_153_reg_7800 <= ret_V_26_fu_5513_p2(32 downto 32);
                tmp_V_27_reg_7805 <= tmp_V_27_fu_5542_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state153) and (icmp_ln935_7_fu_5962_p2 = ap_const_lv1_0))) then
                p_Result_158_reg_7847 <= ret_V_27_fu_5953_p2(32 downto 32);
                tmp_V_28_reg_7852 <= tmp_V_28_fu_5982_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state159) and (icmp_ln935_8_fu_6410_p2 = ap_const_lv1_0))) then
                p_Result_163_reg_7894 <= ret_V_28_fu_6401_p2(32 downto 32);
                tmp_V_29_reg_7899 <= tmp_V_29_fu_6430_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                r_V_5_reg_7322 <= r_V_5_fu_2920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_1437 <= latest_patch_index_constprop_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state147) or ((icmp_ln1027_reg_7705 = ap_const_lv1_0) and (ap_enable_reg_pp11_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0)))) then
                reg_1449 <= new_z_i_atTop_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (icmp_ln1027_reg_7705_pp11_iter1_reg = ap_const_lv1_0))) then
                retval_0_i_i545_reg_7735 <= retval_0_i_i545_fu_5184_p3;
                select_ln935_3_reg_7730 <= select_ln935_3_fu_4918_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_1465_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln37_1_reg_6888 <= select_ln37_1_fu_1491_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_1_fu_2623_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln37_3_reg_7169 <= select_ln37_3_fu_2649_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state146)) then
                select_ln985_reg_7782 <= select_ln985_fu_5497_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln987_reg_7394_pp7_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                select_ln989_reg_7464 <= select_ln989_fu_3422_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (icmp_ln1013_reg_7637_pp10_iter49_reg = ap_const_lv1_0))) then
                this_V_write_assign_reg_7672 <= ret_V_18_fu_4553_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0) and (icmp_ln1027_fu_4610_p2 = ap_const_lv1_0))) then
                trunc_ln1033_reg_7714 <= trunc_ln1033_fu_4621_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                z_value_tmp_V_reg_7327 <= ret_V_13_fu_2925_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    zext_ln671_reg_6903(1 downto 0) <= zext_ln671_fu_1528_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln671_reg_6903(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    add_ln50_reg_6938(3 downto 0) <= "0000";
    add_ln50_4_reg_6943(3 downto 0) <= "0000";
    lhs_12_reg_7248(19 downto 0) <= "00000000000000000000";
    zext_ln931_reg_7283(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_7341(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_9_cast_reg_7360(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_8_cast_reg_7379(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_12_cast4_reg_7622(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_12_cast4_reg_7622_pp9_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter8_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter9_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter10_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter11_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter12_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter13_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter14_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter15_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter16_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter17_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter18_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter19_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter20_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter21_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter22_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter23_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter24_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter25_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter26_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter27_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter28_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter29_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter30_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter31_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter32_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter33_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter34_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter35_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter36_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter37_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter38_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter39_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter40_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter41_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter42_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter43_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter44_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter45_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter46_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter47_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    trunc_ln1015_cast_reg_7647_pp10_iter48_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    m_75_reg_7694(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, triangleAcceptance_q0, ap_CS_fsm_state147, ap_enable_reg_pp0_iter0, icmp_ln37_fu_1465_p2, ap_CS_fsm_state20, notChoppedPatch_fu_1650_p2, and_ln741_fu_1989_p2, ap_CS_fsm_state22, ap_enable_reg_pp1_iter0, icmp_ln49_fu_2000_p2, ap_CS_fsm_state26, ap_enable_reg_pp2_iter0, icmp_ln49_1_fu_2048_p2, ap_enable_reg_pp3_iter0, icmp_ln37_1_fu_2623_p2, cmp_i_i_reg_7184, tmp_53_reg_7213, ap_CS_fsm_state53, ap_CS_fsm_state54, icmp_ln931_fu_2795_p2, icmp_ln1498_fu_2807_p2, ap_enable_reg_pp4_iter0, icmp_ln952_fu_2953_p2, ap_enable_reg_pp5_iter0, icmp_ln974_fu_2976_p2, ap_enable_reg_pp6_iter0, icmp_ln967_fu_3007_p2, ap_enable_reg_pp7_iter0, icmp_ln987_fu_3031_p2, ap_enable_reg_pp7_iter1, ap_enable_reg_pp8_iter0, icmp_ln997_fu_3709_p2, ap_enable_reg_pp9_iter0, icmp_ln1003_fu_4343_p2, icmp_ln1013_fu_4458_p2, ap_enable_reg_pp10_iter0, ap_enable_reg_pp11_iter8, icmp_ln935_5_fu_5522_p2, ap_CS_fsm_state151, and_ln1050_fu_5908_p2, ap_CS_fsm_state153, icmp_ln935_7_fu_5962_p2, ap_CS_fsm_state157, and_ln1055_fu_6348_p2, ap_CS_fsm_state159, icmp_ln935_8_fu_6410_p2, ap_CS_fsm_state165, ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_1330_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_CS_fsm_state43, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state61, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter4, ap_enable_reg_pp7_iter5, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter3, ap_enable_reg_pp8_iter4, ap_block_pp9_stage0_subdone, ap_enable_reg_pp9_iter1, ap_enable_reg_pp9_iter2, ap_block_pp10_stage0_subdone, ap_enable_reg_pp10_iter1, ap_enable_reg_pp10_iter50, ap_enable_reg_pp10_iter51, ap_block_pp11_stage0_subdone, ap_enable_reg_pp11_iter7, grp_alignedtoline_per_layer_loop3_fu_1250_ap_done, grp_getParallelograms_fu_1285_ap_done, grp_get_index_from_z_fu_1317_ap_done, grp_get_acceptanceCorners_fu_1341_ap_done, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln37_fu_1465_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln37_fu_1465_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_getParallelograms_fu_1285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_get_acceptanceCorners_fu_1341_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((notChoppedPatch_fu_1650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_lv1_1 = and_ln741_fu_1989_p2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln49_fu_2000_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln49_fu_2000_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((triangleAcceptance_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln49_1_fu_2048_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln49_1_fu_2048_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_1250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_patch_buffer_add_patch2_fu_1330_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln37_1_fu_2623_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln37_1_fu_2623_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_getParallelograms_fu_1285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((grp_get_acceptanceCorners_fu_1341_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_get_index_from_z_fu_1317_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln1498_fu_2807_p2 = ap_const_lv1_1) and (icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln1498_fu_2807_p2 = ap_const_lv1_0) and (icmp_ln931_fu_2795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_get_index_from_z_fu_1317_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln952_fu_2953_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln952_fu_2953_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state61 => 
                if (((tmp_53_reg_7213 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((icmp_ln974_fu_2976_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((icmp_ln974_fu_2976_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((icmp_ln967_fu_3007_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((icmp_ln967_fu_3007_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln987_fu_3031_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln987_fu_3031_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((icmp_ln997_fu_3709_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((icmp_ln997_fu_3709_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (icmp_ln1003_fu_4343_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (icmp_ln1003_fu_4343_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
            when ap_ST_fsm_pp10_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (icmp_ln1013_fu_4458_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter51 = ap_const_logic_1) and (ap_enable_reg_pp10_iter50 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter51 = ap_const_logic_1) and (ap_enable_reg_pp10_iter50 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (icmp_ln1013_fu_4458_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state136;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                end if;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_pp11_stage0;
            when ap_ST_fsm_pp11_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp11_stage0_subdone) and (ap_enable_reg_pp11_iter7 = ap_const_logic_0) and (ap_enable_reg_pp11_iter8 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp11_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp11_stage0_subdone) and (ap_enable_reg_pp11_iter7 = ap_const_logic_0) and (ap_enable_reg_pp11_iter8 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state146;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp11_stage0;
                end if;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state147) and (icmp_ln935_5_fu_5522_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state149;
                else
                    ap_NS_fsm <= ap_ST_fsm_state148;
                end if;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                if (((ap_const_lv1_0 = and_ln1050_fu_5908_p2) and (ap_const_logic_1 = ap_CS_fsm_state151))) then
                    ap_NS_fsm <= ap_ST_fsm_state153;
                else
                    ap_NS_fsm <= ap_ST_fsm_state152;
                end if;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state153) and (icmp_ln935_7_fu_5962_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state155;
                else
                    ap_NS_fsm <= ap_ST_fsm_state154;
                end if;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                if (((ap_const_lv1_0 = and_ln1055_fu_6348_p2) and (ap_const_logic_1 = ap_CS_fsm_state157))) then
                    ap_NS_fsm <= ap_ST_fsm_state159;
                else
                    ap_NS_fsm <= ap_ST_fsm_state158;
                end if;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state159) and (icmp_ln935_8_fu_6410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state161;
                else
                    ap_NS_fsm <= ap_ST_fsm_state160;
                end if;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                if (((cmp_i_i_reg_7184 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state165))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_3495_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_1_fu_3455_p1));
    F2_2_fu_4132_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_2_fu_4092_p1));
    F2_3_fu_5270_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_3_fu_5243_p1));
    F2_fu_2505_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_2465_p1));
    LD_10_fu_5176_p1 <= p_Result_149_fu_5164_p5(32 - 1 downto 0);
    LD_12_fu_5849_p1 <= p_Result_156_fu_5837_p5(32 - 1 downto 0);
    LD_13_fu_6289_p1 <= p_Result_161_fu_6277_p5(32 - 1 downto 0);
    LD_14_fu_6737_p1 <= p_Result_166_fu_6725_p5(32 - 1 downto 0);
    LD_5_fu_2374_p1 <= p_Result_127_fu_2362_p5(32 - 1 downto 0);
    LD_6_fu_3324_p1 <= p_Result_133_fu_3312_p5(32 - 1 downto 0);
    LD_8_fu_4001_p1 <= p_Result_139_fu_3989_p5(32 - 1 downto 0);
    LD_9_fu_4910_p1 <= p_Result_145_fu_4898_p5(32 - 1 downto 0);
    LD_fu_1943_p1 <= p_Result_123_fu_1931_p5(32 - 1 downto 0);
    a_corner_0_address0 <= grp_get_acceptanceCorners_fu_1341_a_corner_0_address0;

    a_corner_0_ce0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_a_corner_0_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_corner_0_ce0 <= grp_get_acceptanceCorners_fu_1341_a_corner_0_ce0;
        else 
            a_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_0_d0 <= grp_get_acceptanceCorners_fu_1341_a_corner_0_d0;

    a_corner_0_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_a_corner_0_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_corner_0_we0 <= grp_get_acceptanceCorners_fu_1341_a_corner_0_we0;
        else 
            a_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_1_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln671_fu_1528_p1, ap_CS_fsm_state50, grp_get_acceptanceCorners_fu_1341_a_corner_1_address0, ap_CS_fsm_state18, ap_CS_fsm_state49, zext_ln875_fu_2691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            a_corner_1_address0 <= zext_ln875_fu_2691_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            a_corner_1_address0 <= zext_ln671_fu_1528_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_corner_1_address0 <= grp_get_acceptanceCorners_fu_1341_a_corner_1_address0;
        else 
            a_corner_1_address0 <= "XX";
        end if; 
    end process;


    a_corner_1_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state50, grp_get_acceptanceCorners_fu_1341_a_corner_1_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            a_corner_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_corner_1_ce0 <= grp_get_acceptanceCorners_fu_1341_a_corner_1_ce0;
        else 
            a_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_1_d0 <= grp_get_acceptanceCorners_fu_1341_a_corner_1_d0;

    a_corner_1_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_a_corner_1_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_corner_1_we0 <= grp_get_acceptanceCorners_fu_1341_a_corner_1_we0;
        else 
            a_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1003_fu_4337_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_12_phi_fu_1133_p4) + unsigned(ap_const_lv3_1));
    add_ln1004_fu_4420_p2 <= std_logic_vector(unsigned(shl_ln1004_1_fu_4412_p3) + unsigned(shl_ln5_fu_4404_p3));
    add_ln1014_fu_4475_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_13_phi_fu_1145_p4) + unsigned(ap_const_lv3_7));
    add_ln1015_fu_4464_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_13_phi_fu_1145_p4) + unsigned(ap_const_lv3_1));
    add_ln1027_fu_4604_p2 <= std_logic_vector(unsigned(i_15_reg_1152) + unsigned(ap_const_lv3_1));
    add_ln1057_fu_6361_p2 <= std_logic_vector(unsigned(shl_ln6_fu_6354_p3) + unsigned(ap_const_lv16_6000));
    add_ln1062_fu_6809_p2 <= std_logic_vector(unsigned(shl_ln7_fu_6802_p3) + unsigned(ap_const_lv16_4000));
    add_ln37_1_fu_2629_p2 <= std_logic_vector(unsigned(ap_phi_mux_layer_1_phi_fu_1000_p4) + unsigned(ap_const_lv3_1));
    add_ln37_2_fu_1459_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_818) + unsigned(ap_const_lv7_1));
    add_ln37_3_fu_2617_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_985) + unsigned(ap_const_lv7_1));
    add_ln37_fu_1471_p2 <= std_logic_vector(unsigned(ap_phi_mux_layer_phi_fu_833_p4) + unsigned(ap_const_lv3_1));
    add_ln39_1_fu_2680_p2 <= std_logic_vector(unsigned(select_ln37_2_fu_2641_p3) + unsigned(ap_const_lv5_1));
    add_ln39_fu_1522_p2 <= std_logic_vector(unsigned(select_ln37_fu_1483_p3) + unsigned(ap_const_lv5_1));
    add_ln40_1_fu_2669_p2 <= std_logic_vector(unsigned(tmp_86_fu_2657_p3) + unsigned(zext_ln40_2_fu_2665_p1));
    add_ln40_fu_1511_p2 <= std_logic_vector(unsigned(tmp_85_fu_1499_p3) + unsigned(zext_ln40_fu_1507_p1));
    add_ln49_1_fu_2042_p2 <= std_logic_vector(unsigned(i_5_reg_886) + unsigned(ap_const_lv5_1));
    add_ln49_fu_1994_p2 <= std_logic_vector(unsigned(i_reg_851) + unsigned(ap_const_lv5_1));
    add_ln50_4_fu_1564_p2 <= std_logic_vector(unsigned(add_ln50_fu_1558_p2) + unsigned(ap_const_lv8_40));
    add_ln50_5_fu_2010_p2 <= std_logic_vector(unsigned(add_ln50_reg_6938) + unsigned(zext_ln50_22_fu_2006_p1));
    add_ln50_6_fu_2058_p2 <= std_logic_vector(unsigned(add_ln50_4_reg_6943) + unsigned(zext_ln50_24_fu_2054_p1));
    add_ln50_fu_1558_p2 <= std_logic_vector(unsigned(tmp_82_fu_1538_p3) + unsigned(zext_ln50_fu_1554_p1));
    add_ln581_1_fu_3507_p2 <= std_logic_vector(unsigned(F2_1_fu_3495_p2) + unsigned(ap_const_lv12_FEC));
    add_ln581_2_fu_4144_p2 <= std_logic_vector(unsigned(F2_2_fu_4132_p2) + unsigned(ap_const_lv12_FEC));
    add_ln581_3_fu_5282_p2 <= std_logic_vector(unsigned(F2_3_fu_5270_p2) + unsigned(ap_const_lv12_FEC));
    add_ln581_fu_2517_p2 <= std_logic_vector(unsigned(F2_fu_2505_p2) + unsigned(ap_const_lv12_FEC));
    add_ln703_1_fu_3018_p2 <= std_logic_vector(unsigned(current_z_i_index_V_q0) + unsigned(ap_const_lv32_FFF00000));
    add_ln933_fu_2784_p2 <= std_logic_vector(unsigned(i_6_reg_1042) + unsigned(ap_const_lv3_1));
    add_ln952_fu_2947_p2 <= std_logic_vector(unsigned(i_7_reg_1054) + unsigned(ap_const_lv3_1));
    add_ln954_1_fu_6178_p2 <= std_logic_vector(unsigned(sub_ln944_9_fu_6023_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln954_2_fu_6626_p2 <= std_logic_vector(unsigned(sub_ln944_10_fu_6471_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln954_fu_5738_p2 <= std_logic_vector(unsigned(sub_ln944_8_fu_5583_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_3_fu_2270_p2 <= std_logic_vector(unsigned(sub_ln944_3_fu_2136_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_4_fu_3233_p2 <= std_logic_vector(unsigned(sub_ln944_4_reg_7424) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_5_fu_3910_p2 <= std_logic_vector(unsigned(sub_ln944_5_reg_7538) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_6_fu_4803_p2 <= std_logic_vector(unsigned(sub_ln944_6_fu_4669_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_7_fu_5070_p2 <= std_logic_vector(unsigned(sub_ln944_7_fu_4943_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_fu_1852_p2 <= std_logic_vector(unsigned(sub_ln944_reg_6982) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_10_fu_6712_p2 <= std_logic_vector(unsigned(sub_ln964_10_fu_6706_p2) + unsigned(select_ln943_10_fu_6694_p3));
    add_ln964_3_fu_2349_p2 <= std_logic_vector(unsigned(sub_ln964_3_fu_2344_p2) + unsigned(select_ln943_3_fu_2337_p3));
    add_ln964_4_fu_3299_p2 <= std_logic_vector(unsigned(sub_ln964_4_fu_3294_p2) + unsigned(select_ln943_4_fu_3286_p3));
    add_ln964_5_fu_3976_p2 <= std_logic_vector(unsigned(sub_ln964_5_fu_3971_p2) + unsigned(select_ln943_5_fu_3963_p3));
    add_ln964_6_fu_4885_p2 <= std_logic_vector(unsigned(sub_ln964_6_fu_4879_p2) + unsigned(select_ln943_6_fu_4867_p3));
    add_ln964_7_fu_5151_p2 <= std_logic_vector(unsigned(sub_ln964_7_fu_5145_p2) + unsigned(select_ln943_7_fu_5133_p3));
    add_ln964_8_fu_5824_p2 <= std_logic_vector(unsigned(sub_ln964_8_fu_5818_p2) + unsigned(select_ln943_8_fu_5806_p3));
    add_ln964_9_fu_6264_p2 <= std_logic_vector(unsigned(sub_ln964_9_fu_6258_p2) + unsigned(select_ln943_9_fu_6246_p3));
    add_ln964_fu_1918_p2 <= std_logic_vector(unsigned(sub_ln964_fu_1913_p2) + unsigned(select_ln943_fu_1905_p3));
    add_ln967_fu_3001_p2 <= std_logic_vector(unsigned(i_8_reg_1096) + unsigned(ap_const_lv3_1));
    add_ln974_fu_2970_p2 <= std_logic_vector(unsigned(i_9_reg_1075) + unsigned(ap_const_lv3_1));
    add_ln985_fu_2765_p2 <= std_logic_vector(unsigned(trunc_ln984_fu_2749_p1) + unsigned(ap_const_lv12_FFF));
    add_ln987_fu_3025_p2 <= std_logic_vector(unsigned(i_10_reg_1107) + unsigned(ap_const_lv3_1));
    add_ln997_fu_3703_p2 <= std_logic_vector(unsigned(i_11_reg_1118) + unsigned(ap_const_lv3_1));
    and_ln1050_fu_5908_p2 <= (or_ln1050_fu_5904_p2 and grp_fu_1401_p2);
    and_ln1055_fu_6348_p2 <= (or_ln1055_fu_6344_p2 and grp_fu_1401_p2);
    and_ln1060_fu_6796_p2 <= (or_ln1060_fu_6792_p2 and grp_fu_1401_p2);
    and_ln1494_fu_1644_p2 <= (icmp_ln1494_fu_1638_p2 and flatBottom_q0);
    and_ln200_1_fu_3416_p2 <= (grp_fu_1393_p2 and and_ln200_fu_3410_p2);
    and_ln200_fu_3410_p2 <= (or_ln200_fu_3386_p2 and or_ln200_1_fu_3404_p2);
    and_ln224_1_fu_4052_p2 <= (or_ln224_1_fu_4048_p2 and grp_fu_1393_p2);
    and_ln224_fu_2425_p2 <= (or_ln224_fu_2421_p2 and grp_fu_1393_p2);
    and_ln581_1_fu_4236_p2 <= (xor_ln582_1_fu_4230_p2 and icmp_ln581_2_fu_4138_p2);
    and_ln581_2_fu_5392_p2 <= (xor_ln582_2_fu_5386_p2 and icmp_ln581_3_fu_5276_p2);
    and_ln581_fu_3602_p2 <= (xor_ln582_fu_3596_p2 and icmp_ln581_1_fu_3501_p2);
    and_ln582_2_fu_4299_p2 <= (xor_ln571_1_fu_4294_p2 and icmp_ln582_2_reg_7586);
    and_ln582_3_fu_5367_p2 <= (xor_ln571_2_fu_5362_p2 and icmp_ln582_3_fu_5306_p2);
    and_ln582_fu_3665_p2 <= (xor_ln571_fu_3660_p2 and icmp_ln582_1_reg_7481);
    and_ln585_2_fu_4248_p2 <= (icmp_ln585_2_fu_4242_p2 and and_ln581_1_fu_4236_p2);
    and_ln585_3_fu_5398_p2 <= (icmp_ln585_3_fu_5316_p2 and and_ln581_2_fu_5392_p2);
    and_ln585_4_fu_5444_p2 <= (xor_ln585_fu_5438_p2 and and_ln581_2_fu_5392_p2);
    and_ln585_fu_3614_p2 <= (icmp_ln585_1_fu_3608_p2 and and_ln581_fu_3602_p2);
    and_ln603_2_fu_4266_p2 <= (xor_ln581_1_fu_4260_p2 and icmp_ln603_2_fu_4184_p2);
    and_ln603_3_fu_5424_p2 <= (xor_ln581_2_fu_5418_p2 and icmp_ln603_3_fu_5332_p2);
    and_ln603_fu_3632_p2 <= (xor_ln581_fu_3626_p2 and icmp_ln603_1_fu_3547_p2);
    and_ln741_fu_1989_p2 <= (or_ln935_fu_1984_p2 and icmp_ln1495_reg_7003);
    and_ln949_10_fu_6091_p2 <= (trunc_ln949_2_fu_6087_p1 and tmp_V_28_reg_7852);
    and_ln949_11_fu_3149_p2 <= (or_ln949_13_fu_3143_p2 and m_71_fu_3063_p3);
    and_ln949_12_fu_6539_p2 <= (trunc_ln949_4_fu_6535_p1 and tmp_V_29_reg_7899);
    and_ln949_13_fu_3189_p2 <= (xor_ln949_4_fu_3169_p2 and p_Result_132_fu_3175_p3);
    and_ln949_14_fu_3826_p2 <= (or_ln949_14_fu_3820_p2 and m_73_fu_3740_p3);
    and_ln949_15_fu_3866_p2 <= (xor_ln949_5_fu_3846_p2 and p_Result_138_fu_3852_p3);
    and_ln949_16_fu_4729_p2 <= (or_ln949_15_fu_4723_p2 and m_76_fu_4645_p3);
    and_ln949_17_fu_4769_p2 <= (xor_ln949_6_fu_4749_p2 and p_Result_144_fu_4755_p3);
    and_ln949_18_fu_5041_p2 <= (xor_ln949_7_fu_5022_p2 and p_Result_148_fu_5028_p3);
    and_ln949_19_fu_5708_p2 <= (xor_ln949_8_fu_5688_p2 and p_Result_155_fu_5694_p3);
    and_ln949_20_fu_6148_p2 <= (xor_ln949_9_fu_6128_p2 and p_Result_160_fu_6134_p3);
    and_ln949_21_fu_6596_p2 <= (xor_ln949_10_fu_6576_p2 and p_Result_165_fu_6582_p3);
    and_ln949_22_fu_5003_p2 <= (tmp_V_26_reg_7687 and or_ln949_16_fu_4997_p2);
    and_ln949_6_fu_1802_p2 <= (xor_ln949_fu_1782_p2 and p_Result_122_fu_1788_p3);
    and_ln949_7_fu_2196_p2 <= (or_ln949_fu_2190_p2 and m_69_fu_2110_p3);
    and_ln949_8_fu_5651_p2 <= (trunc_ln949_fu_5647_p1 and tmp_V_27_reg_7805);
    and_ln949_9_fu_2236_p2 <= (xor_ln949_3_fu_2216_p2 and p_Result_126_fu_2222_p3);
    and_ln949_fu_1762_p2 <= (or_ln949_12_fu_1756_p2 and m_67_fu_1676_p3);
    and_ln971_fu_1978_p2 <= (or_ln971_fu_1974_p2 and grp_fu_1393_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp10_stage0 <= ap_CS_fsm(65);
    ap_CS_fsm_pp11_stage0 <= ap_CS_fsm(67);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(54);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(56);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(58);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(59);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(61);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(63);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state136 <= ap_CS_fsm(66);
    ap_CS_fsm_state146 <= ap_CS_fsm(68);
    ap_CS_fsm_state147 <= ap_CS_fsm(69);
    ap_CS_fsm_state148 <= ap_CS_fsm(70);
    ap_CS_fsm_state149 <= ap_CS_fsm(71);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state150 <= ap_CS_fsm(72);
    ap_CS_fsm_state151 <= ap_CS_fsm(73);
    ap_CS_fsm_state152 <= ap_CS_fsm(74);
    ap_CS_fsm_state153 <= ap_CS_fsm(75);
    ap_CS_fsm_state154 <= ap_CS_fsm(76);
    ap_CS_fsm_state155 <= ap_CS_fsm(77);
    ap_CS_fsm_state156 <= ap_CS_fsm(78);
    ap_CS_fsm_state157 <= ap_CS_fsm(79);
    ap_CS_fsm_state158 <= ap_CS_fsm(80);
    ap_CS_fsm_state159 <= ap_CS_fsm(81);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state160 <= ap_CS_fsm(82);
    ap_CS_fsm_state161 <= ap_CS_fsm(83);
    ap_CS_fsm_state162 <= ap_CS_fsm(84);
    ap_CS_fsm_state163 <= ap_CS_fsm(85);
    ap_CS_fsm_state164 <= ap_CS_fsm(86);
    ap_CS_fsm_state165 <= ap_CS_fsm(87);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(36);
    ap_CS_fsm_state41 <= ap_CS_fsm(37);
    ap_CS_fsm_state42 <= ap_CS_fsm(38);
    ap_CS_fsm_state43 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(41);
    ap_CS_fsm_state47 <= ap_CS_fsm(42);
    ap_CS_fsm_state48 <= ap_CS_fsm(43);
    ap_CS_fsm_state49 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(45);
    ap_CS_fsm_state51 <= ap_CS_fsm(46);
    ap_CS_fsm_state52 <= ap_CS_fsm(47);
    ap_CS_fsm_state53 <= ap_CS_fsm(48);
    ap_CS_fsm_state54 <= ap_CS_fsm(49);
    ap_CS_fsm_state55 <= ap_CS_fsm(50);
    ap_CS_fsm_state56 <= ap_CS_fsm(51);
    ap_CS_fsm_state57 <= ap_CS_fsm(52);
    ap_CS_fsm_state58 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(55);
    ap_CS_fsm_state64 <= ap_CS_fsm(57);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state73 <= ap_CS_fsm(60);
    ap_CS_fsm_state79 <= ap_CS_fsm(62);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state83 <= ap_CS_fsm(64);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_6884)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_6884)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_6884)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_pp10_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp10_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp10_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp11_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp11_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp11_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln37_1_reg_7165)
    begin
                ap_block_pp3_stage0_01001 <= ((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln37_1_reg_7165)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln37_1_reg_7165)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state100_pp10_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp10_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp10_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp10_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp10_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp10_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp10_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp10_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp10_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp10_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp10_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp10_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp10_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp10_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp10_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp10_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp10_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp10_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp10_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp10_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp10_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp10_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp10_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp10_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp10_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp10_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp10_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp10_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp10_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp10_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp10_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp10_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp10_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp10_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp10_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp10_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp11_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp11_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp11_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp11_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp11_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp11_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp11_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp11_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp11_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(patch_stream_V_full_n, icmp_ln37_reg_6884)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((icmp_ln37_reg_6884 = ap_const_lv1_0) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state45_pp3_stage0_iter1_assign_proc : process(patch_stream_V_full_n, icmp_ln37_1_reg_7165)
    begin
                ap_block_state45_pp3_stage0_iter1 <= ((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (patch_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state59_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp7_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp8_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp8_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp10_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp10_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp10_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp10_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp10_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp10_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp10_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp10_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp10_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp10_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp10_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp10_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp10_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp10_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp10_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp10_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln37_fu_1465_p2)
    begin
        if ((icmp_ln37_fu_1465_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp10_exit_iter0_state84_assign_proc : process(icmp_ln1013_fu_4458_p2)
    begin
        if ((icmp_ln1013_fu_4458_p2 = ap_const_lv1_1)) then 
            ap_condition_pp10_exit_iter0_state84 <= ap_const_logic_1;
        else 
            ap_condition_pp10_exit_iter0_state84 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp11_flush_enable_assign_proc : process(ap_CS_fsm_pp11_stage0, icmp_ln1027_fu_4610_p2, ap_block_pp11_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp11_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0) and (icmp_ln1027_fu_4610_p2 = ap_const_lv1_1))) then 
            ap_condition_pp11_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp11_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state23_assign_proc : process(icmp_ln49_fu_2000_p2)
    begin
        if ((icmp_ln49_fu_2000_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state27_assign_proc : process(icmp_ln49_1_fu_2048_p2)
    begin
        if ((icmp_ln49_1_fu_2048_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state44_assign_proc : process(icmp_ln37_1_fu_2623_p2)
    begin
        if ((icmp_ln37_1_fu_2623_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state59_assign_proc : process(icmp_ln952_fu_2953_p2)
    begin
        if ((icmp_ln952_fu_2953_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state59 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state59 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state62_assign_proc : process(icmp_ln974_fu_2976_p2)
    begin
        if ((icmp_ln974_fu_2976_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state62 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state62 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state65_assign_proc : process(icmp_ln967_fu_3007_p2)
    begin
        if ((icmp_ln967_fu_3007_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state65 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state67_assign_proc : process(icmp_ln987_fu_3031_p2)
    begin
        if ((icmp_ln987_fu_3031_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state67 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state74_assign_proc : process(icmp_ln997_fu_3709_p2)
    begin
        if ((icmp_ln997_fu_3709_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state74 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state74 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state80_assign_proc : process(icmp_ln1003_fu_4343_p2)
    begin
        if ((icmp_ln1003_fu_4343_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state80 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state80 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, cmp_i_i_reg_7184, ap_CS_fsm_state165)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((cmp_i_i_reg_7184 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state165)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp10 <= (ap_idle_pp10 xor ap_const_logic_1);
    ap_enable_pp11 <= (ap_idle_pp11 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp10_assign_proc : process(ap_enable_reg_pp10_iter0, ap_enable_reg_pp10_iter1, ap_enable_reg_pp10_iter2, ap_enable_reg_pp10_iter3, ap_enable_reg_pp10_iter4, ap_enable_reg_pp10_iter5, ap_enable_reg_pp10_iter6, ap_enable_reg_pp10_iter7, ap_enable_reg_pp10_iter8, ap_enable_reg_pp10_iter9, ap_enable_reg_pp10_iter10, ap_enable_reg_pp10_iter11, ap_enable_reg_pp10_iter12, ap_enable_reg_pp10_iter13, ap_enable_reg_pp10_iter14, ap_enable_reg_pp10_iter15, ap_enable_reg_pp10_iter16, ap_enable_reg_pp10_iter17, ap_enable_reg_pp10_iter18, ap_enable_reg_pp10_iter19, ap_enable_reg_pp10_iter20, ap_enable_reg_pp10_iter21, ap_enable_reg_pp10_iter22, ap_enable_reg_pp10_iter23, ap_enable_reg_pp10_iter24, ap_enable_reg_pp10_iter25, ap_enable_reg_pp10_iter26, ap_enable_reg_pp10_iter27, ap_enable_reg_pp10_iter28, ap_enable_reg_pp10_iter29, ap_enable_reg_pp10_iter30, ap_enable_reg_pp10_iter31, ap_enable_reg_pp10_iter32, ap_enable_reg_pp10_iter33, ap_enable_reg_pp10_iter34, ap_enable_reg_pp10_iter35, ap_enable_reg_pp10_iter36, ap_enable_reg_pp10_iter37, ap_enable_reg_pp10_iter38, ap_enable_reg_pp10_iter39, ap_enable_reg_pp10_iter40, ap_enable_reg_pp10_iter41, ap_enable_reg_pp10_iter42, ap_enable_reg_pp10_iter43, ap_enable_reg_pp10_iter44, ap_enable_reg_pp10_iter45, ap_enable_reg_pp10_iter46, ap_enable_reg_pp10_iter47, ap_enable_reg_pp10_iter48, ap_enable_reg_pp10_iter49, ap_enable_reg_pp10_iter50, ap_enable_reg_pp10_iter51)
    begin
        if (((ap_enable_reg_pp10_iter51 = ap_const_logic_0) and (ap_enable_reg_pp10_iter50 = ap_const_logic_0) and (ap_enable_reg_pp10_iter49 = ap_const_logic_0) and (ap_enable_reg_pp10_iter48 = ap_const_logic_0) and (ap_enable_reg_pp10_iter47 = ap_const_logic_0) and (ap_enable_reg_pp10_iter46 = ap_const_logic_0) and (ap_enable_reg_pp10_iter45 = ap_const_logic_0) and (ap_enable_reg_pp10_iter44 = ap_const_logic_0) and (ap_enable_reg_pp10_iter43 = ap_const_logic_0) and (ap_enable_reg_pp10_iter42 = ap_const_logic_0) and (ap_enable_reg_pp10_iter41 = ap_const_logic_0) and (ap_enable_reg_pp10_iter40 = ap_const_logic_0) and (ap_enable_reg_pp10_iter39 = ap_const_logic_0) and (ap_enable_reg_pp10_iter38 = ap_const_logic_0) and (ap_enable_reg_pp10_iter37 = ap_const_logic_0) and (ap_enable_reg_pp10_iter36 = ap_const_logic_0) and (ap_enable_reg_pp10_iter35 = ap_const_logic_0) and (ap_enable_reg_pp10_iter34 = ap_const_logic_0) and (ap_enable_reg_pp10_iter33 = ap_const_logic_0) and (ap_enable_reg_pp10_iter32 = ap_const_logic_0) and (ap_enable_reg_pp10_iter31 = ap_const_logic_0) and (ap_enable_reg_pp10_iter30 = ap_const_logic_0) and (ap_enable_reg_pp10_iter29 = ap_const_logic_0) and (ap_enable_reg_pp10_iter28 = ap_const_logic_0) and (ap_enable_reg_pp10_iter27 = ap_const_logic_0) and (ap_enable_reg_pp10_iter26 = ap_const_logic_0) and (ap_enable_reg_pp10_iter25 = ap_const_logic_0) and (ap_enable_reg_pp10_iter24 = ap_const_logic_0) and (ap_enable_reg_pp10_iter23 = ap_const_logic_0) and (ap_enable_reg_pp10_iter22 = ap_const_logic_0) and (ap_enable_reg_pp10_iter21 = ap_const_logic_0) and (ap_enable_reg_pp10_iter20 = ap_const_logic_0) and (ap_enable_reg_pp10_iter19 = ap_const_logic_0) and (ap_enable_reg_pp10_iter18 = ap_const_logic_0) and (ap_enable_reg_pp10_iter17 = ap_const_logic_0) and (ap_enable_reg_pp10_iter16 = ap_const_logic_0) and (ap_enable_reg_pp10_iter15 = ap_const_logic_0) and (ap_enable_reg_pp10_iter14 = ap_const_logic_0) and (ap_enable_reg_pp10_iter13 = ap_const_logic_0) and (ap_enable_reg_pp10_iter12 = ap_const_logic_0) and (ap_enable_reg_pp10_iter11 = ap_const_logic_0) and (ap_enable_reg_pp10_iter10 = ap_const_logic_0) and (ap_enable_reg_pp10_iter9 = ap_const_logic_0) and (ap_enable_reg_pp10_iter8 = ap_const_logic_0) and (ap_enable_reg_pp10_iter7 = ap_const_logic_0) and (ap_enable_reg_pp10_iter6 = ap_const_logic_0) and (ap_enable_reg_pp10_iter5 = ap_const_logic_0) and (ap_enable_reg_pp10_iter4 = ap_const_logic_0) and (ap_enable_reg_pp10_iter3 = ap_const_logic_0) and (ap_enable_reg_pp10_iter2 = ap_const_logic_0) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_0))) then 
            ap_idle_pp10 <= ap_const_logic_1;
        else 
            ap_idle_pp10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp11_assign_proc : process(ap_enable_reg_pp11_iter1, ap_enable_reg_pp11_iter0, ap_enable_reg_pp11_iter8, ap_enable_reg_pp11_iter2, ap_enable_reg_pp11_iter3, ap_enable_reg_pp11_iter4, ap_enable_reg_pp11_iter5, ap_enable_reg_pp11_iter6, ap_enable_reg_pp11_iter7)
    begin
        if (((ap_enable_reg_pp11_iter1 = ap_const_logic_0) and (ap_enable_reg_pp11_iter7 = ap_const_logic_0) and (ap_enable_reg_pp11_iter6 = ap_const_logic_0) and (ap_enable_reg_pp11_iter5 = ap_const_logic_0) and (ap_enable_reg_pp11_iter4 = ap_const_logic_0) and (ap_enable_reg_pp11_iter3 = ap_const_logic_0) and (ap_enable_reg_pp11_iter2 = ap_const_logic_0) and (ap_enable_reg_pp11_iter8 = ap_const_logic_0) and (ap_enable_reg_pp11_iter0 = ap_const_logic_0))) then 
            ap_idle_pp11 <= ap_const_logic_1;
        else 
            ap_idle_pp11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter4, ap_enable_reg_pp7_iter5)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter3, ap_enable_reg_pp8_iter4)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_0) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1, ap_enable_reg_pp9_iter2)
    begin
        if (((ap_enable_reg_pp9_iter2 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_12_phi_fu_1133_p4_assign_proc : process(i_12_reg_1129, add_ln1003_reg_7613, ap_CS_fsm_pp9_stage0, icmp_ln1003_reg_7618, ap_enable_reg_pp9_iter1, ap_block_pp9_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (icmp_ln1003_reg_7618 = ap_const_lv1_0))) then 
            ap_phi_mux_i_12_phi_fu_1133_p4 <= add_ln1003_reg_7613;
        else 
            ap_phi_mux_i_12_phi_fu_1133_p4 <= i_12_reg_1129;
        end if; 
    end process;


    ap_phi_mux_i_13_phi_fu_1145_p4_assign_proc : process(i_13_reg_1141, icmp_ln1013_reg_7637, ap_CS_fsm_pp10_stage0, add_ln1015_reg_7641, ap_enable_reg_pp10_iter1, ap_block_pp10_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (icmp_ln1013_reg_7637 = ap_const_lv1_0))) then 
            ap_phi_mux_i_13_phi_fu_1145_p4 <= add_ln1015_reg_7641;
        else 
            ap_phi_mux_i_13_phi_fu_1145_p4 <= i_13_reg_1141;
        end if; 
    end process;


    ap_phi_mux_layer_1_phi_fu_1000_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln37_1_reg_7165, layer_1_reg_996, select_ln37_3_reg_7169)
    begin
        if (((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_layer_1_phi_fu_1000_p4 <= select_ln37_3_reg_7169;
        else 
            ap_phi_mux_layer_1_phi_fu_1000_p4 <= layer_1_reg_996;
        end if; 
    end process;


    ap_phi_mux_layer_phi_fu_833_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_6884, layer_reg_829, select_ln37_1_reg_6888)
    begin
        if (((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_layer_phi_fu_833_p4 <= select_ln37_1_reg_6888;
        else 
            ap_phi_mux_layer_phi_fu_833_p4 <= layer_reg_829;
        end if; 
    end process;


    ap_ready_assign_proc : process(cmp_i_i_reg_7184, ap_CS_fsm_state165)
    begin
        if (((cmp_i_i_reg_7184 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state165))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_3561_p2 <= std_logic_vector(shift_right(signed(man_V_9_fu_3481_p3),to_integer(unsigned('0' & zext_ln586_1_fu_3557_p1(31-1 downto 0)))));
    ashr_ln586_2_fu_4198_p2 <= std_logic_vector(shift_right(signed(man_V_12_fu_4118_p3),to_integer(unsigned('0' & zext_ln586_2_fu_4194_p1(31-1 downto 0)))));
    ashr_ln586_3_fu_5346_p2 <= std_logic_vector(shift_right(signed(man_V_15_fu_5263_p3),to_integer(unsigned('0' & zext_ln586_3_fu_5342_p1(31-1 downto 0)))));
    ashr_ln586_fu_2603_p2 <= std_logic_vector(shift_right(signed(man_V_6_fu_2491_p3),to_integer(unsigned('0' & zext_ln586_fu_2599_p1(31-1 downto 0)))));
    b_corner_0_address0 <= grp_get_acceptanceCorners_fu_1341_b_corner_0_address0;

    b_corner_0_ce0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_b_corner_0_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_corner_0_ce0 <= grp_get_acceptanceCorners_fu_1341_b_corner_0_ce0;
        else 
            b_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_d0 <= grp_get_acceptanceCorners_fu_1341_b_corner_0_d0;

    b_corner_0_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_b_corner_0_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_corner_0_we0 <= grp_get_acceptanceCorners_fu_1341_b_corner_0_we0;
        else 
            b_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_1_address0_assign_proc : process(ap_CS_fsm_state50, grp_get_acceptanceCorners_fu_1341_b_corner_1_address0, ap_CS_fsm_state18, ap_CS_fsm_state49, zext_ln875_fu_2691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            b_corner_1_address0 <= zext_ln875_fu_2691_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_corner_1_address0 <= grp_get_acceptanceCorners_fu_1341_b_corner_1_address0;
        else 
            b_corner_1_address0 <= "XX";
        end if; 
    end process;


    b_corner_1_ce0_assign_proc : process(ap_CS_fsm_state50, grp_get_acceptanceCorners_fu_1341_b_corner_1_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            b_corner_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_corner_1_ce0 <= grp_get_acceptanceCorners_fu_1341_b_corner_1_ce0;
        else 
            b_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_1_d0 <= grp_get_acceptanceCorners_fu_1341_b_corner_1_d0;

    b_corner_1_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_b_corner_1_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_corner_1_we0 <= grp_get_acceptanceCorners_fu_1341_b_corner_1_we0;
        else 
            b_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln1050_fu_5874_p1 <= grp_fu_1390_p1;
    bitcast_ln1055_fu_6314_p1 <= grp_fu_1390_p1;
    bitcast_ln1060_fu_6762_p1 <= grp_fu_1390_p1;
    bitcast_ln200_1_fu_3357_p1 <= select_ln935_1_reg_7450;
    bitcast_ln200_fu_3340_p1 <= conv_reg_7457;
    bitcast_ln224_1_fu_4018_p1 <= select_ln935_2_fu_4009_p3;
    bitcast_ln224_fu_2391_p1 <= select_ln935_fu_2382_p3;
    bitcast_ln351_2_fu_5202_p1 <= zext_ln368_2_fu_5199_p1;
    bitcast_ln351_3_fu_6309_p1 <= zext_ln368_3_fu_6305_p1;
    bitcast_ln351_4_fu_6757_p1 <= zext_ln368_4_fu_6753_p1;
    bitcast_ln351_fu_5869_p1 <= zext_ln368_fu_5865_p1;
    bitcast_ln702_2_fu_4058_p1 <= grp_fu_1390_p1;
    bitcast_ln702_3_fu_3571_p1 <= select_ln989_reg_7464;
    bitcast_ln702_fu_2431_p1 <= grp_fu_1390_p1;
    bitcast_ln744_2_fu_2378_p1 <= LD_5_fu_2374_p1;
    bitcast_ln744_3_fu_3328_p1 <= LD_6_fu_3324_p1;
    bitcast_ln744_4_fu_4005_p1 <= LD_8_fu_4001_p1;
    bitcast_ln744_5_fu_4914_p1 <= LD_9_fu_4910_p1;
    bitcast_ln744_6_fu_5180_p1 <= LD_10_fu_5176_p1;
    bitcast_ln744_7_fu_5853_p1 <= LD_12_fu_5849_p1;
    bitcast_ln744_8_fu_6293_p1 <= LD_13_fu_6289_p1;
    bitcast_ln744_9_fu_6741_p1 <= LD_14_fu_6737_p1;
    bitcast_ln744_fu_1947_p1 <= LD_fu_1943_p1;

    c_corner_0_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln671_fu_1528_p1, grp_get_acceptanceCorners_fu_1341_c_corner_0_address0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_corner_0_address0 <= zext_ln671_fu_1528_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_corner_0_address0 <= grp_get_acceptanceCorners_fu_1341_c_corner_0_address0;
        else 
            c_corner_0_address0 <= "XX";
        end if; 
    end process;


    c_corner_0_ce0_assign_proc : process(ap_CS_fsm_state19, grp_get_acceptanceCorners_fu_1341_c_corner_0_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_corner_0_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_corner_0_ce0 <= grp_get_acceptanceCorners_fu_1341_c_corner_0_ce0;
        else 
            c_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_0_d0 <= grp_get_acceptanceCorners_fu_1341_c_corner_0_d0;

    c_corner_0_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_c_corner_0_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_corner_0_we0 <= grp_get_acceptanceCorners_fu_1341_c_corner_0_we0;
        else 
            c_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_1_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln671_fu_1528_p1, grp_get_acceptanceCorners_fu_1341_c_corner_1_address0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_corner_1_address0 <= zext_ln671_fu_1528_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_corner_1_address0 <= grp_get_acceptanceCorners_fu_1341_c_corner_1_address0;
        else 
            c_corner_1_address0 <= "XX";
        end if; 
    end process;


    c_corner_1_ce0_assign_proc : process(ap_CS_fsm_state19, grp_get_acceptanceCorners_fu_1341_c_corner_1_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_corner_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_corner_1_ce0 <= grp_get_acceptanceCorners_fu_1341_c_corner_1_ce0;
        else 
            c_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_1_d0 <= grp_get_acceptanceCorners_fu_1341_c_corner_1_d0;

    c_corner_1_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_c_corner_1_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_corner_1_we0 <= grp_get_acceptanceCorners_fu_1341_c_corner_1_we0;
        else 
            c_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i_fu_2686_p2 <= "1" when (signed(num_patches_constprop_i) > signed(nPatchesAtOriginal_V_reg_6962)) else "0";

    current_z_i_index_V_address0_assign_proc : process(zext_ln931_reg_7283, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, i_7_cast_fu_2959_p1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, i_9_cast_fu_2982_p1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, i_8_cast_fu_3013_p1, ap_CS_fsm_state58, ap_CS_fsm_state52, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            current_z_i_index_V_address0 <= i_8_cast_fu_3013_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            current_z_i_index_V_address0 <= i_9_cast_fu_2982_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            current_z_i_index_V_address0 <= i_7_cast_fu_2959_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            current_z_i_index_V_address0 <= zext_ln931_reg_7283(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            current_z_i_index_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            current_z_i_index_V_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001, grp_get_index_from_z_fu_1317_ap_done, ap_CS_fsm_state58, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((grp_get_index_from_z_fu_1317_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            current_z_i_index_V_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_V_d0_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state52, shl_ln731_fu_2940_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            current_z_i_index_V_d0 <= shl_ln731_fu_2940_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            current_z_i_index_V_d0 <= ap_const_lv32_7FF00000;
        else 
            current_z_i_index_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_z_i_index_V_we0_assign_proc : process(grp_get_index_from_z_fu_1317_ap_done, ap_CS_fsm_state58, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((grp_get_index_from_z_fu_1317_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            current_z_i_index_V_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    current_z_top_index_V_1_fu_2964_p2 <= std_logic_vector(unsigned(current_z_top_index_V_reg_7259) + unsigned(ap_const_lv32_1));
    current_z_top_index_V_3_fu_2994_p2 <= std_logic_vector(unsigned(current_z_top_index_V_2_reg_1065) + unsigned(ap_const_lv32_FFFFFFFF));
    current_z_top_index_V_4_fu_2987_p2 <= std_logic_vector(unsigned(current_z_top_index_V_2_reg_1065) + unsigned(ap_const_lv32_1));
    d_corner_0_address0 <= grp_get_acceptanceCorners_fu_1341_d_corner_0_address0;

    d_corner_0_ce0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_d_corner_0_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            d_corner_0_ce0 <= grp_get_acceptanceCorners_fu_1341_d_corner_0_ce0;
        else 
            d_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_0_d0 <= grp_get_acceptanceCorners_fu_1341_d_corner_0_d0;

    d_corner_0_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_d_corner_0_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            d_corner_0_we0 <= grp_get_acceptanceCorners_fu_1341_d_corner_0_we0;
        else 
            d_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_1_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln671_fu_1528_p1, grp_get_acceptanceCorners_fu_1341_d_corner_1_address0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            d_corner_1_address0 <= zext_ln671_fu_1528_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            d_corner_1_address0 <= grp_get_acceptanceCorners_fu_1341_d_corner_1_address0;
        else 
            d_corner_1_address0 <= "XX";
        end if; 
    end process;


    d_corner_1_ce0_assign_proc : process(ap_CS_fsm_state19, grp_get_acceptanceCorners_fu_1341_d_corner_1_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            d_corner_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            d_corner_1_ce0 <= grp_get_acceptanceCorners_fu_1341_d_corner_1_ce0;
        else 
            d_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_1_d0 <= grp_get_acceptanceCorners_fu_1341_d_corner_1_d0;

    d_corner_1_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_d_corner_1_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            d_corner_1_we0 <= grp_get_acceptanceCorners_fu_1341_d_corner_1_we0;
        else 
            d_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_2_fu_5857_p1 <= dc_1_reg_1186;
    data_V_3_fu_6297_p1 <= dc_2_reg_1207;
    data_V_4_fu_6745_p1 <= dc_3_reg_1229;
    data_V_fu_5191_p1 <= grp_fu_1383_p2;
    exp_tmp_1_fu_3445_p4 <= ireg_1_fu_3429_p1(62 downto 52);
    exp_tmp_2_fu_4082_p4 <= ireg_2_fu_4062_p3(62 downto 52);
    exp_tmp_fu_2455_p4 <= ireg_fu_2435_p3(62 downto 52);

    flatBottom_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln671_fu_1528_p1, grp_get_acceptanceCorners_fu_1341_flatBottom_address0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            flatBottom_address0 <= zext_ln671_fu_1528_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            flatBottom_address0 <= grp_get_acceptanceCorners_fu_1341_flatBottom_address0;
        else 
            flatBottom_address0 <= "XX";
        end if; 
    end process;


    flatBottom_ce0_assign_proc : process(ap_CS_fsm_state19, grp_get_acceptanceCorners_fu_1341_flatBottom_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            flatBottom_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            flatBottom_ce0 <= grp_get_acceptanceCorners_fu_1341_flatBottom_ce0;
        else 
            flatBottom_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatBottom_d0 <= grp_get_acceptanceCorners_fu_1341_flatBottom_d0;

    flatBottom_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_flatBottom_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            flatBottom_we0 <= grp_get_acceptanceCorners_fu_1341_flatBottom_we0;
        else 
            flatBottom_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flatTop_address0 <= grp_get_acceptanceCorners_fu_1341_flatTop_address0;

    flatTop_ce0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_flatTop_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            flatTop_ce0 <= grp_get_acceptanceCorners_fu_1341_flatTop_ce0;
        else 
            flatTop_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatTop_d0 <= grp_get_acceptanceCorners_fu_1341_flatTop_d0;

    flatTop_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_flatTop_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            flatTop_we0 <= grp_get_acceptanceCorners_fu_1341_flatTop_we0;
        else 
            flatTop_we0 <= ap_const_logic_0;
        end if; 
    end process;


    get_radiiradii_address0_assign_proc : process(ap_CS_fsm_state54, zext_ln931_fu_2790_p1, ap_CS_fsm_pp10_stage0, ap_enable_reg_pp10_iter0, trunc_ln1015_cast_fu_4470_p1, ap_block_pp10_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_address0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1))) then 
            get_radiiradii_address0 <= trunc_ln1015_cast_fu_4470_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            get_radiiradii_address0 <= zext_ln931_fu_2790_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            get_radiiradii_address0 <= ap_const_lv3_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            get_radiiradii_address0 <= grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_address0;
        else 
            get_radiiradii_address0 <= "XXX";
        end if; 
    end process;


    get_radiiradii_ce0_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_pp10_stage0, ap_block_pp10_stage0_11001, ap_enable_reg_pp10_iter0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or ((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1)))) then 
            get_radiiradii_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            get_radiiradii_ce0 <= ap_const_logic_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            get_radiiradii_ce0 <= grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_ce0;
        else 
            get_radiiradii_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_alignedtoline_per_layer_loop3_fu_1250_ap_start <= grp_alignedtoline_per_layer_loop3_fu_1250_ap_start_reg;
    grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_address0 <= ap_const_lv3_0;
    grp_alignedtoline_per_layer_loop3_fu_1250_get_radiiradii_ce0 <= ap_const_logic_0;

    grp_alignedtoline_per_layer_loop3_fu_1250_i_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_i_offset <= ap_const_lv3_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_i_offset <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_i_offset <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_i_offset <= ap_const_lv3_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_i_offset <= ap_const_lv3_0;
        else 
            grp_alignedtoline_per_layer_loop3_fu_1250_i_offset <= "XXX";
        end if; 
    end process;


    grp_alignedtoline_per_layer_loop3_fu_1250_leftRight_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_leftRight_offset <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_leftRight_offset <= ap_const_lv1_0;
        else 
            grp_alignedtoline_per_layer_loop3_fu_1250_leftRight_offset <= "X";
        end if; 
    end process;


    grp_alignedtoline_per_layer_loop3_fu_1250_p_read_assign_proc : process(rhs_reg_921, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_p_read <= rhs_reg_921;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_p_read <= ap_const_lv32_1600068;
        else 
            grp_alignedtoline_per_layer_loop3_fu_1250_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_alignedtoline_per_layer_loop3_fu_1250_z_top_assign_proc : process(z_top_min_V_reg_955, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_z_top <= z_top_min_V_reg_955;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_alignedtoline_per_layer_loop3_fu_1250_z_top <= ap_const_lv32_3200000;
        else 
            grp_alignedtoline_per_layer_loop3_fu_1250_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1387_p0 <= std_logic_vector(unsigned(num_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));

    grp_fu_1390_p0_assign_proc : process(select_ln935_fu_2382_p3, ap_CS_fsm_state30, select_ln989_fu_3422_p3, select_ln935_2_fu_4009_p3, bitcast_ln351_2_fu_5202_p1, bitcast_ln351_fu_5869_p1, ap_CS_fsm_state149, bitcast_ln351_3_fu_6309_p1, ap_CS_fsm_state155, bitcast_ln351_4_fu_6757_p1, ap_CS_fsm_state161, ap_enable_reg_pp7_iter3, ap_enable_reg_pp8_iter2, ap_enable_reg_pp11_iter6, ap_block_pp7_stage0, ap_block_pp8_stage0, ap_block_pp11_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            grp_fu_1390_p0 <= bitcast_ln351_4_fu_6757_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            grp_fu_1390_p0 <= bitcast_ln351_3_fu_6309_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_fu_1390_p0 <= bitcast_ln351_fu_5869_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp11_stage0) and (ap_enable_reg_pp11_iter6 = ap_const_logic_1))) then 
            grp_fu_1390_p0 <= bitcast_ln351_2_fu_5202_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            grp_fu_1390_p0 <= select_ln935_2_fu_4009_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_1))) then 
            grp_fu_1390_p0 <= select_ln989_fu_3422_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1390_p0 <= select_ln935_fu_2382_p3;
        else 
            grp_fu_1390_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1393_opcode_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, icmp_ln987_reg_7394_pp7_iter1_reg, icmp_ln997_reg_7513_pp8_iter1_reg, ap_enable_reg_pp7_iter2, ap_enable_reg_pp8_iter2, ap_block_pp7_stage0_00001, ap_block_pp8_stage0_00001)
    begin
        if ((((icmp_ln987_reg_7394_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_00001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_00001) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (icmp_ln997_reg_7513_pp8_iter1_reg = ap_const_lv1_0)))) then 
            grp_fu_1393_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_1393_opcode <= ap_const_lv5_2;
        else 
            grp_fu_1393_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_1393_p0_assign_proc : process(bitcast_ln744_fu_1947_p1, ap_CS_fsm_state21, select_ln935_fu_2382_p3, ap_CS_fsm_state30, grp_fu_1387_p1, select_ln935_2_fu_4009_p3, ap_enable_reg_pp7_iter2, ap_enable_reg_pp8_iter2, ap_block_pp7_stage0, ap_block_pp8_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            grp_fu_1393_p0 <= select_ln935_2_fu_4009_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            grp_fu_1393_p0 <= grp_fu_1387_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1393_p0 <= select_ln935_fu_2382_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1393_p0 <= bitcast_ln744_fu_1947_p1;
        else 
            grp_fu_1393_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1393_p1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, select_ln935_1_fu_3332_p3, ap_enable_reg_pp7_iter2, ap_enable_reg_pp8_iter2, ap_block_pp7_stage0, ap_block_pp8_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            grp_fu_1393_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            grp_fu_1393_p1 <= select_ln935_1_fu_3332_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1393_p1 <= ap_const_lv32_C2480000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1393_p1 <= ap_const_lv32_C248001A;
        else 
            grp_fu_1393_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1423_p2 <= std_logic_vector(unsigned(num_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_fu_1430_p2 <= std_logic_vector(unsigned(current_z_i_index_V_q0) + unsigned(ap_const_lv32_100000));
    grp_getParallelograms_fu_1285_ap_start <= grp_getParallelograms_fu_1285_ap_start_reg;
    grp_get_acceptanceCorners_fu_1341_ap_start <= grp_get_acceptanceCorners_fu_1341_ap_start_reg;
    grp_get_index_from_z_fu_1317_ap_start <= grp_get_index_from_z_fu_1317_ap_start_reg;

    grp_get_index_from_z_fu_1317_layer_assign_proc : process(ap_CS_fsm_state53, i_6_reg_1042, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_get_index_from_z_fu_1317_layer <= i_6_reg_1042;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_get_index_from_z_fu_1317_layer <= ap_const_lv3_4;
        else 
            grp_get_index_from_z_fu_1317_layer <= "XXX";
        end if; 
    end process;


    grp_get_index_from_z_fu_1317_z_value_assign_proc : process(ap_CS_fsm_state53, z_value_tmp_V_reg_7327, z_top_min_V_11_reg_1018, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_get_index_from_z_fu_1317_z_value <= z_value_tmp_V_reg_7327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_get_index_from_z_fu_1317_z_value <= z_top_min_V_11_reg_1018;
        else 
            grp_get_index_from_z_fu_1317_z_value <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_patch_buffer_add_patch2_fu_1330_ap_start <= grp_patch_buffer_add_patch2_fu_1330_ap_start_reg;

    grp_patch_buffer_add_patch2_fu_1330_new_patch_q0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, init_patch_V_q0, init_patch_V_1_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_patch_buffer_add_patch2_fu_1330_new_patch_q0 <= init_patch_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_patch_buffer_add_patch2_fu_1330_new_patch_q0 <= init_patch_V_1_q0;
        else 
            grp_patch_buffer_add_patch2_fu_1330_new_patch_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_patch_buffer_add_patch2_fu_1330_new_patch_q1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, init_patch_V_q1, init_patch_V_1_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_patch_buffer_add_patch2_fu_1330_new_patch_q1 <= init_patch_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_patch_buffer_add_patch2_fu_1330_new_patch_q1 <= init_patch_V_1_q1;
        else 
            grp_patch_buffer_add_patch2_fu_1330_new_patch_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_cast_fu_3037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_1107),64));
    i_11_cast_fu_3715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_1118),64));
    i_12_cast4_fu_4349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_12_phi_fu_1133_p4),64));
    i_15_cast_fu_4616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_15_reg_1152),64));
    i_7_cast_fu_2959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_1054),64));
    i_8_cast_fu_3013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_1096),64));
    i_9_cast_fu_2982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_1075),64));
    icmp_ln1003_fu_4343_p2 <= "1" when (ap_phi_mux_i_12_phi_fu_1133_p4 = ap_const_lv3_5) else "0";
    icmp_ln1013_fu_4458_p2 <= "1" when (ap_phi_mux_i_13_phi_fu_1145_p4 = ap_const_lv3_5) else "0";
    icmp_ln1027_fu_4610_p2 <= "1" when (i_15_reg_1152 = ap_const_lv3_4) else "0";
    icmp_ln1050_1_fu_5898_p2 <= "1" when (trunc_ln1050_fu_5888_p1 = ap_const_lv52_0) else "0";
    icmp_ln1050_fu_5892_p2 <= "0" when (tmp_22_fu_5878_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1055_1_fu_6338_p2 <= "1" when (trunc_ln1055_fu_6328_p1 = ap_const_lv52_0) else "0";
    icmp_ln1055_fu_6332_p2 <= "0" when (tmp_25_fu_6318_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1060_1_fu_6786_p2 <= "1" when (trunc_ln1060_fu_6776_p1 = ap_const_lv52_0) else "0";
    icmp_ln1060_fu_6780_p2 <= "0" when (tmp_28_fu_6766_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1494_fu_1638_p2 <= "1" when (signed(a_corner_1_q0) > signed(ap_const_lv32_3200000)) else "0";
    icmp_ln1495_6_fu_2020_p2 <= "1" when (signed(patch_buffer_q0) < signed(empty_258_reg_874)) else "0";
    icmp_ln1495_7_fu_2068_p2 <= "1" when (signed(patch_buffer_q0) < signed(empty_260_reg_909)) else "0";
    icmp_ln1495_8_fu_2719_p2 <= "1" when (signed(ret_V_fu_2701_p2) < signed(ret_V_10_fu_2713_p2)) else "0";
    icmp_ln1495_9_fu_5463_p2 <= "1" when (signed(layerSMin_V_1_fu_5455_p3) < signed(layerSMin_V_reg_1175)) else "0";
    icmp_ln1495_fu_1828_p2 <= "1" when (signed(projectionOfCornerToBeam_V_fu_1628_p4) < signed(ap_const_lv32_F00000)) else "0";
    icmp_ln1498_fu_2807_p2 <= "1" when (z_top_min_V_11_reg_1018 = previous_z_top_min_V_reg_1029) else "0";
    icmp_ln200_1_fu_3374_p2 <= "0" when (tmp_16_fu_3343_p4 = ap_const_lv8_FF) else "1";
    icmp_ln200_2_fu_3380_p2 <= "1" when (trunc_ln200_fu_3353_p1 = ap_const_lv23_0) else "0";
    icmp_ln200_3_fu_3392_p2 <= "0" when (tmp_17_fu_3360_p4 = ap_const_lv8_FF) else "1";
    icmp_ln200_4_fu_3398_p2 <= "1" when (trunc_ln200_1_fu_3370_p1 = ap_const_lv23_0) else "0";
    icmp_ln200_fu_5488_p2 <= "1" when (signed(x_reg_7237) < signed(current_z_top_index_V_5_reg_1086)) else "0";
    icmp_ln224_1_fu_2415_p2 <= "1" when (trunc_ln224_fu_2405_p1 = ap_const_lv23_0) else "0";
    icmp_ln224_2_fu_4036_p2 <= "0" when (tmp_19_fu_4022_p4 = ap_const_lv8_FF) else "1";
    icmp_ln224_3_fu_4042_p2 <= "1" when (trunc_ln224_1_fu_4032_p1 = ap_const_lv23_0) else "0";
    icmp_ln224_fu_2409_p2 <= "0" when (tmp_14_fu_2395_p4 = ap_const_lv8_FF) else "1";
    icmp_ln37_1_fu_2623_p2 <= "1" when (indvar_flatten7_reg_985 = ap_const_lv7_50) else "0";
    icmp_ln37_fu_1465_p2 <= "1" when (indvar_flatten_reg_818 = ap_const_lv7_50) else "0";
    icmp_ln39_1_fu_2635_p2 <= "1" when (point_1_reg_1007 = ap_const_lv5_10) else "0";
    icmp_ln39_fu_1477_p2 <= "1" when (point_reg_840 = ap_const_lv5_10) else "0";
    icmp_ln49_1_fu_2048_p2 <= "1" when (i_5_reg_886 = ap_const_lv5_10) else "0";
    icmp_ln49_fu_2000_p2 <= "1" when (i_reg_851 = ap_const_lv5_10) else "0";
    icmp_ln571_1_fu_3489_p2 <= "1" when (trunc_ln555_1_fu_3433_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_2_fu_4126_p2 <= "1" when (trunc_ln555_2_fu_4070_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_3_fu_5237_p2 <= "1" when (trunc_ln555_3_fu_5211_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_2499_p2 <= "1" when (trunc_ln555_fu_2443_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_3501_p2 <= "1" when (signed(F2_1_fu_3495_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln581_2_fu_4138_p2 <= "1" when (signed(F2_2_fu_4132_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln581_3_fu_5276_p2 <= "1" when (signed(F2_3_fu_5270_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln581_fu_2511_p2 <= "1" when (signed(F2_fu_2505_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln582_1_fu_3527_p2 <= "1" when (F2_1_fu_3495_p2 = ap_const_lv12_14) else "0";
    icmp_ln582_2_fu_4164_p2 <= "1" when (F2_2_fu_4132_p2 = ap_const_lv12_14) else "0";
    icmp_ln582_3_fu_5306_p2 <= "1" when (F2_3_fu_5270_p2 = ap_const_lv12_14) else "0";
    icmp_ln582_fu_2541_p2 <= "1" when (F2_fu_2505_p2 = ap_const_lv12_14) else "0";
    icmp_ln585_1_fu_3608_p2 <= "1" when (unsigned(sh_amt_1_fu_3519_p3) > unsigned(ap_const_lv12_35)) else "0";
    icmp_ln585_2_fu_4242_p2 <= "1" when (unsigned(sh_amt_2_fu_4156_p3) > unsigned(ap_const_lv12_35)) else "0";
    icmp_ln585_3_fu_5316_p2 <= "1" when (unsigned(sh_amt_3_fu_5294_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_2573_p2 <= "1" when (unsigned(sh_amt_fu_2529_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_3547_p2 <= "1" when (tmp_63_fu_3537_p4 = ap_const_lv7_0) else "0";
    icmp_ln603_2_fu_4184_p2 <= "1" when (tmp_70_fu_4174_p4 = ap_const_lv7_0) else "0";
    icmp_ln603_3_fu_5332_p2 <= "1" when (tmp_91_fu_5322_p4 = ap_const_lv7_0) else "0";
    icmp_ln603_fu_2561_p2 <= "1" when (tmp_51_fu_2551_p4 = ap_const_lv7_0) else "0";
    icmp_ln851_fu_4376_p2 <= "1" when (trunc_ln851_fu_4372_p1 = ap_const_lv20_0) else "0";
    icmp_ln870_1_fu_4481_p2 <= "1" when (add_ln1015_reg_7641 = ap_const_lv3_0) else "0";
    icmp_ln870_fu_2801_p2 <= "1" when (add_ln933_fu_2784_p2 = ap_const_lv3_0) else "0";
    icmp_ln931_fu_2795_p2 <= "1" when (i_6_reg_1042 = ap_const_lv3_5) else "0";
    icmp_ln935_2_fu_2090_p2 <= "1" when (min_z_V_2_reg_897 = ap_const_lv32_0) else "0";
    icmp_ln935_3_fu_3043_p2 <= "1" when (new_z_i_index_V_q1 = ap_const_lv32_0) else "0";
    icmp_ln935_4_fu_3720_p2 <= "1" when (new_z_i_index_V_q0 = ap_const_lv32_0) else "0";
    icmp_ln935_5_fu_5522_p0 <= new_z_i_atTop_V_q0;
    icmp_ln935_5_fu_5522_p2 <= "1" when (icmp_ln935_5_fu_5522_p0 = z_top_min_V_11_reg_1018) else "0";
    icmp_ln935_6_fu_4639_p2 <= "0" when (reg_1449 = ap_const_lv32_0) else "1";
    icmp_ln935_7_fu_5962_p2 <= "1" when (z_top_min_V_13_reg_1197 = z_top_min_V_11_reg_1018) else "0";
    icmp_ln935_8_fu_6410_p2 <= "1" when (z_top_min_V_14_reg_1218 = z_top_min_V_11_reg_1018) else "0";
    icmp_ln935_fu_1656_p0 <= c_corner_1_q0;
    icmp_ln935_fu_1656_p2 <= "1" when (icmp_ln935_fu_1656_p0 = ap_const_lv32_0) else "0";
    icmp_ln946_10_fu_6493_p2 <= "1" when (signed(tmp_103_fu_6483_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_3_fu_2158_p2 <= "1" when (signed(tmp_46_fu_2148_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_4_fu_3111_p2 <= "1" when (signed(tmp_59_fu_3101_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_5_fu_3788_p2 <= "1" when (signed(tmp_66_fu_3778_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_6_fu_4691_p2 <= "1" when (signed(tmp_77_fu_4681_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_7_fu_4965_p2 <= "1" when (signed(tmp_80_fu_4955_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_8_fu_5605_p2 <= "1" when (signed(tmp_93_fu_5595_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_9_fu_6045_p2 <= "1" when (signed(tmp_98_fu_6035_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_fu_1724_p2 <= "1" when (signed(tmp_41_fu_1714_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_10_fu_6562_p2 <= "0" when (or_ln949_1_fu_6554_p3 = ap_const_lv33_0) else "1";
    icmp_ln949_3_fu_2202_p2 <= "0" when (and_ln949_7_fu_2196_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_4_fu_3155_p2 <= "0" when (and_ln949_11_fu_3149_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_5_fu_3832_p2 <= "0" when (and_ln949_14_fu_3826_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_6_fu_4735_p2 <= "0" when (and_ln949_16_fu_4729_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_7_fu_5008_p2 <= "0" when (and_ln949_22_fu_5003_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_8_fu_5674_p2 <= "0" when (or_ln949_8_fu_5666_p3 = ap_const_lv33_0) else "1";
    icmp_ln949_9_fu_6114_p2 <= "0" when (or_ln949_s_fu_6106_p3 = ap_const_lv33_0) else "1";
    icmp_ln949_fu_1768_p2 <= "0" when (and_ln949_fu_1762_p2 = ap_const_lv32_0) else "1";
    icmp_ln952_fu_2953_p2 <= "1" when (i_7_reg_1054 = ap_const_lv3_5) else "0";
    icmp_ln954_1_fu_6142_p2 <= "1" when (signed(lsb_index_10_fu_6029_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln954_2_fu_6590_p2 <= "1" when (signed(lsb_index_11_fu_6477_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln954_fu_5702_p2 <= "1" when (signed(lsb_index_9_fu_5589_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_3_fu_2230_p2 <= "1" when (signed(lsb_index_4_fu_2142_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_4_fu_3183_p2 <= "1" when (signed(lsb_index_5_fu_3095_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_5_fu_3860_p2 <= "1" when (signed(lsb_index_6_fu_3772_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_6_fu_4763_p2 <= "1" when (signed(lsb_index_7_fu_4675_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_7_fu_5035_p2 <= "1" when (signed(lsb_index_8_fu_4949_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_1796_p2 <= "1" when (signed(lsb_index_fu_1708_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln967_fu_3007_p2 <= "1" when (i_8_reg_1096 = ap_const_lv3_5) else "0";
    icmp_ln971_1_fu_1968_p2 <= "1" when (trunc_ln_fu_1952_p4 = ap_const_lv23_0) else "0";
    icmp_ln971_fu_1962_p2 <= "0" when (add_ln964_fu_1918_p2 = ap_const_lv8_FF) else "1";
    icmp_ln974_fu_2976_p2 <= "1" when (i_9_reg_1075 = ap_const_lv3_5) else "0";
    icmp_ln987_fu_3031_p2 <= "1" when (i_10_reg_1107 = ap_const_lv3_5) else "0";
    icmp_ln997_fu_3709_p2 <= "1" when (i_11_reg_1118 = ap_const_lv3_5) else "0";

    init_patch_V_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address0, grp_patch_buffer_add_patch2_fu_1330_new_patch_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln40_1_fu_1517_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            init_patch_V_1_address0 <= zext_ln40_1_fu_1517_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_1_address0 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_1_address0 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address0;
        else 
            init_patch_V_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_1_address1_assign_proc : process(ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address1, grp_patch_buffer_add_patch2_fu_1330_new_patch_address1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_1_address1 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_1_address1 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address1;
        else 
            init_patch_V_1_address1 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce0, grp_patch_buffer_add_patch2_fu_1330_new_patch_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            init_patch_V_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_1_ce0 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_1_ce0 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce0;
        else 
            init_patch_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_1_ce1_assign_proc : process(ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce1, grp_patch_buffer_add_patch2_fu_1330_new_patch_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_1_ce1 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_1_ce1 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce1;
        else 
            init_patch_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_1_we0_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_1_we0 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we0;
        else 
            init_patch_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_1_we1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_1_we1 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we1;
        else 
            init_patch_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state43, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address0, grp_patch_buffer_add_patch2_fu_1330_new_patch_address0, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, zext_ln40_3_fu_2675_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            init_patch_V_address0 <= zext_ln40_3_fu_2675_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            init_patch_V_address0 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            init_patch_V_address0 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address0;
        else 
            init_patch_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_address1_assign_proc : process(ap_CS_fsm_state43, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address1, grp_patch_buffer_add_patch2_fu_1330_new_patch_address1, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            init_patch_V_address1 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            init_patch_V_address1 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_address1;
        else 
            init_patch_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state43, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce0, grp_patch_buffer_add_patch2_fu_1330_new_patch_ce0, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            init_patch_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            init_patch_V_ce0 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            init_patch_V_ce0 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce0;
        else 
            init_patch_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_ce1_assign_proc : process(ap_CS_fsm_state43, grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce1, grp_patch_buffer_add_patch2_fu_1330_new_patch_ce1, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            init_patch_V_ce1 <= grp_patch_buffer_add_patch2_fu_1330_new_patch_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            init_patch_V_ce1 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_ce1;
        else 
            init_patch_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_we0_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we0, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            init_patch_V_we0 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we0;
        else 
            init_patch_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_we1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we1, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            init_patch_V_we1 <= grp_alignedtoline_per_layer_loop3_fu_1250_init_patch_we1;
        else 
            init_patch_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_1_fu_3429_p1 <= grp_fu_1390_p1;
    ireg_2_fu_4062_p3 <= 
        ap_const_lv64_0 when (and_ln224_1_fu_4052_p2(0) = '1') else 
        bitcast_ln702_2_fu_4058_p1;
    ireg_3_fu_5207_p1 <= grp_fu_1390_p1;
    ireg_fu_2435_p3 <= 
        bitcast_ln702_fu_2431_p1 when (and_ln224_fu_2425_p2(0) = '1') else 
        ap_const_lv64_C049000000000000;
    l_10_fu_6019_p1 <= tmp_3_fu_6011_p3(32 - 1 downto 0);
    l_11_fu_6467_p1 <= tmp_5_fu_6459_p3(32 - 1 downto 0);
    
    l_4_fu_2128_p3_proc : process(p_Result_125_fu_2118_p4)
    begin
        l_4_fu_2128_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_125_fu_2118_p4(i) = '1' then
                l_4_fu_2128_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_5_fu_3081_p3_proc : process(p_Result_131_fu_3071_p4)
    begin
        l_5_fu_3081_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_131_fu_3071_p4(i) = '1' then
                l_5_fu_3081_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_6_fu_3758_p3_proc : process(p_Result_137_fu_3748_p4)
    begin
        l_6_fu_3758_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_137_fu_3748_p4(i) = '1' then
                l_6_fu_3758_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_7_fu_4661_p3_proc : process(p_Result_143_fu_4651_p4)
    begin
        l_7_fu_4661_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_143_fu_4651_p4(i) = '1' then
                l_7_fu_4661_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_8_fu_4935_p3_proc : process(p_Result_147_fu_4926_p4)
    begin
        l_8_fu_4935_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_147_fu_4926_p4(i) = '1' then
                l_8_fu_4935_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    l_9_fu_5579_p1 <= tmp_1_fu_5571_p3(32 - 1 downto 0);
    
    l_fu_1694_p3_proc : process(p_Result_121_fu_1684_p4)
    begin
        l_fu_1694_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_121_fu_1684_p4(i) = '1' then
                l_fu_1694_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    latest_patch_index_constprop_o_assign_proc : process(latest_patch_index_constprop_i, ap_CS_fsm_state12, ap_CS_fsm_state43, grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o, grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld)
    begin
        if ((((grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            latest_patch_index_constprop_o <= grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o;
        else 
            latest_patch_index_constprop_o <= latest_patch_index_constprop_i;
        end if; 
    end process;


    latest_patch_index_constprop_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            latest_patch_index_constprop_o_ap_vld <= grp_patch_buffer_add_patch2_fu_1330_latest_patch_index_constprop_o_ap_vld;
        else 
            latest_patch_index_constprop_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layerSMin_V_1_fu_5455_p3 <= 
        ap_const_lv32_0 when (or_ln585_fu_5450_p2(0) = '1') else 
        select_ln603_fu_5430_p3;
    layerSMin_V_2_fu_5472_p3 <= 
        layerSMin_V_1_fu_5455_p3 when (icmp_ln1495_9_fu_5463_p2(0) = '1') else 
        layerSMin_V_reg_1175;
    layerWithSmallestShift_2_fu_5480_p3 <= 
        zext_ln1033_fu_5469_p1 when (icmp_ln1495_9_fu_5463_p2(0) = '1') else 
        layerWithSmallestShift_reg_1163;
    lhs_12_fu_2757_p3 <= (rhs_reg_921 & ap_const_lv20_0);
    lhs_7_fu_1614_p1 <= c_corner_1_q0;
    lhs_7_fu_1614_p3 <= (lhs_7_fu_1614_p1 & ap_const_lv20_0);
    lsb_index_10_fu_6029_p2 <= std_logic_vector(unsigned(sub_ln944_9_fu_6023_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_11_fu_6477_p2 <= std_logic_vector(unsigned(sub_ln944_10_fu_6471_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_4_fu_2142_p2 <= std_logic_vector(unsigned(sub_ln944_3_fu_2136_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_5_fu_3095_p2 <= std_logic_vector(unsigned(sub_ln944_4_fu_3089_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_6_fu_3772_p2 <= std_logic_vector(unsigned(sub_ln944_5_fu_3766_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_7_fu_4675_p2 <= std_logic_vector(unsigned(sub_ln944_6_fu_4669_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_8_fu_4949_p2 <= std_logic_vector(unsigned(sub_ln944_7_fu_4943_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_9_fu_5589_p2 <= std_logic_vector(unsigned(sub_ln944_8_fu_5583_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_1708_p2 <= std_logic_vector(unsigned(sub_ln944_fu_1702_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln4_fu_6367_p4 <= add_ln1057_fu_6361_p2(15 downto 13);
    lshr_ln5_fu_6815_p4 <= add_ln1062_fu_6809_p2(15 downto 13);
    lshr_ln947_10_fu_6513_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln947_10_fu_6509_p1(31-1 downto 0)))));
    lshr_ln947_3_fu_2178_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_3_fu_2174_p1(31-1 downto 0)))));
    lshr_ln947_4_fu_3131_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_4_fu_3127_p1(31-1 downto 0)))));
    lshr_ln947_5_fu_3808_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_5_fu_3804_p1(31-1 downto 0)))));
    lshr_ln947_6_fu_4711_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_6_fu_4707_p1(31-1 downto 0)))));
    lshr_ln947_7_fu_4985_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_7_fu_4981_p1(31-1 downto 0)))));
    lshr_ln947_8_fu_5625_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln947_8_fu_5621_p1(31-1 downto 0)))));
    lshr_ln947_9_fu_6065_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln947_9_fu_6061_p1(31-1 downto 0)))));
    lshr_ln947_fu_1744_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_1740_p1(31-1 downto 0)))));
    lshr_ln954_1_fu_6188_p2 <= std_logic_vector(shift_right(unsigned(zext_ln937_1_fu_5990_p1),to_integer(unsigned('0' & zext_ln954_1_fu_6184_p1(31-1 downto 0)))));
    lshr_ln954_2_fu_6636_p2 <= std_logic_vector(shift_right(unsigned(zext_ln937_2_fu_6438_p1),to_integer(unsigned('0' & zext_ln954_2_fu_6632_p1(31-1 downto 0)))));
    lshr_ln954_fu_5748_p2 <= std_logic_vector(shift_right(unsigned(zext_ln937_fu_5550_p1),to_integer(unsigned('0' & zext_ln954_fu_5744_p1(31-1 downto 0)))));
    lshr_ln958_3_fu_2280_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_11_fu_2242_p1),to_integer(unsigned('0' & zext_ln958_3_fu_2276_p1(31-1 downto 0)))));
    lshr_ln958_4_fu_3242_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_12_fu_3215_p1),to_integer(unsigned('0' & zext_ln958_4_fu_3238_p1(31-1 downto 0)))));
    lshr_ln958_5_fu_3919_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_13_fu_3892_p1),to_integer(unsigned('0' & zext_ln958_5_fu_3915_p1(31-1 downto 0)))));
    lshr_ln958_6_fu_4813_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_14_fu_4775_p1),to_integer(unsigned('0' & zext_ln958_6_fu_4809_p1(31-1 downto 0)))));
    lshr_ln958_7_fu_5080_p2 <= std_logic_vector(shift_right(unsigned(m_75_reg_7694),to_integer(unsigned('0' & zext_ln958_7_fu_5076_p1(31-1 downto 0)))));
    lshr_ln958_fu_1861_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_10_fu_1834_p1),to_integer(unsigned('0' & zext_ln958_fu_1857_p1(31-1 downto 0)))));
    lshr_ln_fu_4426_p4 <= add_ln1004_fu_4420_p2(15 downto 13);
    m_1_fu_6672_p4 <= m_65_fu_6666_p2(33 downto 1);
    m_35_fu_1877_p2 <= std_logic_vector(unsigned(m_fu_1867_p3) + unsigned(zext_ln961_fu_1874_p1));
    m_39_fu_2294_p3 <= 
        lshr_ln958_3_fu_2280_p2 when (icmp_ln958_3_fu_2230_p2(0) = '1') else 
        shl_ln959_3_fu_2256_p2;
    m_40_fu_2306_p2 <= std_logic_vector(unsigned(m_39_fu_2294_p3) + unsigned(zext_ln961_3_fu_2302_p1));
    m_43_fu_3248_p3 <= 
        lshr_ln958_4_fu_3242_p2 when (icmp_ln958_4_reg_7430(0) = '1') else 
        shl_ln959_4_fu_3227_p2;
    m_44_fu_3258_p2 <= std_logic_vector(unsigned(m_43_fu_3248_p3) + unsigned(zext_ln961_4_fu_3255_p1));
    m_47_fu_3925_p3 <= 
        lshr_ln958_5_fu_3919_p2 when (icmp_ln958_5_reg_7544(0) = '1') else 
        shl_ln959_5_fu_3904_p2;
    m_48_fu_3935_p2 <= std_logic_vector(unsigned(m_47_fu_3925_p3) + unsigned(zext_ln961_5_fu_3932_p1));
    m_51_fu_4827_p3 <= 
        lshr_ln958_6_fu_4813_p2 when (icmp_ln958_6_fu_4763_p2(0) = '1') else 
        shl_ln959_6_fu_4789_p2;
    m_52_fu_4839_p2 <= std_logic_vector(unsigned(m_51_fu_4827_p3) + unsigned(zext_ln961_6_fu_4835_p1));
    m_55_fu_5093_p3 <= 
        lshr_ln958_7_fu_5080_p2 when (icmp_ln958_7_fu_5035_p2(0) = '1') else 
        shl_ln959_7_fu_5057_p2;
    m_56_fu_5105_p2 <= std_logic_vector(unsigned(m_55_fu_5093_p3) + unsigned(zext_ln961_7_fu_5101_p1));
    m_58_fu_5762_p3 <= 
        lshr_ln954_fu_5748_p2 when (icmp_ln954_fu_5702_p2(0) = '1') else 
        shl_ln955_fu_5724_p2;
    m_59_fu_5778_p2 <= std_logic_vector(unsigned(zext_ln951_fu_5770_p1) + unsigned(zext_ln961_8_fu_5774_p1));
    m_61_fu_6202_p3 <= 
        lshr_ln954_1_fu_6188_p2 when (icmp_ln954_1_fu_6142_p2(0) = '1') else 
        shl_ln955_1_fu_6164_p2;
    m_62_fu_6218_p2 <= std_logic_vector(unsigned(zext_ln951_2_fu_6210_p1) + unsigned(zext_ln961_9_fu_6214_p1));
    m_64_fu_6650_p3 <= 
        lshr_ln954_2_fu_6636_p2 when (icmp_ln954_2_fu_6590_p2(0) = '1') else 
        shl_ln955_2_fu_6612_p2;
    m_65_fu_6666_p2 <= std_logic_vector(unsigned(zext_ln951_4_fu_6658_p1) + unsigned(zext_ln961_10_fu_6662_p1));
    m_67_fu_1676_p2 <= c_corner_1_q0;
    m_67_fu_1676_p3 <= 
        tmp_V_fu_1670_p2 when (p_Result_120_fu_1662_p3(0) = '1') else 
        m_67_fu_1676_p2;
    m_68_fu_1883_p4 <= m_35_fu_1877_p2(63 downto 1);
    m_69_fu_2110_p3 <= 
        tmp_V_10_fu_2104_p2 when (p_Result_124_fu_2096_p3(0) = '1') else 
        min_z_V_2_reg_897;
    m_71_fu_3063_p3 <= 
        tmp_V_13_fu_3057_p2 when (p_Result_130_fu_3049_p3(0) = '1') else 
        new_z_i_index_V_q1;
    m_72_fu_3264_p4 <= m_44_fu_3258_p2(63 downto 1);
    m_73_fu_3740_p3 <= 
        tmp_V_15_fu_3734_p2 when (p_Result_136_fu_3726_p3(0) = '1') else 
        new_z_i_index_V_q0;
    m_74_fu_3941_p4 <= m_48_fu_3935_p2(63 downto 1);
    m_75_fu_4600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_26_fu_4592_p3),64));
    m_76_fu_4645_p3 <= 
        tmp_V_17_reg_7725 when (p_Result_142_reg_7719(0) = '1') else 
        reg_1449;
    m_77_fu_4845_p4 <= m_52_fu_4839_p2(63 downto 1);
    m_78_fu_5111_p4 <= m_56_fu_5105_p2(63 downto 1);
    m_9_fu_5784_p4 <= m_59_fu_5778_p2(33 downto 1);
    m_fu_1867_p3 <= 
        lshr_ln958_fu_1861_p2 when (icmp_ln958_reg_6988(0) = '1') else 
        shl_ln959_fu_1846_p2;
    m_s_fu_6224_p4 <= m_62_fu_6218_p2(33 downto 1);
    man_V_11_fu_4112_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_2_fu_4108_p1));
    man_V_12_fu_4118_p3 <= 
        man_V_11_fu_4112_p2 when (p_Result_140_fu_4074_p3(0) = '1') else 
        zext_ln569_2_fu_4108_p1;
    man_V_14_fu_5257_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_3_fu_5253_p1));
    man_V_15_fu_5263_p3 <= 
        man_V_14_fu_5257_p2 when (p_Result_151_reg_7750(0) = '1') else 
        zext_ln569_3_fu_5253_p1;
    man_V_5_fu_2485_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_2481_p1));
    man_V_6_fu_2491_p3 <= 
        man_V_5_fu_2485_p2 when (p_Result_128_fu_2447_p3(0) = '1') else 
        zext_ln569_fu_2481_p1;
    man_V_8_fu_3475_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_1_fu_3471_p1));
    man_V_9_fu_3481_p3 <= 
        man_V_8_fu_3475_p2 when (p_Result_134_fu_3437_p3(0) = '1') else 
        zext_ln569_1_fu_3471_p1;
    min_z_V_1_fu_2026_p3 <= 
        patch_buffer_q0 when (icmp_ln1495_6_fu_2020_p2(0) = '1') else 
        min_z_V_reg_862;
    min_z_V_3_fu_2074_p3 <= 
        patch_buffer_q0 when (icmp_ln1495_7_fu_2068_p2(0) = '1') else 
        min_z_V_2_reg_897;
    mul_ln1148_fu_2854_p1 <= ap_const_lv100_33333333333334(55 - 1 downto 0);

    new_z_i_V_address0_assign_proc : process(i_12_cast4_reg_7622_pp9_iter1_reg, trunc_ln1015_cast_reg_7647_pp10_iter48_reg, ap_CS_fsm_state79, ap_enable_reg_pp9_iter2, ap_enable_reg_pp10_iter49, ap_block_pp9_stage0, ap_block_pp10_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_enable_reg_pp10_iter49 = ap_const_logic_1))) then 
            new_z_i_V_address0 <= trunc_ln1015_cast_reg_7647_pp10_iter48_reg(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1))) then 
            new_z_i_V_address0 <= i_12_cast4_reg_7622_pp9_iter1_reg(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            new_z_i_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_z_i_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_V_ce0_assign_proc : process(ap_block_pp9_stage0_11001, ap_block_pp10_stage0_11001, ap_CS_fsm_state79, ap_enable_reg_pp9_iter2, ap_enable_reg_pp10_iter49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_enable_reg_pp10_iter49 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1)))) then 
            new_z_i_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_d0_assign_proc : process(ap_CS_fsm_state79, ap_enable_reg_pp9_iter2, ap_block_pp9_stage0, z_bits_fu_4453_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1))) then 
            new_z_i_V_d0 <= z_bits_fu_4453_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            new_z_i_V_d0 <= ap_const_lv32_7FF00000;
        else 
            new_z_i_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    new_z_i_V_we0_assign_proc : process(ap_block_pp9_stage0_11001, icmp_ln1003_reg_7618_pp9_iter1_reg, ap_CS_fsm_state79, ap_enable_reg_pp9_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (icmp_ln1003_reg_7618_pp9_iter1_reg = ap_const_lv1_0)))) then 
            new_z_i_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_atTop_V_address0_assign_proc : process(ap_CS_fsm_pp11_stage0, ap_enable_reg_pp11_iter0, ap_CS_fsm_state146, ap_CS_fsm_state164, ap_CS_fsm_state83, ap_enable_reg_pp10_iter51, ap_block_pp10_stage0, zext_ln1014_fu_4568_p1, i_15_cast_fu_4616_p1, ap_block_pp11_stage0, zext_ln1048_fu_5504_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state164)) then 
            new_z_i_atTop_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            new_z_i_atTop_V_address0 <= zext_ln1048_fu_5504_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp11_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0) and (ap_enable_reg_pp11_iter0 = ap_const_logic_1))) then 
            new_z_i_atTop_V_address0 <= i_15_cast_fu_4616_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_enable_reg_pp10_iter51 = ap_const_logic_1))) then 
            new_z_i_atTop_V_address0 <= zext_ln1014_fu_4568_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            new_z_i_atTop_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_z_i_atTop_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_atTop_V_ce0_assign_proc : process(ap_CS_fsm_pp11_stage0, ap_block_pp11_stage0_11001, ap_block_pp10_stage0_11001, ap_enable_reg_pp11_iter0, ap_CS_fsm_state146, ap_CS_fsm_state164, ap_CS_fsm_state83, ap_enable_reg_pp10_iter51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state164) or (ap_const_logic_1 = ap_CS_fsm_state146) or ((ap_const_boolean_0 = ap_block_pp11_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp11_stage0) and (ap_enable_reg_pp11_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_enable_reg_pp10_iter51 = ap_const_logic_1)))) then 
            new_z_i_atTop_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_atTop_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_atTop_V_d0_assign_proc : process(this_V_write_assign_reg_7672, ap_CS_fsm_state83, ap_enable_reg_pp10_iter51, ap_block_pp10_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_enable_reg_pp10_iter51 = ap_const_logic_1))) then 
            new_z_i_atTop_V_d0 <= this_V_write_assign_reg_7672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            new_z_i_atTop_V_d0 <= ap_const_lv32_7FF00000;
        else 
            new_z_i_atTop_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    new_z_i_atTop_V_we0_assign_proc : process(ap_block_pp10_stage0_11001, icmp_ln1013_reg_7637_pp10_iter50_reg, ap_CS_fsm_state83, ap_enable_reg_pp10_iter51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or ((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_enable_reg_pp10_iter51 = ap_const_logic_1) and (icmp_ln1013_reg_7637_pp10_iter50_reg = ap_const_lv1_0)))) then 
            new_z_i_atTop_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_atTop_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, i_7_cast_reg_7341, ap_CS_fsm_pp5_stage0, i_9_cast_reg_7360, ap_CS_fsm_pp6_stage0, i_8_cast_reg_7379, new_z_i_index_V_addr_3_reg_7398_pp7_iter4_reg, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter5, ap_CS_fsm_state52, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0, ap_block_pp7_stage0, i_11_cast_fu_3715_p1, ap_block_pp8_stage0)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            new_z_i_index_V_address0 <= i_11_cast_fu_3715_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1))) then 
            new_z_i_index_V_address0 <= new_z_i_index_V_addr_3_reg_7398_pp7_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            new_z_i_index_V_address0 <= i_8_cast_reg_7379(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            new_z_i_index_V_address0 <= i_9_cast_reg_7360(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            new_z_i_index_V_address0 <= i_7_cast_reg_7341(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            new_z_i_index_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            new_z_i_index_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_V_address1_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, new_z_i_index_V_addr_4_reg_7517_pp8_iter3_reg, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, i_12_cast4_fu_4349_p1, ap_enable_reg_pp8_iter4, ap_block_pp9_stage0, i_10_cast_fu_3037_p1, ap_block_pp7_stage0, ap_block_pp8_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1))) then 
            new_z_i_index_V_address1 <= i_12_cast4_fu_4349_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1))) then 
            new_z_i_index_V_address1 <= new_z_i_index_V_addr_4_reg_7517_pp8_iter3_reg;
        elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            new_z_i_index_V_address1 <= i_10_cast_fu_3037_p1(3 - 1 downto 0);
        else 
            new_z_i_index_V_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_block_pp8_stage0_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter5, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            new_z_i_index_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_V_ce1_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_block_pp7_stage0_11001, ap_block_pp8_stage0_11001, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, ap_block_pp9_stage0_11001, ap_enable_reg_pp8_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1)))) then 
            new_z_i_index_V_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_V_d0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter5, ap_CS_fsm_state52, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0, ap_block_pp7_stage0, grp_fu_1430_p2, add_ln703_1_fu_3018_p2, select_ln571_9_fu_3694_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1))) then 
            new_z_i_index_V_d0 <= select_ln571_9_fu_3694_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            new_z_i_index_V_d0 <= add_ln703_1_fu_3018_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            new_z_i_index_V_d0 <= grp_fu_1430_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            new_z_i_index_V_d0 <= ap_const_lv32_7FF00000;
        else 
            new_z_i_index_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    new_z_i_index_V_d1 <= 
        select_ln571_13_fu_4318_p3 when (or_ln571_6_fu_4324_p2(0) = '1') else 
        select_ln571_12_fu_4311_p3;

    new_z_i_index_V_we0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln952_reg_7337, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln974_reg_7356, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, icmp_ln967_reg_7375, ap_block_pp7_stage0_11001, icmp_ln987_reg_7394_pp7_iter4_reg, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter5, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((icmp_ln987_reg_7394_pp7_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1)) or ((icmp_ln967_reg_7375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((icmp_ln974_reg_7356 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((icmp_ln952_reg_7337 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            new_z_i_index_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_V_we1_assign_proc : process(ap_block_pp8_stage0_11001, icmp_ln997_reg_7513_pp8_iter3_reg, ap_enable_reg_pp8_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (icmp_ln997_reg_7513_pp8_iter3_reg = ap_const_lv1_0))) then 
            new_z_i_index_V_we1 <= ap_const_logic_1;
        else 
            new_z_i_index_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    notChoppedPatch_fu_1650_p2 <= (squareAcceptance_q0 or and_ln1494_fu_1644_p2);

    num_patches_constprop_o_assign_proc : process(num_patches_constprop_i, ap_CS_fsm_state12, ap_CS_fsm_state43, grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o, grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld)
    begin
        if ((((grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            num_patches_constprop_o <= grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o;
        else 
            num_patches_constprop_o <= num_patches_constprop_i;
        end if; 
    end process;


    num_patches_constprop_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            num_patches_constprop_o_ap_vld <= grp_patch_buffer_add_patch2_fu_1330_num_patches_constprop_o_ap_vld;
        else 
            num_patches_constprop_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    num_points_address0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state53, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address0, grp_get_index_from_z_fu_1317_num_points_address0, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, i_10_cast_fu_3037_p1, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            num_points_address0 <= i_10_cast_fu_3037_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            num_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            num_points_address0 <= grp_get_index_from_z_fu_1317_num_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_address0 <= grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address0;
        else 
            num_points_address0 <= "XXX";
        end if; 
    end process;

    num_points_address1 <= grp_alignedtoline_per_layer_loop3_fu_1250_num_points_address1;

    num_points_ce0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state53, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_block_pp7_stage0_11001, grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce0, grp_get_index_from_z_fu_1317_num_points_ce0, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            num_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            num_points_ce0 <= grp_get_index_from_z_fu_1317_num_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_ce0 <= grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce0;
        else 
            num_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    num_points_ce1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_ce1 <= grp_alignedtoline_per_layer_loop3_fu_1250_num_points_ce1;
        else 
            num_points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1050_fu_5904_p2 <= (icmp_ln1050_reg_7821 or icmp_ln1050_1_reg_7826);
    or_ln1055_fu_6344_p2 <= (icmp_ln1055_reg_7868 or icmp_ln1055_1_reg_7873);
    or_ln1060_fu_6792_p2 <= (icmp_ln1060_reg_7915 or icmp_ln1060_1_reg_7920);
    or_ln200_1_fu_3404_p2 <= (icmp_ln200_4_fu_3398_p2 or icmp_ln200_3_fu_3392_p2);
    or_ln200_fu_3386_p2 <= (icmp_ln200_2_fu_3380_p2 or icmp_ln200_1_fu_3374_p2);
    or_ln224_1_fu_4048_p2 <= (icmp_ln224_3_reg_7570 or icmp_ln224_2_reg_7565);
    or_ln224_fu_2421_p2 <= (icmp_ln224_reg_7115 or icmp_ln224_1_reg_7120);
    or_ln571_4_fu_3690_p2 <= (or_ln571_reg_7497 or and_ln581_reg_7492);
    or_ln571_5_fu_4272_p2 <= (icmp_ln571_2_fu_4126_p2 or and_ln603_2_fu_4266_p2);
    or_ln571_6_fu_4324_p2 <= (or_ln571_5_reg_7602 or and_ln581_1_reg_7597);
    or_ln571_fu_3638_p2 <= (icmp_ln571_1_fu_3489_p2 or and_ln603_fu_3632_p2);
    or_ln581_1_fu_4254_p2 <= (or_ln582_1_fu_4224_p2 or icmp_ln581_2_fu_4138_p2);
    or_ln581_2_fu_5412_p2 <= (or_ln582_2_fu_5381_p2 or icmp_ln581_3_fu_5276_p2);
    or_ln581_fu_3620_p2 <= (or_ln582_fu_3590_p2 or icmp_ln581_1_fu_3501_p2);
    or_ln582_1_fu_4224_p2 <= (icmp_ln582_2_fu_4164_p2 or icmp_ln571_2_fu_4126_p2);
    or_ln582_2_fu_5381_p2 <= (icmp_ln582_3_fu_5306_p2 or icmp_ln571_3_reg_7765);
    or_ln582_fu_3590_p2 <= (icmp_ln582_1_fu_3527_p2 or icmp_ln571_1_fu_3489_p2);
    or_ln585_fu_5450_p2 <= (icmp_ln571_3_reg_7765 or and_ln585_4_fu_5444_p2);
    or_ln935_fu_1984_p2 <= (icmp_ln935_reg_6967 or and_ln971_fu_1978_p2);
    or_ln949_10_fu_6100_p2 <= (trunc_ln949_3_fu_6096_p1 or and_ln949_10_fu_6091_p2);
    or_ln949_11_fu_6548_p2 <= (trunc_ln949_5_fu_6544_p1 or and_ln949_12_fu_6539_p2);
    or_ln949_12_fu_1756_p2 <= (shl_ln949_fu_1750_p2 or lshr_ln947_fu_1744_p2);
    or_ln949_13_fu_3143_p2 <= (shl_ln949_4_fu_3137_p2 or lshr_ln947_4_fu_3131_p2);
    or_ln949_14_fu_3820_p2 <= (shl_ln949_5_fu_3814_p2 or lshr_ln947_5_fu_3808_p2);
    or_ln949_15_fu_4723_p2 <= (shl_ln949_6_fu_4717_p2 or lshr_ln947_6_fu_4711_p2);
    or_ln949_16_fu_4997_p2 <= (shl_ln949_7_fu_4991_p2 or lshr_ln947_7_fu_4985_p2);
    or_ln949_1_fu_6554_p3 <= (ap_const_lv1_0 & or_ln949_11_fu_6548_p2);
    or_ln949_8_fu_5666_p3 <= (ap_const_lv1_0 & or_ln949_9_fu_5660_p2);
    or_ln949_9_fu_5660_p2 <= (trunc_ln949_1_fu_5656_p1 or and_ln949_8_fu_5651_p2);
    or_ln949_fu_2190_p2 <= (shl_ln949_3_fu_2184_p2 or lshr_ln947_3_fu_2178_p2);
    or_ln949_s_fu_6106_p3 <= (ap_const_lv1_0 & or_ln949_10_fu_6100_p2);
    or_ln971_fu_1974_p2 <= (icmp_ln971_reg_7013 or icmp_ln971_1_reg_7018);
    pSlope_address0 <= grp_getParallelograms_fu_1285_pSlope_address0;

    pSlope_ce0_assign_proc : process(grp_getParallelograms_fu_1285_pSlope_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            pSlope_ce0 <= grp_getParallelograms_fu_1285_pSlope_ce0;
        else 
            pSlope_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pSlope_d0 <= grp_getParallelograms_fu_1285_pSlope_d0;

    pSlope_we0_assign_proc : process(grp_getParallelograms_fu_1285_pSlope_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            pSlope_we0 <= grp_getParallelograms_fu_1285_pSlope_we0;
        else 
            pSlope_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_101_fu_5993_p4_proc : process(zext_ln937_1_fu_5990_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_101_fu_5993_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln937_1_fu_5990_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_101_fu_5993_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_101_fu_5993_p4_i) := zext_ln937_1_fu_5990_p1(33-1-p_Result_101_fu_5993_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_101_fu_5993_p4 <= resvalue(33-1 downto 0);
    end process;

    p_Result_103_fu_6071_p2 <= (zext_ln937_1_fu_5990_p1 and lshr_ln947_9_fu_6065_p2);
    p_Result_105_fu_6238_p3 <= m_62_fu_6218_p2(25 downto 25);
    
    p_Result_111_fu_6441_p4_proc : process(zext_ln937_2_fu_6438_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_111_fu_6441_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln937_2_fu_6438_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_111_fu_6441_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_111_fu_6441_p4_i) := zext_ln937_2_fu_6438_p1(33-1-p_Result_111_fu_6441_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_111_fu_6441_p4 <= resvalue(33-1 downto 0);
    end process;

    p_Result_113_fu_6519_p2 <= (zext_ln937_2_fu_6438_p1 and lshr_ln947_10_fu_6513_p2);
    p_Result_115_fu_6686_p3 <= m_65_fu_6666_p2(25 downto 25);
    p_Result_120_fu_1662_p1 <= c_corner_1_q0;
    p_Result_120_fu_1662_p3 <= p_Result_120_fu_1662_p1(31 downto 31);
    
    p_Result_121_fu_1684_p4_proc : process(m_67_fu_1676_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_121_fu_1684_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_67_fu_1676_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_121_fu_1684_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_121_fu_1684_p4_i) := m_67_fu_1676_p3(32-1-p_Result_121_fu_1684_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_121_fu_1684_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_122_fu_1788_p3 <= m_67_fu_1676_p3(to_integer(unsigned(lsb_index_fu_1708_p2)) downto to_integer(unsigned(lsb_index_fu_1708_p2))) when (to_integer(unsigned(lsb_index_fu_1708_p2))>= 0 and to_integer(unsigned(lsb_index_fu_1708_p2))<=31) else "-";
    p_Result_123_fu_1931_p5 <= (zext_ln962_fu_1893_p1(63 downto 32) & tmp_2_fu_1924_p3 & zext_ln962_fu_1893_p1(22 downto 0));
    p_Result_124_fu_2096_p3 <= min_z_V_2_reg_897(31 downto 31);
    
    p_Result_125_fu_2118_p4_proc : process(m_69_fu_2110_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_125_fu_2118_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_69_fu_2110_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_125_fu_2118_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_125_fu_2118_p4_i) := m_69_fu_2110_p3(32-1-p_Result_125_fu_2118_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_125_fu_2118_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_126_fu_2222_p3 <= m_69_fu_2110_p3(to_integer(unsigned(lsb_index_4_fu_2142_p2)) downto to_integer(unsigned(lsb_index_4_fu_2142_p2))) when (to_integer(unsigned(lsb_index_4_fu_2142_p2))>= 0 and to_integer(unsigned(lsb_index_4_fu_2142_p2))<=31) else "-";
    p_Result_127_fu_2362_p5 <= (zext_ln962_3_fu_2334_p1(63 downto 32) & tmp_4_fu_2355_p3 & zext_ln962_3_fu_2334_p1(22 downto 0));
    p_Result_128_fu_2447_p3 <= ireg_fu_2435_p3(63 downto 63);
    p_Result_129_fu_2473_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_2469_p1);
    p_Result_130_fu_3049_p3 <= new_z_i_index_V_q1(31 downto 31);
    
    p_Result_131_fu_3071_p4_proc : process(m_71_fu_3063_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_131_fu_3071_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_71_fu_3063_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_131_fu_3071_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_131_fu_3071_p4_i) := m_71_fu_3063_p3(32-1-p_Result_131_fu_3071_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_131_fu_3071_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_132_fu_3175_p3 <= m_71_fu_3063_p3(to_integer(unsigned(lsb_index_5_fu_3095_p2)) downto to_integer(unsigned(lsb_index_5_fu_3095_p2))) when (to_integer(unsigned(lsb_index_5_fu_3095_p2))>= 0 and to_integer(unsigned(lsb_index_5_fu_3095_p2))<=31) else "-";
    p_Result_133_fu_3312_p5 <= (zext_ln962_4_fu_3274_p1(63 downto 32) & tmp_7_fu_3305_p3 & zext_ln962_4_fu_3274_p1(22 downto 0));
    p_Result_134_fu_3437_p3 <= ireg_1_fu_3429_p1(63 downto 63);
    p_Result_135_fu_3463_p3 <= (ap_const_lv1_1 & trunc_ln565_1_fu_3459_p1);
    p_Result_136_fu_3726_p3 <= new_z_i_index_V_q0(31 downto 31);
    
    p_Result_137_fu_3748_p4_proc : process(m_73_fu_3740_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_137_fu_3748_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_73_fu_3740_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_137_fu_3748_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_137_fu_3748_p4_i) := m_73_fu_3740_p3(32-1-p_Result_137_fu_3748_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_137_fu_3748_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_138_fu_3852_p3 <= m_73_fu_3740_p3(to_integer(unsigned(lsb_index_6_fu_3772_p2)) downto to_integer(unsigned(lsb_index_6_fu_3772_p2))) when (to_integer(unsigned(lsb_index_6_fu_3772_p2))>= 0 and to_integer(unsigned(lsb_index_6_fu_3772_p2))<=31) else "-";
    p_Result_139_fu_3989_p5 <= (zext_ln962_5_fu_3951_p1(63 downto 32) & tmp_9_fu_3982_p3 & zext_ln962_5_fu_3951_p1(22 downto 0));
    p_Result_140_fu_4074_p3 <= ireg_2_fu_4062_p3(63 downto 63);
    p_Result_141_fu_4100_p3 <= (ap_const_lv1_1 & trunc_ln565_2_fu_4096_p1);
    
    p_Result_143_fu_4651_p4_proc : process(m_76_fu_4645_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_143_fu_4651_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_76_fu_4645_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_143_fu_4651_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_143_fu_4651_p4_i) := m_76_fu_4645_p3(32-1-p_Result_143_fu_4651_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_143_fu_4651_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_144_fu_4755_p3 <= m_76_fu_4645_p3(to_integer(unsigned(lsb_index_7_fu_4675_p2)) downto to_integer(unsigned(lsb_index_7_fu_4675_p2))) when (to_integer(unsigned(lsb_index_7_fu_4675_p2))>= 0 and to_integer(unsigned(lsb_index_7_fu_4675_p2))<=31) else "-";
    p_Result_145_fu_4898_p5 <= (zext_ln962_6_fu_4855_p1(63 downto 32) & tmp_6_fu_4891_p3 & zext_ln962_6_fu_4855_p1(22 downto 0));
    p_Result_146_fu_4578_p3 <= z_top_min_V_11_reg_1018(31 downto 31);
    
    p_Result_147_fu_4926_p4_proc : process(tmp_V_26_reg_7687)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_147_fu_4926_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_26_reg_7687;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_147_fu_4926_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_147_fu_4926_p4_i) := tmp_V_26_reg_7687(32-1-p_Result_147_fu_4926_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_147_fu_4926_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_148_fu_5028_p3 <= tmp_V_26_reg_7687(to_integer(unsigned(lsb_index_8_fu_4949_p2)) downto to_integer(unsigned(lsb_index_8_fu_4949_p2))) when (to_integer(unsigned(lsb_index_8_fu_4949_p2))>= 0 and to_integer(unsigned(lsb_index_8_fu_4949_p2))<=31) else "-";
    p_Result_149_fu_5164_p5 <= (zext_ln962_7_fu_5121_p1(63 downto 32) & tmp_8_fu_5157_p3 & zext_ln962_7_fu_5121_p1(22 downto 0));
    p_Result_150_fu_5195_p1 <= data_V_fu_5191_p1(31 - 1 downto 0);
    p_Result_152_fu_5246_p3 <= (ap_const_lv1_1 & trunc_ln565_3_reg_7760);
    p_Result_153_fu_5528_p3 <= ret_V_26_fu_5513_p2(32 downto 32);
    p_Result_154_fu_5563_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_91_fu_5553_p4);
    p_Result_155_fu_5694_p3 <= zext_ln937_fu_5550_p1(to_integer(unsigned(lsb_index_9_fu_5589_p2)) downto to_integer(unsigned(lsb_index_9_fu_5589_p2))) when (to_integer(unsigned(lsb_index_9_fu_5589_p2))>= 0 and to_integer(unsigned(lsb_index_9_fu_5589_p2))<=32) else "-";
    p_Result_156_fu_5837_p5 <= (zext_ln951_1_fu_5794_p1(63 downto 32) & tmp_10_fu_5830_p3 & zext_ln951_1_fu_5794_p1(22 downto 0));
    p_Result_157_fu_5861_p1 <= data_V_2_fu_5857_p1(31 - 1 downto 0);
    p_Result_158_fu_5968_p3 <= ret_V_27_fu_5953_p2(32 downto 32);
    p_Result_159_fu_6003_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_101_fu_5993_p4);
    p_Result_160_fu_6134_p3 <= zext_ln937_1_fu_5990_p1(to_integer(unsigned(lsb_index_10_fu_6029_p2)) downto to_integer(unsigned(lsb_index_10_fu_6029_p2))) when (to_integer(unsigned(lsb_index_10_fu_6029_p2))>= 0 and to_integer(unsigned(lsb_index_10_fu_6029_p2))<=32) else "-";
    p_Result_161_fu_6277_p5 <= (zext_ln951_3_fu_6234_p1(63 downto 32) & tmp_11_fu_6270_p3 & zext_ln951_3_fu_6234_p1(22 downto 0));
    p_Result_162_fu_6301_p1 <= data_V_3_fu_6297_p1(31 - 1 downto 0);
    p_Result_163_fu_6416_p3 <= ret_V_28_fu_6401_p2(32 downto 32);
    p_Result_164_fu_6451_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_111_fu_6441_p4);
    p_Result_165_fu_6582_p3 <= zext_ln937_2_fu_6438_p1(to_integer(unsigned(lsb_index_11_fu_6477_p2)) downto to_integer(unsigned(lsb_index_11_fu_6477_p2))) when (to_integer(unsigned(lsb_index_11_fu_6477_p2))>= 0 and to_integer(unsigned(lsb_index_11_fu_6477_p2))<=32) else "-";
    p_Result_166_fu_6725_p5 <= (zext_ln951_5_fu_6682_p1(63 downto 32) & tmp_12_fu_6718_p3 & zext_ln951_5_fu_6682_p1(22 downto 0));
    p_Result_167_fu_6749_p1 <= data_V_4_fu_6745_p1(31 - 1 downto 0);
    p_Result_63_fu_3278_p3 <= m_44_fu_3258_p2(25 downto 25);
    p_Result_70_fu_3955_p3 <= m_48_fu_3935_p2(25 downto 25);
    p_Result_74_fu_4364_p3 <= new_z_i_index_V_q1(31 downto 31);
    p_Result_80_fu_4859_p3 <= m_52_fu_4839_p2(25 downto 25);
    p_Result_85_fu_5125_p3 <= m_56_fu_5105_p2(25 downto 25);
    
    p_Result_91_fu_5553_p4_proc : process(zext_ln937_fu_5550_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_91_fu_5553_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln937_fu_5550_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_91_fu_5553_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_91_fu_5553_p4_i) := zext_ln937_fu_5550_p1(33-1-p_Result_91_fu_5553_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_91_fu_5553_p4 <= resvalue(33-1 downto 0);
    end process;

    p_Result_93_fu_5631_p2 <= (zext_ln937_fu_5550_p1 and lshr_ln947_8_fu_5625_p2);
    p_Result_95_fu_5798_p3 <= m_59_fu_5778_p2(25 downto 25);
    p_Result_s_fu_1897_p3 <= m_35_fu_1877_p2(25 downto 25);
        p_v_cast_fu_2745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(white_space_height_V_fu_2733_p1),64));


    patch_buffer_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state12, ap_CS_fsm_state43, grp_getParallelograms_fu_1285_superpoints_address0, grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state16, ap_CS_fsm_state47, zext_ln50_23_fu_2015_p1, zext_ln50_25_fu_2063_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            patch_buffer_address0 <= zext_ln50_25_fu_2063_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            patch_buffer_address0 <= zext_ln50_23_fu_2015_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            patch_buffer_address0 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            patch_buffer_address0 <= grp_getParallelograms_fu_1285_superpoints_address0;
        else 
            patch_buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    patch_buffer_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, grp_getParallelograms_fu_1285_superpoints_address1, grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address1, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            patch_buffer_address1 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            patch_buffer_address1 <= grp_getParallelograms_fu_1285_superpoints_address1;
        else 
            patch_buffer_address1 <= "XXXXXXXX";
        end if; 
    end process;


    patch_buffer_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state12, ap_CS_fsm_state43, grp_getParallelograms_fu_1285_superpoints_ce0, grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            patch_buffer_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            patch_buffer_ce0 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            patch_buffer_ce0 <= grp_getParallelograms_fu_1285_superpoints_ce0;
        else 
            patch_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, grp_getParallelograms_fu_1285_superpoints_ce1, grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce1, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            patch_buffer_ce1 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            patch_buffer_ce1 <= grp_getParallelograms_fu_1285_superpoints_ce1;
        else 
            patch_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_d0 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_d0;
    patch_buffer_d1 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_d1;

    patch_buffer_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            patch_buffer_we0 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we0;
        else 
            patch_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state43, grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            patch_buffer_we1 <= grp_patch_buffer_add_patch2_fu_1330_patch_buffer_we1;
        else 
            patch_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;


    patch_stream_V_blk_n_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_6884, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln37_1_reg_7165)
    begin
        if ((((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            patch_stream_V_blk_n <= patch_stream_V_full_n;
        else 
            patch_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    patch_stream_V_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_6884, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln37_1_reg_7165, init_patch_V_q0, init_patch_V_1_q0, ap_block_pp0_stage0_01001, ap_block_pp3_stage0_01001)
    begin
        if (((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            patch_stream_V_din <= init_patch_V_q0;
        elsif (((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            patch_stream_V_din <= init_patch_V_1_q0;
        else 
            patch_stream_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patch_stream_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_6884, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln37_1_reg_7165, ap_block_pp0_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((icmp_ln37_1_reg_7165 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((icmp_ln37_reg_6884 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            patch_stream_V_write <= ap_const_logic_1;
        else 
            patch_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    points_address0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_pp9_stage0, ap_CS_fsm_state151, ap_CS_fsm_state157, ap_CS_fsm_state163, ap_enable_reg_pp9_iter1, grp_alignedtoline_per_layer_loop3_fu_1250_points_address0, grp_get_index_from_z_fu_1317_points_address0, ap_CS_fsm_state58, ap_block_pp9_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, zext_ln1004_fu_4448_p1, zext_ln1052_fu_5940_p1, zext_ln1057_fu_6388_p1, zext_ln1062_fu_6836_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state163)) then 
            points_address0 <= zext_ln1062_fu_6836_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            points_address0 <= zext_ln1057_fu_6388_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            points_address0 <= zext_ln1052_fu_5940_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1))) then 
            points_address0 <= zext_ln1004_fu_4448_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            points_address0 <= grp_get_index_from_z_fu_1317_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_address0 <= grp_alignedtoline_per_layer_loop3_fu_1250_points_address0;
        else 
            points_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    points_address1 <= grp_alignedtoline_per_layer_loop3_fu_1250_points_address1;

    points_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_CS_fsm_state151, ap_CS_fsm_state157, ap_CS_fsm_state163, ap_enable_reg_pp9_iter1, grp_alignedtoline_per_layer_loop3_fu_1250_points_ce0, grp_get_index_from_z_fu_1317_points_ce0, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state163) or (ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state151) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1)))) then 
            points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            points_ce0 <= grp_get_index_from_z_fu_1317_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_ce0 <= grp_alignedtoline_per_layer_loop3_fu_1250_points_ce0;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    points_ce1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_1250_points_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_ce1 <= grp_alignedtoline_per_layer_loop3_fu_1250_points_ce1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    projectionOfCornerToBeam_V_fu_1628_p4 <= ret_V_9_fu_1622_p2(51 downto 20);
    r_V_3_fu_1608_p2 <= std_logic_vector(unsigned(shl_ln_fu_1588_p3) + unsigned(sext_ln1118_2_fu_1604_p1));
    r_V_5_fu_2920_p0 <= sext_ln1115_1_reg_7273(33 - 1 downto 0);
    r_V_5_fu_2920_p1 <= select_ln1148_2_fu_2909_p3(24 - 1 downto 0);
    r_V_9_fu_6858_p1 <= p_v_cast_reg_7227(32 - 1 downto 0);
    radii_leverArm_fu_4526_p1 <= grp_fu_4520_p2(32 - 1 downto 0);
    radius_j_V_4_fu_4498_p3 <= 
        ap_const_lv25_0 when (icmp_ln870_1_fu_4481_p2(0) = '1') else 
        radius_j_V_fu_4490_p3;
    radius_j_V_fu_4490_p3 <= (trunc_ln731_1_fu_4486_p1 & ap_const_lv20_0);
    radius_k_V_2_fu_2825_p3 <= 
        ap_const_lv25_0 when (icmp_ln870_reg_7292(0) = '1') else 
        radius_k_V_fu_2817_p3;
    radius_k_V_fu_2817_p3 <= (trunc_ln731_fu_2813_p1 & ap_const_lv20_0);
    ret_V_10_fu_2713_p2 <= std_logic_vector(signed(sext_ln703_4_fu_2706_p1) - signed(sext_ln703_5_fu_2709_p1));
    ret_V_11_fu_2836_p2 <= std_logic_vector(unsigned(zext_ln1193_fu_2832_p1) + unsigned(ap_const_lv26_3B00000));
    ret_V_13_fu_2925_p2 <= std_logic_vector(unsigned(r_V_5_reg_7322) + unsigned(lhs_12_reg_7248));
    ret_V_14_fu_4382_p2 <= std_logic_vector(unsigned(ret_V_7_fu_4354_p4) + unsigned(ap_const_lv12_1));
    ret_V_15_fu_4396_p3 <= 
        select_ln850_fu_4388_p3 when (p_Result_74_fu_4364_p3(0) = '1') else 
        ret_V_7_fu_4354_p4;
    ret_V_16_fu_4510_p2 <= std_logic_vector(unsigned(zext_ln1193_1_fu_4506_p1) + unsigned(ap_const_lv26_3B00000));
    ret_V_18_fu_4553_p2 <= std_logic_vector(unsigned(r_V_7_fu_4547_p2) + unsigned(lhs_12_reg_7248));
    ret_V_23_fu_1578_p2 <= std_logic_vector(signed(sext_ln703_fu_1570_p1) - signed(sext_ln703_7_fu_1574_p1));
    ret_V_24_fu_2775_p2 <= std_logic_vector(signed(sext_ln703_12_fu_2771_p1) - signed(sext_ln703_11_reg_7242));
    ret_V_25_fu_4534_p2 <= std_logic_vector(signed(sext_ln703_13_fu_4530_p1) - signed(sext_ln703_11_reg_7242));
    ret_V_26_fu_5513_p2 <= std_logic_vector(signed(sext_ln703_6_fu_5509_p1) - signed(sext_ln703_12_reg_7265));
    ret_V_27_fu_5953_p2 <= std_logic_vector(signed(sext_ln703_8_fu_5949_p1) - signed(sext_ln703_12_reg_7265));
    ret_V_28_fu_6401_p2 <= std_logic_vector(signed(sext_ln703_9_fu_6397_p1) - signed(sext_ln703_12_reg_7265));
    ret_V_29_fu_6849_p2 <= std_logic_vector(signed(sext_ln703_10_fu_6845_p1) - signed(sext_ln703_12_reg_7265));
    ret_V_7_fu_4354_p4 <= new_z_i_index_V_q1(31 downto 20);
    ret_V_9_fu_1622_p2 <= std_logic_vector(unsigned(r_V_3_fu_1608_p2) + unsigned(lhs_7_fu_1614_p3));
    ret_V_fu_2701_p2 <= std_logic_vector(signed(sext_ln703_7_reg_6954) - signed(sext_ln703_3_fu_2697_p1));
    retval_0_i_i545_fu_5184_p3 <= 
        bitcast_ln744_6_fu_5180_p1 when (tobool_i_i483_reg_7677(0) = '1') else 
        ap_const_lv32_0;
    select_ln1148_2_fu_2909_p3 <= 
        sub_ln1148_2_fu_2903_p2 when (tmp_55_reg_7311(0) = '1') else 
        sext_ln1148_2_fu_2899_p1;
    select_ln1148_fu_2893_p3 <= 
        tmp_56_fu_2883_p4 when (tmp_55_reg_7311(0) = '1') else 
        tmp_57_reg_7317;
    select_ln37_1_fu_1491_p3 <= 
        add_ln37_fu_1471_p2 when (icmp_ln39_fu_1477_p2(0) = '1') else 
        ap_phi_mux_layer_phi_fu_833_p4;
    select_ln37_2_fu_2641_p3 <= 
        ap_const_lv5_0 when (icmp_ln39_1_fu_2635_p2(0) = '1') else 
        point_1_reg_1007;
    select_ln37_3_fu_2649_p3 <= 
        add_ln37_1_fu_2629_p2 when (icmp_ln39_1_fu_2635_p2(0) = '1') else 
        ap_phi_mux_layer_1_phi_fu_1000_p4;
    select_ln37_fu_1483_p3 <= 
        ap_const_lv5_0 when (icmp_ln39_fu_1477_p2(0) = '1') else 
        point_reg_840;
    select_ln51_2_fu_2034_p3 <= 
        patch_buffer_q0 when (icmp_ln1495_6_fu_2020_p2(0) = '1') else 
        empty_258_reg_874;
    select_ln51_3_fu_2082_p3 <= 
        patch_buffer_q0 when (icmp_ln1495_7_fu_2068_p2(0) = '1') else 
        empty_260_reg_909;
    select_ln571_10_fu_4304_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_2_reg_7575(0) = '1') else 
        shl_ln604_2_fu_4289_p2;
    select_ln571_11_fu_4278_p3 <= 
        select_ln588_2_fu_4216_p3 when (and_ln585_2_fu_4248_p2(0) = '1') else 
        trunc_ln586_7_fu_4204_p1;
    select_ln571_12_fu_4311_p3 <= 
        trunc_ln583_2_reg_7591 when (and_ln582_2_fu_4299_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln571_13_fu_4318_p3 <= 
        select_ln571_10_fu_4304_p3 when (or_ln571_5_reg_7602(0) = '1') else 
        select_ln571_11_reg_7608;
    select_ln571_6_fu_3644_p3 <= 
        select_ln588_1_fu_3582_p3 when (and_ln585_fu_3614_p2(0) = '1') else 
        trunc_ln586_5_fu_3567_p1;
    select_ln571_7_fu_3677_p3 <= 
        trunc_ln583_1_reg_7486 when (and_ln582_fu_3665_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln571_8_fu_3684_p3 <= 
        select_ln571_fu_3670_p3 when (or_ln571_reg_7497(0) = '1') else 
        select_ln571_6_reg_7503;
    select_ln571_9_fu_3694_p3 <= 
        select_ln571_8_fu_3684_p3 when (or_ln571_4_fu_3690_p2(0) = '1') else 
        select_ln571_7_fu_3677_p3;
    select_ln571_fu_3670_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_1_reg_7470(0) = '1') else 
        shl_ln604_1_fu_3655_p2;
    select_ln582_fu_5373_p3 <= 
        trunc_ln583_3_fu_5312_p1 when (and_ln582_3_fu_5367_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln585_fu_5404_p3 <= 
        trunc_ln586_9_fu_5352_p1 when (and_ln585_3_fu_5398_p2(0) = '1') else 
        select_ln582_fu_5373_p3;
    select_ln588_1_fu_3582_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_64_fu_3574_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln588_2_fu_4216_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_71_fu_4208_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln588_fu_2587_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_52_fu_2579_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln603_fu_5430_p3 <= 
        shl_ln604_3_fu_5356_p2 when (and_ln603_3_fu_5424_p2(0) = '1') else 
        select_ln585_fu_5404_p3;
    select_ln703_fu_2725_p3 <= 
        ret_V_10_fu_2713_p2 when (icmp_ln1495_8_fu_2719_p2(0) = '1') else 
        ret_V_fu_2701_p2;
    select_ln850_fu_4388_p3 <= 
        ret_V_7_fu_4354_p4 when (icmp_ln851_fu_4376_p2(0) = '1') else 
        ret_V_14_fu_4382_p2;
    select_ln935_1_fu_3332_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_3_reg_7409(0) = '1') else 
        bitcast_ln744_3_fu_3328_p1;
    select_ln935_2_fu_4009_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_4_reg_7523(0) = '1') else 
        bitcast_ln744_4_fu_4005_p1;
    select_ln935_3_fu_4918_p3 <= 
        bitcast_ln744_5_fu_4914_p1 when (icmp_ln935_6_fu_4639_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln935_fu_2382_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_2_reg_7084(0) = '1') else 
        bitcast_ln744_2_fu_2378_p1;
    select_ln943_10_fu_6694_p3 <= 
        ap_const_lv8_7F when (p_Result_115_fu_6686_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_3_fu_2337_p3 <= 
        ap_const_lv8_7F when (p_Result_54_reg_7099(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_4_fu_3286_p3 <= 
        ap_const_lv8_7F when (p_Result_63_fu_3278_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_5_fu_3963_p3 <= 
        ap_const_lv8_7F when (p_Result_70_fu_3955_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_6_fu_4867_p3 <= 
        ap_const_lv8_7F when (p_Result_80_fu_4859_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_7_fu_5133_p3 <= 
        ap_const_lv8_7F when (p_Result_85_fu_5125_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_8_fu_5806_p3 <= 
        ap_const_lv8_7F when (p_Result_95_fu_5798_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_9_fu_6246_p3 <= 
        ap_const_lv8_7F when (p_Result_105_fu_6238_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_fu_1905_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_1897_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_10_fu_6618_p3 <= 
        icmp_ln949_10_fu_6562_p2 when (icmp_ln946_10_fu_6493_p2(0) = '1') else 
        p_Result_165_fu_6582_p3;
    select_ln946_3_fu_2262_p3 <= 
        icmp_ln949_3_fu_2202_p2 when (icmp_ln946_3_fu_2158_p2(0) = '1') else 
        p_Result_126_fu_2222_p3;
    select_ln946_4_fu_3195_p3 <= 
        icmp_ln949_4_fu_3155_p2 when (icmp_ln946_4_fu_3111_p2(0) = '1') else 
        p_Result_132_fu_3175_p3;
    select_ln946_5_fu_3872_p3 <= 
        icmp_ln949_5_fu_3832_p2 when (icmp_ln946_5_fu_3788_p2(0) = '1') else 
        p_Result_138_fu_3852_p3;
    select_ln946_6_fu_4795_p3 <= 
        icmp_ln949_6_fu_4735_p2 when (icmp_ln946_6_fu_4691_p2(0) = '1') else 
        p_Result_144_fu_4755_p3;
    select_ln946_7_fu_5062_p3 <= 
        icmp_ln949_7_fu_5008_p2 when (icmp_ln946_7_fu_4965_p2(0) = '1') else 
        p_Result_148_fu_5028_p3;
    select_ln946_8_fu_5730_p3 <= 
        icmp_ln949_8_fu_5674_p2 when (icmp_ln946_8_fu_5605_p2(0) = '1') else 
        p_Result_155_fu_5694_p3;
    select_ln946_9_fu_6170_p3 <= 
        icmp_ln949_9_fu_6114_p2 when (icmp_ln946_9_fu_6045_p2(0) = '1') else 
        p_Result_160_fu_6134_p3;
    select_ln946_fu_1808_p3 <= 
        icmp_ln949_fu_1768_p2 when (icmp_ln946_fu_1724_p2(0) = '1') else 
        p_Result_122_fu_1788_p3;
    select_ln954_2_fu_6194_p3 <= 
        select_ln946_9_fu_6170_p3 when (icmp_ln954_1_fu_6142_p2(0) = '1') else 
        and_ln949_20_fu_6148_p2;
    select_ln954_4_fu_6642_p3 <= 
        select_ln946_10_fu_6618_p3 when (icmp_ln954_2_fu_6590_p2(0) = '1') else 
        and_ln949_21_fu_6596_p2;
    select_ln954_fu_5754_p3 <= 
        select_ln946_8_fu_5730_p3 when (icmp_ln954_fu_5702_p2(0) = '1') else 
        and_ln949_19_fu_5708_p2;
    select_ln958_11_fu_3880_p3 <= 
        select_ln946_5_fu_3872_p3 when (icmp_ln958_5_fu_3860_p2(0) = '1') else 
        and_ln949_15_fu_3866_p2;
    select_ln958_13_fu_4819_p3 <= 
        select_ln946_6_fu_4795_p3 when (icmp_ln958_6_fu_4763_p2(0) = '1') else 
        and_ln949_17_fu_4769_p2;
    select_ln958_15_fu_5085_p3 <= 
        select_ln946_7_fu_5062_p3 when (icmp_ln958_7_fu_5035_p2(0) = '1') else 
        and_ln949_18_fu_5041_p2;
    select_ln958_7_fu_2286_p3 <= 
        select_ln946_3_fu_2262_p3 when (icmp_ln958_3_fu_2230_p2(0) = '1') else 
        and_ln949_9_fu_2236_p2;
    select_ln958_9_fu_3203_p3 <= 
        select_ln946_4_fu_3195_p3 when (icmp_ln958_4_fu_3183_p2(0) = '1') else 
        and_ln949_13_fu_3189_p2;
    select_ln958_fu_1816_p3 <= 
        select_ln946_fu_1808_p3 when (icmp_ln958_fu_1796_p2(0) = '1') else 
        and_ln949_6_fu_1802_p2;
    select_ln985_fu_5497_p3 <= 
        add_ln985_reg_7254 when (icmp_ln200_fu_5488_p2(0) = '1') else 
        trunc_ln985_fu_5493_p1;
    select_ln989_fu_3422_p3 <= 
        conv_reg_7457 when (and_ln200_1_fu_3416_p2(0) = '1') else 
        select_ln935_1_reg_7450;
        sext_ln1115_1_fu_2780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_24_fu_2775_p2),52));

        sext_ln1118_2_fu_1604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_84_fu_1596_p3),52));

        sext_ln1148_2_fu_2899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1148_fu_2893_p3),29));

        sext_ln581_1_fu_3652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_7476),32));

        sext_ln581_2_fu_4286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_7581),32));

        sext_ln581_3_fu_5302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_fu_5294_p3),32));

        sext_ln581_fu_2537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_2529_p3),32));

        sext_ln703_10_fu_6845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_top_min_V_15_reg_1240),33));

        sext_ln703_11_fu_2753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_reg_921),33));

        sext_ln703_12_fu_2771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_top_min_V_11_reg_1018),33));

        sext_ln703_13_fu_4530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(new_z_i_V_q0),33));

        sext_ln703_3_fu_2697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_corner_1_q0),33));

        sext_ln703_4_fu_2706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_d_V_reg_6948),33));

        sext_ln703_5_fu_2709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_corner_1_q0),33));

    sext_ln703_6_fu_5509_p0 <= new_z_i_atTop_V_q0;
        sext_ln703_6_fu_5509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_6_fu_5509_p0),33));

    sext_ln703_7_fu_1574_p0 <= c_corner_1_q0;
        sext_ln703_7_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_7_fu_1574_p0),33));

        sext_ln703_8_fu_5949_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_top_min_V_13_reg_1197),33));

        sext_ln703_9_fu_6397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_top_min_V_14_reg_1218),33));

        sext_ln703_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_corner_0_q0),33));

    sh_amt_1_fu_3519_p3 <= 
        add_ln581_1_fu_3507_p2 when (icmp_ln581_1_fu_3501_p2(0) = '1') else 
        sub_ln581_1_fu_3513_p2;
    sh_amt_2_fu_4156_p3 <= 
        add_ln581_2_fu_4144_p2 when (icmp_ln581_2_fu_4138_p2(0) = '1') else 
        sub_ln581_2_fu_4150_p2;
    sh_amt_3_fu_5294_p3 <= 
        add_ln581_3_fu_5282_p2 when (icmp_ln581_3_fu_5276_p2(0) = '1') else 
        sub_ln581_3_fu_5288_p2;
    sh_amt_fu_2529_p3 <= 
        add_ln581_fu_2517_p2 when (icmp_ln581_fu_2511_p2(0) = '1') else 
        sub_ln581_fu_2523_p2;

    shadow_bottomL_jL_address0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomL_jL_address0, grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomL_jL_address0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomL_jL_address0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jL_address0;
        else 
            shadow_bottomL_jL_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomL_jL_address1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_address1;

    shadow_bottomL_jL_ce0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomL_jL_ce0, grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomL_jL_ce0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomL_jL_ce0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jL_ce0;
        else 
            shadow_bottomL_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jL_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce1, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomL_jL_ce1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jL_ce1;
        else 
            shadow_bottomL_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jL_d0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jL_d0;

    shadow_bottomL_jL_we0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomL_jL_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomL_jL_we0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jL_we0;
        else 
            shadow_bottomL_jL_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_address0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomL_jR_address0, grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomL_jR_address0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomL_jR_address0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jR_address0;
        else 
            shadow_bottomL_jR_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomL_jR_address1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_address1;

    shadow_bottomL_jR_ce0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomL_jR_ce0, grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomL_jR_ce0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomL_jR_ce0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jR_ce0;
        else 
            shadow_bottomL_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce1, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomL_jR_ce1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomL_jR_ce1;
        else 
            shadow_bottomL_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_d0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jR_d0;

    shadow_bottomL_jR_we0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomL_jR_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomL_jR_we0 <= grp_getParallelograms_fu_1285_shadow_bottomL_jR_we0;
        else 
            shadow_bottomL_jR_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_address0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomR_jL_address0, grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomR_jL_address0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomR_jL_address0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jL_address0;
        else 
            shadow_bottomR_jL_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomR_jL_address1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_address1;

    shadow_bottomR_jL_ce0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomR_jL_ce0, grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomR_jL_ce0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomR_jL_ce0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jL_ce0;
        else 
            shadow_bottomR_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce1, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomR_jL_ce1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jL_ce1;
        else 
            shadow_bottomR_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_d0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jL_d0;

    shadow_bottomR_jL_we0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomR_jL_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomR_jL_we0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jL_we0;
        else 
            shadow_bottomR_jL_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_address0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomR_jR_address0, grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomR_jR_address0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomR_jR_address0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jR_address0;
        else 
            shadow_bottomR_jR_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomR_jR_address1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_address1;

    shadow_bottomR_jR_ce0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomR_jR_ce0, grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomR_jR_ce0 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomR_jR_ce0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jR_ce0;
        else 
            shadow_bottomR_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce1, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            shadow_bottomR_jR_ce1 <= grp_get_acceptanceCorners_fu_1341_shadow_bottomR_jR_ce1;
        else 
            shadow_bottomR_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_d0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jR_d0;

    shadow_bottomR_jR_we0_assign_proc : process(grp_getParallelograms_fu_1285_shadow_bottomR_jR_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            shadow_bottomR_jR_we0 <= grp_getParallelograms_fu_1285_shadow_bottomR_jR_we0;
        else 
            shadow_bottomR_jR_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1004_1_fu_4412_p3 <= (ret_V_15_fu_4396_p3 & ap_const_lv4_0);
    shl_ln5_fu_4404_p3 <= (i_12_reg_1129 & ap_const_lv13_0);
    shl_ln604_1_fu_3655_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_1_reg_7486),to_integer(unsigned('0' & sext_ln581_1_fu_3652_p1(31-1 downto 0)))));
    shl_ln604_2_fu_4289_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_2_reg_7591),to_integer(unsigned('0' & sext_ln581_2_fu_4286_p1(31-1 downto 0)))));
    shl_ln604_3_fu_5356_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_3_fu_5312_p1),to_integer(unsigned('0' & sext_ln581_3_fu_5302_p1(31-1 downto 0)))));
    shl_ln604_fu_2567_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln602_fu_2547_p1),to_integer(unsigned('0' & sext_ln581_fu_2537_p1(31-1 downto 0)))));
    shl_ln6_fu_6354_p3 <= (select_ln985_reg_7782 & ap_const_lv4_0);
    shl_ln731_fu_2940_p2 <= std_logic_vector(shift_left(unsigned(grp_get_index_from_z_fu_1317_ap_return),to_integer(unsigned('0' & ap_const_lv32_14(31-1 downto 0)))));
    shl_ln7_fu_6802_p3 <= (select_ln985_reg_7782 & ap_const_lv4_0);
    shl_ln949_10_fu_6529_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv33_1),to_integer(unsigned('0' & zext_ln949_2_fu_6525_p1(31-1 downto 0)))));
    shl_ln949_3_fu_2184_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_4_fu_2142_p2(31-1 downto 0)))));
    shl_ln949_4_fu_3137_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_5_fu_3095_p2(31-1 downto 0)))));
    shl_ln949_5_fu_3814_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_6_fu_3772_p2(31-1 downto 0)))));
    shl_ln949_6_fu_4717_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_7_fu_4675_p2(31-1 downto 0)))));
    shl_ln949_7_fu_4991_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_8_fu_4949_p2(31-1 downto 0)))));
    shl_ln949_8_fu_5641_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv33_1),to_integer(unsigned('0' & zext_ln949_fu_5637_p1(31-1 downto 0)))));
    shl_ln949_9_fu_6081_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv33_1),to_integer(unsigned('0' & zext_ln949_1_fu_6077_p1(31-1 downto 0)))));
    shl_ln949_fu_1750_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_1708_p2(31-1 downto 0)))));
    shl_ln955_1_fu_6164_p2 <= std_logic_vector(shift_left(unsigned(zext_ln937_1_fu_5990_p1),to_integer(unsigned('0' & zext_ln955_1_fu_6160_p1(31-1 downto 0)))));
    shl_ln955_2_fu_6612_p2 <= std_logic_vector(shift_left(unsigned(zext_ln937_2_fu_6438_p1),to_integer(unsigned('0' & zext_ln955_2_fu_6608_p1(31-1 downto 0)))));
    shl_ln955_fu_5724_p2 <= std_logic_vector(shift_left(unsigned(zext_ln937_fu_5550_p1),to_integer(unsigned('0' & zext_ln955_fu_5720_p1(31-1 downto 0)))));
    shl_ln959_3_fu_2256_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_11_fu_2242_p1),to_integer(unsigned('0' & zext_ln959_5_fu_2252_p1(31-1 downto 0)))));
    shl_ln959_4_fu_3227_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_12_fu_3215_p1),to_integer(unsigned('0' & zext_ln959_6_fu_3223_p1(31-1 downto 0)))));
    shl_ln959_5_fu_3904_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_13_fu_3892_p1),to_integer(unsigned('0' & zext_ln959_7_fu_3900_p1(31-1 downto 0)))));
    shl_ln959_6_fu_4789_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_14_fu_4775_p1),to_integer(unsigned('0' & zext_ln959_8_fu_4785_p1(31-1 downto 0)))));
    shl_ln959_7_fu_5057_p2 <= std_logic_vector(shift_left(unsigned(m_75_reg_7694),to_integer(unsigned('0' & zext_ln959_9_fu_5053_p1(31-1 downto 0)))));
    shl_ln959_fu_1846_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_10_fu_1834_p1),to_integer(unsigned('0' & zext_ln959_fu_1842_p1(31-1 downto 0)))));
    shl_ln_fu_1588_p3 <= (trunc_ln1118_fu_1584_p1 & ap_const_lv20_0);

    squareAcceptance_address0_assign_proc : process(ap_CS_fsm_state19, zext_ln671_fu_1528_p1, grp_get_acceptanceCorners_fu_1341_squareAcceptance_address0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            squareAcceptance_address0 <= zext_ln671_fu_1528_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            squareAcceptance_address0 <= grp_get_acceptanceCorners_fu_1341_squareAcceptance_address0;
        else 
            squareAcceptance_address0 <= "XX";
        end if; 
    end process;


    squareAcceptance_ce0_assign_proc : process(ap_CS_fsm_state19, grp_get_acceptanceCorners_fu_1341_squareAcceptance_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            squareAcceptance_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            squareAcceptance_ce0 <= grp_get_acceptanceCorners_fu_1341_squareAcceptance_ce0;
        else 
            squareAcceptance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    squareAcceptance_d0 <= grp_get_acceptanceCorners_fu_1341_squareAcceptance_d0;

    squareAcceptance_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_squareAcceptance_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            squareAcceptance_we0 <= grp_get_acceptanceCorners_fu_1341_squareAcceptance_we0;
        else 
            squareAcceptance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_i487_fu_4586_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(z_top_min_V_11_reg_1018));
    sub_ln1148_2_fu_2903_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(sext_ln1148_2_fu_2899_p1));
    sub_ln1148_fu_2878_p2 <= std_logic_vector(unsigned(ap_const_lv100_0) - unsigned(mul_ln1148_reg_7306));
    sub_ln581_1_fu_3513_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_1_fu_3495_p2));
    sub_ln581_2_fu_4150_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_2_fu_4132_p2));
    sub_ln581_3_fu_5288_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_3_fu_5270_p2));
    sub_ln581_fu_2523_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_fu_2505_p2));
    sub_ln944_10_fu_6471_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_11_fu_6467_p1));
    sub_ln944_3_fu_2136_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_4_fu_2128_p3));
    sub_ln944_4_fu_3089_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_5_fu_3081_p3));
    sub_ln944_5_fu_3766_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_6_fu_3758_p3));
    sub_ln944_6_fu_4669_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_7_fu_4661_p3));
    sub_ln944_7_fu_4943_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_8_fu_4935_p3));
    sub_ln944_8_fu_5583_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_9_fu_5579_p1));
    sub_ln944_9_fu_6023_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_10_fu_6019_p1));
    sub_ln944_fu_1702_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_1694_p3));
    sub_ln947_10_fu_6503_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln947_10_fu_6499_p1));
    sub_ln947_3_fu_2168_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_3_fu_2164_p1));
    sub_ln947_4_fu_3121_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_4_fu_3117_p1));
    sub_ln947_5_fu_3798_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_5_fu_3794_p1));
    sub_ln947_6_fu_4701_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_6_fu_4697_p1));
    sub_ln947_7_fu_4975_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_7_fu_4971_p1));
    sub_ln947_8_fu_5615_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln947_8_fu_5611_p1));
    sub_ln947_9_fu_6055_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln947_9_fu_6051_p1));
    sub_ln947_fu_1734_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_fu_1730_p1));
    sub_ln955_1_fu_6154_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_9_fu_6023_p2));
    sub_ln955_2_fu_6602_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_10_fu_6471_p2));
    sub_ln955_fu_5714_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_8_fu_5583_p2));
    sub_ln959_3_fu_2246_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_3_fu_2136_p2));
    sub_ln959_4_fu_3218_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_4_reg_7424));
    sub_ln959_5_fu_3895_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_5_reg_7538));
    sub_ln959_6_fu_4779_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_6_fu_4669_p2));
    sub_ln959_7_fu_5047_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_7_fu_4943_p2));
    sub_ln959_fu_1837_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_6982));
    sub_ln964_10_fu_6706_p2 <= std_logic_vector(unsigned(ap_const_lv8_D) - unsigned(trunc_ln943_10_fu_6702_p1));
    sub_ln964_3_fu_2344_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_3_reg_7104));
    sub_ln964_4_fu_3294_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_4_reg_7440));
    sub_ln964_5_fu_3971_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_5_reg_7554));
    sub_ln964_6_fu_4879_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_6_fu_4875_p1));
    sub_ln964_7_fu_5145_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_7_fu_5141_p1));
    sub_ln964_8_fu_5818_p2 <= std_logic_vector(unsigned(ap_const_lv8_D) - unsigned(trunc_ln943_8_fu_5814_p1));
    sub_ln964_9_fu_6258_p2 <= std_logic_vector(unsigned(ap_const_lv8_D) - unsigned(trunc_ln943_9_fu_6254_p1));
    sub_ln964_fu_1913_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_reg_6998));
    tmp_103_fu_6483_p4 <= lsb_index_11_fu_6477_p2(31 downto 1);
    tmp_104_fu_6568_p3 <= lsb_index_11_fu_6477_p2(31 downto 31);
    tmp_107_fu_6863_p3 <= r_V_9_fu_6858_p2(63 downto 63);
    tmp_10_fu_5830_p3 <= (p_Result_153_reg_7800 & add_ln964_8_fu_5824_p2);
    tmp_11_fu_6270_p3 <= (p_Result_158_reg_7847 & add_ln964_9_fu_6264_p2);
    tmp_12_fu_6718_p3 <= (p_Result_163_reg_7894 & add_ln964_10_fu_6712_p2);
    tmp_14_fu_2395_p4 <= bitcast_ln224_fu_2391_p1(30 downto 23);
    tmp_16_fu_3343_p4 <= bitcast_ln200_fu_3340_p1(30 downto 23);
    tmp_17_fu_3360_p4 <= bitcast_ln200_1_fu_3357_p1(30 downto 23);
    tmp_19_fu_4022_p4 <= bitcast_ln224_1_fu_4018_p1(30 downto 23);
    
    tmp_1_fu_5571_p3_proc : process(p_Result_154_fu_5563_p3)
    begin
        tmp_1_fu_5571_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_154_fu_5563_p3(i) = '1' then
                tmp_1_fu_5571_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_22_fu_5878_p4 <= bitcast_ln1050_fu_5874_p1(62 downto 52);
    tmp_25_fu_6318_p4 <= bitcast_ln1055_fu_6314_p1(62 downto 52);
    tmp_28_fu_6766_p4 <= bitcast_ln1060_fu_6762_p1(62 downto 52);
    tmp_2_fu_1924_p3 <= (p_Result_120_reg_6972 & add_ln964_fu_1918_p2);
    
    tmp_3_fu_6011_p3_proc : process(p_Result_159_fu_6003_p3)
    begin
        tmp_3_fu_6011_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_159_fu_6003_p3(i) = '1' then
                tmp_3_fu_6011_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_41_fu_1714_p4 <= lsb_index_fu_1708_p2(31 downto 1);
    tmp_42_fu_1774_p3 <= lsb_index_fu_1708_p2(31 downto 31);
    tmp_46_fu_2148_p4 <= lsb_index_4_fu_2142_p2(31 downto 1);
    tmp_47_fu_2208_p3 <= lsb_index_4_fu_2142_p2(31 downto 31);
    tmp_4_fu_2355_p3 <= (p_Result_124_reg_7089 & add_ln964_3_fu_2349_p2);
    tmp_51_fu_2551_p4 <= sh_amt_fu_2529_p3(11 downto 5);
    tmp_52_fu_2579_p3 <= ireg_fu_2435_p3(63 downto 63);
    tmp_56_fu_2883_p4 <= sub_ln1148_fu_2878_p2(99 downto 78);
    tmp_59_fu_3101_p4 <= lsb_index_5_fu_3095_p2(31 downto 1);
    
    tmp_5_fu_6459_p3_proc : process(p_Result_164_fu_6451_p3)
    begin
        tmp_5_fu_6459_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_164_fu_6451_p3(i) = '1' then
                tmp_5_fu_6459_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_60_fu_3161_p3 <= lsb_index_5_fu_3095_p2(31 downto 31);
    tmp_63_fu_3537_p4 <= sh_amt_1_fu_3519_p3(11 downto 5);
    tmp_64_fu_3574_p3 <= bitcast_ln702_3_fu_3571_p1(31 downto 31);
    tmp_66_fu_3778_p4 <= lsb_index_6_fu_3772_p2(31 downto 1);
    tmp_67_fu_3838_p3 <= lsb_index_6_fu_3772_p2(31 downto 31);
    tmp_6_fu_4891_p3 <= (p_Result_142_reg_7719 & add_ln964_6_fu_4885_p2);
    tmp_70_fu_4174_p4 <= sh_amt_2_fu_4156_p3(11 downto 5);
    tmp_71_fu_4208_p3 <= ireg_2_fu_4062_p3(63 downto 63);
    tmp_77_fu_4681_p4 <= lsb_index_7_fu_4675_p2(31 downto 1);
    tmp_78_fu_4741_p3 <= lsb_index_7_fu_4675_p2(31 downto 31);
    tmp_7_fu_3305_p3 <= (p_Result_130_reg_7414 & add_ln964_4_fu_3299_p2);
    tmp_80_fu_4955_p4 <= lsb_index_8_fu_4949_p2(31 downto 1);
    tmp_81_fu_5014_p3 <= lsb_index_8_fu_4949_p2(31 downto 31);
    tmp_82_fu_1538_p3 <= (reg_1437 & ap_const_lv6_0);
    tmp_83_fu_1546_p3 <= (reg_1437 & ap_const_lv4_0);
    tmp_84_fu_1596_p3 <= (ret_V_23_fu_1578_p2 & ap_const_lv18_0);
    tmp_85_fu_1499_p3 <= (select_ln37_1_fu_1491_p3 & ap_const_lv4_0);
    tmp_86_fu_2657_p3 <= (select_ln37_3_fu_2649_p3 & ap_const_lv4_0);
    tmp_87_fu_2842_p3 <= (ret_V_11_fu_2836_p2 & ap_const_lv20_0);
    tmp_88_fu_4440_p3 <= (lshr_ln_fu_4426_p4 & trunc_ln1004_fu_4436_p1);
    tmp_89_fu_5932_p3 <= (xor_ln1052_fu_5923_p2 & trunc_ln1052_fu_5929_p1);
    tmp_8_fu_5157_p3 <= (p_Result_146_reg_7682 & add_ln964_7_fu_5151_p2);
    tmp_90_fu_6380_p3 <= (lshr_ln4_fu_6367_p4 & trunc_ln1057_fu_6377_p1);
    tmp_91_fu_5322_p4 <= sh_amt_3_fu_5294_p3(11 downto 5);
    tmp_92_fu_6828_p3 <= (lshr_ln5_fu_6815_p4 & trunc_ln1062_fu_6825_p1);
    tmp_93_fu_5595_p4 <= lsb_index_9_fu_5589_p2(31 downto 1);
    tmp_94_fu_5680_p3 <= lsb_index_9_fu_5589_p2(31 downto 31);
    tmp_98_fu_6035_p4 <= lsb_index_10_fu_6029_p2(31 downto 1);
    tmp_99_fu_6120_p3 <= lsb_index_10_fu_6029_p2(31 downto 31);
    tmp_9_fu_3982_p3 <= (p_Result_136_reg_7528 & add_ln964_5_fu_3976_p2);
    tmp_V_10_fu_2104_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(min_z_V_2_reg_897));
    tmp_V_13_fu_3057_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(new_z_i_index_V_q1));
    tmp_V_15_fu_3734_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(new_z_i_index_V_q0));
    tmp_V_17_fu_4633_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(new_z_i_atTop_V_q0));
    tmp_V_20_fu_5536_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1193_fu_5518_p1));
    tmp_V_22_fu_5976_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1193_1_fu_5958_p1));
    tmp_V_24_fu_6424_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1193_2_fu_6406_p1));
    tmp_V_26_fu_4592_p3 <= 
        sub_i_i487_fu_4586_p2 when (p_Result_146_fu_4578_p3(0) = '1') else 
        z_top_min_V_11_reg_1018;
    tmp_V_27_fu_5542_p3 <= 
        tmp_V_20_fu_5536_p2 when (p_Result_153_fu_5528_p3(0) = '1') else 
        trunc_ln1193_fu_5518_p1;
    tmp_V_28_fu_5982_p3 <= 
        tmp_V_22_fu_5976_p2 when (p_Result_158_fu_5968_p3(0) = '1') else 
        trunc_ln1193_1_fu_5958_p1;
    tmp_V_29_fu_6430_p3 <= 
        tmp_V_24_fu_6424_p2 when (p_Result_163_fu_6416_p3(0) = '1') else 
        trunc_ln1193_2_fu_6406_p1;
    tmp_V_fu_1670_p1 <= c_corner_1_q0;
    tmp_V_fu_1670_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_V_fu_1670_p1));
    tobool_i_i483_fu_4572_p2 <= "0" when (z_top_min_V_11_reg_1018 = ap_const_lv32_0) else "1";

    triangleAcceptance_address0_assign_proc : process(zext_ln671_reg_6903, ap_CS_fsm_state25, grp_get_acceptanceCorners_fu_1341_triangleAcceptance_address0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            triangleAcceptance_address0 <= zext_ln671_reg_6903(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            triangleAcceptance_address0 <= grp_get_acceptanceCorners_fu_1341_triangleAcceptance_address0;
        else 
            triangleAcceptance_address0 <= "XX";
        end if; 
    end process;


    triangleAcceptance_ce0_assign_proc : process(ap_CS_fsm_state25, grp_get_acceptanceCorners_fu_1341_triangleAcceptance_ce0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            triangleAcceptance_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            triangleAcceptance_ce0 <= grp_get_acceptanceCorners_fu_1341_triangleAcceptance_ce0;
        else 
            triangleAcceptance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangleAcceptance_d0 <= grp_get_acceptanceCorners_fu_1341_triangleAcceptance_d0;

    triangleAcceptance_we0_assign_proc : process(grp_get_acceptanceCorners_fu_1341_triangleAcceptance_we0, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            triangleAcceptance_we0 <= grp_get_acceptanceCorners_fu_1341_triangleAcceptance_we0;
        else 
            triangleAcceptance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1004_fu_4436_p1 <= ret_V_15_fu_4396_p3(9 - 1 downto 0);
    trunc_ln1015_cast_fu_4470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_13_phi_fu_1145_p4),64));
    trunc_ln1033_fu_4621_p1 <= i_15_reg_1152(2 - 1 downto 0);
    trunc_ln1050_fu_5888_p1 <= bitcast_ln1050_fu_5874_p1(52 - 1 downto 0);
    trunc_ln1052_fu_5929_p1 <= select_ln985_reg_7782(9 - 1 downto 0);
    trunc_ln1055_fu_6328_p1 <= bitcast_ln1055_fu_6314_p1(52 - 1 downto 0);
    trunc_ln1057_fu_6377_p1 <= select_ln985_reg_7782(9 - 1 downto 0);
    trunc_ln1060_fu_6776_p1 <= bitcast_ln1060_fu_6762_p1(52 - 1 downto 0);
    trunc_ln1062_fu_6825_p1 <= select_ln985_reg_7782(9 - 1 downto 0);
    trunc_ln1118_fu_1584_p1 <= ret_V_23_fu_1578_p2(32 - 1 downto 0);
    trunc_ln1193_1_fu_5958_p1 <= ret_V_27_fu_5953_p2(32 - 1 downto 0);
    trunc_ln1193_2_fu_6406_p1 <= ret_V_28_fu_6401_p2(32 - 1 downto 0);
    trunc_ln1193_fu_5518_p1 <= ret_V_26_fu_5513_p2(32 - 1 downto 0);
    trunc_ln200_1_fu_3370_p1 <= bitcast_ln200_1_fu_3357_p1(23 - 1 downto 0);
    trunc_ln200_fu_3353_p1 <= bitcast_ln200_fu_3340_p1(23 - 1 downto 0);
    trunc_ln224_1_fu_4032_p1 <= bitcast_ln224_1_fu_4018_p1(23 - 1 downto 0);
    trunc_ln224_fu_2405_p1 <= bitcast_ln224_fu_2391_p1(23 - 1 downto 0);
    trunc_ln2_fu_5914_p4 <= select_ln985_reg_7782(11 downto 9);
    trunc_ln555_1_fu_3433_p1 <= ireg_1_fu_3429_p1(63 - 1 downto 0);
    trunc_ln555_2_fu_4070_p1 <= ireg_2_fu_4062_p3(63 - 1 downto 0);
    trunc_ln555_3_fu_5211_p1 <= ireg_3_fu_5207_p1(63 - 1 downto 0);
    trunc_ln555_fu_2443_p1 <= ireg_fu_2435_p3(63 - 1 downto 0);
    trunc_ln565_1_fu_3459_p1 <= ireg_1_fu_3429_p1(52 - 1 downto 0);
    trunc_ln565_2_fu_4096_p1 <= ireg_2_fu_4062_p3(52 - 1 downto 0);
    trunc_ln565_3_fu_5233_p1 <= ireg_3_fu_5207_p1(52 - 1 downto 0);
    trunc_ln565_fu_2469_p1 <= ireg_fu_2435_p3(52 - 1 downto 0);
    trunc_ln583_1_fu_3533_p1 <= man_V_9_fu_3481_p3(32 - 1 downto 0);
    trunc_ln583_2_fu_4170_p1 <= man_V_12_fu_4118_p3(32 - 1 downto 0);
    trunc_ln583_3_fu_5312_p1 <= man_V_15_fu_5263_p3(32 - 1 downto 0);
    trunc_ln583_fu_2613_p1 <= man_V_6_fu_2491_p3(32 - 1 downto 0);
    trunc_ln586_3_fu_2609_p1 <= ashr_ln586_fu_2603_p2(32 - 1 downto 0);
    trunc_ln586_4_fu_3553_p1 <= sh_amt_1_fu_3519_p3(6 - 1 downto 0);
    trunc_ln586_5_fu_3567_p1 <= ashr_ln586_1_fu_3561_p2(32 - 1 downto 0);
    trunc_ln586_6_fu_4190_p1 <= sh_amt_2_fu_4156_p3(6 - 1 downto 0);
    trunc_ln586_7_fu_4204_p1 <= ashr_ln586_2_fu_4198_p2(32 - 1 downto 0);
    trunc_ln586_8_fu_5338_p1 <= sh_amt_3_fu_5294_p3(6 - 1 downto 0);
    trunc_ln586_9_fu_5352_p1 <= ashr_ln586_3_fu_5346_p2(32 - 1 downto 0);
    trunc_ln586_fu_2595_p1 <= sh_amt_fu_2529_p3(6 - 1 downto 0);
    trunc_ln602_fu_2547_p1 <= man_V_6_fu_2491_p3(32 - 1 downto 0);
    trunc_ln731_1_fu_4486_p1 <= get_radiiradii_q0(5 - 1 downto 0);
    trunc_ln731_fu_2813_p1 <= get_radiiradii_q0(5 - 1 downto 0);
    trunc_ln851_fu_4372_p1 <= new_z_i_index_V_q1(20 - 1 downto 0);
    trunc_ln943_10_fu_6702_p1 <= tmp_5_fu_6459_p3(8 - 1 downto 0);
    trunc_ln943_3_fu_2330_p1 <= l_4_fu_2128_p3(8 - 1 downto 0);
    trunc_ln943_4_fu_3211_p1 <= l_5_fu_3081_p3(8 - 1 downto 0);
    trunc_ln943_5_fu_3888_p1 <= l_6_fu_3758_p3(8 - 1 downto 0);
    trunc_ln943_6_fu_4875_p1 <= l_7_fu_4661_p3(8 - 1 downto 0);
    trunc_ln943_7_fu_5141_p1 <= l_8_fu_4935_p3(8 - 1 downto 0);
    trunc_ln943_8_fu_5814_p1 <= tmp_1_fu_5571_p3(8 - 1 downto 0);
    trunc_ln943_9_fu_6254_p1 <= tmp_3_fu_6011_p3(8 - 1 downto 0);
    trunc_ln943_fu_1824_p1 <= l_fu_1694_p3(8 - 1 downto 0);
    trunc_ln947_10_fu_6499_p1 <= sub_ln944_10_fu_6471_p2(6 - 1 downto 0);
    trunc_ln947_3_fu_2164_p1 <= sub_ln944_3_fu_2136_p2(6 - 1 downto 0);
    trunc_ln947_4_fu_3117_p1 <= sub_ln944_4_fu_3089_p2(6 - 1 downto 0);
    trunc_ln947_5_fu_3794_p1 <= sub_ln944_5_fu_3766_p2(6 - 1 downto 0);
    trunc_ln947_6_fu_4697_p1 <= sub_ln944_6_fu_4669_p2(6 - 1 downto 0);
    trunc_ln947_7_fu_4971_p1 <= sub_ln944_7_fu_4943_p2(6 - 1 downto 0);
    trunc_ln947_8_fu_5611_p1 <= sub_ln944_8_fu_5583_p2(6 - 1 downto 0);
    trunc_ln947_9_fu_6051_p1 <= sub_ln944_9_fu_6023_p2(6 - 1 downto 0);
    trunc_ln947_fu_1730_p1 <= sub_ln944_fu_1702_p2(6 - 1 downto 0);
    trunc_ln949_1_fu_5656_p1 <= p_Result_93_fu_5631_p2(32 - 1 downto 0);
    trunc_ln949_2_fu_6087_p1 <= shl_ln949_9_fu_6081_p2(32 - 1 downto 0);
    trunc_ln949_3_fu_6096_p1 <= p_Result_103_fu_6071_p2(32 - 1 downto 0);
    trunc_ln949_4_fu_6535_p1 <= shl_ln949_10_fu_6529_p2(32 - 1 downto 0);
    trunc_ln949_5_fu_6544_p1 <= p_Result_113_fu_6519_p2(32 - 1 downto 0);
    trunc_ln949_fu_5647_p1 <= shl_ln949_8_fu_5641_p2(32 - 1 downto 0);
    trunc_ln984_fu_2749_p1 <= num_points_q0(12 - 1 downto 0);
    trunc_ln985_fu_5493_p1 <= current_z_top_index_V_5_reg_1086(12 - 1 downto 0);
    trunc_ln_fu_1952_p4 <= m_35_fu_1877_p2(23 downto 1);
    white_space_height_V_fu_2733_p1 <= select_ln703_fu_2725_p3(32 - 1 downto 0);
    xor_ln1052_fu_5923_p2 <= (trunc_ln2_fu_5914_p4 xor ap_const_lv3_4);
    xor_ln571_1_fu_4294_p2 <= (icmp_ln571_2_reg_7575 xor ap_const_lv1_1);
    xor_ln571_2_fu_5362_p2 <= (icmp_ln571_3_reg_7765 xor ap_const_lv1_1);
    xor_ln571_fu_3660_p2 <= (icmp_ln571_1_reg_7470 xor ap_const_lv1_1);
    xor_ln581_1_fu_4260_p2 <= (or_ln581_1_fu_4254_p2 xor ap_const_lv1_1);
    xor_ln581_2_fu_5418_p2 <= (or_ln581_2_fu_5412_p2 xor ap_const_lv1_1);
    xor_ln581_fu_3626_p2 <= (or_ln581_fu_3620_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_4230_p2 <= (or_ln582_1_fu_4224_p2 xor ap_const_lv1_1);
    xor_ln582_2_fu_5386_p2 <= (or_ln582_2_fu_5381_p2 xor ap_const_lv1_1);
    xor_ln582_fu_3596_p2 <= (or_ln582_fu_3590_p2 xor ap_const_lv1_1);
    xor_ln585_fu_5438_p2 <= (icmp_ln585_3_fu_5316_p2 xor ap_const_lv1_1);
    xor_ln949_10_fu_6576_p2 <= (tmp_104_fu_6568_p3 xor ap_const_lv1_1);
    xor_ln949_3_fu_2216_p2 <= (tmp_47_fu_2208_p3 xor ap_const_lv1_1);
    xor_ln949_4_fu_3169_p2 <= (tmp_60_fu_3161_p3 xor ap_const_lv1_1);
    xor_ln949_5_fu_3846_p2 <= (tmp_67_fu_3838_p3 xor ap_const_lv1_1);
    xor_ln949_6_fu_4749_p2 <= (tmp_78_fu_4741_p3 xor ap_const_lv1_1);
    xor_ln949_7_fu_5022_p2 <= (tmp_81_fu_5014_p3 xor ap_const_lv1_1);
    xor_ln949_8_fu_5688_p2 <= (tmp_94_fu_5680_p3 xor ap_const_lv1_1);
    xor_ln949_9_fu_6128_p2 <= (tmp_99_fu_6120_p3 xor ap_const_lv1_1);
    xor_ln949_fu_1782_p2 <= (tmp_42_fu_1774_p3 xor ap_const_lv1_1);

    z1_max_address0_assign_proc : process(grp_getParallelograms_fu_1285_z1_max_address0, grp_get_acceptanceCorners_fu_1341_z1_max_address0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            z1_max_address0 <= grp_get_acceptanceCorners_fu_1341_z1_max_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            z1_max_address0 <= grp_getParallelograms_fu_1285_z1_max_address0;
        else 
            z1_max_address0 <= "XXXX";
        end if; 
    end process;


    z1_max_ce0_assign_proc : process(grp_getParallelograms_fu_1285_z1_max_ce0, grp_get_acceptanceCorners_fu_1341_z1_max_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            z1_max_ce0 <= grp_get_acceptanceCorners_fu_1341_z1_max_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            z1_max_ce0 <= grp_getParallelograms_fu_1285_z1_max_ce0;
        else 
            z1_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_max_d0 <= grp_getParallelograms_fu_1285_z1_max_d0;

    z1_max_we0_assign_proc : process(grp_getParallelograms_fu_1285_z1_max_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            z1_max_we0 <= grp_getParallelograms_fu_1285_z1_max_we0;
        else 
            z1_max_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z1_min_address0_assign_proc : process(grp_getParallelograms_fu_1285_z1_min_address0, grp_get_acceptanceCorners_fu_1341_z1_min_address0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            z1_min_address0 <= grp_get_acceptanceCorners_fu_1341_z1_min_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            z1_min_address0 <= grp_getParallelograms_fu_1285_z1_min_address0;
        else 
            z1_min_address0 <= "XXXX";
        end if; 
    end process;


    z1_min_ce0_assign_proc : process(grp_getParallelograms_fu_1285_z1_min_ce0, grp_get_acceptanceCorners_fu_1341_z1_min_ce0, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state18, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            z1_min_ce0 <= grp_get_acceptanceCorners_fu_1341_z1_min_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            z1_min_ce0 <= grp_getParallelograms_fu_1285_z1_min_ce0;
        else 
            z1_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_d0 <= grp_getParallelograms_fu_1285_z1_min_d0;

    z1_min_we0_assign_proc : process(grp_getParallelograms_fu_1285_z1_min_we0, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            z1_min_we0 <= grp_getParallelograms_fu_1285_z1_min_we0;
        else 
            z1_min_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z_bits_1_fu_5945_p1 <= points_q0(32 - 1 downto 0);
    z_bits_2_fu_6393_p1 <= points_q0(32 - 1 downto 0);
    z_bits_3_fu_6841_p1 <= points_q0(32 - 1 downto 0);
    z_bits_fu_4453_p1 <= points_q0(32 - 1 downto 0);
    z_top_min_V_10_fu_6871_p3 <= 
        new_z_i_atTop_V_q0 when (tmp_107_fu_6863_p3(0) = '1') else 
        z_top_min_V_15_reg_1240;
    zext_ln1004_fu_4448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_4440_p3),64));
    zext_ln1014_fu_4568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1014_reg_7657_pp10_iter50_reg),64));
    zext_ln1033_fu_5469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1033_reg_7714_pp11_iter7_reg),32));
    zext_ln1048_fu_5504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layerWithSmallestShift_reg_1163),64));
    zext_ln1052_fu_5940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_5932_p3),64));
    zext_ln1057_fu_6388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_6380_p3),64));
    zext_ln1062_fu_6836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_6828_p3),64));
    zext_ln1193_1_fu_4506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_j_V_4_fu_4498_p3),26));
    zext_ln1193_fu_2832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_k_V_2_fu_2825_p3),26));
    zext_ln368_2_fu_5199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_150_reg_7740),32));
    zext_ln368_3_fu_6305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_162_fu_6301_p1),32));
    zext_ln368_4_fu_6753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_167_fu_6749_p1),32));
    zext_ln368_fu_5865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_157_fu_5861_p1),32));
    zext_ln40_1_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_1511_p2),64));
    zext_ln40_2_fu_2665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_2641_p3),7));
    zext_ln40_3_fu_2675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_1_fu_2669_p2),64));
    zext_ln40_fu_1507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_fu_1483_p3),7));
    zext_ln455_1_fu_3455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_1_fu_3445_p4),12));
    zext_ln455_2_fu_4092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_2_fu_4082_p4),12));
    zext_ln455_3_fu_5243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_3_reg_7755),12));
    zext_ln455_fu_2465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_2455_p4),12));
    zext_ln50_22_fu_2006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_851),8));
    zext_ln50_23_fu_2015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_5_fu_2010_p2),64));
    zext_ln50_24_fu_2054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_886),8));
    zext_ln50_25_fu_2063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_6_fu_2058_p2),64));
    zext_ln50_fu_1554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_1546_p3),8));
    zext_ln569_1_fu_3471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_135_fu_3463_p3),54));
    zext_ln569_2_fu_4108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_141_fu_4100_p3),54));
    zext_ln569_3_fu_5253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_152_fu_5246_p3),54));
    zext_ln569_fu_2481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_129_fu_2473_p3),54));
    zext_ln586_1_fu_3557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_4_fu_3553_p1),54));
    zext_ln586_2_fu_4194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_6_fu_4190_p1),54));
    zext_ln586_3_fu_5342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_8_fu_5338_p1),54));
    zext_ln586_fu_2599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_2595_p1),54));
    zext_ln671_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop_i),64));
    zext_ln875_fu_2691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop_i),64));
    zext_ln931_fu_2790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_1042),64));
    zext_ln937_1_fu_5990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_28_reg_7852),33));
    zext_ln937_2_fu_6438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_29_reg_7899),33));
    zext_ln937_fu_5550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_27_reg_7805),33));
    zext_ln947_10_fu_6509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_10_fu_6503_p2),33));
    zext_ln947_3_fu_2174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_3_fu_2168_p2),32));
    zext_ln947_4_fu_3127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_4_fu_3121_p2),32));
    zext_ln947_5_fu_3804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_5_fu_3798_p2),32));
    zext_ln947_6_fu_4707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_6_fu_4701_p2),32));
    zext_ln947_7_fu_4981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_7_fu_4975_p2),32));
    zext_ln947_8_fu_5621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_8_fu_5615_p2),33));
    zext_ln947_9_fu_6061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_9_fu_6055_p2),33));
    zext_ln947_fu_1740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1734_p2),32));
    zext_ln949_1_fu_6077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_10_fu_6029_p2),33));
    zext_ln949_2_fu_6525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_11_fu_6477_p2),33));
    zext_ln949_fu_5637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_9_fu_5589_p2),33));
    zext_ln951_1_fu_5794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_9_fu_5784_p4),64));
    zext_ln951_2_fu_6210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_61_fu_6202_p3),34));
    zext_ln951_3_fu_6234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_6224_p4),64));
    zext_ln951_4_fu_6658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_64_fu_6650_p3),34));
    zext_ln951_5_fu_6682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_1_fu_6672_p4),64));
    zext_ln951_fu_5770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_58_fu_5762_p3),34));
    zext_ln954_1_fu_6184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_1_fu_6178_p2),33));
    zext_ln954_2_fu_6632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_2_fu_6626_p2),33));
    zext_ln954_fu_5744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_fu_5738_p2),33));
    zext_ln955_1_fu_6160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_1_fu_6154_p2),33));
    zext_ln955_2_fu_6608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_2_fu_6602_p2),33));
    zext_ln955_fu_5720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_fu_5714_p2),33));
    zext_ln958_3_fu_2276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_3_fu_2270_p2),64));
    zext_ln958_4_fu_3238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_4_fu_3233_p2),64));
    zext_ln958_5_fu_3915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_5_fu_3910_p2),64));
    zext_ln958_6_fu_4809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_6_fu_4803_p2),64));
    zext_ln958_7_fu_5076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_7_fu_5070_p2),64));
    zext_ln958_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_fu_1852_p2),64));
    zext_ln959_10_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_67_reg_6977),64));
    zext_ln959_11_fu_2242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_69_fu_2110_p3),64));
    zext_ln959_12_fu_3215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_71_reg_7419),64));
    zext_ln959_13_fu_3892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_73_reg_7533),64));
    zext_ln959_14_fu_4775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_76_fu_4645_p3),64));
    zext_ln959_5_fu_2252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_3_fu_2246_p2),64));
    zext_ln959_6_fu_3223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_4_fu_3218_p2),64));
    zext_ln959_7_fu_3900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_5_fu_3895_p2),64));
    zext_ln959_8_fu_4785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_6_fu_4779_p2),64));
    zext_ln959_9_fu_5053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_7_fu_5047_p2),64));
    zext_ln959_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_fu_1837_p2),64));
    zext_ln961_10_fu_6662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_4_fu_6642_p3),34));
    zext_ln961_3_fu_2302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_7_fu_2286_p3),64));
    zext_ln961_4_fu_3255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_9_reg_7435),64));
    zext_ln961_5_fu_3932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_11_reg_7549),64));
    zext_ln961_6_fu_4835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_13_fu_4819_p3),64));
    zext_ln961_7_fu_5101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_15_fu_5085_p3),64));
    zext_ln961_8_fu_5774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_fu_5754_p3),34));
    zext_ln961_9_fu_6214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_2_fu_6194_p3),34));
    zext_ln961_fu_1874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_reg_6993),64));
    zext_ln962_3_fu_2334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_70_reg_7094),64));
    zext_ln962_4_fu_3274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_72_fu_3264_p4),64));
    zext_ln962_5_fu_3951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_74_fu_3941_p4),64));
    zext_ln962_6_fu_4855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_77_fu_4845_p4),64));
    zext_ln962_7_fu_5121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_78_fu_5111_p4),64));
    zext_ln962_fu_1893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_68_fu_1883_p4),64));
end behav;
