-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_delete_patch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    index : IN STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_V_ce0 : OUT STD_LOGIC;
    patches_parameters_V_we0 : OUT STD_LOGIC;
    patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_V_ce1 : OUT STD_LOGIC;
    patches_parameters_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_delete_patch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_213 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_246 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_2_reg_257 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_268 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_4_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_290 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_52_fu_323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln440_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln440_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_341_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_reg_884 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln449_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln466_fu_382_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln466_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln466_1_fu_404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln466_1_reg_904 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_116_fu_428_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_116_reg_910 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_118_fu_456_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_118_reg_915 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln455_1_fu_462_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln455_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln455_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln455_reg_925_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln455_fu_486_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln455_reg_929 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln455_1_fu_494_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln455_1_reg_934 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln461_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln466_5_fu_558_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln466_5_reg_951 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln471_1_fu_568_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln471_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln471_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln471_reg_961_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln471_1_fu_600_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln471_1_reg_965 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln488_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln488_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln477_fu_647_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln477_reg_976 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln477_1_fu_655_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln477_1_reg_981 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln483_fu_663_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln477_2_fu_675_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln488_5_fu_803_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln488_5_reg_1002 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_13_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal empty_120_fu_819_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal empty_124_fu_845_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal i_12_reg_203 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_a_phi_fu_228_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_a_2_phi_fu_261_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_4_phi_fu_283_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_119_reg_301 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2110_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_123_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond9_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln466_7_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln466_8_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_5_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_6_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast56_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln440_fu_331_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln449_fu_356_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_fu_360_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_370_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln466_1_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln466_fu_366_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_392_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln466_3_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln466_2_fu_388_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_115_fu_410_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_106_cast_fu_413_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_fu_421_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_117_fu_434_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_41_fu_445_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_108_cast_fu_437_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_109_cast_fu_452_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln461_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln455_fu_474_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln466_4_fu_508_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln466_2_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln466_fu_524_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln466_5_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln466_3_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_111_cast_fu_516_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln466_6_fu_544_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln466_4_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_113_cast_fu_536_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln477_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln471_fu_580_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln488_1_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln483_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln471_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln471_fu_592_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln471_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln477_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln477_fu_635_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln477_1_fu_669_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_686_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln488_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln488_1_fu_697_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_fu_702_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln488_2_fu_693_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln488_3_fu_714_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln488_2_fu_717_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln488_fu_723_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln488_1_fu_735_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_727_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_739_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln477_fu_710_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln488_3_fu_753_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln488_2_fu_759_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln488_3_fu_771_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_763_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_775_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln488_fu_747_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln488_4_fu_789_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln488_4_fu_792_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln488_1_fu_783_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast53_fu_831_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_122_fu_835_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast55_fu_857_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_126_fu_861_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln449_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln449_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                a_2_reg_257 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_2_reg_257 <= select_ln471_1_reg_965;
            end if; 
        end if;
    end process;

    a_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                a_reg_224 <= select_ln455_1_reg_934;
            elsif (((icmp_ln449_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_224 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_4_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                b_4_reg_279 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_4_reg_279 <= select_ln477_1_reg_981;
            end if; 
        end if;
    end process;

    b_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_fu_468_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                b_reg_235 <= add_ln461_fu_502_p2;
            elsif (((icmp_ln449_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_reg_235 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                c_reg_290 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c_reg_290 <= add_ln483_fu_663_p2;
            end if; 
        end if;
    end process;

    empty_119_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2110_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                empty_119_reg_301 <= empty_120_fu_819_p2;
            elsif (((icmp_ln449_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_119_reg_301 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    empty_123_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                empty_123_reg_312 <= ap_const_lv7_0;
            elsif (((exitcond9_fu_851_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                empty_123_reg_312 <= empty_124_fu_845_p2;
            end if; 
        end if;
    end process;

    i_12_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_12_reg_203 <= i_13_fu_813_p2;
            elsif (((icmp_ln440_fu_335_p2 = ap_const_lv1_1) and (tmp_52_fu_323_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_12_reg_203 <= i_fu_341_p1;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten21_reg_246 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten21_reg_246 <= add_ln471_1_fu_568_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten7_reg_268 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten7_reg_268 <= select_ln477_2_fu_675_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_fu_468_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_213 <= add_ln455_1_fu_462_p2;
            elsif (((icmp_ln449_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_213 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln449_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln466_1_reg_904 <= add_ln466_1_fu_404_p2;
                add_ln466_reg_898 <= add_ln466_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln466_5_reg_951 <= add_ln466_5_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln488_5_reg_1002 <= add_ln488_5_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln488_reg_971 <= add_ln488_fu_612_p2;
                select_ln477_reg_976 <= select_ln477_fu_647_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln449_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    empty_116_reg_910(11 downto 4) <= empty_116_fu_428_p2(11 downto 4);
                    empty_118_reg_915(11 downto 3) <= empty_118_fu_456_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_52_fu_323_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln440_reg_875 <= icmp_ln440_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln455_reg_925 <= icmp_ln455_fu_468_p2;
                icmp_ln455_reg_925_pp0_iter1_reg <= icmp_ln455_reg_925;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln471_reg_961 <= icmp_ln471_fu_574_p2;
                icmp_ln471_reg_961_pp1_iter1_reg <= icmp_ln471_reg_961;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_fu_468_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln455_1_reg_934 <= select_ln455_1_fu_494_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_fu_468_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln455_reg_929 <= select_ln455_fu_486_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln471_1_reg_965 <= select_ln471_1_fu_600_p3;
                select_ln477_1_reg_981 <= select_ln477_1_fu_655_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln440_fu_335_p2 = ap_const_lv1_1) and (tmp_52_fu_323_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sub_reg_884 <= sub_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_52_reg_871 <= index(8 downto 8);
            end if;
        end if;
    end process;
    empty_116_reg_910(3 downto 0) <= "0000";
    empty_118_reg_915(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_52_fu_323_p3, icmp_ln440_fu_335_p2, icmp_ln449_fu_351_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln455_fu_468_p2, ap_enable_reg_pp1_iter0, icmp_ln471_fu_574_p2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, exitcond2110_fu_825_p2, exitcond9_fu_851_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln440_fu_335_p2 = ap_const_lv1_1) and (tmp_52_fu_323_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((icmp_ln440_fu_335_p2 = ap_const_lv1_0) or (tmp_52_fu_323_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln449_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln455_fu_468_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln455_fu_468_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln471_fu_574_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((exitcond2110_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((exitcond9_fu_851_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_fu_360_p2 <= std_logic_vector(unsigned(trunc_ln449_fu_356_p1) + unsigned(ap_const_lv5_1));
    add_ln455_1_fu_462_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_213) + unsigned(ap_const_lv7_1));
    add_ln455_fu_474_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_228_p4) + unsigned(ap_const_lv3_1));
    add_ln461_fu_502_p2 <= std_logic_vector(unsigned(select_ln455_fu_486_p3) + unsigned(ap_const_lv5_1));
    add_ln466_1_fu_404_p2 <= std_logic_vector(unsigned(zext_ln466_3_fu_400_p1) + unsigned(zext_ln466_2_fu_388_p1));
    add_ln466_2_fu_511_p2 <= std_logic_vector(unsigned(add_ln466_reg_898) + unsigned(zext_ln466_4_fu_508_p1));
    add_ln466_3_fu_530_p2 <= std_logic_vector(unsigned(trunc_ln466_fu_524_p1) + unsigned(zext_ln466_5_fu_527_p1));
    add_ln466_4_fu_547_p2 <= std_logic_vector(unsigned(tmp_111_cast_fu_516_p3) + unsigned(zext_ln466_6_fu_544_p1));
    add_ln466_5_fu_558_p2 <= std_logic_vector(unsigned(tmp_113_cast_fu_536_p3) + unsigned(zext_ln466_6_fu_544_p1));
    add_ln466_fu_382_p2 <= std_logic_vector(unsigned(zext_ln466_1_fu_378_p1) + unsigned(zext_ln466_fu_366_p1));
    add_ln471_1_fu_568_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_246) + unsigned(ap_const_lv7_1));
    add_ln471_fu_580_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_261_p4) + unsigned(ap_const_lv3_1));
    add_ln477_1_fu_669_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_268) + unsigned(ap_const_lv6_1));
    add_ln477_fu_635_p2 <= std_logic_vector(unsigned(select_ln471_fu_592_p3) + unsigned(ap_const_lv3_1));
    add_ln483_fu_663_p2 <= std_logic_vector(unsigned(select_ln477_fu_647_p3) + unsigned(ap_const_lv3_1));
    add_ln488_1_fu_697_p2 <= std_logic_vector(unsigned(add_ln466_1_reg_904) + unsigned(zext_ln488_fu_683_p1));
    add_ln488_2_fu_717_p2 <= std_logic_vector(unsigned(zext_ln488_2_fu_693_p1) + unsigned(zext_ln488_3_fu_714_p1));
    add_ln488_3_fu_753_p2 <= std_logic_vector(unsigned(zext_ln477_fu_710_p1) + unsigned(zext_ln488_3_fu_714_p1));
    add_ln488_4_fu_792_p2 <= std_logic_vector(unsigned(sub_ln488_fu_747_p2) + unsigned(zext_ln488_4_fu_789_p1));
    add_ln488_5_fu_803_p2 <= std_logic_vector(unsigned(sub_ln488_1_fu_783_p2) + unsigned(zext_ln488_4_fu_789_p1));
    add_ln488_fu_612_p2 <= std_logic_vector(unsigned(add_ln466_reg_898) + unsigned(zext_ln488_1_fu_608_p1));
    and_ln471_fu_629_p2 <= (xor_ln471_fu_617_p2 and icmp_ln483_fu_623_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln455_fu_468_p2)
    begin
        if ((icmp_ln455_fu_468_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln471_fu_574_p2)
    begin
        if ((icmp_ln471_fu_574_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_261_p4_assign_proc : process(a_2_reg_257, ap_CS_fsm_pp1_stage0, icmp_ln471_reg_961, select_ln471_1_reg_965, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_2_phi_fu_261_p4 <= select_ln471_1_reg_965;
        else 
            ap_phi_mux_a_2_phi_fu_261_p4 <= a_2_reg_257;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_228_p4_assign_proc : process(a_reg_224, ap_CS_fsm_pp0_stage0, icmp_ln455_reg_925, select_ln455_1_reg_934, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln455_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_a_phi_fu_228_p4 <= select_ln455_1_reg_934;
        else 
            ap_phi_mux_a_phi_fu_228_p4 <= a_reg_224;
        end if; 
    end process;


    ap_phi_mux_b_4_phi_fu_283_p4_assign_proc : process(b_4_reg_279, ap_CS_fsm_pp1_stage0, icmp_ln471_reg_961, select_ln477_1_reg_981, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln471_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_b_4_phi_fu_283_p4 <= select_ln477_1_reg_981;
        else 
            ap_phi_mux_b_4_phi_fu_283_p4 <= b_4_reg_279;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_115_fu_410_p1 <= sub_reg_884(6 - 1 downto 0);
    empty_116_fu_428_p2 <= std_logic_vector(unsigned(tmp_106_cast_fu_413_p3) + unsigned(tmp_40_fu_421_p3));
    empty_117_fu_434_p1 <= sub_reg_884(5 - 1 downto 0);
    empty_118_fu_456_p2 <= std_logic_vector(unsigned(tmp_108_cast_fu_437_p3) - unsigned(tmp_109_cast_fu_452_p1));
    empty_120_fu_819_p2 <= std_logic_vector(unsigned(empty_119_reg_301) + unsigned(ap_const_lv7_1));
    empty_122_fu_835_p2 <= std_logic_vector(unsigned(empty_116_reg_910) + unsigned(p_cast53_fu_831_p1));
    empty_124_fu_845_p2 <= std_logic_vector(unsigned(empty_123_reg_312) + unsigned(ap_const_lv7_1));
    empty_126_fu_861_p2 <= std_logic_vector(unsigned(empty_118_reg_915) + unsigned(p_cast55_fu_857_p1));
    exitcond2110_fu_825_p2 <= "1" when (empty_119_reg_301 = ap_const_lv7_50) else "0";
    exitcond9_fu_851_p2 <= "1" when (empty_123_reg_312 = ap_const_lv7_78) else "0";
    i_13_fu_813_p2 <= std_logic_vector(unsigned(i_12_reg_203) + unsigned(ap_const_lv8_1));
    i_fu_341_p1 <= index(8 - 1 downto 0);
    icmp_ln440_fu_335_p2 <= "1" when (signed(zext_ln440_fu_331_p1) > signed(index)) else "0";
    icmp_ln449_fu_351_p2 <= "1" when (unsigned(i_12_reg_203) < unsigned(sub_reg_884)) else "0";
    icmp_ln455_fu_468_p2 <= "1" when (indvar_flatten_reg_213 = ap_const_lv7_50) else "0";
    icmp_ln461_fu_480_p2 <= "1" when (b_reg_235 = ap_const_lv5_10) else "0";
    icmp_ln471_fu_574_p2 <= "1" when (indvar_flatten21_reg_246 = ap_const_lv7_78) else "0";
    icmp_ln477_fu_586_p2 <= "1" when (indvar_flatten7_reg_268 = ap_const_lv6_18) else "0";
    icmp_ln483_fu_623_p2 <= "1" when (c_reg_290 = ap_const_lv3_6) else "0";
    n_patches <= sub_reg_884;

    n_patches_ap_vld_assign_proc : process(tmp_52_reg_871, icmp_ln440_reg_875, ap_CS_fsm_state14)
    begin
        if (((icmp_ln440_reg_875 = ap_const_lv1_1) and (tmp_52_reg_871 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln477_fu_641_p2 <= (icmp_ln477_fu_586_p2 or and_ln471_fu_629_p2);
    p_cast53_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_119_reg_301),12));
    p_cast55_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_123_reg_312),12));
    p_cast56_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_126_fu_861_p2),64));
    p_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_122_fu_835_p2),64));
    p_shl2_cast_fu_763_p3 <= (trunc_ln488_2_fu_759_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_775_p3 <= (trunc_ln488_3_fu_771_p1 & ap_const_lv1_0);
    p_shl4_cast_fu_727_p3 <= (trunc_ln488_fu_723_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_739_p3 <= (trunc_ln488_1_fu_735_p1 & ap_const_lv1_0);

    patches_parameters_V_address0_assign_proc : process(ap_CS_fsm_state13, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln488_6_fu_809_p1, p_cast56_fu_866_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patches_parameters_V_address0 <= p_cast56_fu_866_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_V_address0 <= zext_ln488_6_fu_809_p1(12 - 1 downto 0);
        else 
            patches_parameters_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_parameters_V_address1 <= zext_ln488_5_fu_798_p1(12 - 1 downto 0);

    patches_parameters_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_V_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            patches_parameters_V_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_d0_assign_proc : process(patches_parameters_V_q1, ap_CS_fsm_state13, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patches_parameters_V_d0 <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_V_d0 <= patches_parameters_V_q1;
        else 
            patches_parameters_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln471_reg_961_pp1_iter1_reg, ap_CS_fsm_state13, ap_enable_reg_pp1_iter2, exitcond9_fu_851_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln471_reg_961_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((exitcond9_fu_851_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            patches_parameters_V_we0 <= ap_const_logic_1;
        else 
            patches_parameters_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state11, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln466_8_fu_564_p1, p_cast_fu_840_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patches_superpoints_address0 <= p_cast_fu_840_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_address0 <= zext_ln466_8_fu_564_p1(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_superpoints_address1 <= zext_ln466_7_fu_553_p1(12 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state11, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            patches_superpoints_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(patches_superpoints_q1, ap_CS_fsm_state11, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patches_superpoints_d0 <= ap_const_lv64_0;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_d0 <= patches_superpoints_q1;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln455_reg_925_pp0_iter1_reg, ap_CS_fsm_state11, ap_enable_reg_pp0_iter2, exitcond2110_fu_825_p2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln455_reg_925_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond2110_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln455_1_fu_494_p3 <= 
        add_ln455_fu_474_p2 when (icmp_ln461_fu_480_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_228_p4;
    select_ln455_fu_486_p3 <= 
        ap_const_lv5_0 when (icmp_ln461_fu_480_p2(0) = '1') else 
        b_reg_235;
    select_ln471_1_fu_600_p3 <= 
        add_ln471_fu_580_p2 when (icmp_ln477_fu_586_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_261_p4;
    select_ln471_fu_592_p3 <= 
        ap_const_lv3_0 when (icmp_ln477_fu_586_p2(0) = '1') else 
        ap_phi_mux_b_4_phi_fu_283_p4;
    select_ln477_1_fu_655_p3 <= 
        add_ln477_fu_635_p2 when (and_ln471_fu_629_p2(0) = '1') else 
        select_ln471_fu_592_p3;
    select_ln477_2_fu_675_p3 <= 
        ap_const_lv6_1 when (icmp_ln477_fu_586_p2(0) = '1') else 
        add_ln477_1_fu_669_p2;
    select_ln477_fu_647_p3 <= 
        ap_const_lv3_0 when (or_ln477_fu_641_p2(0) = '1') else 
        c_reg_290;
    sub_fu_345_p2 <= std_logic_vector(unsigned(n_patches_read) + unsigned(ap_const_lv8_FF));
    sub_ln488_1_fu_783_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_763_p3) - unsigned(p_shl3_cast_fu_775_p3));
    sub_ln488_fu_747_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_727_p3) - unsigned(p_shl5_cast_fu_739_p3));
    tmp_106_cast_fu_413_p3 <= (empty_115_fu_410_p1 & ap_const_lv6_0);
    tmp_108_cast_fu_437_p3 <= (empty_117_fu_434_p1 & ap_const_lv7_0);
    tmp_109_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_445_p3),12));
    tmp_111_cast_fu_516_p3 <= (add_ln466_2_fu_511_p2 & ap_const_lv4_0);
    tmp_113_cast_fu_536_p3 <= (add_ln466_3_fu_530_p2 & ap_const_lv4_0);
    tmp_40_fu_421_p3 <= (sub_reg_884 & ap_const_lv4_0);
    tmp_41_fu_445_p3 <= (sub_reg_884 & ap_const_lv3_0);
    tmp_52_fu_323_p3 <= index(8 downto 8);
    tmp_53_fu_686_p3 <= (add_ln488_reg_971 & ap_const_lv2_0);
    tmp_54_fu_702_p3 <= (add_ln488_1_fu_697_p2 & ap_const_lv2_0);
    tmp_fu_370_p3 <= (add_fu_360_p2 & ap_const_lv2_0);
    tmp_s_fu_392_p3 <= (i_12_reg_203 & ap_const_lv2_0);
    trunc_ln449_fu_356_p1 <= i_12_reg_203(5 - 1 downto 0);
    trunc_ln466_fu_524_p1 <= add_ln466_1_reg_904(8 - 1 downto 0);
    trunc_ln488_1_fu_735_p1 <= add_ln488_2_fu_717_p2(11 - 1 downto 0);
    trunc_ln488_2_fu_759_p1 <= add_ln488_3_fu_753_p2(9 - 1 downto 0);
    trunc_ln488_3_fu_771_p1 <= add_ln488_3_fu_753_p2(11 - 1 downto 0);
    trunc_ln488_fu_723_p1 <= add_ln488_2_fu_717_p2(9 - 1 downto 0);
    xor_ln471_fu_617_p2 <= (icmp_ln477_fu_586_p2 xor ap_const_lv1_1);
    zext_ln440_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),9));
    zext_ln466_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_370_p3),8));
    zext_ln466_2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_12_reg_203),11));
    zext_ln466_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_392_p3),11));
    zext_ln466_4_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln455_1_reg_934),8));
    zext_ln466_5_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln455_1_reg_934),8));
    zext_ln466_6_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln455_reg_929),12));
    zext_ln466_7_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln466_4_fu_547_p2),64));
    zext_ln466_8_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln466_5_reg_951),64));
    zext_ln466_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_360_p2),8));
    zext_ln477_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_702_p3),63));
    zext_ln488_1_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln471_1_fu_600_p3),8));
    zext_ln488_2_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_686_p3),63));
    zext_ln488_3_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln477_1_reg_981),63));
    zext_ln488_4_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln477_reg_976),12));
    zext_ln488_5_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln488_4_fu_792_p2),64));
    zext_ln488_6_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln488_5_reg_1002),64));
    zext_ln488_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln471_1_reg_965),11));
end behav;
