-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_add_patch9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wp_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce0 : OUT STD_LOGIC;
    wp_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce1 : OUT STD_LOGIC;
    wp_superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1069_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1069_p_din1 : OUT STD_LOGIC_VECTOR (65 downto 0);
    grp_fu_1069_p_dout0 : IN STD_LOGIC_VECTOR (128 downto 0);
    grp_fu_1069_p_ce : OUT STD_LOGIC;
    grp_fu_1073_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1073_p_din1 : OUT STD_LOGIC_VECTOR (65 downto 0);
    grp_fu_1073_p_dout0 : IN STD_LOGIC_VECTOR (128 downto 0);
    grp_fu_1073_p_ce : OUT STD_LOGIC );
end;


architecture behav of MPSQ_add_patch9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (77 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (77 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (77 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (77 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (77 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (77 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (77 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (77 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv12_66 : STD_LOGIC_VECTOR (11 downto 0) := "000001100110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv51_0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_1F : STD_LOGIC_VECTOR (12 downto 0) := "0000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv57_5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_78 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001111000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten29_reg_357 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_4_reg_368 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_6_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten51_reg_390 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_5_reg_401 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_412 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_7_reg_423 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_434 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_445 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_456 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_467 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_478 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten7_reg_489 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_3_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_5_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_522 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln374_1_reg_1624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln874_reg_1676 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_1585 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln321_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_562_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_reg_1594 : STD_LOGIC_VECTOR (8 downto 0);
    signal patches_parameters_load_reg_1605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln374_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln374_reg_1610 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln376_fu_625_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln376_reg_1614 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln374_fu_629_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln374_reg_1619 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln374_1_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_14_fu_642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_14_reg_1628 : STD_LOGIC_VECTOR (7 downto 0);
    signal wp_superpoints_addr_6_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln376_fu_707_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln376_reg_1643 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln376_1_fu_735_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_60_reg_1659 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_726_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal urem_ln376_reg_1665 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln874_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal zext_ln377_fu_812_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal trunc_ln377_fu_822_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln377_reg_1685 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln4_cast_reg_1690 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_reg_1695 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal icmp_ln387_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln387_reg_1708 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal add_ln401_fu_920_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln401_reg_1712 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln390_1_fu_926_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state70_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state71_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln390_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln390_reg_1723 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln390_fu_950_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln390_reg_1727 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln390_1_fu_958_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln390_1_reg_1732 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln396_fu_1018_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln406_1_fu_1058_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state73_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state74_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state75_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln406_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln406_reg_1758 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln406_reg_1758_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln412_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln412_reg_1762 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln406_1_fu_1082_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln406_1_reg_1769 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln412_2_fu_1096_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln412_1_fu_1178_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln412_1_reg_1781 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal add_ln423_4_fu_1281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln423_4_reg_1791 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln418_fu_1287_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln325_1_fu_1307_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state78_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state79_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln325_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln325_reg_1806 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln325_1_fu_1339_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln325_1_reg_1810 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln336_fu_1363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln336_reg_1815 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln331_fu_1399_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln341_2_fu_1409_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state81_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state82_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state83_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln341_fu_1415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln341_reg_1840 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln341_reg_1840_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_1844 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln347_2_fu_1433_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln341_1_fu_1454_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln341_1_reg_1857 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal select_ln347_1_fu_1509_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln347_1_reg_1862 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln358_4_fu_1567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_4_reg_1867 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln353_fu_1572_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state70 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_condition_pp2_exit_iter1_state74 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state78 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_flush_enable : STD_LOGIC;
    signal ap_condition_pp4_exit_iter1_state82 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal grp_encodeCoordinates_fu_533_ap_ready : STD_LOGIC;
    signal grp_encodeCoordinates_fu_533_phi : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encodeCoordinates_fu_533_z : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encodeCoordinates_fu_533_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal icmp_ln874_4_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_a_4_phi_fu_372_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_a_5_phi_fu_405_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_b_7_phi_fu_427_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_phi_fu_460_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_a_3_phi_fu_504_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_b_5_phi_fu_515_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_662_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_677_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_784_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln377_1_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_6_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_7_fu_1013_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_5_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln423_6_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln423_7_fu_1293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln336_2_fu_1377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln336_3_fu_1394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln336_1_fu_1405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln431_fu_1302_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal zext_ln321_fu_552_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_129_fu_568_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_572_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_580_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_130_fu_588_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_131_fu_594_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln376_1_fu_618_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_605_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln374_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_648_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln874_fu_656_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln874_1_fu_671_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_686_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln376_fu_694_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln376_1_fu_698_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln376_1_fu_703_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln_fu_712_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_726_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln376_2_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_739_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_739_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_61_fu_758_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln376_3_fu_765_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln376_2_fu_755_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln376_2_fu_769_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln376_4_fu_775_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln376_3_fu_778_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln69_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln377_fu_803_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln377_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal p_shl5_cast_fu_845_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln377_fu_852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln377_1_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_cast_fu_862_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln377_1_fu_870_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln69_4_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_891_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_48_fu_909_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln401_1_fu_916_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln401_fu_906_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln396_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln390_fu_938_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_49_fu_966_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_154_cast_fu_974_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln401_3_fu_978_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln401_3_fu_982_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_988_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln401_fu_1001_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln401_fu_1007_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln401_fu_1024_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln401_2_fu_1027_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln401_1_fu_1030_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_153_cast_fu_1036_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln401_4_fu_1044_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln401_2_fu_1047_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln406_fu_1070_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln412_1_fu_1090_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_fu_1114_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln423_fu_1111_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln423_fu_1125_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_1130_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln418_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln406_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln406_fu_1104_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln406_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln412_fu_1159_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln423_1_fu_1121_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln423_3_fu_1190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln423_1_fu_1194_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln423_fu_1200_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl6_cast_fu_1204_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_1212_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln412_fu_1138_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln423_2_fu_1186_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln423_2_fu_1226_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln423_1_fu_1232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln423_2_fu_1244_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_1236_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_1248_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln412_fu_1170_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln423_fu_1220_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln423_5_fu_1266_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln423_3_fu_1270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln423_1_fu_1256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln423_4_fu_1262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln431_fu_1297_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln331_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln325_fu_1319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_42_fu_1347_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln325_fu_1331_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_136_cast_fu_1355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln336_fu_1359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_1369_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln336_fu_1382_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln336_fu_1388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln347_1_fu_1427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln341_fu_1441_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_47_fu_1461_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln353_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln341_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln341_fu_1447_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln341_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln347_fu_1490_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln347_fu_1469_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln358_fu_1517_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln358_fu_1521_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_fu_1527_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_1539_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln358_1_fu_1535_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln358_2_fu_1547_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln347_fu_1501_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln358_fu_1551_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln358_3_fu_1557_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln358_1_fu_1561_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_739_ce : STD_LOGIC;
    signal grp_fu_816_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_encodeCoordinates IS
    port (
        ap_ready : OUT STD_LOGIC;
        phi : IN STD_LOGIC_VECTOR (31 downto 0);
        z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_urem_57s_4ns_57_61_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component MPSQ_mul_64ns_66ns_129_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;



begin
    grp_encodeCoordinates_fu_533 : component MPSQ_encodeCoordinates
    port map (
        ap_ready => grp_encodeCoordinates_fu_533_ap_ready,
        phi => grp_encodeCoordinates_fu_533_phi,
        z => grp_encodeCoordinates_fu_533_z,
        ap_return => grp_encodeCoordinates_fu_533_ap_return);

    urem_57s_4ns_57_61_1_U52 : component MPSQ_urem_57s_4ns_57_61_1
    generic map (
        ID => 1,
        NUM_STAGE => 61,
        din0_WIDTH => 57,
        din1_WIDTH => 4,
        dout_WIDTH => 57)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_726_p0,
        din1 => grp_fu_726_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_726_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state70) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state70))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state70);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state74)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state74))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state78) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state78))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state78);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp4_flush_enable)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter1_state82)))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter1_state82))) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_3_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                a_3_reg_500 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln341_reg_1840_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                a_3_reg_500 <= select_ln341_1_reg_1857;
            end if; 
        end if;
    end process;

    a_4_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln390_reg_1723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                a_4_reg_368 <= select_ln390_1_reg_1732;
            elsif (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                a_4_reg_368 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    a_5_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                a_5_reg_401 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln406_reg_1758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                a_5_reg_401 <= select_ln406_1_reg_1769;
            end if; 
        end if;
    end process;

    a_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_1))) then 
                a_reg_456 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln325_reg_1806 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                a_reg_456 <= select_ln325_1_reg_1810;
            end if; 
        end if;
    end process;

    b_5_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                b_5_reg_511 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln341_reg_1840_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                b_5_reg_511 <= select_ln347_1_reg_1862;
            end if; 
        end if;
    end process;

    b_6_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_932_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                b_6_reg_379 <= add_ln396_fu_1018_p2;
            elsif (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                b_6_reg_379 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    b_7_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                b_7_reg_423 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln406_reg_1758_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                b_7_reg_423 <= select_ln412_1_reg_1781;
            end if; 
        end if;
    end process;

    b_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_1))) then 
                b_reg_467 <= ap_const_lv5_0;
            elsif (((icmp_ln325_fu_1313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                b_reg_467 <= add_ln331_fu_1399_p2;
            end if; 
        end if;
    end process;

    c_4_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                c_4_reg_434 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln406_reg_1758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                c_4_reg_434 <= add_ln418_fu_1287_p2;
            end if; 
        end if;
    end process;

    c_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                c_reg_522 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln341_reg_1840 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                c_reg_522 <= add_ln353_fu_1572_p2;
            end if; 
        end if;
    end process;

    i_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_346 <= ap_const_lv8_0;
            elsif (((icmp_ln874_4_fu_885_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68) and (icmp_ln874_reg_1676 = ap_const_lv1_1) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then 
                i_reg_346 <= i_14_reg_1628;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                indvar_flatten21_reg_478 <= ap_const_lv7_0;
            elsif (((icmp_ln341_fu_1415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                indvar_flatten21_reg_478 <= add_ln341_2_fu_1409_p2;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_932_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten29_reg_357 <= add_ln390_1_fu_926_p2;
            elsif (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                indvar_flatten29_reg_357 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                indvar_flatten37_reg_412 <= ap_const_lv6_0;
            elsif (((icmp_ln406_fu_1064_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten37_reg_412 <= select_ln412_2_fu_1096_p3;
            end if; 
        end if;
    end process;

    indvar_flatten51_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                indvar_flatten51_reg_390 <= ap_const_lv7_0;
            elsif (((icmp_ln406_fu_1064_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten51_reg_390 <= add_ln406_1_fu_1058_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                indvar_flatten7_reg_489 <= ap_const_lv6_0;
            elsif (((icmp_ln341_fu_1415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                indvar_flatten7_reg_489 <= select_ln347_2_fu_1433_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_445 <= ap_const_lv7_0;
            elsif (((icmp_ln325_fu_1313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten_reg_445 <= add_ln325_1_fu_1307_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln325_fu_1313_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln336_reg_1815 <= add_ln336_fu_1363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_1_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln376_reg_1643(18 downto 7) <= add_ln376_fu_707_p2(18 downto 7);
                    wp_superpoints_addr_6_reg_1638(7 downto 5) <= tmp_45_fu_677_p3(8 - 1 downto 0)(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                add_ln401_reg_1712 <= add_ln401_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln406_reg_1758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln423_4_reg_1791 <= add_ln423_4_fu_1281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_1585 <= empty_fu_548_p1;
                icmp_ln321_reg_1590 <= icmp_ln321_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_14_reg_1628 <= i_14_fu_642_p2;
                icmp_ln374_1_reg_1624 <= icmp_ln374_1_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln325_reg_1806 <= icmp_ln325_fu_1313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln341_reg_1840 <= icmp_ln341_fu_1415_p2;
                icmp_ln341_reg_1840_pp4_iter1_reg <= icmp_ln341_reg_1840;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln341_fu_1415_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln347_reg_1844 <= icmp_ln347_fu_1421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln374_reg_1610 <= icmp_ln374_fu_612_p2;
                patches_parameters_load_reg_1605 <= patches_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                icmp_ln387_reg_1708 <= icmp_ln387_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln390_reg_1723 <= icmp_ln390_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln406_reg_1758 <= icmp_ln406_fu_1064_p2;
                icmp_ln406_reg_1758_pp2_iter1_reg <= icmp_ln406_reg_1758;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln406_fu_1064_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln412_reg_1762 <= icmp_ln412_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then
                icmp_ln874_reg_1676 <= icmp_ln874_fu_797_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state66) and (icmp_ln874_reg_1676 = ap_const_lv1_1) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1)))) then
                reg_544 <= wp_superpoints_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln325_fu_1313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln325_1_reg_1810 <= select_ln325_1_fu_1339_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln341_reg_1840 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                select_ln341_1_reg_1857 <= select_ln341_1_fu_1454_p3;
                select_ln347_1_reg_1862 <= select_ln347_1_fu_1509_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_932_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln390_1_reg_1732 <= select_ln390_1_fu_958_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_932_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln390_reg_1727 <= select_ln390_fu_950_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln406_fu_1064_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln406_1_reg_1769 <= select_ln406_1_fu_1082_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln406_reg_1758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln412_1_reg_1781 <= select_ln412_1_fu_1178_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln374_reg_1619(16 downto 7) <= sext_ln374_fu_629_p1(16 downto 7);
                    sext_ln376_reg_1614(18 downto 9) <= sext_ln376_fu_625_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_0))) then
                sub_reg_1594 <= sub_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then
                tmp_60_reg_1659 <= grp_fu_1069_p_dout0(128 downto 74);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (icmp_ln874_reg_1676 = ap_const_lv1_1) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then
                tmp_64_reg_1695 <= grp_fu_1073_p_dout0(79 downto 74);
                udiv_ln4_cast_reg_1690 <= grp_fu_1073_p_dout0(81 downto 74);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln874_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then
                trunc_ln377_reg_1685 <= trunc_ln377_fu_822_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then
                urem_ln376_reg_1665 <= grp_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln341_reg_1840 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    zext_ln358_4_reg_1867(11 downto 0) <= zext_ln358_4_fu_1567_p1(11 downto 0);
            end if;
        end if;
    end process;
    sext_ln376_reg_1614(8 downto 0) <= "000000000";
    sext_ln374_reg_1619(6 downto 0) <= "0000000";
    wp_superpoints_addr_6_reg_1638(4 downto 0) <= "11111";
    add_ln376_reg_1643(6 downto 0) <= "0000000";
    zext_ln358_4_reg_1867(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln374_1_reg_1624, icmp_ln874_reg_1676, icmp_ln321_fu_556_p2, ap_CS_fsm_state2, icmp_ln374_fu_612_p2, icmp_ln387_fu_900_p2, ap_CS_fsm_state69, ap_enable_reg_pp1_iter0, icmp_ln390_fu_932_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter0, icmp_ln325_fu_1313_p2, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state68, icmp_ln874_4_fu_885_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln321_fu_556_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln374_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((icmp_ln874_4_fu_885_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68) and (icmp_ln874_reg_1676 = ap_const_lv1_1) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state68) and (icmp_ln374_1_reg_1624 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state69 => 
                if (((icmp_ln387_fu_900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln390_fu_932_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln390_fu_932_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln325_fu_1313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln325_fu_1313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln325_1_fu_1307_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_445) + unsigned(ap_const_lv7_1));
    add_ln325_fu_1319_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_460_p4) + unsigned(ap_const_lv3_1));
    add_ln331_fu_1399_p2 <= std_logic_vector(unsigned(select_ln325_fu_1331_p3) + unsigned(ap_const_lv5_1));
    add_ln336_fu_1363_p2 <= std_logic_vector(unsigned(tmp_136_cast_fu_1355_p1) + unsigned(zext_ln336_fu_1359_p1));
    add_ln341_2_fu_1409_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_478) + unsigned(ap_const_lv7_1));
    add_ln341_fu_1441_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_3_phi_fu_504_p4) + unsigned(ap_const_lv3_1));
    add_ln347_1_fu_1427_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_489) + unsigned(ap_const_lv6_1));
    add_ln347_fu_1490_p2 <= std_logic_vector(unsigned(select_ln341_fu_1447_p3) + unsigned(ap_const_lv3_1));
    add_ln353_fu_1572_p2 <= std_logic_vector(unsigned(select_ln347_fu_1501_p3) + unsigned(ap_const_lv3_1));
    add_ln358_1_fu_1561_p2 <= std_logic_vector(unsigned(sub_ln358_fu_1551_p2) + unsigned(zext_ln358_3_fu_1557_p1));
    add_ln358_fu_1521_p2 <= std_logic_vector(unsigned(zext_ln347_fu_1469_p1) + unsigned(zext_ln358_fu_1517_p1));
    add_ln376_1_fu_698_p2 <= std_logic_vector(signed(sext_ln374_reg_1619) + signed(zext_ln376_fu_694_p1));
    add_ln376_2_fu_769_p2 <= std_logic_vector(unsigned(zext_ln376_3_fu_765_p1) + unsigned(zext_ln376_2_fu_755_p1));
    add_ln376_3_fu_778_p2 <= std_logic_vector(unsigned(add_ln376_2_fu_769_p2) + unsigned(zext_ln376_4_fu_775_p1));
    add_ln376_fu_707_p2 <= std_logic_vector(signed(sext_ln376_1_fu_703_p1) + signed(sext_ln376_reg_1614));
    add_ln377_1_fu_857_p2 <= std_logic_vector(unsigned(add_ln377_fu_852_p2) + unsigned(trunc_ln377_reg_1685));
    add_ln377_fu_852_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_845_p3) + unsigned(udiv_ln4_cast_reg_1690));
    add_ln390_1_fu_926_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_357) + unsigned(ap_const_lv7_1));
    add_ln390_fu_938_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_4_phi_fu_372_p4) + unsigned(ap_const_lv3_1));
    add_ln396_fu_1018_p2 <= std_logic_vector(unsigned(select_ln390_fu_950_p3) + unsigned(ap_const_lv5_1));
    add_ln401_1_fu_1030_p2 <= std_logic_vector(unsigned(trunc_ln401_fu_1024_p1) + unsigned(zext_ln401_2_fu_1027_p1));
    add_ln401_2_fu_1047_p2 <= std_logic_vector(unsigned(tmp_153_cast_fu_1036_p3) + unsigned(zext_ln401_4_fu_1044_p1));
    add_ln401_3_fu_982_p2 <= std_logic_vector(unsigned(tmp_154_cast_fu_974_p1) + unsigned(zext_ln401_3_fu_978_p1));
    add_ln401_fu_920_p2 <= std_logic_vector(unsigned(zext_ln401_1_fu_916_p1) + unsigned(zext_ln401_fu_906_p1));
    add_ln406_1_fu_1058_p2 <= std_logic_vector(unsigned(indvar_flatten51_reg_390) + unsigned(ap_const_lv7_1));
    add_ln406_fu_1070_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_5_phi_fu_405_p4) + unsigned(ap_const_lv3_1));
    add_ln412_1_fu_1090_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_412) + unsigned(ap_const_lv6_1));
    add_ln412_fu_1159_p2 <= std_logic_vector(unsigned(select_ln406_fu_1104_p3) + unsigned(ap_const_lv3_1));
    add_ln418_fu_1287_p2 <= std_logic_vector(unsigned(select_ln412_fu_1170_p3) + unsigned(ap_const_lv3_1));
    add_ln423_1_fu_1194_p2 <= std_logic_vector(unsigned(zext_ln423_1_fu_1121_p1) + unsigned(zext_ln423_3_fu_1190_p1));
    add_ln423_2_fu_1226_p2 <= std_logic_vector(unsigned(zext_ln412_fu_1138_p1) + unsigned(zext_ln423_2_fu_1186_p1));
    add_ln423_3_fu_1270_p2 <= std_logic_vector(unsigned(sub_ln423_fu_1220_p2) + unsigned(zext_ln423_5_fu_1266_p1));
    add_ln423_4_fu_1281_p2 <= std_logic_vector(unsigned(sub_ln423_1_fu_1256_p2) + unsigned(zext_ln423_4_fu_1262_p1));
    add_ln423_fu_1125_p2 <= std_logic_vector(unsigned(add_ln401_reg_1712) + unsigned(zext_ln423_fu_1111_p1));
    add_ln431_fu_1297_p2 <= std_logic_vector(unsigned(empty_reg_1585) + unsigned(ap_const_lv6_1));
    and_ln341_fu_1484_p2 <= (xor_ln341_fu_1473_p2 and icmp_ln353_fu_1478_p2);
    and_ln406_fu_1153_p2 <= (xor_ln406_fu_1142_p2 and icmp_ln418_fu_1147_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(69);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(71);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(76);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state72 <= ap_CS_fsm(70);
    ap_CS_fsm_state76 <= ap_CS_fsm(72);
    ap_CS_fsm_state80 <= ap_CS_fsm(75);
    ap_CS_fsm_state84 <= ap_CS_fsm(77);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state70_assign_proc : process(icmp_ln390_fu_932_p2)
    begin
        if ((icmp_ln390_fu_932_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state70 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state74_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state74 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state74 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln406_fu_1064_p2, ap_block_pp2_stage0_subdone)
    begin
        if (((icmp_ln406_fu_1064_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state78_assign_proc : process(icmp_ln325_fu_1313_p2)
    begin
        if ((icmp_ln325_fu_1313_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state78 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state78 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter1_state82_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_condition_pp4_exit_iter1_state82 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter1_state82 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_flush_enable_assign_proc : process(ap_CS_fsm_pp4_stage0, icmp_ln341_fu_1415_p2, ap_block_pp4_stage0_subdone)
    begin
        if (((icmp_ln341_fu_1415_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_condition_pp4_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp4_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_3_phi_fu_504_p4_assign_proc : process(a_3_reg_500, icmp_ln341_reg_1840_pp4_iter1_reg, select_ln341_1_reg_1857, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln341_reg_1840_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_a_3_phi_fu_504_p4 <= select_ln341_1_reg_1857;
        else 
            ap_phi_mux_a_3_phi_fu_504_p4 <= a_3_reg_500;
        end if; 
    end process;


    ap_phi_mux_a_4_phi_fu_372_p4_assign_proc : process(a_4_reg_368, ap_CS_fsm_pp1_stage0, icmp_ln390_reg_1723, select_ln390_1_reg_1732, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln390_reg_1723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_a_4_phi_fu_372_p4 <= select_ln390_1_reg_1732;
        else 
            ap_phi_mux_a_4_phi_fu_372_p4 <= a_4_reg_368;
        end if; 
    end process;


    ap_phi_mux_a_5_phi_fu_405_p4_assign_proc : process(a_5_reg_401, ap_CS_fsm_pp2_stage0, icmp_ln406_reg_1758, select_ln406_1_reg_1769, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln406_reg_1758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_a_5_phi_fu_405_p4 <= select_ln406_1_reg_1769;
        else 
            ap_phi_mux_a_5_phi_fu_405_p4 <= a_5_reg_401;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_460_p4_assign_proc : process(a_reg_456, ap_CS_fsm_pp3_stage0, icmp_ln325_reg_1806, select_ln325_1_reg_1810, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln325_reg_1806 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_a_phi_fu_460_p4 <= select_ln325_1_reg_1810;
        else 
            ap_phi_mux_a_phi_fu_460_p4 <= a_reg_456;
        end if; 
    end process;


    ap_phi_mux_b_5_phi_fu_515_p4_assign_proc : process(b_5_reg_511, icmp_ln341_reg_1840_pp4_iter1_reg, select_ln347_1_reg_1862, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln341_reg_1840_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_b_5_phi_fu_515_p4 <= select_ln347_1_reg_1862;
        else 
            ap_phi_mux_b_5_phi_fu_515_p4 <= b_5_reg_511;
        end if; 
    end process;


    ap_phi_mux_b_7_phi_fu_427_p4_assign_proc : process(b_7_reg_423, icmp_ln406_reg_1758_pp2_iter1_reg, select_ln412_1_reg_1781, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln406_reg_1758_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_b_7_phi_fu_427_p4 <= select_ln412_1_reg_1781;
        else 
            ap_phi_mux_b_7_phi_fu_427_p4 <= b_7_reg_423;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_129_fu_568_p1 <= sub_fu_562_p2(5 - 1 downto 0);
    empty_130_fu_588_p2 <= std_logic_vector(unsigned(tmp_cast_fu_572_p3) - unsigned(tmp_s_fu_580_p3));
    empty_131_fu_594_p2 <= std_logic_vector(unsigned(empty_130_fu_588_p2) + unsigned(ap_const_lv12_66));
    empty_fu_548_p1 <= n_patches_read(6 - 1 downto 0);

    grp_encodeCoordinates_fu_533_phi_assign_proc : process(wp_superpoints_q0, wp_superpoints_q1, ap_CS_fsm_pp1_stage0, icmp_ln390_reg_1723, ap_CS_fsm_pp3_stage0, icmp_ln325_reg_1806, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln325_reg_1806 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_encodeCoordinates_fu_533_phi <= wp_superpoints_q0;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln390_reg_1723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_encodeCoordinates_fu_533_phi <= wp_superpoints_q1;
        else 
            grp_encodeCoordinates_fu_533_phi <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_encodeCoordinates_fu_533_z_assign_proc : process(wp_superpoints_q0, wp_superpoints_q1, ap_CS_fsm_pp1_stage0, icmp_ln390_reg_1723, ap_CS_fsm_pp3_stage0, icmp_ln325_reg_1806, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln325_reg_1806 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_encodeCoordinates_fu_533_z <= wp_superpoints_q1;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln390_reg_1723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_encodeCoordinates_fu_533_z <= wp_superpoints_q0;
        else 
            grp_encodeCoordinates_fu_533_z <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1069_p_ce <= ap_const_logic_1;
    grp_fu_1069_p_din0 <= zext_ln376_1_fu_735_p1(64 - 1 downto 0);
    grp_fu_1069_p_din1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    grp_fu_1073_p_ce <= ap_const_logic_1;
    grp_fu_1073_p_din0 <= zext_ln377_fu_812_p1(64 - 1 downto 0);
    grp_fu_1073_p_din1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
        grp_fu_726_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_712_p4),57));

    grp_fu_726_p1 <= ap_const_lv57_5(4 - 1 downto 0);
    grp_fu_739_ce <= ap_const_logic_1;
    grp_fu_739_p0 <= zext_ln376_1_fu_735_p1(64 - 1 downto 0);
    grp_fu_739_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    grp_fu_739_p2 <= grp_fu_1069_p_dout0;
    grp_fu_816_ce <= ap_const_logic_1;
    grp_fu_816_p0 <= zext_ln377_fu_812_p1(64 - 1 downto 0);
    grp_fu_816_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    grp_fu_816_p2 <= grp_fu_1073_p_dout0;
    i_14_fu_642_p2 <= std_logic_vector(unsigned(i_reg_346) + unsigned(ap_const_lv8_1));
    icmp_ln321_fu_556_p2 <= "1" when (n_patches_read = ap_const_lv8_0) else "0";
    icmp_ln325_fu_1313_p2 <= "1" when (indvar_flatten_reg_445 = ap_const_lv7_50) else "0";
    icmp_ln331_fu_1325_p2 <= "1" when (b_reg_467 = ap_const_lv5_10) else "0";
    icmp_ln341_fu_1415_p2 <= "1" when (indvar_flatten21_reg_478 = ap_const_lv7_78) else "0";
    icmp_ln347_fu_1421_p2 <= "1" when (indvar_flatten7_reg_489 = ap_const_lv6_18) else "0";
    icmp_ln353_fu_1478_p2 <= "1" when (c_reg_522 = ap_const_lv3_6) else "0";
    icmp_ln374_1_fu_637_p2 <= "1" when (signed(zext_ln374_fu_633_p1) < signed(patches_parameters_load_reg_1605)) else "0";
    icmp_ln374_fu_612_p2 <= "1" when (signed(patches_parameters_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln387_fu_900_p2 <= "1" when (tmp_65_fu_891_p4 = ap_const_lv3_0) else "0";
    icmp_ln390_fu_932_p2 <= "1" when (indvar_flatten29_reg_357 = ap_const_lv7_50) else "0";
    icmp_ln396_fu_944_p2 <= "1" when (b_6_reg_379 = ap_const_lv5_10) else "0";
    icmp_ln406_fu_1064_p2 <= "1" when (indvar_flatten51_reg_390 = ap_const_lv7_78) else "0";
    icmp_ln412_fu_1076_p2 <= "1" when (indvar_flatten37_reg_412 = ap_const_lv6_18) else "0";
    icmp_ln418_fu_1147_p2 <= "1" when (c_4_reg_434 = ap_const_lv3_6) else "0";
    icmp_ln874_4_fu_885_p2 <= "1" when (trunc_ln69_4_fu_881_p1 = reg_544) else "0";
    icmp_ln874_fu_797_p2 <= "1" when (trunc_ln69_fu_793_p1 = reg_544) else "0";

    n_patches_assign_proc : process(icmp_ln374_1_reg_1624, icmp_ln321_reg_1590, icmp_ln374_reg_1610, icmp_ln387_reg_1708, zext_ln431_fu_1302_p1, ap_CS_fsm_state76, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            n_patches <= ap_const_lv8_1;
        elsif (((icmp_ln387_reg_1708 = ap_const_lv1_1) and (icmp_ln374_reg_1610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln321_reg_1590 = ap_const_lv1_0) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1))) then 
            n_patches <= zext_ln431_fu_1302_p1;
        else 
            n_patches <= "XXXXXXXX";
        end if; 
    end process;


    n_patches_ap_vld_assign_proc : process(icmp_ln374_1_reg_1624, icmp_ln321_reg_1590, icmp_ln374_reg_1610, icmp_ln387_reg_1708, ap_CS_fsm_state76, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or ((icmp_ln387_reg_1708 = ap_const_lv1_1) and (icmp_ln374_reg_1610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln321_reg_1590 = ap_const_lv1_0) and (icmp_ln374_1_reg_1624 = ap_const_lv1_1)))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln336_fu_1388_p2 <= (shl_ln336_fu_1382_p2 or ap_const_lv8_1);
    or_ln347_fu_1496_p2 <= (icmp_ln347_reg_1844 or and_ln341_fu_1484_p2);
    or_ln377_1_fu_870_p2 <= (tmp_150_cast_fu_862_p3 or ap_const_lv12_F);
    or_ln377_fu_803_p2 <= (ap_const_lv19_78 or add_ln376_reg_1643);
    or_ln401_fu_1007_p2 <= (shl_ln401_fu_1001_p2 or ap_const_lv8_1);
    or_ln412_fu_1165_p2 <= (icmp_ln412_reg_1762 or and_ln406_fu_1153_p2);
    or_ln874_1_fu_671_p2 <= (tmp_43_fu_648_p3 or ap_const_lv13_1F);
    or_ln874_fu_656_p2 <= (tmp_43_fu_648_p3 or ap_const_lv13_1);
    p_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_131_fu_594_p2),64));
    p_shl5_cast_fu_845_p3 <= (tmp_64_reg_1695 & ap_const_lv2_0);
    p_shl6_cast_fu_1204_p3 <= (trunc_ln423_fu_1200_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_1212_p3 <= (add_ln423_1_fu_1194_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_1248_p3 <= (trunc_ln423_2_fu_1244_p1 & ap_const_lv1_0);
    p_shl9_cast_fu_1236_p3 <= (trunc_ln423_1_fu_1232_p1 & ap_const_lv3_0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state1, zext_ln358_4_reg_1867, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, ap_block_pp2_stage0, ap_block_pp4_stage0, p_cast_fu_600_p1, zext_ln423_7_fu_1293_p1)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            patches_parameters_address0 <= zext_ln358_4_reg_1867(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_parameters_address0 <= zext_ln423_7_fu_1293_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            patches_parameters_address0 <= p_cast_fu_600_p1(12 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp2_stage0_11001, ap_block_pp4_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2)
    begin
        if ((((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= wp_parameters_q0;

    patches_parameters_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln406_reg_1758_pp2_iter1_reg, ap_block_pp4_stage0_11001, icmp_ln341_reg_1840_pp4_iter1_reg, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2)
    begin
        if ((((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln341_reg_1840_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln406_reg_1758_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state67, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_46_fu_784_p3, zext_ln377_1_fu_876_p1, zext_ln401_5_fu_1053_p1, zext_ln336_1_fu_1405_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            patches_superpoints_address0 <= zext_ln336_1_fu_1405_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            patches_superpoints_address0 <= zext_ln401_5_fu_1053_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            patches_superpoints_address0 <= zext_ln377_1_fu_876_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            patches_superpoints_address0 <= tmp_46_fu_784_p3(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state67, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= grp_encodeCoordinates_fu_533_ap_return;

    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln390_reg_1723, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln325_reg_1806, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln325_reg_1806 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln390_reg_1723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln325_1_fu_1339_p3 <= 
        add_ln325_fu_1319_p2 when (icmp_ln331_fu_1325_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_460_p4;
    select_ln325_fu_1331_p3 <= 
        ap_const_lv5_0 when (icmp_ln331_fu_1325_p2(0) = '1') else 
        b_reg_467;
    select_ln341_1_fu_1454_p3 <= 
        add_ln341_fu_1441_p2 when (icmp_ln347_reg_1844(0) = '1') else 
        ap_phi_mux_a_3_phi_fu_504_p4;
    select_ln341_fu_1447_p3 <= 
        ap_const_lv3_0 when (icmp_ln347_reg_1844(0) = '1') else 
        ap_phi_mux_b_5_phi_fu_515_p4;
    select_ln347_1_fu_1509_p3 <= 
        add_ln347_fu_1490_p2 when (and_ln341_fu_1484_p2(0) = '1') else 
        select_ln341_fu_1447_p3;
    select_ln347_2_fu_1433_p3 <= 
        ap_const_lv6_1 when (icmp_ln347_fu_1421_p2(0) = '1') else 
        add_ln347_1_fu_1427_p2;
    select_ln347_fu_1501_p3 <= 
        ap_const_lv3_0 when (or_ln347_fu_1496_p2(0) = '1') else 
        c_reg_522;
    select_ln390_1_fu_958_p3 <= 
        add_ln390_fu_938_p2 when (icmp_ln396_fu_944_p2(0) = '1') else 
        ap_phi_mux_a_4_phi_fu_372_p4;
    select_ln390_fu_950_p3 <= 
        ap_const_lv5_0 when (icmp_ln396_fu_944_p2(0) = '1') else 
        b_6_reg_379;
    select_ln406_1_fu_1082_p3 <= 
        add_ln406_fu_1070_p2 when (icmp_ln412_fu_1076_p2(0) = '1') else 
        ap_phi_mux_a_5_phi_fu_405_p4;
    select_ln406_fu_1104_p3 <= 
        ap_const_lv3_0 when (icmp_ln412_reg_1762(0) = '1') else 
        ap_phi_mux_b_7_phi_fu_427_p4;
    select_ln412_1_fu_1178_p3 <= 
        add_ln412_fu_1159_p2 when (and_ln406_fu_1153_p2(0) = '1') else 
        select_ln406_fu_1104_p3;
    select_ln412_2_fu_1096_p3 <= 
        ap_const_lv6_1 when (icmp_ln412_fu_1076_p2(0) = '1') else 
        add_ln412_1_fu_1090_p2;
    select_ln412_fu_1170_p3 <= 
        ap_const_lv3_0 when (or_ln412_fu_1165_p2(0) = '1') else 
        c_4_reg_434;
        sext_ln374_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_605_p3),17));

        sext_ln376_1_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln376_1_fu_698_p2),19));

        sext_ln376_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln376_reg_1643),64));

        sext_ln376_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln376_1_fu_618_p3),19));

        sext_ln377_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln377_fu_803_p2),64));

    shl_ln336_fu_1382_p2 <= std_logic_vector(shift_left(unsigned(add_ln336_fu_1363_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln376_1_fu_618_p3 <= (sub_reg_1594 & ap_const_lv9_0);
    shl_ln401_fu_1001_p2 <= std_logic_vector(shift_left(unsigned(add_ln401_3_fu_982_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln_fu_686_p3 <= (i_reg_346 & ap_const_lv7_0);
    sub_fu_562_p2 <= std_logic_vector(unsigned(zext_ln321_fu_552_p1) + unsigned(ap_const_lv9_1FF));
    sub_ln358_fu_1551_p2 <= std_logic_vector(unsigned(zext_ln358_1_fu_1535_p1) - unsigned(zext_ln358_2_fu_1547_p1));
    sub_ln423_1_fu_1256_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1236_p3) - unsigned(p_shl8_cast_fu_1248_p3));
    sub_ln423_fu_1220_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1204_p3) - unsigned(p_shl7_cast_fu_1212_p3));
    tmp_136_cast_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1347_p3),8));
    tmp_150_cast_fu_862_p3 <= (add_ln377_1_fu_857_p2 & ap_const_lv4_0);
    tmp_153_cast_fu_1036_p3 <= (add_ln401_1_fu_1030_p2 & ap_const_lv4_0);
    tmp_154_cast_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_966_p3),8));
    tmp_42_fu_1347_p3 <= (select_ln325_1_fu_1339_p3 & ap_const_lv4_0);
    tmp_43_fu_648_p3 <= (i_reg_346 & ap_const_lv5_0);
    tmp_44_fu_662_p3 <= (ap_const_lv51_0 & or_ln874_fu_656_p2);
    tmp_45_fu_677_p3 <= (ap_const_lv51_0 & or_ln874_1_fu_671_p2);
    tmp_46_fu_784_p3 <= (add_ln376_3_fu_778_p2 & ap_const_lv4_0);
    tmp_47_fu_1461_p3 <= (select_ln341_1_fu_1454_p3 & ap_const_lv2_0);
    tmp_48_fu_909_p3 <= (n_patches_read & ap_const_lv2_0);
    tmp_49_fu_966_p3 <= (select_ln390_1_fu_958_p3 & ap_const_lv4_0);
    tmp_50_fu_1114_p3 <= (select_ln406_1_reg_1769 & ap_const_lv2_0);
    tmp_59_fu_1369_p3 <= (add_ln336_fu_1363_p2 & ap_const_lv1_0);
    tmp_61_fu_758_p3 <= (tmp_60_reg_1659 & ap_const_lv2_0);
    tmp_62_fu_1527_p3 <= (add_ln358_fu_1521_p2 & ap_const_lv3_0);
    tmp_63_fu_1539_p3 <= (add_ln358_fu_1521_p2 & ap_const_lv1_0);
    tmp_65_fu_891_p4 <= n_patches_read(7 downto 5);
    tmp_66_fu_988_p3 <= (add_ln401_3_fu_982_p2 & ap_const_lv1_0);
    tmp_67_fu_1130_p3 <= (add_ln423_fu_1125_p2 & ap_const_lv2_0);
    tmp_cast_fu_572_p3 <= (empty_129_fu_568_p1 & ap_const_lv7_0);
    tmp_fu_605_p3 <= (sub_reg_1594 & ap_const_lv7_0);
    tmp_s_fu_580_p3 <= (sub_fu_562_p2 & ap_const_lv3_0);
    trunc_ln377_fu_822_p1 <= urem_ln376_reg_1665(8 - 1 downto 0);
    trunc_ln401_fu_1024_p1 <= add_ln401_reg_1712(8 - 1 downto 0);
    trunc_ln423_1_fu_1232_p1 <= add_ln423_2_fu_1226_p2(9 - 1 downto 0);
    trunc_ln423_2_fu_1244_p1 <= add_ln423_2_fu_1226_p2(11 - 1 downto 0);
    trunc_ln423_fu_1200_p1 <= add_ln423_1_fu_1194_p2(4 - 1 downto 0);
    trunc_ln69_4_fu_881_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    trunc_ln69_fu_793_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    trunc_ln_fu_712_p4 <= add_ln376_fu_707_p2(18 downto 7);

    wp_parameters_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, zext_ln358_4_fu_1567_p1, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln423_6_fu_1276_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            wp_parameters_address0 <= zext_ln358_4_fu_1567_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            wp_parameters_address0 <= zext_ln423_6_fu_1276_p1(7 - 1 downto 0);
        else 
            wp_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_address0_assign_proc : process(ap_CS_fsm_state3, wp_superpoints_addr_6_reg_1638, ap_CS_fsm_state65, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_44_fu_662_p3, zext_ln401_7_fu_1013_p1, zext_ln336_2_fu_1377_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints_address0 <= zext_ln336_2_fu_1377_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints_address0 <= zext_ln401_7_fu_1013_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            wp_superpoints_address0 <= wp_superpoints_addr_6_reg_1638;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wp_superpoints_address0 <= tmp_44_fu_662_p3(8 - 1 downto 0);
        else 
            wp_superpoints_address0 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln401_6_fu_996_p1, zext_ln336_3_fu_1394_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints_address1 <= zext_ln336_3_fu_1394_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints_address1 <= zext_ln401_6_fu_996_p1(8 - 1 downto 0);
        else 
            wp_superpoints_address1 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state65, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln341_fu_1473_p2 <= (icmp_ln347_reg_1844 xor ap_const_lv1_1);
    xor_ln406_fu_1142_p2 <= (icmp_ln412_reg_1762 xor ap_const_lv1_1);
    zext_ln321_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),9));
    zext_ln336_1_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln336_reg_1815),64));
    zext_ln336_2_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_1369_p3),64));
    zext_ln336_3_fu_1394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln336_fu_1388_p2),64));
    zext_ln336_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln325_fu_1331_p3),8));
    zext_ln347_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1461_p3),6));
    zext_ln358_1_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_1527_p3),12));
    zext_ln358_2_fu_1547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_1539_p3),12));
    zext_ln358_3_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln347_fu_1501_p3),12));
    zext_ln358_4_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln358_1_fu_1561_p2),64));
    zext_ln358_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln347_1_fu_1509_p3),6));
    zext_ln374_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_346),32));
    zext_ln376_1_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln376_2_fu_732_p1),129));
    zext_ln376_2_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_reg_1659),60));
    zext_ln376_3_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_758_p3),60));
    zext_ln376_4_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln376_reg_1665),60));
    zext_ln376_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_686_p3),17));
    zext_ln377_1_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln377_1_fu_870_p2),64));
    zext_ln377_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln377_fu_808_p1),129));
    zext_ln401_1_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_909_p3),11));
    zext_ln401_2_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln390_1_reg_1732),8));
    zext_ln401_3_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln390_fu_950_p3),8));
    zext_ln401_4_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln390_reg_1727),12));
    zext_ln401_5_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln401_2_fu_1047_p2),64));
    zext_ln401_6_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_988_p3),64));
    zext_ln401_7_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln401_fu_1007_p2),64));
    zext_ln401_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),11));
    zext_ln412_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_1130_p3),63));
    zext_ln423_1_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_1114_p3),6));
    zext_ln423_2_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln412_1_fu_1178_p3),63));
    zext_ln423_3_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln412_1_fu_1178_p3),6));
    zext_ln423_4_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln412_fu_1170_p3),12));
    zext_ln423_5_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln412_fu_1170_p3),7));
    zext_ln423_6_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln423_3_fu_1270_p2),64));
    zext_ln423_7_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln423_4_reg_1791),64));
    zext_ln423_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln406_1_reg_1769),11));
    zext_ln431_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln431_fu_1297_p2),8));
end behav;
