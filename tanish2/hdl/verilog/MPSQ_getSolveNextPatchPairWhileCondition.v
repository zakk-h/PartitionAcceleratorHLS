// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_getSolveNextPatchPairWhileCondition (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        lastPatchIndex,
        repeat_original,
        white_space_height,
        previous_white_space_height,
        current_z_top_index,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_q0,
        ap_return,
        grp_fu_1628_p_din0,
        grp_fu_1628_p_din1,
        grp_fu_1628_p_opcode,
        grp_fu_1628_p_dout0,
        grp_fu_1628_p_ce,
        grp_fu_1632_p_din0,
        grp_fu_1632_p_dout0,
        grp_fu_1632_p_ce
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
input  [4:0] lastPatchIndex;
input  [0:0] repeat_original;
input  [63:0] white_space_height;
input  [63:0] previous_white_space_height;
input  [31:0] current_z_top_index;
output  [11:0] patches_parameters_address0;
output   patches_parameters_ce0;
input  [31:0] patches_parameters_q0;
output  [0:0] ap_return;
output  [63:0] grp_fu_1628_p_din0;
output  [63:0] grp_fu_1628_p_din1;
output  [4:0] grp_fu_1628_p_opcode;
input  [0:0] grp_fu_1628_p_dout0;
output   grp_fu_1628_p_ce;
output  [63:0] grp_fu_1632_p_din0;
input  [63:0] grp_fu_1632_p_dout0;
output   grp_fu_1632_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg GDn_points_ce0;
reg patches_parameters_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln891_fu_134_p2;
reg   [0:0] icmp_ln891_reg_300;
wire   [0:0] icmp_ln889_2_fu_140_p2;
reg   [0:0] icmp_ln889_2_reg_305;
wire   [63:0] grp_fu_130_p1;
reg   [63:0] dc_reg_310;
wire    ap_CS_fsm_state4;
wire   [63:0] bitcast_ln521_fu_157_p1;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln889_fu_176_p2;
reg   [0:0] icmp_ln889_reg_320;
wire   [0:0] icmp_ln889_1_fu_182_p2;
reg   [0:0] icmp_ln889_1_reg_325;
wire   [63:0] zext_ln886_2_fu_220_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_125_p0;
wire   [63:0] grp_fu_125_p1;
wire   [63:0] grp_fu_130_p0;
wire   [63:0] data_V_fu_146_p1;
wire   [62:0] p_Result_s_fu_149_p1;
wire   [63:0] zext_ln368_fu_153_p1;
wire   [10:0] tmp_fu_162_p4;
wire   [51:0] trunc_ln889_fu_172_p1;
wire   [7:0] tmp_38_fu_196_p3;
wire   [11:0] tmp_37_fu_188_p3;
wire   [11:0] zext_ln886_fu_204_p1;
wire   [11:0] sub_ln886_fu_208_p2;
wire   [11:0] add_ln886_fu_214_p2;
wire   [0:0] or_ln889_fu_225_p2;
wire   [0:0] grp_fu_125_p2;
wire   [0:0] icmp_ln886_fu_235_p2;
wire   [0:0] tmp_48_fu_258_p3;
wire   [0:0] or_ln889_1_fu_266_p2;
wire   [0:0] and_ln889_fu_229_p2;
wire   [0:0] icmp_ln892_fu_246_p2;
wire   [0:0] xor_ln893_fu_252_p2;
wire   [0:0] and_ln890_1_fu_277_p2;
wire   [0:0] or_ln890_fu_241_p2;
wire   [0:0] and_ln890_2_fu_283_p2;
wire   [0:0] and_ln890_fu_271_p2;
wire    grp_fu_125_ce;
wire   [4:0] grp_fu_125_opcode;
wire    grp_fu_130_ce;
wire   [0:0] and_ln890_3_fu_289_p2;
reg   [0:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_preg <= and_ln890_3_fu_289_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dc_reg_310 <= grp_fu_1632_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln889_1_reg_325 <= icmp_ln889_1_fu_182_p2;
        icmp_ln889_reg_320 <= icmp_ln889_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln889_2_reg_305 <= icmp_ln889_2_fu_140_p2;
        icmp_ln891_reg_300 <= icmp_ln891_fu_134_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        GDn_points_ce0 = 1'b1;
    end else begin
        GDn_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return = and_ln890_3_fu_289_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDn_points_address0 = 64'd4;

assign add_ln886_fu_214_p2 = (sub_ln886_fu_208_p2 + 12'd61);

assign and_ln889_fu_229_p2 = (or_ln889_fu_225_p2 & grp_fu_1628_p_dout0);

assign and_ln890_1_fu_277_p2 = (xor_ln893_fu_252_p2 & icmp_ln892_fu_246_p2);

assign and_ln890_2_fu_283_p2 = (or_ln890_fu_241_p2 & and_ln890_1_fu_277_p2);

assign and_ln890_3_fu_289_p2 = (and_ln890_fu_271_p2 & and_ln890_2_fu_283_p2);

assign and_ln890_fu_271_p2 = (or_ln889_1_fu_266_p2 & and_ln889_fu_229_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln521_fu_157_p1 = zext_ln368_fu_153_p1;

assign data_V_fu_146_p1 = dc_reg_310;

assign grp_fu_125_ce = 1'b1;

assign grp_fu_125_opcode = 5'd2;

assign grp_fu_125_p0 = bitcast_ln521_fu_157_p1;

assign grp_fu_125_p1 = 64'd4617315517961601024;

assign grp_fu_125_p2 = grp_fu_1628_p_dout0;

assign grp_fu_130_ce = 1'b1;

assign grp_fu_130_p0 = white_space_height;

assign grp_fu_130_p1 = grp_fu_1632_p_dout0;

assign grp_fu_1628_p_ce = 1'b1;

assign grp_fu_1628_p_din0 = bitcast_ln521_fu_157_p1;

assign grp_fu_1628_p_din1 = 64'd4617315517961601024;

assign grp_fu_1628_p_opcode = 5'd2;

assign grp_fu_1632_p_ce = 1'b1;

assign grp_fu_1632_p_din0 = white_space_height;

assign icmp_ln886_fu_235_p2 = (($signed(patches_parameters_q0) > $signed(32'd4244967196)) ? 1'b1 : 1'b0);

assign icmp_ln889_1_fu_182_p2 = ((trunc_ln889_fu_172_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln889_2_fu_140_p2 = (($signed(white_space_height) > $signed(64'd0)) ? 1'b1 : 1'b0);

assign icmp_ln889_fu_176_p2 = ((tmp_fu_162_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_134_p2 = (($signed(white_space_height) > $signed(64'd5)) ? 1'b1 : 1'b0);

assign icmp_ln892_fu_246_p2 = (($signed(GDn_points_q0) > $signed(current_z_top_index)) ? 1'b1 : 1'b0);

assign or_ln889_1_fu_266_p2 = (tmp_48_fu_258_p3 | icmp_ln889_2_reg_305);

assign or_ln889_fu_225_p2 = (icmp_ln889_reg_320 | icmp_ln889_1_reg_325);

assign or_ln890_fu_241_p2 = (icmp_ln891_reg_300 | icmp_ln886_fu_235_p2);

assign p_Result_s_fu_149_p1 = data_V_fu_146_p1[62:0];

assign patches_parameters_address0 = zext_ln886_2_fu_220_p1;

assign sub_ln886_fu_208_p2 = (tmp_37_fu_188_p3 - zext_ln886_fu_204_p1);

assign tmp_37_fu_188_p3 = {{lastPatchIndex}, {7'd0}};

assign tmp_38_fu_196_p3 = {{lastPatchIndex}, {3'd0}};

assign tmp_48_fu_258_p3 = previous_white_space_height[32'd63];

assign tmp_fu_162_p4 = {{data_V_fu_146_p1[62:52]}};

assign trunc_ln889_fu_172_p1 = data_V_fu_146_p1[51:0];

assign xor_ln893_fu_252_p2 = (repeat_original ^ 1'd1);

assign zext_ln368_fu_153_p1 = p_Result_s_fu_149_p1;

assign zext_ln886_2_fu_220_p1 = add_ln886_fu_214_p2;

assign zext_ln886_fu_204_p1 = tmp_38_fu_196_p3;

endmodule //MPSQ_getSolveNextPatchPairWhileCondition
