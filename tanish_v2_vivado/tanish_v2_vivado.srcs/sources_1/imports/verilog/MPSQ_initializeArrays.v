// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_initializeArrays (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_parameters_V_address0,
        patches_parameters_V_ce0,
        patches_parameters_V_we0,
        patches_parameters_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
output  [11:0] patches_parameters_V_address0;
output   patches_parameters_V_ce0;
output   patches_parameters_V_we0;
output  [31:0] patches_parameters_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg patches_parameters_V_ce0;
reg patches_parameters_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten13_reg_124;
reg   [5:0] a_reg_135;
reg   [7:0] indvar_flatten_reg_146;
reg   [2:0] b_reg_157;
reg   [4:0] c_reg_168;
reg   [11:0] indvar_flatten59_reg_179;
reg   [5:0] a_1_reg_190;
reg   [7:0] indvar_flatten35_reg_201;
reg   [2:0] b_3_reg_212;
reg   [5:0] indvar_flatten21_reg_223;
reg   [2:0] c_3_reg_234;
reg   [2:0] d_reg_245;
wire   [11:0] add_ln536_1_fu_256_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln536_fu_262_p2;
reg   [0:0] icmp_ln536_reg_694;
wire   [5:0] select_ln536_1_fu_288_p3;
reg   [5:0] select_ln536_1_reg_698;
wire   [4:0] select_ln540_fu_326_p3;
reg   [4:0] select_ln540_reg_705;
wire   [2:0] select_ln540_1_fu_334_p3;
reg   [2:0] select_ln540_1_reg_710;
wire   [4:0] add_ln546_fu_342_p2;
wire   [7:0] select_ln540_2_fu_354_p3;
wire   [11:0] add_ln557_1_fu_409_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln557_fu_415_p2;
reg   [0:0] icmp_ln557_reg_731;
wire   [5:0] select_ln557_1_fu_441_p3;
reg   [5:0] select_ln557_1_reg_735;
wire   [2:0] select_ln561_1_fu_521_p3;
reg   [2:0] select_ln561_1_reg_740;
wire   [8:0] add_ln578_1_fu_533_p2;
reg   [8:0] add_ln578_1_reg_745;
wire   [2:0] select_ln567_fu_575_p3;
reg   [2:0] select_ln567_reg_750;
wire   [2:0] select_ln567_1_fu_583_p3;
reg   [2:0] select_ln567_1_reg_755;
wire   [2:0] add_ln573_fu_591_p2;
wire   [5:0] select_ln567_2_fu_603_p3;
wire   [7:0] select_ln561_2_fu_617_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg   [5:0] ap_phi_mux_a_phi_fu_139_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_b_phi_fu_161_p4;
reg   [5:0] ap_phi_mux_a_1_phi_fu_194_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_3_phi_fu_216_p4;
reg   [2:0] ap_phi_mux_c_3_phi_fu_238_p4;
wire   [63:0] zext_ln551_3_fu_404_p1;
wire   [63:0] zext_ln578_5_fu_684_p1;
wire   [0:0] icmp_ln540_fu_274_p2;
wire   [5:0] add_ln536_fu_268_p2;
wire   [0:0] icmp_ln546_fu_302_p2;
wire   [0:0] xor_ln536_fu_296_p2;
wire   [2:0] select_ln536_fu_280_p3;
wire   [0:0] and_ln536_fu_308_p2;
wire   [0:0] or_ln540_fu_320_p2;
wire   [2:0] add_ln540_fu_314_p2;
wire   [7:0] add_ln540_1_fu_348_p2;
wire   [7:0] tmp_fu_365_p3;
wire   [7:0] zext_ln551_fu_362_p1;
wire   [7:0] add_ln551_fu_372_p2;
wire   [7:0] zext_ln551_1_fu_378_p1;
wire   [7:0] add_ln551_1_fu_381_p2;
wire   [11:0] tmp_78_cast_fu_387_p3;
wire   [11:0] zext_ln551_2_fu_395_p1;
wire   [11:0] add_ln551_2_fu_398_p2;
wire   [0:0] icmp_ln561_fu_427_p2;
wire   [5:0] add_ln557_fu_421_p2;
wire   [7:0] tmp_s_fu_453_p3;
wire   [8:0] zext_ln578_1_fu_461_p1;
wire   [8:0] zext_ln578_fu_449_p1;
wire   [0:0] icmp_ln573_fu_477_p2;
wire   [0:0] xor_ln557_fu_471_p2;
wire   [0:0] icmp_ln567_fu_489_p2;
wire   [2:0] select_ln557_fu_433_p3;
wire   [0:0] and_ln557_1_fu_495_p2;
wire   [0:0] or_ln561_fu_507_p2;
wire   [2:0] add_ln561_fu_501_p2;
wire   [8:0] add_ln578_fu_465_p2;
wire   [8:0] zext_ln578_2_fu_529_p1;
wire   [0:0] xor_ln561_fu_539_p2;
wire   [0:0] and_ln557_fu_483_p2;
wire   [0:0] or_ln561_1_fu_545_p2;
wire   [2:0] select_ln561_fu_513_p3;
wire   [0:0] and_ln561_fu_551_p2;
wire   [0:0] or_ln567_fu_563_p2;
wire   [0:0] or_ln567_1_fu_569_p2;
wire   [2:0] add_ln567_fu_557_p2;
wire   [5:0] add_ln567_1_fu_597_p2;
wire   [7:0] add_ln561_1_fu_611_p2;
wire   [10:0] tmp_46_fu_625_p3;
wire   [62:0] zext_ln567_fu_632_p1;
wire   [62:0] zext_ln578_3_fu_636_p1;
wire   [62:0] add_ln578_2_fu_639_p2;
wire   [8:0] trunc_ln578_fu_645_p1;
wire   [10:0] trunc_ln578_1_fu_657_p1;
wire   [11:0] p_shl2_cast_fu_649_p3;
wire   [11:0] p_shl3_cast_fu_661_p3;
wire   [11:0] sub_ln578_fu_669_p2;
wire   [11:0] zext_ln578_4_fu_675_p1;
wire   [11:0] add_ln578_3_fu_678_p2;
wire    ap_CS_fsm_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_1_reg_190 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        a_1_reg_190 <= select_ln557_1_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_reg_694 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_135 <= select_ln536_1_reg_698;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_135 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_3_reg_212 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        b_3_reg_212 <= select_ln561_1_reg_740;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_reg_694 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_reg_157 <= select_ln540_1_reg_710;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_157 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_3_reg_234 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        c_3_reg_234 <= select_ln567_1_reg_755;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_168 <= add_ln546_fu_342_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_168 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_reg_245 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln557_fu_415_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        d_reg_245 <= add_ln573_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_124 <= add_ln536_1_fu_256_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_124 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_223 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln557_fu_415_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_223 <= select_ln567_2_fu_603_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten35_reg_201 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln557_fu_415_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten35_reg_201 <= select_ln561_2_fu_617_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten59_reg_179 <= 12'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln557_fu_415_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten59_reg_179 <= add_ln557_1_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_146 <= select_ln540_2_fu_354_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_146 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln557_fu_415_p2 == 1'd0))) begin
        add_ln578_1_reg_745 <= add_ln578_1_fu_533_p2;
        select_ln567_reg_750 <= select_ln567_fu_575_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln536_reg_694 <= icmp_ln536_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln557_reg_731 <= icmp_ln557_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln536_1_reg_698 <= select_ln536_1_fu_288_p3;
        select_ln540_1_reg_710 <= select_ln540_1_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln540_reg_705 <= select_ln540_fu_326_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln557_fu_415_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        select_ln557_1_reg_735 <= select_ln557_1_fu_441_p3;
        select_ln561_1_reg_740 <= select_ln561_1_fu_521_p3;
        select_ln567_1_reg_755 <= select_ln567_1_fu_583_p3;
    end
end

always @ (*) begin
    if ((icmp_ln536_fu_262_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln557_fu_415_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        ap_phi_mux_a_1_phi_fu_194_p4 = select_ln557_1_reg_735;
    end else begin
        ap_phi_mux_a_1_phi_fu_194_p4 = a_1_reg_190;
    end
end

always @ (*) begin
    if (((icmp_ln536_reg_694 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_139_p4 = select_ln536_1_reg_698;
    end else begin
        ap_phi_mux_a_phi_fu_139_p4 = a_reg_135;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        ap_phi_mux_b_3_phi_fu_216_p4 = select_ln561_1_reg_740;
    end else begin
        ap_phi_mux_b_3_phi_fu_216_p4 = b_3_reg_212;
    end
end

always @ (*) begin
    if (((icmp_ln536_reg_694 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_b_phi_fu_161_p4 = select_ln540_1_reg_710;
    end else begin
        ap_phi_mux_b_phi_fu_161_p4 = b_reg_157;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        ap_phi_mux_c_3_phi_fu_238_p4 = select_ln567_1_reg_755;
    end else begin
        ap_phi_mux_c_3_phi_fu_238_p4 = c_3_reg_234;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        patches_parameters_V_ce0 = 1'b1;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln557_reg_731 == 1'd0))) begin
        patches_parameters_V_we0 = 1'b1;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln536_reg_694 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln536_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln536_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln557_fu_415_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln557_fu_415_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln536_1_fu_256_p2 = (indvar_flatten13_reg_124 + 12'd1);

assign add_ln536_fu_268_p2 = (ap_phi_mux_a_phi_fu_139_p4 + 6'd1);

assign add_ln540_1_fu_348_p2 = (indvar_flatten_reg_146 + 8'd1);

assign add_ln540_fu_314_p2 = (select_ln536_fu_280_p3 + 3'd1);

assign add_ln546_fu_342_p2 = (select_ln540_fu_326_p3 + 5'd1);

assign add_ln551_1_fu_381_p2 = (add_ln551_fu_372_p2 + zext_ln551_1_fu_378_p1);

assign add_ln551_2_fu_398_p2 = (tmp_78_cast_fu_387_p3 + zext_ln551_2_fu_395_p1);

assign add_ln551_fu_372_p2 = (tmp_fu_365_p3 + zext_ln551_fu_362_p1);

assign add_ln557_1_fu_409_p2 = (indvar_flatten59_reg_179 + 12'd1);

assign add_ln557_fu_421_p2 = (ap_phi_mux_a_1_phi_fu_194_p4 + 6'd1);

assign add_ln561_1_fu_611_p2 = (indvar_flatten35_reg_201 + 8'd1);

assign add_ln561_fu_501_p2 = (select_ln557_fu_433_p3 + 3'd1);

assign add_ln567_1_fu_597_p2 = (indvar_flatten21_reg_223 + 6'd1);

assign add_ln567_fu_557_p2 = (select_ln561_fu_513_p3 + 3'd1);

assign add_ln573_fu_591_p2 = (select_ln567_fu_575_p3 + 3'd1);

assign add_ln578_1_fu_533_p2 = (add_ln578_fu_465_p2 + zext_ln578_2_fu_529_p1);

assign add_ln578_2_fu_639_p2 = (zext_ln567_fu_632_p1 + zext_ln578_3_fu_636_p1);

assign add_ln578_3_fu_678_p2 = (sub_ln578_fu_669_p2 + zext_ln578_4_fu_675_p1);

assign add_ln578_fu_465_p2 = (zext_ln578_1_fu_461_p1 + zext_ln578_fu_449_p1);

assign and_ln536_fu_308_p2 = (xor_ln536_fu_296_p2 & icmp_ln546_fu_302_p2);

assign and_ln557_1_fu_495_p2 = (xor_ln557_fu_471_p2 & icmp_ln567_fu_489_p2);

assign and_ln557_fu_483_p2 = (xor_ln557_fu_471_p2 & icmp_ln573_fu_477_p2);

assign and_ln561_fu_551_p2 = (or_ln561_1_fu_545_p2 & and_ln557_fu_483_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln536_fu_262_p2 = ((indvar_flatten13_reg_124 == 12'd2560) ? 1'b1 : 1'b0);

assign icmp_ln540_fu_274_p2 = ((indvar_flatten_reg_146 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln546_fu_302_p2 = ((c_reg_168 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln557_fu_415_p2 = ((indvar_flatten59_reg_179 == 12'd3840) ? 1'b1 : 1'b0);

assign icmp_ln561_fu_427_p2 = ((indvar_flatten35_reg_201 == 8'd120) ? 1'b1 : 1'b0);

assign icmp_ln567_fu_489_p2 = ((indvar_flatten21_reg_223 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln573_fu_477_p2 = ((d_reg_245 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln540_fu_320_p2 = (icmp_ln540_fu_274_p2 | and_ln536_fu_308_p2);

assign or_ln561_1_fu_545_p2 = (xor_ln561_fu_539_p2 | icmp_ln561_fu_427_p2);

assign or_ln561_fu_507_p2 = (icmp_ln561_fu_427_p2 | and_ln557_1_fu_495_p2);

assign or_ln567_1_fu_569_p2 = (or_ln567_fu_563_p2 | icmp_ln561_fu_427_p2);

assign or_ln567_fu_563_p2 = (and_ln561_fu_551_p2 | and_ln557_1_fu_495_p2);

assign p_shl2_cast_fu_649_p3 = {{trunc_ln578_fu_645_p1}, {3'd0}};

assign p_shl3_cast_fu_661_p3 = {{trunc_ln578_1_fu_657_p1}, {1'd0}};

assign patches_parameters_V_address0 = zext_ln578_5_fu_684_p1;

assign patches_parameters_V_d0 = 32'd0;

assign patches_superpoints_address0 = zext_ln551_3_fu_404_p1;

assign patches_superpoints_d0 = 64'd0;

assign select_ln536_1_fu_288_p3 = ((icmp_ln540_fu_274_p2[0:0] == 1'b1) ? add_ln536_fu_268_p2 : ap_phi_mux_a_phi_fu_139_p4);

assign select_ln536_fu_280_p3 = ((icmp_ln540_fu_274_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_phi_fu_161_p4);

assign select_ln540_1_fu_334_p3 = ((and_ln536_fu_308_p2[0:0] == 1'b1) ? add_ln540_fu_314_p2 : select_ln536_fu_280_p3);

assign select_ln540_2_fu_354_p3 = ((icmp_ln540_fu_274_p2[0:0] == 1'b1) ? 8'd1 : add_ln540_1_fu_348_p2);

assign select_ln540_fu_326_p3 = ((or_ln540_fu_320_p2[0:0] == 1'b1) ? 5'd0 : c_reg_168);

assign select_ln557_1_fu_441_p3 = ((icmp_ln561_fu_427_p2[0:0] == 1'b1) ? add_ln557_fu_421_p2 : ap_phi_mux_a_1_phi_fu_194_p4);

assign select_ln557_fu_433_p3 = ((icmp_ln561_fu_427_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_3_phi_fu_216_p4);

assign select_ln561_1_fu_521_p3 = ((and_ln557_1_fu_495_p2[0:0] == 1'b1) ? add_ln561_fu_501_p2 : select_ln557_fu_433_p3);

assign select_ln561_2_fu_617_p3 = ((icmp_ln561_fu_427_p2[0:0] == 1'b1) ? 8'd1 : add_ln561_1_fu_611_p2);

assign select_ln561_fu_513_p3 = ((or_ln561_fu_507_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_c_3_phi_fu_238_p4);

assign select_ln567_1_fu_583_p3 = ((and_ln561_fu_551_p2[0:0] == 1'b1) ? add_ln567_fu_557_p2 : select_ln561_fu_513_p3);

assign select_ln567_2_fu_603_p3 = ((or_ln561_fu_507_p2[0:0] == 1'b1) ? 6'd1 : add_ln567_1_fu_597_p2);

assign select_ln567_fu_575_p3 = ((or_ln567_1_fu_569_p2[0:0] == 1'b1) ? 3'd0 : d_reg_245);

assign sub_ln578_fu_669_p2 = (p_shl2_cast_fu_649_p3 - p_shl3_cast_fu_661_p3);

assign tmp_46_fu_625_p3 = {{add_ln578_1_reg_745}, {2'd0}};

assign tmp_78_cast_fu_387_p3 = {{add_ln551_1_fu_381_p2}, {4'd0}};

assign tmp_fu_365_p3 = {{select_ln536_1_reg_698}, {2'd0}};

assign tmp_s_fu_453_p3 = {{select_ln557_1_fu_441_p3}, {2'd0}};

assign trunc_ln578_1_fu_657_p1 = add_ln578_2_fu_639_p2[10:0];

assign trunc_ln578_fu_645_p1 = add_ln578_2_fu_639_p2[8:0];

assign xor_ln536_fu_296_p2 = (icmp_ln540_fu_274_p2 ^ 1'd1);

assign xor_ln557_fu_471_p2 = (icmp_ln561_fu_427_p2 ^ 1'd1);

assign xor_ln561_fu_539_p2 = (icmp_ln567_fu_489_p2 ^ 1'd1);

assign zext_ln551_1_fu_378_p1 = select_ln540_1_reg_710;

assign zext_ln551_2_fu_395_p1 = select_ln540_reg_705;

assign zext_ln551_3_fu_404_p1 = add_ln551_2_fu_398_p2;

assign zext_ln551_fu_362_p1 = select_ln536_1_reg_698;

assign zext_ln567_fu_632_p1 = tmp_46_fu_625_p3;

assign zext_ln578_1_fu_461_p1 = tmp_s_fu_453_p3;

assign zext_ln578_2_fu_529_p1 = select_ln561_1_fu_521_p3;

assign zext_ln578_3_fu_636_p1 = select_ln567_1_reg_755;

assign zext_ln578_4_fu_675_p1 = select_ln567_reg_750;

assign zext_ln578_5_fu_684_p1 = add_ln578_3_fu_678_p2;

assign zext_ln578_fu_449_p1 = select_ln557_1_fu_441_p3;

endmodule //MPSQ_initializeArrays
