-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_getParallelograms is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    superpoints_ce0 : OUT STD_LOGIC;
    superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    superpoints_ce1 : OUT STD_LOGIC;
    superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    superpoints_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    pSlope_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pSlope_ce0 : OUT STD_LOGIC;
    pSlope_we0 : OUT STD_LOGIC;
    pSlope_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_we0 : OUT STD_LOGIC;
    shadow_bottomL_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_we0 : OUT STD_LOGIC;
    shadow_bottomR_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_we0 : OUT STD_LOGIC;
    shadow_bottomL_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_we0 : OUT STD_LOGIC;
    shadow_bottomR_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_min_ce0 : OUT STD_LOGIC;
    z1_min_we0 : OUT STD_LOGIC;
    z1_min_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_max_ce0 : OUT STD_LOGIC;
    z1_max_we0 : OUT STD_LOGIC;
    z1_max_d0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of system_top_getParallelograms is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp2_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp2_stage6 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp2_stage7 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_FE9FFF98 : STD_LOGIC_VECTOR (31 downto 0) := "11111110100111111111111110011000";
    constant ap_const_lv32_1600068 : STD_LOGIC_VECTOR (31 downto 0) := "00000001011000000000000001101000";
    constant ap_const_lv26_1700068 : STD_LOGIC_VECTOR (25 downto 0) := "01011100000000000001101000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv26_3B00000 : STD_LOGIC_VECTOR (25 downto 0) := "11101100000000000000000000";
    constant ap_const_lv46_140000000000 : STD_LOGIC_VECTOR (45 downto 0) := "0101000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal get_radiiradii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal get_radiiradii_ce0 : STD_LOGIC;
    signal get_radiiradii_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal get_parallelogram_slopesparallelogram_slopes_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal get_parallelogram_slopesparallelogram_slopes_ce0 : STD_LOGIC;
    signal get_parallelogram_slopesparallelogram_slopes_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_458 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_012_i_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_481 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_012_i15_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_504 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_504_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state48_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_2_reg_504_pp2_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_504_pp2_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_504_pp2_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln49_fu_535_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_1891 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln49_fu_541_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln49_reg_1896 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln49_1_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln49_1_reg_1901 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln48_fu_571_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln48_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1912 : STD_LOGIC_VECTOR (0 downto 0);
    signal superpoint_0_min_z_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln62_fu_611_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln62_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_1931 : STD_LOGIC_VECTOR (0 downto 0);
    signal superpoint_0_max_z_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal z1_max_tmp_V_2_fu_693_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal z1_max_tmp_V_2_reg_1945 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal z1_min_tmp_V_2_fu_701_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal z1_min_tmp_V_2_reg_1950 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_1_fu_709_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_1_reg_1955 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1192_fu_721_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln1192_reg_1961 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln703_2_fu_725_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_2_reg_1967 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1192_1_fu_737_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln1192_1_reg_1973 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln119_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1979_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln129_1_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_reg_1993_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_778_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_2002 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state25_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state33_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state41_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state49_pp2_stage1_iter5 : BOOLEAN;
    signal ap_block_state57_pp2_stage1_iter6 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal get_parallelogram_slopesparallelogram_slopes_load_reg_2013 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln555_fu_834_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln555_reg_2019 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state10_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state18_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_state34_pp2_stage2_iter3 : BOOLEAN;
    signal ap_block_state42_pp2_stage2_iter4 : BOOLEAN;
    signal ap_block_state50_pp2_stage2_iter5 : BOOLEAN;
    signal ap_block_state58_pp2_stage2_iter6 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal p_Result_s_reg_2024 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_2029 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_856_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_2034 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln119_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_1_reg_2039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state11_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state19_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state27_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_state35_pp2_stage3_iter3 : BOOLEAN;
    signal ap_block_state43_pp2_stage3_iter4 : BOOLEAN;
    signal ap_block_state51_pp2_stage3_iter5 : BOOLEAN;
    signal ap_block_state59_pp2_stage3_iter6 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal sh_amt_fu_921_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2044 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_reg_2049 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_reg_2055 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_reg_2061 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_reg_2066 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_reg_2071 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_1_fu_1076_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_1_reg_2077 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_fu_1162_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_reg_2082 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln50_1_fu_1235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_1_reg_2120 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_2_fu_1267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_2_reg_2126 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_3_fu_1313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_3_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_4_fu_1339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_4_reg_2148 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_5_fu_1385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_5_reg_2164 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_6_fu_1411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_6_reg_2170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state12_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_state28_pp2_stage4_iter2 : BOOLEAN;
    signal ap_block_state36_pp2_stage4_iter3 : BOOLEAN;
    signal ap_block_state44_pp2_stage4_iter4 : BOOLEAN;
    signal ap_block_state52_pp2_stage4_iter5 : BOOLEAN;
    signal ap_block_state60_pp2_stage4_iter6 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal select_ln50_7_fu_1457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_7_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_8_fu_1483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_8_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage5 : signal is "none";
    signal ap_block_state13_pp2_stage5_iter0 : BOOLEAN;
    signal ap_block_state21_pp2_stage5_iter1 : BOOLEAN;
    signal ap_block_state29_pp2_stage5_iter2 : BOOLEAN;
    signal ap_block_state37_pp2_stage5_iter3 : BOOLEAN;
    signal ap_block_state45_pp2_stage5_iter4 : BOOLEAN;
    signal ap_block_state53_pp2_stage5_iter5 : BOOLEAN;
    signal ap_block_state61_pp2_stage5_iter6 : BOOLEAN;
    signal ap_block_pp2_stage5_11001 : BOOLEAN;
    signal select_ln50_9_fu_1529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_9_reg_2208 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_10_fu_1555_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_10_reg_2214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage6 : signal is "none";
    signal ap_block_state14_pp2_stage6_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage6_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage6_iter2 : BOOLEAN;
    signal ap_block_state38_pp2_stage6_iter3 : BOOLEAN;
    signal ap_block_state46_pp2_stage6_iter4 : BOOLEAN;
    signal ap_block_state54_pp2_stage6_iter5 : BOOLEAN;
    signal ap_block_pp2_stage6_11001 : BOOLEAN;
    signal select_ln50_11_fu_1601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_11_reg_2230 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_12_fu_1627_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_12_reg_2236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage7 : signal is "none";
    signal ap_block_state15_pp2_stage7_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage7_iter1 : BOOLEAN;
    signal ap_block_state31_pp2_stage7_iter2 : BOOLEAN;
    signal ap_block_state39_pp2_stage7_iter3 : BOOLEAN;
    signal ap_block_state47_pp2_stage7_iter4 : BOOLEAN;
    signal ap_block_state55_pp2_stage7_iter5 : BOOLEAN;
    signal ap_block_pp2_stage7_11001 : BOOLEAN;
    signal select_ln50_13_fu_1673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_13_reg_2252 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_14_fu_1699_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_14_reg_2258 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_fu_1725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_reg_2264 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_1_fu_1751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_1_reg_2269 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_fu_1763_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_reg_2274 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_fu_1775_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln1118_reg_2279 : STD_LOGIC_VECTOR (51 downto 0);
    signal a_V_reg_2286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_12_fu_1862_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_12_reg_2291 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage7_subdone : BOOLEAN;
    signal ap_block_pp2_stage5_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_508_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln49_4_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_1_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln99_cast_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal zext_ln49_6_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_7_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_8_fu_1186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln49_9_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_10_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal zext_ln49_11_fu_1290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_12_fu_1352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal zext_ln49_13_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_14_fu_1424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_15_fu_1434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_16_fu_1496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage5 : BOOLEAN;
    signal zext_ln49_17_fu_1506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_18_fu_1568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage6 : BOOLEAN;
    signal zext_ln49_19_fu_1578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_20_fu_1640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage7 : BOOLEAN;
    signal zext_ln49_21_fu_1650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_523_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln49_1_fu_531_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln49_fu_519_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_553_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln49_2_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln49_3_fu_583_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln49_2_fu_587_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln63_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_fu_627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1494_2_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_2_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1_min_tmp_V_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_3_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1_max_tmp_V_fu_675_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln90_fu_683_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln89_fu_665_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_3_fu_713_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal lhs_4_fu_729_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln128_fu_753_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal parallelogram_index_fu_757_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln129_fu_763_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_fu_767_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln731_fu_790_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln870_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal radius_j_V_fu_794_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_j_V_2_fu_802_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1193_fu_810_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_fu_814_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal d_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_868_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_875_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_879_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln455_fu_865_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_897_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_909_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_915_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_885_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_9_fu_939_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln586_fu_955_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_fu_959_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_963_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln702_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_976_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln119_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_984_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_1_fu_969_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln604_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_fu_1092_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_2_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_2_fu_1099_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_3_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_3_fu_1109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_4_fu_1119_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_5_fu_1136_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_3_fu_1140_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_1149_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln49_1_fu_1145_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln49_fu_1170_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_1_fu_1181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_2_fu_1191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1205_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1495_4_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_1221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_5_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1495_fu_1201_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln64_1_fu_1249_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln64_1_cast_fu_1257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_4_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_3_fu_1275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_4_fu_1285_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_6_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_2_fu_1300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_7_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_5_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_3_fu_1326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_6_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_5_fu_1347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_6_fu_1357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_8_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_fu_1372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_9_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_7_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_5_fu_1398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_8_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_7_fu_1419_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_8_fu_1429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_10_fu_1439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_6_fu_1444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_11_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_9_fu_1465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_7_fu_1470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_10_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_9_fu_1491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_10_fu_1501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_12_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_8_fu_1516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_13_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_11_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_9_fu_1542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_12_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_11_fu_1563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_12_fu_1573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_14_fu_1583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_10_fu_1588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_15_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_13_fu_1609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_11_fu_1614_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_14_fu_1621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_13_fu_1635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln49_14_fu_1645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1495_16_fu_1655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_12_fu_1660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_17_fu_1667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_15_fu_1681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_13_fu_1686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_16_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_18_fu_1707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_14_fu_1712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_19_fu_1719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_17_fu_1733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_15_fu_1738_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_18_fu_1745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_9_fu_1766_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal radii_leverArm_fu_1759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_1779_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_2_fu_1785_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_10_fu_1800_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_3_fu_1808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_1808_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_4_fu_1813_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln703_3_fu_1829_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_11_fu_1832_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_5_fu_1841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_1841_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_6_fu_1846_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_7_fu_1870_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_fu_1870_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_8_fu_1875_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_block_pp2_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component system_top_sdiv_46ns_26s_32_50_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (45 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_mul_33s_32s_52_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component system_top_alignedtoline_per_layer_loop3_get_radiiradii IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_getParallelograms_get_parallelogram_slopesparallelogram_slopes IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    get_radiiradii_U : component system_top_alignedtoline_per_layer_loop3_get_radiiradii
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => get_radiiradii_address0,
        ce0 => get_radiiradii_ce0,
        q0 => get_radiiradii_q0);

    get_parallelogram_slopesparallelogram_slopes_U : component system_top_getParallelograms_get_parallelogram_slopesparallelogram_slopes
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => get_parallelogram_slopesparallelogram_slopes_address0,
        ce0 => get_parallelogram_slopesparallelogram_slopes_ce0,
        q0 => get_parallelogram_slopesparallelogram_slopes_q0);

    fpext_32ns_64_1_no_dsp_1_U55 : component system_top_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => get_parallelogram_slopesparallelogram_slopes_load_reg_2013,
        dout => d_fu_516_p1);

    sdiv_46ns_26s_32_50_1_U56 : component system_top_sdiv_46ns_26s_32_50_1
    generic map (
        ID => 1,
        NUM_STAGE => 50,
        din0_WIDTH => 46,
        din1_WIDTH => 26,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv46_140000000000,
        din1 => ret_V_fu_814_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_824_p2);

    mul_33s_32s_52_1_1_U57 : component system_top_mul_33s_32s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        din0 => ret_V_9_fu_1766_p2,
        din1 => radii_leverArm_fu_1759_p1,
        dout => r_V_1_fu_1779_p2);

    mul_33s_32s_52_1_1_U58 : component system_top_mul_33s_32s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        din0 => ret_V_10_fu_1800_p2,
        din1 => r_V_3_fu_1808_p1,
        dout => r_V_3_fu_1808_p2);

    mul_33s_32s_52_1_1_U59 : component system_top_mul_33s_32s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        din0 => ret_V_11_fu_1832_p2,
        din1 => r_V_5_fu_1841_p1,
        dout => r_V_5_fu_1841_p2);

    mul_33s_32s_52_1_1_U60 : component system_top_mul_33s_32s_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        din0 => ret_V_12_reg_2291,
        din1 => r_V_7_fu_1870_p1,
        dout => r_V_7_fu_1870_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_subdone))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_subdone))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_subdone))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_subdone))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_subdone)))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_reg_481 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln62_fu_617_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_481 <= add_ln62_fu_611_p2;
            end if; 
        end if;
    end process;

    i_2_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_504 <= j_reg_2002;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_2_reg_504 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_458 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_fu_577_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_458 <= add_ln48_fu_571_p2;
            end if; 
        end if;
    end process;

    p_012_i15_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_012_i15_reg_492 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln62_reg_1931 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_012_i15_reg_492 <= superpoint_0_max_z_fu_643_p3;
            end if; 
        end if;
    end process;

    p_012_i_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_012_i_reg_469 <= ap_const_lv32_40000000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln48_reg_1912 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_012_i_reg_469 <= superpoint_0_min_z_fu_603_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                a_V_reg_2286 <= ret_V_2_fu_1785_p2(51 downto 20);
                sext_ln1118_reg_2279 <= sext_ln1118_fu_1775_p1;
                sext_ln703_reg_2274 <= sext_ln703_fu_1763_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    add_ln49_1_reg_1901(7 downto 4) <= add_ln49_1_fu_565_p2(7 downto 4);
                add_ln49_reg_1891 <= add_ln49_fu_535_p2;
                trunc_ln49_reg_1896 <= trunc_ln49_fu_541_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001))) then
                and_ln571_reg_2066 <= and_ln571_fu_1064_p2;
                and_ln581_reg_2061 <= and_ln581_fu_1022_p2;
                and_ln582_reg_2055 <= and_ln582_fu_1004_p2;
                icmp_ln119_1_reg_2039 <= icmp_ln119_1_fu_860_p2;
                or_ln571_1_reg_2071 <= or_ln571_1_fu_1070_p2;
                select_ln571_1_reg_2077 <= select_ln571_1_fu_1076_p3;
                sh_amt_reg_2044 <= sh_amt_fu_921_p3;
                trunc_ln583_reg_2049 <= trunc_ln583_fu_935_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                exp_tmp_reg_2029 <= ireg_fu_830_p1(62 downto 52);
                p_Result_s_reg_2024 <= ireg_fu_830_p1(63 downto 63);
                trunc_ln555_reg_2019 <= trunc_ln555_fu_834_p1;
                trunc_ln565_reg_2034 <= trunc_ln565_fu_856_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                get_parallelogram_slopesparallelogram_slopes_load_reg_2013 <= get_parallelogram_slopesparallelogram_slopes_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                i_2_reg_504_pp2_iter1_reg <= i_2_reg_504;
                i_2_reg_504_pp2_iter2_reg <= i_2_reg_504_pp2_iter1_reg;
                i_2_reg_504_pp2_iter3_reg <= i_2_reg_504_pp2_iter2_reg;
                i_2_reg_504_pp2_iter4_reg <= i_2_reg_504_pp2_iter3_reg;
                icmp_ln119_reg_1979 <= icmp_ln119_fu_741_p2;
                icmp_ln119_reg_1979_pp2_iter1_reg <= icmp_ln119_reg_1979;
                icmp_ln119_reg_1979_pp2_iter2_reg <= icmp_ln119_reg_1979_pp2_iter1_reg;
                icmp_ln119_reg_1979_pp2_iter3_reg <= icmp_ln119_reg_1979_pp2_iter2_reg;
                icmp_ln119_reg_1979_pp2_iter4_reg <= icmp_ln119_reg_1979_pp2_iter3_reg;
                icmp_ln119_reg_1979_pp2_iter5_reg <= icmp_ln119_reg_1979_pp2_iter4_reg;
                icmp_ln119_reg_1979_pp2_iter6_reg <= icmp_ln119_reg_1979_pp2_iter5_reg;
                    zext_ln129_1_reg_1993_pp2_iter1_reg(3 downto 0) <= zext_ln129_1_reg_1993(3 downto 0);
                    zext_ln129_1_reg_1993_pp2_iter2_reg(3 downto 0) <= zext_ln129_1_reg_1993_pp2_iter1_reg(3 downto 0);
                    zext_ln129_1_reg_1993_pp2_iter3_reg(3 downto 0) <= zext_ln129_1_reg_1993_pp2_iter2_reg(3 downto 0);
                    zext_ln129_1_reg_1993_pp2_iter4_reg(3 downto 0) <= zext_ln129_1_reg_1993_pp2_iter3_reg(3 downto 0);
                    zext_ln129_1_reg_1993_pp2_iter5_reg(3 downto 0) <= zext_ln129_1_reg_1993_pp2_iter4_reg(3 downto 0);
                    zext_ln129_1_reg_1993_pp2_iter6_reg(3 downto 0) <= zext_ln129_1_reg_1993_pp2_iter5_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln48_reg_1912 <= icmp_ln48_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln62_reg_1931 <= icmp_ln62_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                j_reg_2002 <= j_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                lhs_1_reg_2269 <= lhs_1_fu_1751_p3;
                lhs_5_reg_2264 <= lhs_5_fu_1725_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001))) then
                ret_V_12_reg_2291 <= ret_V_12_fu_1862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001))) then
                select_ln50_11_reg_2230 <= select_ln50_11_fu_1601_p3;
                select_ln64_12_reg_2236 <= select_ln64_12_fu_1627_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_11001))) then
                select_ln50_13_reg_2252 <= select_ln50_13_fu_1673_p3;
                select_ln64_14_reg_2258 <= select_ln64_14_fu_1699_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                select_ln50_1_reg_2120 <= select_ln50_1_fu_1235_p3;
                select_ln64_2_reg_2126 <= select_ln64_2_fu_1267_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                select_ln50_3_reg_2142 <= select_ln50_3_fu_1313_p3;
                select_ln64_4_reg_2148 <= select_ln64_4_fu_1339_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001))) then
                select_ln50_5_reg_2164 <= select_ln50_5_fu_1385_p3;
                select_ln64_6_reg_2170 <= select_ln64_6_fu_1411_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001))) then
                select_ln50_7_reg_2186 <= select_ln50_7_fu_1457_p3;
                select_ln64_8_reg_2192 <= select_ln64_8_fu_1483_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001))) then
                select_ln50_9_reg_2208 <= select_ln50_9_fu_1529_p3;
                select_ln64_10_reg_2214 <= select_ln64_10_fu_1555_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    sext_ln1192_1_reg_1973(51 downto 20) <= sext_ln1192_1_fu_737_p1(51 downto 20);
                    sext_ln1192_reg_1961(51 downto 20) <= sext_ln1192_fu_721_p1(51 downto 20);
                sext_ln703_1_reg_1955 <= sext_ln703_1_fu_709_p1;
                sext_ln703_2_reg_1967 <= sext_ln703_2_fu_725_p1;
                z1_max_tmp_V_2_reg_1945 <= z1_max_tmp_V_2_fu_693_p3;
                z1_min_tmp_V_2_reg_1950 <= z1_min_tmp_V_2_fu_701_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_1979_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    tmp_7_cast_reg_2082(7 downto 4) <= tmp_7_cast_fu_1162_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_fu_741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    zext_ln129_1_reg_1993(3 downto 0) <= zext_ln129_1_fu_772_p1(3 downto 0);
            end if;
        end if;
    end process;
    add_ln49_1_reg_1901(3 downto 0) <= "0000";
    sext_ln1192_reg_1961(19 downto 0) <= "00000000000000000000";
    sext_ln1192_1_reg_1973(19 downto 0) <= "00000000000000000000";
    zext_ln129_1_reg_1993(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln129_1_reg_1993_pp2_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln129_1_reg_1993_pp2_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln129_1_reg_1993_pp2_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln129_1_reg_1993_pp2_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln129_1_reg_1993_pp2_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln129_1_reg_1993_pp2_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_7_cast_reg_2082(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln48_fu_577_p2, ap_enable_reg_pp1_iter0, icmp_ln62_fu_617_p2, icmp_ln119_fu_741_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp2_stage7_subdone, ap_block_pp2_stage5_subdone, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage3_subdone, ap_block_pp2_stage4_subdone, ap_block_pp2_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln48_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln48_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln62_fu_617_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln62_fu_617_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln119_fu_741_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln119_fu_741_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_pp2_stage5 => 
                if ((not(((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage6;
                elsif (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage5;
                end if;
            when ap_ST_fsm_pp2_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage6;
                end if;
            when ap_ST_fsm_pp2_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage7;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_897_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_865_p1));
    add_ln129_fu_767_p2 <= std_logic_vector(unsigned(trunc_ln49_reg_1896) + unsigned(zext_ln129_fu_763_p1));
    add_ln48_fu_571_p2 <= std_logic_vector(unsigned(i_reg_458) + unsigned(ap_const_lv5_1));
    add_ln49_1_fu_565_p2 <= std_logic_vector(unsigned(tmp_2_fu_545_p3) + unsigned(zext_ln49_2_fu_561_p1));
    add_ln49_2_fu_587_p2 <= std_logic_vector(unsigned(add_ln49_1_reg_1901) + unsigned(zext_ln49_3_fu_583_p1));
    add_ln49_3_fu_1140_p2 <= std_logic_vector(unsigned(add_ln49_reg_1891) + unsigned(zext_ln49_5_fu_1136_p1));
    add_ln49_fu_535_p2 <= std_logic_vector(unsigned(zext_ln49_1_fu_531_p1) + unsigned(zext_ln49_fu_519_p1));
    add_ln581_fu_909_p2 <= std_logic_vector(unsigned(F2_fu_897_p2) + unsigned(ap_const_lv12_FEC));
    add_ln62_fu_611_p2 <= std_logic_vector(unsigned(i_1_reg_481) + unsigned(ap_const_lv5_1));
    add_ln63_fu_627_p2 <= std_logic_vector(unsigned(add_ln49_1_reg_1901) + unsigned(zext_ln63_fu_623_p1));
    and_ln571_fu_1064_p2 <= (xor_ln119_fu_1058_p2 and icmp_ln571_fu_892_p2);
    and_ln581_fu_1022_p2 <= (xor_ln582_fu_1016_p2 and icmp_ln581_fu_903_p2);
    and_ln582_fu_1004_p2 <= (xor_ln571_fu_998_p2 and icmp_ln582_fu_929_p2);
    and_ln585_fu_1034_p2 <= (icmp_ln585_fu_1028_p2 and and_ln581_fu_1022_p2);
    and_ln603_fu_1052_p2 <= (xor_ln581_fu_1046_p2 and icmp_ln603_fu_949_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage5 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage6 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage7 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state62 <= ap_CS_fsm(13);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp2_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp2_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp2_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln48_fu_577_p2)
    begin
        if ((icmp_ln48_fu_577_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln62_fu_617_p2)
    begin
        if ((icmp_ln62_fu_617_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln119_fu_741_p2)
    begin
        if ((icmp_ln119_fu_741_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_508_p4_assign_proc : process(i_2_reg_504, ap_CS_fsm_pp2_stage0, icmp_ln119_reg_1979, j_reg_2002, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_2_phi_fu_508_p4 <= j_reg_2002;
        else 
            ap_phi_mux_i_2_phi_fu_508_p4 <= i_2_reg_504;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_963_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_885_p3),to_integer(unsigned('0' & zext_ln586_fu_959_p1(31-1 downto 0)))));
    bitcast_ln702_fu_973_p1 <= get_parallelogram_slopesparallelogram_slopes_load_reg_2013;
    get_parallelogram_slopesparallelogram_slopes_address0 <= trunc_ln99_cast_fu_747_p1(2 - 1 downto 0);

    get_parallelogram_slopesparallelogram_slopes_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            get_parallelogram_slopesparallelogram_slopes_ce0 <= ap_const_logic_1;
        else 
            get_parallelogram_slopesparallelogram_slopes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    get_radiiradii_address0 <= trunc_ln99_cast_fu_747_p1(3 - 1 downto 0);

    get_radiiradii_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            get_radiiradii_ce0 <= ap_const_logic_1;
        else 
            get_radiiradii_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln119_1_fu_860_p2 <= "1" when (j_reg_2002 = ap_const_lv3_5) else "0";
    icmp_ln119_fu_741_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_508_p4 = ap_const_lv3_5) else "0";
    icmp_ln1494_10_fu_1477_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_7_fu_1470_p3)) else "0";
    icmp_ln1494_11_fu_1537_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_8_reg_2192)) else "0";
    icmp_ln1494_12_fu_1549_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_9_fu_1542_p3)) else "0";
    icmp_ln1494_13_fu_1609_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_10_reg_2214)) else "0";
    icmp_ln1494_14_fu_1621_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_11_fu_1614_p3)) else "0";
    icmp_ln1494_15_fu_1681_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_12_reg_2236)) else "0";
    icmp_ln1494_16_fu_1693_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_13_fu_1686_p3)) else "0";
    icmp_ln1494_17_fu_1733_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_14_reg_2258)) else "0";
    icmp_ln1494_18_fu_1745_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_15_fu_1738_p3)) else "0";
    icmp_ln1494_2_fu_637_p2 <= "1" when (signed(superpoints_q0) > signed(p_012_i15_reg_492)) else "0";
    icmp_ln1494_3_fu_1243_p2 <= "1" when (signed(superpoints_q1) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1494_4_fu_1261_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_1_cast_fu_1257_p1)) else "0";
    icmp_ln1494_5_fu_1321_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_2_reg_2126)) else "0";
    icmp_ln1494_6_fu_1333_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_3_fu_1326_p3)) else "0";
    icmp_ln1494_7_fu_1393_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_4_reg_2148)) else "0";
    icmp_ln1494_8_fu_1405_p2 <= "1" when (signed(superpoints_q1) > signed(select_ln64_5_fu_1398_p3)) else "0";
    icmp_ln1494_9_fu_1465_p2 <= "1" when (signed(superpoints_q0) > signed(select_ln64_6_reg_2170)) else "0";
    icmp_ln1494_fu_687_p2 <= "1" when (signed(z1_min_tmp_V_fu_657_p3) > signed(z1_max_tmp_V_fu_675_p3)) else "0";
    icmp_ln1495_10_fu_1439_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_5_reg_2164)) else "0";
    icmp_ln1495_11_fu_1451_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_6_fu_1444_p3)) else "0";
    icmp_ln1495_12_fu_1511_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_7_reg_2186)) else "0";
    icmp_ln1495_13_fu_1523_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_8_fu_1516_p3)) else "0";
    icmp_ln1495_14_fu_1583_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_9_reg_2208)) else "0";
    icmp_ln1495_15_fu_1595_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_10_fu_1588_p3)) else "0";
    icmp_ln1495_16_fu_1655_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_11_reg_2230)) else "0";
    icmp_ln1495_17_fu_1667_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_12_fu_1660_p3)) else "0";
    icmp_ln1495_18_fu_1707_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_13_reg_2252)) else "0";
    icmp_ln1495_19_fu_1719_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_14_fu_1712_p3)) else "0";
    icmp_ln1495_2_fu_651_p2 <= "1" when (signed(p_012_i_reg_469) < signed(ap_const_lv32_FE9FFF98)) else "0";
    icmp_ln1495_3_fu_669_p2 <= "1" when (signed(p_012_i15_reg_492) > signed(ap_const_lv32_1600068)) else "0";
    icmp_ln1495_4_fu_1215_p2 <= "0" when (tmp_6_fu_1205_p4 = ap_const_lv2_1) else "1";
    icmp_ln1495_5_fu_1229_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_fu_1221_p3)) else "0";
    icmp_ln1495_6_fu_1295_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_1_reg_2120)) else "0";
    icmp_ln1495_7_fu_1307_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_2_fu_1300_p3)) else "0";
    icmp_ln1495_8_fu_1367_p2 <= "1" when (signed(superpoints_q0) < signed(select_ln50_3_reg_2142)) else "0";
    icmp_ln1495_9_fu_1379_p2 <= "1" when (signed(superpoints_q1) < signed(select_ln50_4_fu_1372_p3)) else "0";
    icmp_ln1495_fu_597_p2 <= "1" when (signed(superpoints_q0) < signed(p_012_i_reg_469)) else "0";
    icmp_ln48_fu_577_p2 <= "1" when (i_reg_458 = ap_const_lv5_10) else "0";
    icmp_ln571_fu_892_p2 <= "1" when (trunc_ln555_reg_2019 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_903_p2 <= "1" when (signed(F2_fu_897_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln582_fu_929_p2 <= "1" when (F2_fu_897_p2 = ap_const_lv12_14) else "0";
    icmp_ln585_fu_1028_p2 <= "1" when (unsigned(sh_amt_fu_921_p3) > unsigned(ap_const_lv12_35)) else "0";
    icmp_ln603_fu_949_p2 <= "1" when (tmp_9_fu_939_p4 = ap_const_lv7_0) else "0";
    icmp_ln62_fu_617_p2 <= "1" when (i_1_reg_481 = ap_const_lv5_10) else "0";
    icmp_ln870_fu_784_p2 <= "1" when (j_fu_778_p2 = ap_const_lv3_0) else "0";
    ireg_fu_830_p1 <= d_fu_516_p1;
    j_fu_778_p2 <= std_logic_vector(unsigned(i_2_reg_504) + unsigned(ap_const_lv3_1));
    lhs_1_fu_1751_p3 <= 
        superpoints_q1 when (icmp_ln1494_18_fu_1745_p2(0) = '1') else 
        select_ln64_15_fu_1738_p3;
    lhs_3_fu_713_p3 <= (z1_min_tmp_V_2_fu_701_p3 & ap_const_lv20_0);
    lhs_4_fu_729_p3 <= (z1_max_tmp_V_2_fu_693_p3 & ap_const_lv20_0);
    lhs_5_fu_1725_p3 <= 
        superpoints_q1 when (icmp_ln1495_19_fu_1719_p2(0) = '1') else 
        select_ln50_14_fu_1712_p3;
    man_V_1_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_875_p1));
    man_V_2_fu_885_p3 <= 
        man_V_1_fu_879_p2 when (p_Result_s_reg_2024(0) = '1') else 
        zext_ln569_fu_875_p1;
    or_ln49_10_fu_1501_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_B);
    or_ln49_11_fu_1563_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_C);
    or_ln49_12_fu_1573_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_D);
    or_ln49_13_fu_1635_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_E);
    or_ln49_14_fu_1645_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_F);
    or_ln49_1_fu_1181_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_2);
    or_ln49_2_fu_1191_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_3);
    or_ln49_3_fu_1275_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_4);
    or_ln49_4_fu_1285_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_5);
    or_ln49_5_fu_1347_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_6);
    or_ln49_6_fu_1357_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_7);
    or_ln49_7_fu_1419_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_8);
    or_ln49_8_fu_1429_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_9);
    or_ln49_9_fu_1491_p2 <= (tmp_7_cast_reg_2082 or ap_const_lv8_A);
    or_ln49_fu_1170_p2 <= (tmp_7_cast_fu_1162_p3 or ap_const_lv8_1);
    or_ln571_1_fu_1070_p2 <= (and_ln603_fu_1052_p2 or and_ln571_fu_1064_p2);
    or_ln571_2_fu_1105_p2 <= (icmp_ln119_1_reg_2039 or and_ln582_reg_2055);
    or_ln571_3_fu_1115_p2 <= (or_ln571_1_reg_2071 or and_ln581_reg_2061);
    or_ln571_fu_992_p2 <= (icmp_ln571_fu_892_p2 or icmp_ln119_1_fu_860_p2);
    or_ln581_fu_1040_p2 <= (or_ln582_fu_1010_p2 or icmp_ln581_fu_903_p2);
    or_ln582_fu_1010_p2 <= (or_ln571_fu_992_p2 or icmp_ln582_fu_929_p2);
    pSlope_address0 <= zext_ln129_1_reg_1993(4 - 1 downto 0);

    pSlope_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001))) then 
            pSlope_ce0 <= ap_const_logic_1;
        else 
            pSlope_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pSlope_d0 <= 
        select_ln571_3_fu_1109_p3 when (or_ln571_3_fu_1115_p2(0) = '1') else 
        select_ln571_4_fu_1119_p3;

    pSlope_we0_assign_proc : process(icmp_ln119_reg_1979, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln119_reg_1979 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001))) then 
            pSlope_we0 <= ap_const_logic_1;
        else 
            pSlope_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_868_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_2034);
    parallelogram_index_fu_757_p2 <= std_logic_vector(unsigned(trunc_ln128_fu_753_p1) + unsigned(ap_const_lv2_3));
    r_V_3_fu_1808_p1 <= sext_ln1118_reg_2279(32 - 1 downto 0);
    r_V_5_fu_1841_p1 <= sext_ln1118_reg_2279(32 - 1 downto 0);
    r_V_7_fu_1870_p1 <= sext_ln1118_reg_2279(32 - 1 downto 0);
    radii_leverArm_fu_1759_p1 <= grp_fu_824_p2(32 - 1 downto 0);
    radius_j_V_2_fu_802_p3 <= 
        ap_const_lv25_0 when (icmp_ln870_fu_784_p2(0) = '1') else 
        radius_j_V_fu_794_p3;
    radius_j_V_fu_794_p3 <= (trunc_ln731_fu_790_p1 & ap_const_lv20_0);
    ret_V_10_fu_1800_p2 <= std_logic_vector(signed(sext_ln703_reg_2274) - signed(sext_ln703_2_reg_1967));
    ret_V_11_fu_1832_p2 <= std_logic_vector(signed(sext_ln703_3_fu_1829_p1) - signed(sext_ln703_1_reg_1955));
    ret_V_12_fu_1862_p2 <= std_logic_vector(signed(sext_ln703_3_fu_1829_p1) - signed(sext_ln703_2_reg_1967));
    ret_V_2_fu_1785_p2 <= std_logic_vector(unsigned(r_V_1_fu_1779_p2) + unsigned(sext_ln1192_reg_1961));
    ret_V_4_fu_1813_p2 <= std_logic_vector(unsigned(r_V_3_fu_1808_p2) + unsigned(sext_ln1192_1_reg_1973));
    ret_V_6_fu_1846_p2 <= std_logic_vector(unsigned(r_V_5_fu_1841_p2) + unsigned(sext_ln1192_reg_1961));
    ret_V_8_fu_1875_p2 <= std_logic_vector(unsigned(r_V_7_fu_1870_p2) + unsigned(sext_ln1192_1_reg_1973));
    ret_V_9_fu_1766_p2 <= std_logic_vector(signed(sext_ln703_fu_1763_p1) - signed(sext_ln703_1_reg_1955));
    ret_V_fu_814_p2 <= std_logic_vector(unsigned(zext_ln1193_fu_810_p1) + unsigned(ap_const_lv26_3B00000));
    select_ln50_10_fu_1588_p3 <= 
        superpoints_q0 when (icmp_ln1495_14_fu_1583_p2(0) = '1') else 
        select_ln50_9_reg_2208;
    select_ln50_11_fu_1601_p3 <= 
        superpoints_q1 when (icmp_ln1495_15_fu_1595_p2(0) = '1') else 
        select_ln50_10_fu_1588_p3;
    select_ln50_12_fu_1660_p3 <= 
        superpoints_q0 when (icmp_ln1495_16_fu_1655_p2(0) = '1') else 
        select_ln50_11_reg_2230;
    select_ln50_13_fu_1673_p3 <= 
        superpoints_q1 when (icmp_ln1495_17_fu_1667_p2(0) = '1') else 
        select_ln50_12_fu_1660_p3;
    select_ln50_14_fu_1712_p3 <= 
        superpoints_q0 when (icmp_ln1495_18_fu_1707_p2(0) = '1') else 
        select_ln50_13_reg_2252;
    select_ln50_1_fu_1235_p3 <= 
        superpoints_q0 when (icmp_ln1495_5_fu_1229_p2(0) = '1') else 
        select_ln50_fu_1221_p3;
    select_ln50_2_fu_1300_p3 <= 
        superpoints_q0 when (icmp_ln1495_6_fu_1295_p2(0) = '1') else 
        select_ln50_1_reg_2120;
    select_ln50_3_fu_1313_p3 <= 
        superpoints_q1 when (icmp_ln1495_7_fu_1307_p2(0) = '1') else 
        select_ln50_2_fu_1300_p3;
    select_ln50_4_fu_1372_p3 <= 
        superpoints_q0 when (icmp_ln1495_8_fu_1367_p2(0) = '1') else 
        select_ln50_3_reg_2142;
    select_ln50_5_fu_1385_p3 <= 
        superpoints_q1 when (icmp_ln1495_9_fu_1379_p2(0) = '1') else 
        select_ln50_4_fu_1372_p3;
    select_ln50_6_fu_1444_p3 <= 
        superpoints_q0 when (icmp_ln1495_10_fu_1439_p2(0) = '1') else 
        select_ln50_5_reg_2164;
    select_ln50_7_fu_1457_p3 <= 
        superpoints_q1 when (icmp_ln1495_11_fu_1451_p2(0) = '1') else 
        select_ln50_6_fu_1444_p3;
    select_ln50_8_fu_1516_p3 <= 
        superpoints_q0 when (icmp_ln1495_12_fu_1511_p2(0) = '1') else 
        select_ln50_7_reg_2186;
    select_ln50_9_fu_1529_p3 <= 
        superpoints_q1 when (icmp_ln1495_13_fu_1523_p2(0) = '1') else 
        select_ln50_8_fu_1516_p3;
    select_ln50_fu_1221_p3 <= 
        superpoints_q1 when (icmp_ln1495_4_fu_1215_p2(0) = '1') else 
        ap_const_lv32_40000000;
    select_ln571_1_fu_1076_p3 <= 
        select_ln588_fu_984_p3 when (and_ln585_fu_1034_p2(0) = '1') else 
        trunc_ln586_1_fu_969_p1;
    select_ln571_2_fu_1099_p3 <= 
        trunc_ln583_reg_2049 when (and_ln582_reg_2055(0) = '1') else 
        ap_const_lv32_40000000;
    select_ln571_3_fu_1109_p3 <= 
        select_ln571_fu_1092_p3 when (or_ln571_1_reg_2071(0) = '1') else 
        select_ln571_1_reg_2077;
    select_ln571_4_fu_1119_p3 <= 
        select_ln571_2_fu_1099_p3 when (or_ln571_2_fu_1105_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln571_fu_1092_p3 <= 
        ap_const_lv32_0 when (and_ln571_reg_2066(0) = '1') else 
        shl_ln604_fu_1087_p2;
    select_ln588_fu_984_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_10_fu_976_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln64_10_fu_1555_p3 <= 
        superpoints_q1 when (icmp_ln1494_12_fu_1549_p2(0) = '1') else 
        select_ln64_9_fu_1542_p3;
    select_ln64_11_fu_1614_p3 <= 
        superpoints_q0 when (icmp_ln1494_13_fu_1609_p2(0) = '1') else 
        select_ln64_10_reg_2214;
    select_ln64_12_fu_1627_p3 <= 
        superpoints_q1 when (icmp_ln1494_14_fu_1621_p2(0) = '1') else 
        select_ln64_11_fu_1614_p3;
    select_ln64_13_fu_1686_p3 <= 
        superpoints_q0 when (icmp_ln1494_15_fu_1681_p2(0) = '1') else 
        select_ln64_12_reg_2236;
    select_ln64_14_fu_1699_p3 <= 
        superpoints_q1 when (icmp_ln1494_16_fu_1693_p2(0) = '1') else 
        select_ln64_13_fu_1686_p3;
    select_ln64_15_fu_1738_p3 <= 
        superpoints_q0 when (icmp_ln1494_17_fu_1733_p2(0) = '1') else 
        select_ln64_14_reg_2258;
    select_ln64_1_cast_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_1_fu_1249_p3),32));
    select_ln64_1_fu_1249_p3 <= 
        trunc_ln1495_fu_1201_p1 when (icmp_ln1494_3_fu_1243_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln64_2_fu_1267_p3 <= 
        superpoints_q0 when (icmp_ln1494_4_fu_1261_p2(0) = '1') else 
        select_ln64_1_cast_fu_1257_p1;
    select_ln64_3_fu_1326_p3 <= 
        superpoints_q0 when (icmp_ln1494_5_fu_1321_p2(0) = '1') else 
        select_ln64_2_reg_2126;
    select_ln64_4_fu_1339_p3 <= 
        superpoints_q1 when (icmp_ln1494_6_fu_1333_p2(0) = '1') else 
        select_ln64_3_fu_1326_p3;
    select_ln64_5_fu_1398_p3 <= 
        superpoints_q0 when (icmp_ln1494_7_fu_1393_p2(0) = '1') else 
        select_ln64_4_reg_2148;
    select_ln64_6_fu_1411_p3 <= 
        superpoints_q1 when (icmp_ln1494_8_fu_1405_p2(0) = '1') else 
        select_ln64_5_fu_1398_p3;
    select_ln64_7_fu_1470_p3 <= 
        superpoints_q0 when (icmp_ln1494_9_fu_1465_p2(0) = '1') else 
        select_ln64_6_reg_2170;
    select_ln64_8_fu_1483_p3 <= 
        superpoints_q1 when (icmp_ln1494_10_fu_1477_p2(0) = '1') else 
        select_ln64_7_fu_1470_p3;
    select_ln64_9_fu_1542_p3 <= 
        superpoints_q0 when (icmp_ln1494_11_fu_1537_p2(0) = '1') else 
        select_ln64_8_reg_2192;
        sext_ln1118_fu_1775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(radii_leverArm_fu_1759_p1),52));

        sext_ln1192_1_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_4_fu_729_p3),52));

        sext_ln1192_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_fu_713_p3),52));

        sext_ln581_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_2044),32));

        sext_ln703_1_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z1_min_tmp_V_2_fu_701_p3),33));

        sext_ln703_2_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z1_max_tmp_V_2_fu_693_p3),33));

        sext_ln703_3_fu_1829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_5_reg_2264),33));

        sext_ln703_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_1_reg_2269),33));

    sh_amt_fu_921_p3 <= 
        add_ln581_fu_909_p2 when (icmp_ln581_fu_903_p2(0) = '1') else 
        sub_ln581_fu_915_p2;
    shadow_bottomL_jL_address0 <= zext_ln129_1_reg_1993_pp2_iter6_reg(4 - 1 downto 0);

    shadow_bottomL_jL_ce0_assign_proc : process(ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001))) then 
            shadow_bottomL_jL_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jL_d0 <= ret_V_6_fu_1846_p2(51 downto 20);

    shadow_bottomL_jL_we0_assign_proc : process(icmp_ln119_reg_1979_pp2_iter6_reg, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (icmp_ln119_reg_1979_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001))) then 
            shadow_bottomL_jL_we0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_address0 <= zext_ln129_1_reg_1993_pp2_iter6_reg(4 - 1 downto 0);

    shadow_bottomL_jR_ce0_assign_proc : process(ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001))) then 
            shadow_bottomL_jR_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_d0 <= a_V_reg_2286;

    shadow_bottomL_jR_we0_assign_proc : process(icmp_ln119_reg_1979_pp2_iter6_reg, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (icmp_ln119_reg_1979_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001))) then 
            shadow_bottomL_jR_we0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_address0 <= zext_ln129_1_reg_1993_pp2_iter6_reg(4 - 1 downto 0);

    shadow_bottomR_jL_ce0_assign_proc : process(ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001))) then 
            shadow_bottomR_jL_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_d0 <= ret_V_8_fu_1875_p2(51 downto 20);

    shadow_bottomR_jL_we0_assign_proc : process(icmp_ln119_reg_1979_pp2_iter6_reg, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (icmp_ln119_reg_1979_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001))) then 
            shadow_bottomR_jL_we0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_address0 <= zext_ln129_1_reg_1993_pp2_iter6_reg(4 - 1 downto 0);

    shadow_bottomR_jR_ce0_assign_proc : process(ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001))) then 
            shadow_bottomR_jR_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_d0 <= ret_V_4_fu_1813_p2(51 downto 20);

    shadow_bottomR_jR_we0_assign_proc : process(icmp_ln119_reg_1979_pp2_iter6_reg, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (icmp_ln119_reg_1979_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001))) then 
            shadow_bottomR_jR_we0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln604_fu_1087_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_2049),to_integer(unsigned('0' & sext_ln581_fu_1084_p1(31-1 downto 0)))));
    sub_ln581_fu_915_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_fu_897_p2));
    superpoint_0_max_z_fu_643_p3 <= 
        superpoints_q0 when (icmp_ln1494_2_fu_637_p2(0) = '1') else 
        p_012_i15_reg_492;
    superpoint_0_min_z_fu_603_p3 <= 
        superpoints_q0 when (icmp_ln1495_fu_597_p2(0) = '1') else 
        p_012_i_reg_469;

    superpoints_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage7, ap_enable_reg_pp2_iter5, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln49_4_fu_592_p1, zext_ln63_1_fu_632_p1, ap_block_pp2_stage4, zext_ln49_7_fu_1176_p1, zext_ln49_8_fu_1186_p1, ap_block_pp2_stage1, zext_ln49_10_fu_1280_p1, ap_block_pp2_stage2, zext_ln49_12_fu_1352_p1, ap_block_pp2_stage3, zext_ln49_14_fu_1424_p1, zext_ln49_16_fu_1496_p1, ap_block_pp2_stage5, zext_ln49_18_fu_1568_p1, ap_block_pp2_stage6, zext_ln49_20_fu_1640_p1, ap_block_pp2_stage7)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7))) then 
            superpoints_address0 <= zext_ln49_20_fu_1640_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_const_boolean_0 = ap_block_pp2_stage6))) then 
            superpoints_address0 <= zext_ln49_18_fu_1568_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5))) then 
            superpoints_address0 <= zext_ln49_16_fu_1496_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4))) then 
            superpoints_address0 <= zext_ln49_14_fu_1424_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3))) then 
            superpoints_address0 <= zext_ln49_12_fu_1352_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            superpoints_address0 <= zext_ln49_10_fu_1280_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            superpoints_address0 <= zext_ln49_8_fu_1186_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            superpoints_address0 <= zext_ln49_7_fu_1176_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            superpoints_address0 <= zext_ln63_1_fu_632_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            superpoints_address0 <= zext_ln49_4_fu_592_p1(8 - 1 downto 0);
        else 
            superpoints_address0 <= "XXXXXXXX";
        end if; 
    end process;


    superpoints_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage7, ap_enable_reg_pp2_iter5, ap_block_pp2_stage0, ap_block_pp2_stage4, zext_ln49_6_fu_1157_p1, ap_block_pp2_stage1, zext_ln49_9_fu_1196_p1, ap_block_pp2_stage2, zext_ln49_11_fu_1290_p1, ap_block_pp2_stage3, zext_ln49_13_fu_1362_p1, zext_ln49_15_fu_1434_p1, ap_block_pp2_stage5, zext_ln49_17_fu_1506_p1, ap_block_pp2_stage6, zext_ln49_19_fu_1578_p1, ap_block_pp2_stage7, zext_ln49_21_fu_1650_p1)
    begin
        if ((ap_enable_reg_pp2_iter5 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7))) then 
                superpoints_address1 <= zext_ln49_21_fu_1650_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_const_boolean_0 = ap_block_pp2_stage6))) then 
                superpoints_address1 <= zext_ln49_19_fu_1578_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5))) then 
                superpoints_address1 <= zext_ln49_17_fu_1506_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4))) then 
                superpoints_address1 <= zext_ln49_15_fu_1434_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3))) then 
                superpoints_address1 <= zext_ln49_13_fu_1362_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
                superpoints_address1 <= zext_ln49_11_fu_1290_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
                superpoints_address1 <= zext_ln49_9_fu_1196_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
                superpoints_address1 <= zext_ln49_6_fu_1157_p1(8 - 1 downto 0);
            else 
                superpoints_address1 <= "XXXXXXXX";
            end if;
        else 
            superpoints_address1 <= "XXXXXXXX";
        end if; 
    end process;


    superpoints_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_enable_reg_pp2_iter5)
    begin
        if ((((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            superpoints_ce0 <= ap_const_logic_1;
        else 
            superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    superpoints_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_enable_reg_pp2_iter5)
    begin
        if ((((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_const_boolean_0 = ap_block_pp2_stage7_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            superpoints_ce1 <= ap_const_logic_1;
        else 
            superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_976_p3 <= bitcast_ln702_fu_973_p1(31 downto 31);
    tmp_2_fu_545_p3 <= (superpoints_offset & ap_const_lv6_0);
    tmp_3_fu_553_p3 <= (superpoints_offset & ap_const_lv4_0);
    tmp_5_fu_1149_p3 <= (add_ln49_3_fu_1140_p2 & ap_const_lv4_0);
    tmp_6_fu_1205_p4 <= superpoints_q1(31 downto 30);
    tmp_7_cast_fu_1162_p3 <= (trunc_ln49_1_fu_1145_p1 & ap_const_lv4_0);
    tmp_9_fu_939_p4 <= sh_amt_fu_921_p3(11 downto 5);
    tmp_fu_523_p3 <= (superpoints_offset & ap_const_lv2_0);
    trunc_ln128_fu_753_p1 <= ap_phi_mux_i_2_phi_fu_508_p4(2 - 1 downto 0);
    trunc_ln1495_fu_1201_p1 <= superpoints_q1(31 - 1 downto 0);
    trunc_ln49_1_fu_1145_p1 <= add_ln49_3_fu_1140_p2(4 - 1 downto 0);
    trunc_ln49_fu_541_p1 <= add_ln49_fu_535_p2(4 - 1 downto 0);
    trunc_ln555_fu_834_p1 <= ireg_fu_830_p1(63 - 1 downto 0);
    trunc_ln565_fu_856_p1 <= ireg_fu_830_p1(52 - 1 downto 0);
    trunc_ln583_fu_935_p1 <= man_V_2_fu_885_p3(32 - 1 downto 0);
    trunc_ln586_1_fu_969_p1 <= ashr_ln586_fu_963_p2(32 - 1 downto 0);
    trunc_ln586_fu_955_p1 <= sh_amt_fu_921_p3(6 - 1 downto 0);
    trunc_ln731_fu_790_p1 <= get_radiiradii_q0(5 - 1 downto 0);
    trunc_ln89_fu_665_p1 <= z1_min_tmp_V_fu_657_p3(26 - 1 downto 0);
    trunc_ln90_fu_683_p1 <= z1_max_tmp_V_fu_675_p3(26 - 1 downto 0);
    trunc_ln99_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_508_p4),64));
    xor_ln119_fu_1058_p2 <= (icmp_ln119_1_fu_860_p2 xor ap_const_lv1_1);
    xor_ln571_fu_998_p2 <= (or_ln571_fu_992_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1046_p2 <= (or_ln581_fu_1040_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1016_p2 <= (or_ln582_fu_1010_p2 xor ap_const_lv1_1);
    z1_max_address0 <= zext_ln129_1_fu_772_p1(4 - 1 downto 0);

    z1_max_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            z1_max_ce0 <= ap_const_logic_1;
        else 
            z1_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_max_d0 <= z1_max_tmp_V_2_reg_1945;
    z1_max_tmp_V_2_fu_693_p3 <= 
        ap_const_lv26_1700068 when (icmp_ln1494_fu_687_p2(0) = '1') else 
        trunc_ln90_fu_683_p1;
    z1_max_tmp_V_fu_675_p3 <= 
        ap_const_lv32_1600068 when (icmp_ln1495_3_fu_669_p2(0) = '1') else 
        p_012_i15_reg_492;

    z1_max_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln119_fu_741_p2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln119_fu_741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            z1_max_we0 <= ap_const_logic_1;
        else 
            z1_max_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_address0 <= zext_ln129_1_fu_772_p1(4 - 1 downto 0);

    z1_min_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            z1_min_ce0 <= ap_const_logic_1;
        else 
            z1_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_d0 <= z1_min_tmp_V_2_reg_1950;
    z1_min_tmp_V_2_fu_701_p3 <= 
        ap_const_lv26_1700068 when (icmp_ln1494_fu_687_p2(0) = '1') else 
        trunc_ln89_fu_665_p1;
    z1_min_tmp_V_fu_657_p3 <= 
        ap_const_lv32_FE9FFF98 when (icmp_ln1495_2_fu_651_p2(0) = '1') else 
        p_012_i_reg_469;

    z1_min_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln119_fu_741_p2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln119_fu_741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            z1_min_we0 <= ap_const_logic_1;
        else 
            z1_min_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1193_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_j_V_2_fu_802_p3),26));
    zext_ln129_1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln129_fu_767_p2),64));
    zext_ln129_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parallelogram_index_fu_757_p2),4));
    zext_ln455_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_2029),12));
    zext_ln49_10_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_3_fu_1275_p2),64));
    zext_ln49_11_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_4_fu_1285_p2),64));
    zext_ln49_12_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_5_fu_1347_p2),64));
    zext_ln49_13_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_6_fu_1357_p2),64));
    zext_ln49_14_fu_1424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_7_fu_1419_p2),64));
    zext_ln49_15_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_8_fu_1429_p2),64));
    zext_ln49_16_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_9_fu_1491_p2),64));
    zext_ln49_17_fu_1506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_10_fu_1501_p2),64));
    zext_ln49_18_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_11_fu_1563_p2),64));
    zext_ln49_19_fu_1578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_12_fu_1573_p2),64));
    zext_ln49_1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_523_p3),5));
    zext_ln49_20_fu_1640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_13_fu_1635_p2),64));
    zext_ln49_21_fu_1650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_14_fu_1645_p2),64));
    zext_ln49_2_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_553_p3),8));
    zext_ln49_3_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_458),8));
    zext_ln49_4_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_2_fu_587_p2),64));
    zext_ln49_5_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_504_pp2_iter4_reg),5));
    zext_ln49_6_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1149_p3),64));
    zext_ln49_7_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_fu_1170_p2),64));
    zext_ln49_8_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_1_fu_1181_p2),64));
    zext_ln49_9_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_2_fu_1191_p2),64));
    zext_ln49_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(superpoints_offset),5));
    zext_ln569_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_868_p3),54));
    zext_ln586_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_955_p1),54));
    zext_ln63_1_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_627_p2),64));
    zext_ln63_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_481),8));
end behav;
