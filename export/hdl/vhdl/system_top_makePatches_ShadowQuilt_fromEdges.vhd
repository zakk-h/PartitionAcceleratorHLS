-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_makePatches_ShadowQuilt_fromEdges is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce0 : OUT STD_LOGIC;
    points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce1 : OUT STD_LOGIC;
    points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce0 : OUT STD_LOGIC;
    num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce1 : OUT STD_LOGIC;
    num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    patch_stream_V_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_stream_V_full_n : IN STD_LOGIC;
    patch_stream_V_write : OUT STD_LOGIC;
    patch_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patch_buffer_ce0 : OUT STD_LOGIC;
    patch_buffer_we0 : OUT STD_LOGIC;
    patch_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patch_buffer_ce1 : OUT STD_LOGIC;
    patch_buffer_we1 : OUT STD_LOGIC;
    patch_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patch_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pSlope_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pSlope_ce0 : OUT STD_LOGIC;
    pSlope_we0 : OUT STD_LOGIC;
    pSlope_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_we0 : OUT STD_LOGIC;
    shadow_bottomL_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_we0 : OUT STD_LOGIC;
    shadow_bottomR_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_we0 : OUT STD_LOGIC;
    shadow_bottomL_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_we0 : OUT STD_LOGIC;
    shadow_bottomR_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_min_ce0 : OUT STD_LOGIC;
    z1_min_we0 : OUT STD_LOGIC;
    z1_min_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    z1_min_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_max_ce0 : OUT STD_LOGIC;
    z1_max_we0 : OUT STD_LOGIC;
    z1_max_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    z1_max_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_0_ce0 : OUT STD_LOGIC;
    a_corner_0_we0 : OUT STD_LOGIC;
    a_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_1_ce0 : OUT STD_LOGIC;
    a_corner_1_we0 : OUT STD_LOGIC;
    a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_0_ce0 : OUT STD_LOGIC;
    b_corner_0_we0 : OUT STD_LOGIC;
    b_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_1_ce0 : OUT STD_LOGIC;
    b_corner_1_we0 : OUT STD_LOGIC;
    b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_0_ce0 : OUT STD_LOGIC;
    c_corner_0_we0 : OUT STD_LOGIC;
    c_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_1_ce0 : OUT STD_LOGIC;
    c_corner_1_we0 : OUT STD_LOGIC;
    c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_0_ce0 : OUT STD_LOGIC;
    d_corner_0_we0 : OUT STD_LOGIC;
    d_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_1_ce0 : OUT STD_LOGIC;
    d_corner_1_we0 : OUT STD_LOGIC;
    d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    latest_patch_index_constprop_i : IN STD_LOGIC_VECTOR (1 downto 0);
    latest_patch_index_constprop_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    latest_patch_index_constprop_o_ap_vld : OUT STD_LOGIC;
    num_patches_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
    num_patches_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_patches_constprop_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of system_top_makePatches_ShadowQuilt_fromEdges is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal patch_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln37_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_144 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_reg_155 : STD_LOGIC_VECTOR (2 downto 0);
    signal point_reg_166 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_1_fu_271_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln37_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_303_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln37_1_reg_354 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_patch_buffer_add_patch2_fu_226_ap_ready : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal init_patch_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_ce0 : STD_LOGIC;
    signal init_patch_V_we0 : STD_LOGIC;
    signal init_patch_V_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal init_patch_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal init_patch_V_ce1 : STD_LOGIC;
    signal init_patch_V_we1 : STD_LOGIC;
    signal init_patch_V_q1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_ap_start : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_ap_done : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_ap_idle : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_ap_ready : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_points_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_points_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_points_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_points_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_num_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_num_points_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we0 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_d0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we1 : STD_LOGIC;
    signal grp_alignedtoline_per_layer_loop3_fu_177_init_patch_d1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_i_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getParallelograms_fu_201_ap_start : STD_LOGIC;
    signal grp_getParallelograms_fu_201_ap_done : STD_LOGIC;
    signal grp_getParallelograms_fu_201_ap_idle : STD_LOGIC;
    signal grp_getParallelograms_fu_201_ap_ready : STD_LOGIC;
    signal grp_getParallelograms_fu_201_superpoints_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getParallelograms_fu_201_superpoints_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_superpoints_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getParallelograms_fu_201_superpoints_ce1 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_pSlope_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_pSlope_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_pSlope_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_pSlope_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomL_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomL_jR_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomL_jR_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomL_jR_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomR_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomR_jR_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomR_jR_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomR_jR_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomL_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomL_jL_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomL_jL_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomL_jL_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomR_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_shadow_bottomR_jL_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomR_jL_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_shadow_bottomR_jL_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getParallelograms_fu_201_z1_min_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_z1_min_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_z1_min_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_z1_min_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_getParallelograms_fu_201_z1_max_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getParallelograms_fu_201_z1_max_ce0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_z1_max_we0 : STD_LOGIC;
    signal grp_getParallelograms_fu_201_z1_max_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_ap_start : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_ap_idle : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_new_patch_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_new_patch_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_new_patch_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_new_patch_ce1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_we0 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_we1 : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_patch_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o_ap_vld : STD_LOGIC;
    signal grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o_ap_vld : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_ap_start : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_ap_done : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_ap_idle : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_ap_ready : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce1 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_z1_min_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_z1_min_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_z1_max_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_acceptanceCorners_fu_237_z1_max_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_a_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_a_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_a_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_a_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_237_a_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_a_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_a_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_a_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_237_b_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_b_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_b_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_b_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_237_b_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_b_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_b_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_b_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_237_c_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_c_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_c_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_c_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_237_c_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_c_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_c_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_c_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_acceptanceCorners_fu_237_d_corner_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_d_corner_0_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_d_corner_0_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_d_corner_0_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_get_acceptanceCorners_fu_237_d_corner_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_acceptanceCorners_fu_237_d_corner_1_ce0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_d_corner_1_we0 : STD_LOGIC;
    signal grp_get_acceptanceCorners_fu_237_d_corner_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_layer_phi_fu_159_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_alignedtoline_per_layer_loop3_fu_177_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_getParallelograms_fu_201_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_patch_buffer_add_patch2_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_get_acceptanceCorners_fu_237_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln40_1_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln39_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_283_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln37_fu_295_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_311_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_fu_319_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_323_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_alignedtoline_per_layer_loop3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce0 : OUT STD_LOGIC;
        points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        points_ce1 : OUT STD_LOGIC;
        points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
        num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce0 : OUT STD_LOGIC;
        num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        num_points_ce1 : OUT STD_LOGIC;
        num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        init_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        init_patch_ce0 : OUT STD_LOGIC;
        init_patch_we0 : OUT STD_LOGIC;
        init_patch_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
        init_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        init_patch_ce1 : OUT STD_LOGIC;
        init_patch_we1 : OUT STD_LOGIC;
        init_patch_d1 : OUT STD_LOGIC_VECTOR (95 downto 0);
        i_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component system_top_getParallelograms IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        superpoints_ce0 : OUT STD_LOGIC;
        superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        superpoints_ce1 : OUT STD_LOGIC;
        superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        superpoints_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        pSlope_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pSlope_ce0 : OUT STD_LOGIC;
        pSlope_we0 : OUT STD_LOGIC;
        pSlope_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jR_we0 : OUT STD_LOGIC;
        shadow_bottomL_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jR_we0 : OUT STD_LOGIC;
        shadow_bottomR_jR_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jL_we0 : OUT STD_LOGIC;
        shadow_bottomL_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jL_we0 : OUT STD_LOGIC;
        shadow_bottomR_jL_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_min_ce0 : OUT STD_LOGIC;
        z1_min_we0 : OUT STD_LOGIC;
        z1_min_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_max_ce0 : OUT STD_LOGIC;
        z1_max_we0 : OUT STD_LOGIC;
        z1_max_d0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component system_top_patch_buffer_add_patch2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        new_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        new_patch_ce0 : OUT STD_LOGIC;
        new_patch_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
        new_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        new_patch_ce1 : OUT STD_LOGIC;
        new_patch_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
        patch_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patch_buffer_ce0 : OUT STD_LOGIC;
        patch_buffer_we0 : OUT STD_LOGIC;
        patch_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patch_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patch_buffer_ce1 : OUT STD_LOGIC;
        patch_buffer_we1 : OUT STD_LOGIC;
        patch_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        latest_patch_index_constprop_i : IN STD_LOGIC_VECTOR (1 downto 0);
        latest_patch_index_constprop_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        latest_patch_index_constprop_o_ap_vld : OUT STD_LOGIC;
        num_patches_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
        num_patches_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_patches_constprop_o_ap_vld : OUT STD_LOGIC );
    end component;


    component system_top_get_acceptanceCorners IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jR_ce1 : OUT STD_LOGIC;
        shadow_bottomL_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jR_ce1 : OUT STD_LOGIC;
        shadow_bottomR_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomL_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomL_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomL_jL_ce1 : OUT STD_LOGIC;
        shadow_bottomL_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
        shadow_bottomR_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shadow_bottomR_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shadow_bottomR_jL_ce1 : OUT STD_LOGIC;
        shadow_bottomR_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_min_ce0 : OUT STD_LOGIC;
        z1_min_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z1_max_ce0 : OUT STD_LOGIC;
        z1_max_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        a_corner_0_ce0 : OUT STD_LOGIC;
        a_corner_0_we0 : OUT STD_LOGIC;
        a_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        a_corner_1_ce0 : OUT STD_LOGIC;
        a_corner_1_we0 : OUT STD_LOGIC;
        a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        b_corner_0_ce0 : OUT STD_LOGIC;
        b_corner_0_we0 : OUT STD_LOGIC;
        b_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        b_corner_1_ce0 : OUT STD_LOGIC;
        b_corner_1_we0 : OUT STD_LOGIC;
        b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        c_corner_0_ce0 : OUT STD_LOGIC;
        c_corner_0_we0 : OUT STD_LOGIC;
        c_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        c_corner_1_ce0 : OUT STD_LOGIC;
        c_corner_1_we0 : OUT STD_LOGIC;
        c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        d_corner_0_ce0 : OUT STD_LOGIC;
        d_corner_0_we0 : OUT STD_LOGIC;
        d_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        d_corner_1_ce0 : OUT STD_LOGIC;
        d_corner_1_we0 : OUT STD_LOGIC;
        d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        latest_patch_index_constprop : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component system_top_makePatches_ShadowQuilt_fromEdges_init_patch_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (95 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (95 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (95 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    init_patch_V_U : component system_top_makePatches_ShadowQuilt_fromEdges_init_patch_V
    generic map (
        DataWidth => 96,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => init_patch_V_address0,
        ce0 => init_patch_V_ce0,
        we0 => init_patch_V_we0,
        d0 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_d0,
        q0 => init_patch_V_q0,
        address1 => init_patch_V_address1,
        ce1 => init_patch_V_ce1,
        we1 => init_patch_V_we1,
        d1 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_d1,
        q1 => init_patch_V_q1);

    grp_alignedtoline_per_layer_loop3_fu_177 : component system_top_alignedtoline_per_layer_loop3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_alignedtoline_per_layer_loop3_fu_177_ap_start,
        ap_done => grp_alignedtoline_per_layer_loop3_fu_177_ap_done,
        ap_idle => grp_alignedtoline_per_layer_loop3_fu_177_ap_idle,
        ap_ready => grp_alignedtoline_per_layer_loop3_fu_177_ap_ready,
        points_address0 => grp_alignedtoline_per_layer_loop3_fu_177_points_address0,
        points_ce0 => grp_alignedtoline_per_layer_loop3_fu_177_points_ce0,
        points_q0 => points_q0,
        points_address1 => grp_alignedtoline_per_layer_loop3_fu_177_points_address1,
        points_ce1 => grp_alignedtoline_per_layer_loop3_fu_177_points_ce1,
        points_q1 => points_q1,
        num_points_address0 => grp_alignedtoline_per_layer_loop3_fu_177_num_points_address0,
        num_points_ce0 => grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce0,
        num_points_q0 => num_points_q0,
        num_points_address1 => grp_alignedtoline_per_layer_loop3_fu_177_num_points_address1,
        num_points_ce1 => grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce1,
        num_points_q1 => num_points_q1,
        init_patch_address0 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address0,
        init_patch_ce0 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce0,
        init_patch_we0 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we0,
        init_patch_d0 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_d0,
        init_patch_address1 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address1,
        init_patch_ce1 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce1,
        init_patch_we1 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we1,
        init_patch_d1 => grp_alignedtoline_per_layer_loop3_fu_177_init_patch_d1,
        i_offset => grp_alignedtoline_per_layer_loop3_fu_177_i_offset);

    grp_getParallelograms_fu_201 : component system_top_getParallelograms
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getParallelograms_fu_201_ap_start,
        ap_done => grp_getParallelograms_fu_201_ap_done,
        ap_idle => grp_getParallelograms_fu_201_ap_idle,
        ap_ready => grp_getParallelograms_fu_201_ap_ready,
        superpoints_address0 => grp_getParallelograms_fu_201_superpoints_address0,
        superpoints_ce0 => grp_getParallelograms_fu_201_superpoints_ce0,
        superpoints_q0 => patch_buffer_q0,
        superpoints_address1 => grp_getParallelograms_fu_201_superpoints_address1,
        superpoints_ce1 => grp_getParallelograms_fu_201_superpoints_ce1,
        superpoints_q1 => patch_buffer_q1,
        superpoints_offset => latest_patch_index_constprop_i,
        pSlope_address0 => grp_getParallelograms_fu_201_pSlope_address0,
        pSlope_ce0 => grp_getParallelograms_fu_201_pSlope_ce0,
        pSlope_we0 => grp_getParallelograms_fu_201_pSlope_we0,
        pSlope_d0 => grp_getParallelograms_fu_201_pSlope_d0,
        shadow_bottomL_jR_address0 => grp_getParallelograms_fu_201_shadow_bottomL_jR_address0,
        shadow_bottomL_jR_ce0 => grp_getParallelograms_fu_201_shadow_bottomL_jR_ce0,
        shadow_bottomL_jR_we0 => grp_getParallelograms_fu_201_shadow_bottomL_jR_we0,
        shadow_bottomL_jR_d0 => grp_getParallelograms_fu_201_shadow_bottomL_jR_d0,
        shadow_bottomR_jR_address0 => grp_getParallelograms_fu_201_shadow_bottomR_jR_address0,
        shadow_bottomR_jR_ce0 => grp_getParallelograms_fu_201_shadow_bottomR_jR_ce0,
        shadow_bottomR_jR_we0 => grp_getParallelograms_fu_201_shadow_bottomR_jR_we0,
        shadow_bottomR_jR_d0 => grp_getParallelograms_fu_201_shadow_bottomR_jR_d0,
        shadow_bottomL_jL_address0 => grp_getParallelograms_fu_201_shadow_bottomL_jL_address0,
        shadow_bottomL_jL_ce0 => grp_getParallelograms_fu_201_shadow_bottomL_jL_ce0,
        shadow_bottomL_jL_we0 => grp_getParallelograms_fu_201_shadow_bottomL_jL_we0,
        shadow_bottomL_jL_d0 => grp_getParallelograms_fu_201_shadow_bottomL_jL_d0,
        shadow_bottomR_jL_address0 => grp_getParallelograms_fu_201_shadow_bottomR_jL_address0,
        shadow_bottomR_jL_ce0 => grp_getParallelograms_fu_201_shadow_bottomR_jL_ce0,
        shadow_bottomR_jL_we0 => grp_getParallelograms_fu_201_shadow_bottomR_jL_we0,
        shadow_bottomR_jL_d0 => grp_getParallelograms_fu_201_shadow_bottomR_jL_d0,
        z1_min_address0 => grp_getParallelograms_fu_201_z1_min_address0,
        z1_min_ce0 => grp_getParallelograms_fu_201_z1_min_ce0,
        z1_min_we0 => grp_getParallelograms_fu_201_z1_min_we0,
        z1_min_d0 => grp_getParallelograms_fu_201_z1_min_d0,
        z1_max_address0 => grp_getParallelograms_fu_201_z1_max_address0,
        z1_max_ce0 => grp_getParallelograms_fu_201_z1_max_ce0,
        z1_max_we0 => grp_getParallelograms_fu_201_z1_max_we0,
        z1_max_d0 => grp_getParallelograms_fu_201_z1_max_d0);

    grp_patch_buffer_add_patch2_fu_226 : component system_top_patch_buffer_add_patch2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_patch_buffer_add_patch2_fu_226_ap_start,
        ap_done => grp_patch_buffer_add_patch2_fu_226_ap_done,
        ap_idle => grp_patch_buffer_add_patch2_fu_226_ap_idle,
        ap_ready => grp_patch_buffer_add_patch2_fu_226_ap_ready,
        new_patch_address0 => grp_patch_buffer_add_patch2_fu_226_new_patch_address0,
        new_patch_ce0 => grp_patch_buffer_add_patch2_fu_226_new_patch_ce0,
        new_patch_q0 => init_patch_V_q0,
        new_patch_address1 => grp_patch_buffer_add_patch2_fu_226_new_patch_address1,
        new_patch_ce1 => grp_patch_buffer_add_patch2_fu_226_new_patch_ce1,
        new_patch_q1 => init_patch_V_q1,
        patch_buffer_address0 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_address0,
        patch_buffer_ce0 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce0,
        patch_buffer_we0 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_we0,
        patch_buffer_d0 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_d0,
        patch_buffer_address1 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_address1,
        patch_buffer_ce1 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce1,
        patch_buffer_we1 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_we1,
        patch_buffer_d1 => grp_patch_buffer_add_patch2_fu_226_patch_buffer_d1,
        latest_patch_index_constprop_i => latest_patch_index_constprop_i,
        latest_patch_index_constprop_o => grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o,
        latest_patch_index_constprop_o_ap_vld => grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o_ap_vld,
        num_patches_constprop_i => num_patches_constprop_i,
        num_patches_constprop_o => grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o,
        num_patches_constprop_o_ap_vld => grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o_ap_vld);

    grp_get_acceptanceCorners_fu_237 : component system_top_get_acceptanceCorners
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_acceptanceCorners_fu_237_ap_start,
        ap_done => grp_get_acceptanceCorners_fu_237_ap_done,
        ap_idle => grp_get_acceptanceCorners_fu_237_ap_idle,
        ap_ready => grp_get_acceptanceCorners_fu_237_ap_ready,
        shadow_bottomL_jR_address0 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address0,
        shadow_bottomL_jR_ce0 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce0,
        shadow_bottomL_jR_q0 => shadow_bottomL_jR_q0,
        shadow_bottomL_jR_address1 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address1,
        shadow_bottomL_jR_ce1 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce1,
        shadow_bottomL_jR_q1 => shadow_bottomL_jR_q1,
        shadow_bottomR_jR_address0 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address0,
        shadow_bottomR_jR_ce0 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce0,
        shadow_bottomR_jR_q0 => shadow_bottomR_jR_q0,
        shadow_bottomR_jR_address1 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address1,
        shadow_bottomR_jR_ce1 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce1,
        shadow_bottomR_jR_q1 => shadow_bottomR_jR_q1,
        shadow_bottomL_jL_address0 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address0,
        shadow_bottomL_jL_ce0 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce0,
        shadow_bottomL_jL_q0 => shadow_bottomL_jL_q0,
        shadow_bottomL_jL_address1 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address1,
        shadow_bottomL_jL_ce1 => grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce1,
        shadow_bottomL_jL_q1 => shadow_bottomL_jL_q1,
        shadow_bottomR_jL_address0 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address0,
        shadow_bottomR_jL_ce0 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce0,
        shadow_bottomR_jL_q0 => shadow_bottomR_jL_q0,
        shadow_bottomR_jL_address1 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address1,
        shadow_bottomR_jL_ce1 => grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce1,
        shadow_bottomR_jL_q1 => shadow_bottomR_jL_q1,
        z1_min_address0 => grp_get_acceptanceCorners_fu_237_z1_min_address0,
        z1_min_ce0 => grp_get_acceptanceCorners_fu_237_z1_min_ce0,
        z1_min_q0 => z1_min_q0,
        z1_max_address0 => grp_get_acceptanceCorners_fu_237_z1_max_address0,
        z1_max_ce0 => grp_get_acceptanceCorners_fu_237_z1_max_ce0,
        z1_max_q0 => z1_max_q0,
        a_corner_0_address0 => grp_get_acceptanceCorners_fu_237_a_corner_0_address0,
        a_corner_0_ce0 => grp_get_acceptanceCorners_fu_237_a_corner_0_ce0,
        a_corner_0_we0 => grp_get_acceptanceCorners_fu_237_a_corner_0_we0,
        a_corner_0_d0 => grp_get_acceptanceCorners_fu_237_a_corner_0_d0,
        a_corner_1_address0 => grp_get_acceptanceCorners_fu_237_a_corner_1_address0,
        a_corner_1_ce0 => grp_get_acceptanceCorners_fu_237_a_corner_1_ce0,
        a_corner_1_we0 => grp_get_acceptanceCorners_fu_237_a_corner_1_we0,
        a_corner_1_d0 => grp_get_acceptanceCorners_fu_237_a_corner_1_d0,
        b_corner_0_address0 => grp_get_acceptanceCorners_fu_237_b_corner_0_address0,
        b_corner_0_ce0 => grp_get_acceptanceCorners_fu_237_b_corner_0_ce0,
        b_corner_0_we0 => grp_get_acceptanceCorners_fu_237_b_corner_0_we0,
        b_corner_0_d0 => grp_get_acceptanceCorners_fu_237_b_corner_0_d0,
        b_corner_1_address0 => grp_get_acceptanceCorners_fu_237_b_corner_1_address0,
        b_corner_1_ce0 => grp_get_acceptanceCorners_fu_237_b_corner_1_ce0,
        b_corner_1_we0 => grp_get_acceptanceCorners_fu_237_b_corner_1_we0,
        b_corner_1_d0 => grp_get_acceptanceCorners_fu_237_b_corner_1_d0,
        c_corner_0_address0 => grp_get_acceptanceCorners_fu_237_c_corner_0_address0,
        c_corner_0_ce0 => grp_get_acceptanceCorners_fu_237_c_corner_0_ce0,
        c_corner_0_we0 => grp_get_acceptanceCorners_fu_237_c_corner_0_we0,
        c_corner_0_d0 => grp_get_acceptanceCorners_fu_237_c_corner_0_d0,
        c_corner_1_address0 => grp_get_acceptanceCorners_fu_237_c_corner_1_address0,
        c_corner_1_ce0 => grp_get_acceptanceCorners_fu_237_c_corner_1_ce0,
        c_corner_1_we0 => grp_get_acceptanceCorners_fu_237_c_corner_1_we0,
        c_corner_1_d0 => grp_get_acceptanceCorners_fu_237_c_corner_1_d0,
        d_corner_0_address0 => grp_get_acceptanceCorners_fu_237_d_corner_0_address0,
        d_corner_0_ce0 => grp_get_acceptanceCorners_fu_237_d_corner_0_ce0,
        d_corner_0_we0 => grp_get_acceptanceCorners_fu_237_d_corner_0_we0,
        d_corner_0_d0 => grp_get_acceptanceCorners_fu_237_d_corner_0_d0,
        d_corner_1_address0 => grp_get_acceptanceCorners_fu_237_d_corner_1_address0,
        d_corner_1_ce0 => grp_get_acceptanceCorners_fu_237_d_corner_1_ce0,
        d_corner_1_we0 => grp_get_acceptanceCorners_fu_237_d_corner_1_we0,
        d_corner_1_d0 => grp_get_acceptanceCorners_fu_237_d_corner_1_d0,
        latest_patch_index_constprop => latest_patch_index_constprop_i);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_patch_buffer_add_patch2_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_patch_buffer_add_patch2_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_alignedtoline_per_layer_loop3_fu_177_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_alignedtoline_per_layer_loop3_fu_177_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_alignedtoline_per_layer_loop3_fu_177_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_alignedtoline_per_layer_loop3_fu_177_ap_ready = ap_const_logic_1)) then 
                    grp_alignedtoline_per_layer_loop3_fu_177_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getParallelograms_fu_201_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getParallelograms_fu_201_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_getParallelograms_fu_201_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getParallelograms_fu_201_ap_ready = ap_const_logic_1)) then 
                    grp_getParallelograms_fu_201_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_acceptanceCorners_fu_237_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_acceptanceCorners_fu_237_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_get_acceptanceCorners_fu_237_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_acceptanceCorners_fu_237_ap_ready = ap_const_logic_1)) then 
                    grp_get_acceptanceCorners_fu_237_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_patch_buffer_add_patch2_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_patch_buffer_add_patch2_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_patch_buffer_add_patch2_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_patch_buffer_add_patch2_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_patch_buffer_add_patch2_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_277_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_144 <= add_ln37_1_fu_271_p2;
            elsif (((grp_patch_buffer_add_patch2_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                indvar_flatten_reg_144 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    layer_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                layer_reg_155 <= select_ln37_1_reg_354;
            elsif (((grp_patch_buffer_add_patch2_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                layer_reg_155 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    point_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_277_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                point_reg_166 <= add_ln39_fu_334_p2;
            elsif (((grp_patch_buffer_add_patch2_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                point_reg_166 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln37_reg_350 <= icmp_ln37_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_277_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln37_1_reg_354 <= select_ln37_1_fu_303_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln37_fu_277_p2, ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_226_ap_done, ap_block_pp0_stage0_subdone, grp_alignedtoline_per_layer_loop3_fu_177_ap_done, grp_getParallelograms_fu_201_ap_done, grp_get_acceptanceCorners_fu_237_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_alignedtoline_per_layer_loop3_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_patch_buffer_add_patch2_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln37_fu_277_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln37_fu_277_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_getParallelograms_fu_201_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_get_acceptanceCorners_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_corner_0_address0 <= grp_get_acceptanceCorners_fu_237_a_corner_0_address0;
    a_corner_0_ce0 <= grp_get_acceptanceCorners_fu_237_a_corner_0_ce0;
    a_corner_0_d0 <= grp_get_acceptanceCorners_fu_237_a_corner_0_d0;
    a_corner_0_we0 <= grp_get_acceptanceCorners_fu_237_a_corner_0_we0;
    a_corner_1_address0 <= grp_get_acceptanceCorners_fu_237_a_corner_1_address0;
    a_corner_1_ce0 <= grp_get_acceptanceCorners_fu_237_a_corner_1_ce0;
    a_corner_1_d0 <= grp_get_acceptanceCorners_fu_237_a_corner_1_d0;
    a_corner_1_we0 <= grp_get_acceptanceCorners_fu_237_a_corner_1_we0;
    add_ln37_1_fu_271_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_144) + unsigned(ap_const_lv7_1));
    add_ln37_fu_283_p2 <= std_logic_vector(unsigned(ap_phi_mux_layer_phi_fu_159_p4) + unsigned(ap_const_lv3_1));
    add_ln39_fu_334_p2 <= std_logic_vector(unsigned(select_ln37_fu_295_p3) + unsigned(ap_const_lv5_1));
    add_ln40_fu_323_p2 <= std_logic_vector(unsigned(tmp_fu_311_p3) + unsigned(zext_ln40_fu_319_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_350)
    begin
                ap_block_pp0_stage0_01001 <= ((patch_stream_V_full_n = ap_const_logic_0) and (icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_350)
    begin
                ap_block_pp0_stage0_11001 <= ((patch_stream_V_full_n = ap_const_logic_0) and (icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(patch_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_350)
    begin
                ap_block_pp0_stage0_subdone <= ((patch_stream_V_full_n = ap_const_logic_0) and (icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(patch_stream_V_full_n, icmp_ln37_reg_350)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((patch_stream_V_full_n = ap_const_logic_0) and (icmp_ln37_reg_350 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln37_fu_277_p2)
    begin
        if ((icmp_ln37_fu_277_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_get_acceptanceCorners_fu_237_ap_done, ap_CS_fsm_state18)
    begin
        if ((((grp_get_acceptanceCorners_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_layer_phi_fu_159_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_350, layer_reg_155, select_ln37_1_reg_354)
    begin
        if (((icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_layer_phi_fu_159_p4 <= select_ln37_1_reg_354;
        else 
            ap_phi_mux_layer_phi_fu_159_p4 <= layer_reg_155;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_get_acceptanceCorners_fu_237_ap_done, ap_CS_fsm_state18)
    begin
        if (((grp_get_acceptanceCorners_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_address0 <= grp_get_acceptanceCorners_fu_237_b_corner_0_address0;
    b_corner_0_ce0 <= grp_get_acceptanceCorners_fu_237_b_corner_0_ce0;
    b_corner_0_d0 <= grp_get_acceptanceCorners_fu_237_b_corner_0_d0;
    b_corner_0_we0 <= grp_get_acceptanceCorners_fu_237_b_corner_0_we0;
    b_corner_1_address0 <= grp_get_acceptanceCorners_fu_237_b_corner_1_address0;
    b_corner_1_ce0 <= grp_get_acceptanceCorners_fu_237_b_corner_1_ce0;
    b_corner_1_d0 <= grp_get_acceptanceCorners_fu_237_b_corner_1_d0;
    b_corner_1_we0 <= grp_get_acceptanceCorners_fu_237_b_corner_1_we0;
    c_corner_0_address0 <= grp_get_acceptanceCorners_fu_237_c_corner_0_address0;
    c_corner_0_ce0 <= grp_get_acceptanceCorners_fu_237_c_corner_0_ce0;
    c_corner_0_d0 <= grp_get_acceptanceCorners_fu_237_c_corner_0_d0;
    c_corner_0_we0 <= grp_get_acceptanceCorners_fu_237_c_corner_0_we0;
    c_corner_1_address0 <= grp_get_acceptanceCorners_fu_237_c_corner_1_address0;
    c_corner_1_ce0 <= grp_get_acceptanceCorners_fu_237_c_corner_1_ce0;
    c_corner_1_d0 <= grp_get_acceptanceCorners_fu_237_c_corner_1_d0;
    c_corner_1_we0 <= grp_get_acceptanceCorners_fu_237_c_corner_1_we0;
    d_corner_0_address0 <= grp_get_acceptanceCorners_fu_237_d_corner_0_address0;
    d_corner_0_ce0 <= grp_get_acceptanceCorners_fu_237_d_corner_0_ce0;
    d_corner_0_d0 <= grp_get_acceptanceCorners_fu_237_d_corner_0_d0;
    d_corner_0_we0 <= grp_get_acceptanceCorners_fu_237_d_corner_0_we0;
    d_corner_1_address0 <= grp_get_acceptanceCorners_fu_237_d_corner_1_address0;
    d_corner_1_ce0 <= grp_get_acceptanceCorners_fu_237_d_corner_1_ce0;
    d_corner_1_d0 <= grp_get_acceptanceCorners_fu_237_d_corner_1_d0;
    d_corner_1_we0 <= grp_get_acceptanceCorners_fu_237_d_corner_1_we0;
    grp_alignedtoline_per_layer_loop3_fu_177_ap_start <= grp_alignedtoline_per_layer_loop3_fu_177_ap_start_reg;

    grp_alignedtoline_per_layer_loop3_fu_177_i_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_alignedtoline_per_layer_loop3_fu_177_i_offset <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_alignedtoline_per_layer_loop3_fu_177_i_offset <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_alignedtoline_per_layer_loop3_fu_177_i_offset <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_alignedtoline_per_layer_loop3_fu_177_i_offset <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_alignedtoline_per_layer_loop3_fu_177_i_offset <= ap_const_lv3_0;
        else 
            grp_alignedtoline_per_layer_loop3_fu_177_i_offset <= "XXX";
        end if; 
    end process;

    grp_getParallelograms_fu_201_ap_start <= grp_getParallelograms_fu_201_ap_start_reg;
    grp_get_acceptanceCorners_fu_237_ap_start <= grp_get_acceptanceCorners_fu_237_ap_start_reg;
    grp_patch_buffer_add_patch2_fu_226_ap_start <= grp_patch_buffer_add_patch2_fu_226_ap_start_reg;
    icmp_ln37_fu_277_p2 <= "1" when (indvar_flatten_reg_144 = ap_const_lv7_50) else "0";
    icmp_ln39_fu_289_p2 <= "1" when (point_reg_166 = ap_const_lv5_10) else "0";

    init_patch_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address0, grp_patch_buffer_add_patch2_fu_226_new_patch_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln40_1_fu_329_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            init_patch_V_address0 <= zext_ln40_1_fu_329_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_address0 <= grp_patch_buffer_add_patch2_fu_226_new_patch_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_address0 <= grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address0;
        else 
            init_patch_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_address1_assign_proc : process(ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address1, grp_patch_buffer_add_patch2_fu_226_new_patch_address1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_address1 <= grp_patch_buffer_add_patch2_fu_226_new_patch_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_address1 <= grp_alignedtoline_per_layer_loop3_fu_177_init_patch_address1;
        else 
            init_patch_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    init_patch_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce0, grp_patch_buffer_add_patch2_fu_226_new_patch_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            init_patch_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_ce0 <= grp_patch_buffer_add_patch2_fu_226_new_patch_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_ce0 <= grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce0;
        else 
            init_patch_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_ce1_assign_proc : process(ap_CS_fsm_state12, grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce1, grp_patch_buffer_add_patch2_fu_226_new_patch_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_patch_V_ce1 <= grp_patch_buffer_add_patch2_fu_226_new_patch_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_ce1 <= grp_alignedtoline_per_layer_loop3_fu_177_init_patch_ce1;
        else 
            init_patch_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_we0_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_we0 <= grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we0;
        else 
            init_patch_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_V_we1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_patch_V_we1 <= grp_alignedtoline_per_layer_loop3_fu_177_init_patch_we1;
        else 
            init_patch_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    latest_patch_index_constprop_o_assign_proc : process(latest_patch_index_constprop_i, ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o, grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o_ap_vld)
    begin
        if (((grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            latest_patch_index_constprop_o <= grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o;
        else 
            latest_patch_index_constprop_o <= latest_patch_index_constprop_i;
        end if; 
    end process;


    latest_patch_index_constprop_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o_ap_vld)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            latest_patch_index_constprop_o_ap_vld <= grp_patch_buffer_add_patch2_fu_226_latest_patch_index_constprop_o_ap_vld;
        else 
            latest_patch_index_constprop_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    num_patches_constprop_o_assign_proc : process(num_patches_constprop_i, ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o, grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o_ap_vld)
    begin
        if (((grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            num_patches_constprop_o <= grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o;
        else 
            num_patches_constprop_o <= num_patches_constprop_i;
        end if; 
    end process;

    num_patches_constprop_o_ap_vld <= grp_patch_buffer_add_patch2_fu_226_num_patches_constprop_o_ap_vld;
    num_points_address0 <= grp_alignedtoline_per_layer_loop3_fu_177_num_points_address0;
    num_points_address1 <= grp_alignedtoline_per_layer_loop3_fu_177_num_points_address1;

    num_points_ce0_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_ce0 <= grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce0;
        else 
            num_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    num_points_ce1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            num_points_ce1 <= grp_alignedtoline_per_layer_loop3_fu_177_num_points_ce1;
        else 
            num_points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pSlope_address0 <= grp_getParallelograms_fu_201_pSlope_address0;
    pSlope_ce0 <= grp_getParallelograms_fu_201_pSlope_ce0;
    pSlope_d0 <= grp_getParallelograms_fu_201_pSlope_d0;
    pSlope_we0 <= grp_getParallelograms_fu_201_pSlope_we0;

    patch_buffer_address0_assign_proc : process(ap_CS_fsm_state12, grp_getParallelograms_fu_201_superpoints_address0, grp_patch_buffer_add_patch2_fu_226_patch_buffer_address0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_address0 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_address0 <= grp_getParallelograms_fu_201_superpoints_address0;
        else 
            patch_buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    patch_buffer_address1_assign_proc : process(ap_CS_fsm_state12, grp_getParallelograms_fu_201_superpoints_address1, grp_patch_buffer_add_patch2_fu_226_patch_buffer_address1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_address1 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_address1 <= grp_getParallelograms_fu_201_superpoints_address1;
        else 
            patch_buffer_address1 <= "XXXXXXXX";
        end if; 
    end process;


    patch_buffer_ce0_assign_proc : process(ap_CS_fsm_state12, grp_getParallelograms_fu_201_superpoints_ce0, grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_ce0 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_ce0 <= grp_getParallelograms_fu_201_superpoints_ce0;
        else 
            patch_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_ce1_assign_proc : process(ap_CS_fsm_state12, grp_getParallelograms_fu_201_superpoints_ce1, grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_ce1 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_ce1 <= grp_getParallelograms_fu_201_superpoints_ce1;
        else 
            patch_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_d0 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_d0;
    patch_buffer_d1 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_d1;

    patch_buffer_we0_assign_proc : process(ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_226_patch_buffer_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_we0 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_we0;
        else 
            patch_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_buffer_we1_assign_proc : process(ap_CS_fsm_state12, grp_patch_buffer_add_patch2_fu_226_patch_buffer_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_we1 <= grp_patch_buffer_add_patch2_fu_226_patch_buffer_we1;
        else 
            patch_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;


    patch_stream_V_blk_n_assign_proc : process(patch_stream_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_350)
    begin
        if (((icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            patch_stream_V_blk_n <= patch_stream_V_full_n;
        else 
            patch_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    patch_stream_V_din <= init_patch_V_q0;

    patch_stream_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_350, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            patch_stream_V_write <= ap_const_logic_1;
        else 
            patch_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    points_address0 <= grp_alignedtoline_per_layer_loop3_fu_177_points_address0;
    points_address1 <= grp_alignedtoline_per_layer_loop3_fu_177_points_address1;

    points_ce0_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_177_points_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_ce0 <= grp_alignedtoline_per_layer_loop3_fu_177_points_ce0;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    points_ce1_assign_proc : process(grp_alignedtoline_per_layer_loop3_fu_177_points_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            points_ce1 <= grp_alignedtoline_per_layer_loop3_fu_177_points_ce1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln37_1_fu_303_p3 <= 
        add_ln37_fu_283_p2 when (icmp_ln39_fu_289_p2(0) = '1') else 
        ap_phi_mux_layer_phi_fu_159_p4;
    select_ln37_fu_295_p3 <= 
        ap_const_lv5_0 when (icmp_ln39_fu_289_p2(0) = '1') else 
        point_reg_166;

    shadow_bottomL_jL_address0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomL_jL_address0, grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomL_jL_address0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomL_jL_address0 <= grp_getParallelograms_fu_201_shadow_bottomL_jL_address0;
        else 
            shadow_bottomL_jL_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomL_jL_address1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_address1;

    shadow_bottomL_jL_ce0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomL_jL_ce0, grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomL_jL_ce0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomL_jL_ce0 <= grp_getParallelograms_fu_201_shadow_bottomL_jL_ce0;
        else 
            shadow_bottomL_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jL_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomL_jL_ce1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jL_ce1;
        else 
            shadow_bottomL_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jL_d0 <= grp_getParallelograms_fu_201_shadow_bottomL_jL_d0;

    shadow_bottomL_jL_we0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomL_jL_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomL_jL_we0 <= grp_getParallelograms_fu_201_shadow_bottomL_jL_we0;
        else 
            shadow_bottomL_jL_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_address0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomL_jR_address0, grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomL_jR_address0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomL_jR_address0 <= grp_getParallelograms_fu_201_shadow_bottomL_jR_address0;
        else 
            shadow_bottomL_jR_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomL_jR_address1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_address1;

    shadow_bottomL_jR_ce0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomL_jR_ce0, grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomL_jR_ce0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomL_jR_ce0 <= grp_getParallelograms_fu_201_shadow_bottomL_jR_ce0;
        else 
            shadow_bottomL_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomL_jR_ce1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomL_jR_ce1;
        else 
            shadow_bottomL_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_d0 <= grp_getParallelograms_fu_201_shadow_bottomL_jR_d0;

    shadow_bottomL_jR_we0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomL_jR_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomL_jR_we0 <= grp_getParallelograms_fu_201_shadow_bottomL_jR_we0;
        else 
            shadow_bottomL_jR_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_address0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomR_jL_address0, grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomR_jL_address0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomR_jL_address0 <= grp_getParallelograms_fu_201_shadow_bottomR_jL_address0;
        else 
            shadow_bottomR_jL_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomR_jL_address1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_address1;

    shadow_bottomR_jL_ce0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomR_jL_ce0, grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomR_jL_ce0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomR_jL_ce0 <= grp_getParallelograms_fu_201_shadow_bottomR_jL_ce0;
        else 
            shadow_bottomR_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomR_jL_ce1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jL_ce1;
        else 
            shadow_bottomR_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_d0 <= grp_getParallelograms_fu_201_shadow_bottomR_jL_d0;

    shadow_bottomR_jL_we0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomR_jL_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomR_jL_we0 <= grp_getParallelograms_fu_201_shadow_bottomR_jL_we0;
        else 
            shadow_bottomR_jL_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_address0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomR_jR_address0, grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomR_jR_address0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomR_jR_address0 <= grp_getParallelograms_fu_201_shadow_bottomR_jR_address0;
        else 
            shadow_bottomR_jR_address0 <= "XXXX";
        end if; 
    end process;

    shadow_bottomR_jR_address1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_address1;

    shadow_bottomR_jR_ce0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomR_jR_ce0, grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomR_jR_ce0 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomR_jR_ce0 <= grp_getParallelograms_fu_201_shadow_bottomR_jR_ce0;
        else 
            shadow_bottomR_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_ce1_assign_proc : process(grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shadow_bottomR_jR_ce1 <= grp_get_acceptanceCorners_fu_237_shadow_bottomR_jR_ce1;
        else 
            shadow_bottomR_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_d0 <= grp_getParallelograms_fu_201_shadow_bottomR_jR_d0;

    shadow_bottomR_jR_we0_assign_proc : process(grp_getParallelograms_fu_201_shadow_bottomR_jR_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shadow_bottomR_jR_we0 <= grp_getParallelograms_fu_201_shadow_bottomR_jR_we0;
        else 
            shadow_bottomR_jR_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_311_p3 <= (select_ln37_1_fu_303_p3 & ap_const_lv4_0);

    z1_max_address0_assign_proc : process(grp_getParallelograms_fu_201_z1_max_address0, grp_get_acceptanceCorners_fu_237_z1_max_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            z1_max_address0 <= grp_get_acceptanceCorners_fu_237_z1_max_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            z1_max_address0 <= grp_getParallelograms_fu_201_z1_max_address0;
        else 
            z1_max_address0 <= "XXXX";
        end if; 
    end process;


    z1_max_ce0_assign_proc : process(grp_getParallelograms_fu_201_z1_max_ce0, grp_get_acceptanceCorners_fu_237_z1_max_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            z1_max_ce0 <= grp_get_acceptanceCorners_fu_237_z1_max_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            z1_max_ce0 <= grp_getParallelograms_fu_201_z1_max_ce0;
        else 
            z1_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_max_d0 <= grp_getParallelograms_fu_201_z1_max_d0;

    z1_max_we0_assign_proc : process(grp_getParallelograms_fu_201_z1_max_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            z1_max_we0 <= grp_getParallelograms_fu_201_z1_max_we0;
        else 
            z1_max_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z1_min_address0_assign_proc : process(grp_getParallelograms_fu_201_z1_min_address0, grp_get_acceptanceCorners_fu_237_z1_min_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            z1_min_address0 <= grp_get_acceptanceCorners_fu_237_z1_min_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            z1_min_address0 <= grp_getParallelograms_fu_201_z1_min_address0;
        else 
            z1_min_address0 <= "XXXX";
        end if; 
    end process;


    z1_min_ce0_assign_proc : process(grp_getParallelograms_fu_201_z1_min_ce0, grp_get_acceptanceCorners_fu_237_z1_min_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            z1_min_ce0 <= grp_get_acceptanceCorners_fu_237_z1_min_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            z1_min_ce0 <= grp_getParallelograms_fu_201_z1_min_ce0;
        else 
            z1_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_d0 <= grp_getParallelograms_fu_201_z1_min_d0;

    z1_min_we0_assign_proc : process(grp_getParallelograms_fu_201_z1_min_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            z1_min_we0 <= grp_getParallelograms_fu_201_z1_min_we0;
        else 
            z1_min_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln40_1_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_323_p2),64));
    zext_ln40_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_fu_295_p3),7));
end behav;
