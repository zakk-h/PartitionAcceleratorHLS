-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_get_acceptanceCorners is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    shadow_bottomL_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jR_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jR_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomL_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomL_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shadow_bottomR_jL_ce1 : OUT STD_LOGIC;
    shadow_bottomR_jL_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    z1_min_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_min_ce0 : OUT STD_LOGIC;
    z1_min_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    z1_max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z1_max_ce0 : OUT STD_LOGIC;
    z1_max_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_0_ce0 : OUT STD_LOGIC;
    a_corner_0_we0 : OUT STD_LOGIC;
    a_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_1_ce0 : OUT STD_LOGIC;
    a_corner_1_we0 : OUT STD_LOGIC;
    a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_0_ce0 : OUT STD_LOGIC;
    b_corner_0_we0 : OUT STD_LOGIC;
    b_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_1_ce0 : OUT STD_LOGIC;
    b_corner_1_we0 : OUT STD_LOGIC;
    b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_0_ce0 : OUT STD_LOGIC;
    c_corner_0_we0 : OUT STD_LOGIC;
    c_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_1_ce0 : OUT STD_LOGIC;
    c_corner_1_we0 : OUT STD_LOGIC;
    c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_0_ce0 : OUT STD_LOGIC;
    d_corner_0_we0 : OUT STD_LOGIC;
    d_corner_0_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_1_ce0 : OUT STD_LOGIC;
    d_corner_1_we0 : OUT STD_LOGIC;
    d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    latest_patch_index_constprop : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of system_top_get_acceptanceCorners is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_584 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_corner_min_V_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_min_V_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln178_fu_663_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln178_reg_801 : STD_LOGIC_VECTOR (3 downto 0);
    signal z1_min_addr_reg_847 : STD_LOGIC_VECTOR (3 downto 0);
    signal z1_max_addr_reg_852 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal idxprom_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom_reg_897 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln199_fu_722_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln199_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_corner_min_V_1_fu_748_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal b_corner_min_V_2_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_1_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_2_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal a_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_corner_list_V_ce0 : STD_LOGIC;
    signal a_corner_list_V_we0 : STD_LOGIC;
    signal a_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_corner_list_V_ce1 : STD_LOGIC;
    signal a_corner_list_V_we1 : STD_LOGIC;
    signal b_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_corner_list_V_ce0 : STD_LOGIC;
    signal b_corner_list_V_we0 : STD_LOGIC;
    signal b_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_corner_list_V_ce1 : STD_LOGIC;
    signal b_corner_list_V_we1 : STD_LOGIC;
    signal c_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_corner_list_V_ce0 : STD_LOGIC;
    signal c_corner_list_V_we0 : STD_LOGIC;
    signal c_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_corner_list_V_ce1 : STD_LOGIC;
    signal c_corner_list_V_we1 : STD_LOGIC;
    signal d_corner_list_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_corner_list_V_ce0 : STD_LOGIC;
    signal d_corner_list_V_we0 : STD_LOGIC;
    signal d_corner_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_list_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_corner_list_V_ce1 : STD_LOGIC;
    signal d_corner_list_V_we1 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln178_1_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln178_2_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln178_3_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln178_4_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_fu_655_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln178_fu_651_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln178_1_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln178_2_fu_693_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln178_3_fu_706_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1495_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_1_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_get_acceptanceCorners_a_corner_list_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_corner_list_V_address0,
        ce0 => a_corner_list_V_ce0,
        we0 => a_corner_list_V_we0,
        d0 => shadow_bottomL_jR_q0,
        q0 => a_corner_list_V_q0,
        address1 => a_corner_list_V_address1,
        ce1 => a_corner_list_V_ce1,
        we1 => a_corner_list_V_we1,
        d1 => shadow_bottomL_jR_q1);

    b_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_corner_list_V_address0,
        ce0 => b_corner_list_V_ce0,
        we0 => b_corner_list_V_we0,
        d0 => shadow_bottomR_jR_q0,
        q0 => b_corner_list_V_q0,
        address1 => b_corner_list_V_address1,
        ce1 => b_corner_list_V_ce1,
        we1 => b_corner_list_V_we1,
        d1 => shadow_bottomR_jR_q1);

    c_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_corner_list_V_address0,
        ce0 => c_corner_list_V_ce0,
        we0 => c_corner_list_V_we0,
        d0 => shadow_bottomL_jL_q0,
        q0 => c_corner_list_V_q0,
        address1 => c_corner_list_V_address1,
        ce1 => c_corner_list_V_ce1,
        we1 => c_corner_list_V_we1,
        d1 => shadow_bottomL_jL_q1);

    d_corner_list_V_U : component system_top_get_acceptanceCorners_a_corner_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_corner_list_V_address0,
        ce0 => d_corner_list_V_ce0,
        we0 => d_corner_list_V_we0,
        d0 => shadow_bottomR_jL_q0,
        q0 => d_corner_list_V_q0,
        address1 => d_corner_list_V_address1,
        ce1 => d_corner_list_V_ce1,
        we1 => d_corner_list_V_we1,
        d1 => shadow_bottomR_jL_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_corner_min_V_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln199_reg_914 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_corner_min_V_reg_595 <= a_corner_min_V_1_fu_748_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                a_corner_min_V_reg_595 <= ap_const_lv32_40000000;
            end if; 
        end if;
    end process;

    b_corner_min_V_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln199_reg_914 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_corner_min_V_reg_608 <= b_corner_min_V_2_fu_762_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                b_corner_min_V_reg_608 <= ap_const_lv32_40000000;
            end if; 
        end if;
    end process;

    c_corner_max_V_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln199_reg_914 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_corner_max_V_reg_621 <= c_corner_max_V_1_fu_776_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                c_corner_max_V_reg_621 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    d_corner_max_V_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln199_reg_914 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                d_corner_max_V_reg_634 <= d_corner_max_V_2_fu_790_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_corner_max_V_reg_634 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_728_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_584 <= add_ln199_fu_722_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_584 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln178_reg_801 <= add_ln178_fu_663_p2;
                z1_max_addr_reg_852 <= zext_ln178_1_fu_669_p1(4 - 1 downto 0);
                z1_min_addr_reg_847 <= zext_ln178_1_fu_669_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln199_reg_914 <= icmp_ln199_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    idxprom_reg_897(1 downto 0) <= idxprom_fu_719_p1(1 downto 0);
            end if;
        end if;
    end process;
    idxprom_reg_897(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln199_fu_728_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln199_fu_728_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln199_fu_728_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_corner_0_address0 <= idxprom_reg_897(2 - 1 downto 0);

    a_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_0_ce0 <= ap_const_logic_1;
        else 
            a_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_0_d0 <= z1_min_q0;

    a_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_0_we0 <= ap_const_logic_1;
        else 
            a_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_1_address0 <= idxprom_reg_897(2 - 1 downto 0);

    a_corner_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_corner_1_ce0 <= ap_const_logic_1;
        else 
            a_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_1_d0 <= a_corner_min_V_reg_595;

    a_corner_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_corner_1_we0 <= ap_const_logic_1;
        else 
            a_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln199_fu_734_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            a_corner_list_V_address0 <= zext_ln199_fu_734_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            a_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    a_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            a_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    a_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            a_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            a_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            a_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_corner_list_V_we0 <= ap_const_logic_1;
        else 
            a_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_corner_list_V_we1 <= ap_const_logic_1;
        else 
            a_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_min_V_1_fu_748_p3 <= 
        a_corner_list_V_q0 when (icmp_ln1495_fu_742_p2(0) = '1') else 
        a_corner_min_V_reg_595;
    add_ln178_1_fu_679_p2 <= std_logic_vector(unsigned(add_ln178_fu_663_p2) + unsigned(ap_const_lv4_1));
    add_ln178_2_fu_693_p2 <= std_logic_vector(unsigned(add_ln178_reg_801) + unsigned(ap_const_lv4_2));
    add_ln178_3_fu_706_p2 <= std_logic_vector(unsigned(add_ln178_reg_801) + unsigned(ap_const_lv4_3));
    add_ln178_fu_663_p2 <= std_logic_vector(unsigned(tmp_fu_655_p3) + unsigned(zext_ln178_fu_651_p1));
    add_ln199_fu_722_p2 <= std_logic_vector(unsigned(i_reg_584) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln199_fu_728_p2)
    begin
        if ((icmp_ln199_fu_728_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_address0 <= idxprom_reg_897(2 - 1 downto 0);

    b_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_0_ce0 <= ap_const_logic_1;
        else 
            b_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_d0 <= z1_max_q0;

    b_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_0_we0 <= ap_const_logic_1;
        else 
            b_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_1_address0 <= idxprom_reg_897(2 - 1 downto 0);

    b_corner_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_corner_1_ce0 <= ap_const_logic_1;
        else 
            b_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_1_d0 <= b_corner_min_V_reg_608;

    b_corner_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_corner_1_we0 <= ap_const_logic_1;
        else 
            b_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln199_fu_734_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            b_corner_list_V_address0 <= zext_ln199_fu_734_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            b_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    b_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            b_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    b_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            b_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            b_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            b_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_corner_list_V_we0 <= ap_const_logic_1;
        else 
            b_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_corner_list_V_we1 <= ap_const_logic_1;
        else 
            b_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_min_V_2_fu_762_p3 <= 
        b_corner_list_V_q0 when (icmp_ln1495_1_fu_756_p2(0) = '1') else 
        b_corner_min_V_reg_608;
    c_corner_0_address0 <= idxprom_reg_897(2 - 1 downto 0);

    c_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_0_ce0 <= ap_const_logic_1;
        else 
            c_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_0_d0 <= z1_min_q0;

    c_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_0_we0 <= ap_const_logic_1;
        else 
            c_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_1_address0 <= idxprom_reg_897(2 - 1 downto 0);

    c_corner_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_corner_1_ce0 <= ap_const_logic_1;
        else 
            c_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_1_d0 <= c_corner_max_V_reg_621;

    c_corner_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_corner_1_we0 <= ap_const_logic_1;
        else 
            c_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln199_fu_734_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            c_corner_list_V_address0 <= zext_ln199_fu_734_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            c_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    c_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            c_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    c_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            c_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            c_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            c_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_corner_list_V_we0 <= ap_const_logic_1;
        else 
            c_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_corner_list_V_we1 <= ap_const_logic_1;
        else 
            c_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_max_V_1_fu_776_p3 <= 
        c_corner_list_V_q0 when (icmp_ln1494_fu_770_p2(0) = '1') else 
        c_corner_max_V_reg_621;
    d_corner_0_address0 <= idxprom_reg_897(2 - 1 downto 0);

    d_corner_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_0_ce0 <= ap_const_logic_1;
        else 
            d_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_0_d0 <= z1_max_q0;

    d_corner_0_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_0_we0 <= ap_const_logic_1;
        else 
            d_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_1_address0 <= idxprom_reg_897(2 - 1 downto 0);

    d_corner_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_corner_1_ce0 <= ap_const_logic_1;
        else 
            d_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_1_d0 <= d_corner_max_V_reg_634;

    d_corner_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_corner_1_we0 <= ap_const_logic_1;
        else 
            d_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln199_fu_734_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            d_corner_list_V_address0 <= zext_ln199_fu_734_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_corner_list_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_corner_list_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            d_corner_list_V_address0 <= "XX";
        end if; 
    end process;


    d_corner_list_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_corner_list_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_corner_list_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            d_corner_list_V_address1 <= "XX";
        end if; 
    end process;


    d_corner_list_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            d_corner_list_V_ce0 <= ap_const_logic_1;
        else 
            d_corner_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            d_corner_list_V_ce1 <= ap_const_logic_1;
        else 
            d_corner_list_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            d_corner_list_V_we0 <= ap_const_logic_1;
        else 
            d_corner_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_list_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            d_corner_list_V_we1 <= ap_const_logic_1;
        else 
            d_corner_list_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_max_V_2_fu_790_p3 <= 
        d_corner_list_V_q0 when (icmp_ln1494_1_fu_784_p2(0) = '1') else 
        d_corner_max_V_reg_634;
    icmp_ln1494_1_fu_784_p2 <= "1" when (signed(d_corner_list_V_q0) > signed(d_corner_max_V_reg_634)) else "0";
    icmp_ln1494_fu_770_p2 <= "1" when (signed(c_corner_list_V_q0) > signed(c_corner_max_V_reg_621)) else "0";
    icmp_ln1495_1_fu_756_p2 <= "1" when (signed(b_corner_list_V_q0) < signed(b_corner_min_V_reg_608)) else "0";
    icmp_ln1495_fu_742_p2 <= "1" when (signed(a_corner_list_V_q0) < signed(a_corner_min_V_reg_595)) else "0";
    icmp_ln199_fu_728_p2 <= "1" when (i_reg_584 = ap_const_lv3_4) else "0";
    idxprom_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop),64));

    shadow_bottomL_jL_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_2_fu_685_p1, zext_ln178_4_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_address0 <= zext_ln178_4_fu_711_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jL_address0 <= zext_ln178_2_fu_685_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jL_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jL_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_1_fu_669_p1, zext_ln178_3_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_address1 <= zext_ln178_3_fu_698_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jL_address1 <= zext_ln178_1_fu_669_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jL_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jL_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jL_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jL_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jL_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_2_fu_685_p1, zext_ln178_4_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_address0 <= zext_ln178_4_fu_711_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jR_address0 <= zext_ln178_2_fu_685_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jR_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jR_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_1_fu_669_p1, zext_ln178_3_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_address1 <= zext_ln178_3_fu_698_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomL_jR_address1 <= zext_ln178_1_fu_669_p1(4 - 1 downto 0);
        else 
            shadow_bottomL_jR_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomL_jR_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jR_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomL_jR_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomL_jR_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_2_fu_685_p1, zext_ln178_4_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_address0 <= zext_ln178_4_fu_711_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jL_address0 <= zext_ln178_2_fu_685_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jL_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jL_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_1_fu_669_p1, zext_ln178_3_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_address1 <= zext_ln178_3_fu_698_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jL_address1 <= zext_ln178_1_fu_669_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jL_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jL_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jL_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jL_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jL_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_2_fu_685_p1, zext_ln178_4_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_address0 <= zext_ln178_4_fu_711_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jR_address0 <= zext_ln178_2_fu_685_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jR_address0 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jR_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln178_1_fu_669_p1, zext_ln178_3_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_address1 <= zext_ln178_3_fu_698_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shadow_bottomR_jR_address1 <= zext_ln178_1_fu_669_p1(4 - 1 downto 0);
        else 
            shadow_bottomR_jR_address1 <= "XXXX";
        end if; 
    end process;


    shadow_bottomR_jR_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jR_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shadow_bottomR_jR_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shadow_bottomR_jR_ce1 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_655_p3 <= (latest_patch_index_constprop & ap_const_lv2_0);
    z1_max_address0 <= z1_max_addr_reg_852;

    z1_max_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z1_max_ce0 <= ap_const_logic_1;
        else 
            z1_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_address0 <= z1_min_addr_reg_847;

    z1_min_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z1_min_ce0 <= ap_const_logic_1;
        else 
            z1_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln178_1_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln178_fu_663_p2),64));
    zext_ln178_2_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln178_1_fu_679_p2),64));
    zext_ln178_3_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln178_2_fu_693_p2),64));
    zext_ln178_4_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln178_3_fu_706_p2),64));
    zext_ln178_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop),4));
    zext_ln199_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_584),64));
end behav;
