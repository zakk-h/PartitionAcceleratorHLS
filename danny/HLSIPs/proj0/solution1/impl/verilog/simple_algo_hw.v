// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="simple_algo_hw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.514000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=39,HLS_VERSION=2019_1}" *)

module simple_algo_hw (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inA_V,
        inB_V,
        outA_V,
        outA_V_ap_vld
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] inA_V;
input  [31:0] inB_V;
output  [31:0] outA_V;
output   outA_V_ap_vld;

reg outA_V_ap_vld;

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        outA_V_ap_vld = 1'b1;
    end else begin
        outA_V_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign outA_V = (inB_V + inA_V);

endmodule //simple_algo_hw
