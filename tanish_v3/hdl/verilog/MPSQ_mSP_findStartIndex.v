// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_mSP_findStartIndex (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_list_address0,
        row_list_ce0,
        row_list_q0,
        row_list_size,
        projectionToRow,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] row_list_address0;
output   row_list_ce0;
input  [31:0] row_list_q0;
input  [31:0] row_list_size;
input  [36:0] projectionToRow;
output  [31:0] ap_return_0;
output  [63:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_list_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] j_reg_65;
reg   [31:0] j_reg_65_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] start_index_write_assign_reg_77;
reg   [63:0] start_value_write_assign_reg_89;
reg   [63:0] p_x_assign_7_reg_101;
wire   [0:0] icmp_ln1662_fu_113_p2;
reg   [0:0] icmp_ln1662_reg_236;
reg   [0:0] icmp_ln1662_reg_236_pp0_iter1_reg;
wire   [31:0] add_ln1662_fu_123_p2;
reg   [31:0] add_ln1662_reg_245;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire  signed [36:0] sub_ln534_fu_133_p2;
reg  signed [36:0] sub_ln534_reg_250;
wire   [36:0] sub_ln180_fu_138_p2;
reg   [36:0] sub_ln180_reg_258;
wire   [63:0] sub_ln180_7_fu_143_p2;
reg   [63:0] sub_ln180_7_reg_263;
wire   [31:0] select_ln1664_fu_190_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] select_ln1664_1_fu_198_p3;
wire   [63:0] select_ln1664_2_fu_206_p3;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_j_phi_fu_69_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] trunc_ln1666_cast_fu_118_p1;
wire    ap_block_pp0_stage1;
wire  signed [36:0] sext_ln1347_fu_129_p1;
wire   [0:0] tmp_fu_152_p3;
wire   [36:0] select_ln180_fu_159_p3;
wire   [0:0] tmp_21_fu_169_p3;
wire  signed [63:0] sext_ln180_1_fu_165_p1;
wire   [63:0] select_ln180_7_fu_177_p3;
wire   [0:0] icmp_ln1664_fu_184_p2;
wire  signed [63:0] sext_ln180_fu_149_p1;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1662_reg_236 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_65 <= add_ln1662_reg_245;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_65 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1662_reg_236_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_x_assign_7_reg_101 <= select_ln1664_2_fu_206_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_x_assign_7_reg_101 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1662_reg_236_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        start_index_write_assign_reg_77 <= select_ln1664_fu_190_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        start_index_write_assign_reg_77 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1662_reg_236_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        start_value_write_assign_reg_89 <= select_ln1664_1_fu_198_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        start_value_write_assign_reg_89 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln1662_reg_245 <= add_ln1662_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1662_reg_236 <= icmp_ln1662_fu_113_p2;
        icmp_ln1662_reg_236_pp0_iter1_reg <= icmp_ln1662_reg_236;
        j_reg_65_pp0_iter1_reg <= j_reg_65;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1662_reg_236 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln180_7_reg_263 <= sub_ln180_7_fu_143_p2;
        sub_ln180_reg_258 <= sub_ln180_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1662_reg_236 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sub_ln534_reg_250 <= sub_ln534_fu_133_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1662_reg_236 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1662_reg_236 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_69_p4 = add_ln1662_reg_245;
    end else begin
        ap_phi_mux_j_phi_fu_69_p4 = j_reg_65;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_list_ce0 = 1'b1;
    end else begin
        row_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1662_fu_123_p2 = (j_reg_65 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = start_index_write_assign_reg_77;

assign ap_return_1 = start_value_write_assign_reg_89;

assign icmp_ln1662_fu_113_p2 = ((ap_phi_mux_j_phi_fu_69_p4 == row_list_size) ? 1'b1 : 1'b0);

assign icmp_ln1664_fu_184_p2 = (($signed(sext_ln180_1_fu_165_p1) < $signed(select_ln180_7_fu_177_p3)) ? 1'b1 : 1'b0);

assign row_list_address0 = trunc_ln1666_cast_fu_118_p1;

assign select_ln1664_1_fu_198_p3 = ((icmp_ln1664_fu_184_p2[0:0] == 1'b1) ? sext_ln180_fu_149_p1 : start_value_write_assign_reg_89);

assign select_ln1664_2_fu_206_p3 = ((icmp_ln1664_fu_184_p2[0:0] == 1'b1) ? sext_ln180_fu_149_p1 : p_x_assign_7_reg_101);

assign select_ln1664_fu_190_p3 = ((icmp_ln1664_fu_184_p2[0:0] == 1'b1) ? j_reg_65_pp0_iter1_reg : start_index_write_assign_reg_77);

assign select_ln180_7_fu_177_p3 = ((tmp_21_fu_169_p3[0:0] == 1'b1) ? sub_ln180_7_reg_263 : p_x_assign_7_reg_101);

assign select_ln180_fu_159_p3 = ((tmp_fu_152_p3[0:0] == 1'b1) ? sub_ln180_reg_258 : sub_ln534_reg_250);

assign sext_ln1347_fu_129_p1 = $signed(row_list_q0);

assign sext_ln180_1_fu_165_p1 = $signed(select_ln180_fu_159_p3);

assign sext_ln180_fu_149_p1 = sub_ln534_reg_250;

assign sub_ln180_7_fu_143_p2 = (64'd0 - p_x_assign_7_reg_101);

assign sub_ln180_fu_138_p2 = ($signed(37'd0) - $signed(sub_ln534_reg_250));

assign sub_ln534_fu_133_p2 = ($signed(sext_ln1347_fu_129_p1) - $signed(projectionToRow));

assign tmp_21_fu_169_p3 = p_x_assign_7_reg_101[32'd63];

assign tmp_fu_152_p3 = sub_ln534_reg_250[32'd36];

assign trunc_ln1666_cast_fu_118_p1 = ap_phi_mux_j_phi_fu_69_p4;

endmodule //MPSQ_mSP_findStartIndex
