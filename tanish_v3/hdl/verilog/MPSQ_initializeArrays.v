// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_initializeArrays (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patches_superpoints_V_address0,
        patches_superpoints_V_ce0,
        patches_superpoints_V_we0,
        patches_superpoints_V_d0,
        patches_parameters_V_address0,
        patches_parameters_V_ce0,
        patches_parameters_V_we0,
        patches_parameters_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state5 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] patches_superpoints_V_address0;
output   patches_superpoints_V_ce0;
output   patches_superpoints_V_we0;
output  [63:0] patches_superpoints_V_d0;
output  [11:0] patches_parameters_V_address0;
output   patches_parameters_V_ce0;
output   patches_parameters_V_we0;
output  [31:0] patches_parameters_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg patches_superpoints_V_ce0;
reg patches_superpoints_V_we0;
reg patches_parameters_V_ce0;
reg patches_parameters_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten13_reg_118;
reg   [5:0] a_reg_129;
reg   [7:0] indvar_flatten_reg_140;
reg   [2:0] b_reg_151;
reg   [4:0] c_reg_162;
reg   [11:0] indvar_flatten59_reg_173;
reg   [7:0] indvar_flatten35_reg_184;
reg   [5:0] a_1_reg_195;
reg   [2:0] b_3_reg_206;
reg   [5:0] indvar_flatten21_reg_217;
reg   [2:0] c_3_reg_228;
reg   [2:0] d_reg_239;
wire   [11:0] add_ln540_1_fu_250_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln540_fu_256_p2;
reg   [0:0] icmp_ln540_reg_680;
reg   [0:0] icmp_ln540_reg_680_pp0_iter1_reg;
wire   [5:0] select_ln540_1_fu_282_p3;
reg   [5:0] select_ln540_1_reg_684;
wire   [4:0] select_ln544_fu_320_p3;
reg   [4:0] select_ln544_reg_691;
wire   [2:0] select_ln544_1_fu_328_p3;
reg   [2:0] select_ln544_1_reg_696;
wire   [4:0] add_ln550_fu_336_p2;
wire   [7:0] select_ln544_2_fu_348_p3;
wire   [11:0] add_ln555_2_fu_392_p2;
reg   [11:0] add_ln555_2_reg_712;
wire   [11:0] add_ln561_1_fu_402_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_state9_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln561_fu_408_p2;
reg   [0:0] icmp_ln561_reg_722;
reg   [0:0] icmp_ln561_reg_722_pp1_iter1_reg;
reg   [0:0] icmp_ln561_reg_722_pp1_iter2_reg;
wire   [0:0] icmp_ln565_fu_414_p2;
reg   [0:0] icmp_ln565_reg_726;
wire   [7:0] select_ln565_2_fu_426_p3;
wire   [5:0] select_ln561_1_fu_447_p3;
reg   [5:0] select_ln561_1_reg_741;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln565_1_fu_524_p3;
reg   [2:0] select_ln565_1_reg_746;
wire   [8:0] add_ln582_1_fu_536_p2;
reg   [8:0] add_ln582_1_reg_751;
wire   [2:0] select_ln571_fu_576_p3;
reg   [2:0] select_ln571_reg_756;
wire   [2:0] select_ln571_1_fu_584_p3;
reg   [2:0] select_ln571_1_reg_761;
wire   [2:0] add_ln577_fu_592_p2;
wire   [5:0] select_ln571_2_fu_604_p3;
wire   [11:0] add_ln582_3_fu_665_p2;
reg   [11:0] add_ln582_3_reg_777;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter2;
reg    ap_condition_pp1_exit_iter1_state7;
reg    ap_enable_reg_pp1_iter3;
reg   [5:0] ap_phi_mux_a_phi_fu_133_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_b_phi_fu_155_p4;
reg   [5:0] ap_phi_mux_a_1_phi_fu_199_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_3_phi_fu_210_p4;
reg   [2:0] ap_phi_mux_c_3_phi_fu_232_p4;
wire   [63:0] zext_ln555_3_fu_398_p1;
wire   [63:0] zext_ln582_5_fu_671_p1;
wire   [0:0] icmp_ln544_fu_268_p2;
wire   [5:0] add_ln540_fu_262_p2;
wire   [0:0] icmp_ln550_fu_296_p2;
wire   [0:0] xor_ln540_fu_290_p2;
wire   [2:0] select_ln540_fu_274_p3;
wire   [0:0] and_ln540_fu_302_p2;
wire   [0:0] or_ln544_fu_314_p2;
wire   [2:0] add_ln544_fu_308_p2;
wire   [7:0] add_ln544_1_fu_342_p2;
wire   [7:0] tmp_fu_359_p3;
wire   [7:0] zext_ln555_fu_356_p1;
wire   [7:0] add_ln555_fu_366_p2;
wire   [7:0] zext_ln555_1_fu_372_p1;
wire   [7:0] add_ln555_1_fu_375_p2;
wire   [11:0] tmp_42_cast_fu_381_p3;
wire   [11:0] zext_ln555_2_fu_389_p1;
wire   [7:0] add_ln565_1_fu_420_p2;
wire   [5:0] add_ln561_fu_434_p2;
wire   [7:0] tmp_s_fu_458_p3;
wire   [8:0] zext_ln582_1_fu_466_p1;
wire   [8:0] zext_ln582_fu_454_p1;
wire   [0:0] icmp_ln577_fu_481_p2;
wire   [0:0] xor_ln561_fu_476_p2;
wire   [0:0] icmp_ln571_fu_493_p2;
wire   [2:0] select_ln561_fu_440_p3;
wire   [0:0] and_ln561_1_fu_499_p2;
wire   [0:0] or_ln565_fu_511_p2;
wire   [2:0] add_ln565_fu_505_p2;
wire   [8:0] add_ln582_fu_470_p2;
wire   [8:0] zext_ln582_2_fu_532_p1;
wire   [0:0] xor_ln565_fu_542_p2;
wire   [0:0] and_ln561_fu_487_p2;
wire   [0:0] or_ln565_1_fu_548_p2;
wire   [2:0] select_ln565_fu_516_p3;
wire   [0:0] and_ln565_fu_553_p2;
wire   [0:0] or_ln571_fu_565_p2;
wire   [0:0] or_ln571_1_fu_571_p2;
wire   [2:0] add_ln571_fu_559_p2;
wire   [5:0] add_ln571_1_fu_598_p2;
wire   [10:0] tmp_23_fu_612_p3;
wire   [62:0] zext_ln571_fu_619_p1;
wire   [62:0] zext_ln582_3_fu_623_p1;
wire   [62:0] add_ln582_2_fu_626_p2;
wire   [8:0] trunc_ln582_fu_632_p1;
wire   [10:0] trunc_ln582_1_fu_644_p1;
wire   [11:0] p_shl2_cast_fu_636_p3;
wire   [11:0] p_shl3_cast_fu_648_p3;
wire   [11:0] sub_ln582_fu_656_p2;
wire   [11:0] zext_ln582_4_fu_662_p1;
wire    ap_CS_fsm_state10;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state7)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_1_reg_195 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        a_1_reg_195 <= select_ln561_1_reg_741;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_129 <= select_ln540_1_reg_684;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_129 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_3_reg_206 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        b_3_reg_206 <= select_ln565_1_reg_746;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_reg_151 <= select_ln544_1_reg_696;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_228 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        c_3_reg_228 <= select_ln571_1_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_162 <= add_ln550_fu_336_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_162 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_reg_239 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln561_reg_722 == 1'd0))) begin
        d_reg_239 <= add_ln577_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_118 <= add_ln540_1_fu_250_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_118 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten21_reg_217 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln561_reg_722 == 1'd0))) begin
        indvar_flatten21_reg_217 <= select_ln571_2_fu_604_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten35_reg_184 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln561_fu_408_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten35_reg_184 <= select_ln565_2_fu_426_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten59_reg_173 <= 12'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln561_fu_408_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten59_reg_173 <= add_ln561_1_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_140 <= select_ln544_2_fu_348_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln555_2_reg_712 <= add_ln555_2_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln561_reg_722 == 1'd0))) begin
        add_ln582_1_reg_751 <= add_ln582_1_fu_536_p2;
        select_ln571_reg_756 <= select_ln571_fu_576_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        add_ln582_3_reg_777 <= add_ln582_3_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln540_reg_680 <= icmp_ln540_fu_256_p2;
        icmp_ln540_reg_680_pp0_iter1_reg <= icmp_ln540_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln561_reg_722 <= icmp_ln561_fu_408_p2;
        icmp_ln561_reg_722_pp1_iter1_reg <= icmp_ln561_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln561_reg_722_pp1_iter2_reg <= icmp_ln561_reg_722_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln561_fu_408_p2 == 1'd0))) begin
        icmp_ln565_reg_726 <= icmp_ln565_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln540_1_reg_684 <= select_ln540_1_fu_282_p3;
        select_ln544_1_reg_696 <= select_ln544_1_fu_328_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln544_reg_691 <= select_ln544_fu_320_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln561_reg_722 == 1'd0))) begin
        select_ln561_1_reg_741 <= select_ln561_1_fu_447_p3;
        select_ln565_1_reg_746 <= select_ln565_1_fu_524_p3;
        select_ln571_1_reg_761 <= select_ln571_1_fu_584_p3;
    end
end

always @ (*) begin
    if ((icmp_ln540_fu_256_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln561_fu_408_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_a_1_phi_fu_199_p4 = select_ln561_1_reg_741;
    end else begin
        ap_phi_mux_a_1_phi_fu_199_p4 = a_1_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_133_p4 = select_ln540_1_reg_684;
    end else begin
        ap_phi_mux_a_phi_fu_133_p4 = a_reg_129;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_b_3_phi_fu_210_p4 = select_ln565_1_reg_746;
    end else begin
        ap_phi_mux_b_3_phi_fu_210_p4 = b_3_reg_206;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_680 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_b_phi_fu_155_p4 = select_ln544_1_reg_696;
    end else begin
        ap_phi_mux_b_phi_fu_155_p4 = b_reg_151;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln561_reg_722_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_c_3_phi_fu_232_p4 = select_ln571_1_reg_761;
    end else begin
        ap_phi_mux_c_3_phi_fu_232_p4 = c_3_reg_228;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        patches_parameters_V_ce0 = 1'b1;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln561_reg_722_pp1_iter2_reg == 1'd0))) begin
        patches_parameters_V_we0 = 1'b1;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        patches_superpoints_V_ce0 = 1'b1;
    end else begin
        patches_superpoints_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_680_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        patches_superpoints_V_we0 = 1'b1;
    end else begin
        patches_superpoints_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln540_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln540_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln540_1_fu_250_p2 = (indvar_flatten13_reg_118 + 12'd1);

assign add_ln540_fu_262_p2 = (ap_phi_mux_a_phi_fu_133_p4 + 6'd1);

assign add_ln544_1_fu_342_p2 = (indvar_flatten_reg_140 + 8'd1);

assign add_ln544_fu_308_p2 = (select_ln540_fu_274_p3 + 3'd1);

assign add_ln550_fu_336_p2 = (select_ln544_fu_320_p3 + 5'd1);

assign add_ln555_1_fu_375_p2 = (add_ln555_fu_366_p2 + zext_ln555_1_fu_372_p1);

assign add_ln555_2_fu_392_p2 = (tmp_42_cast_fu_381_p3 + zext_ln555_2_fu_389_p1);

assign add_ln555_fu_366_p2 = (tmp_fu_359_p3 + zext_ln555_fu_356_p1);

assign add_ln561_1_fu_402_p2 = (indvar_flatten59_reg_173 + 12'd1);

assign add_ln561_fu_434_p2 = (ap_phi_mux_a_1_phi_fu_199_p4 + 6'd1);

assign add_ln565_1_fu_420_p2 = (indvar_flatten35_reg_184 + 8'd1);

assign add_ln565_fu_505_p2 = (select_ln561_fu_440_p3 + 3'd1);

assign add_ln571_1_fu_598_p2 = (indvar_flatten21_reg_217 + 6'd1);

assign add_ln571_fu_559_p2 = (select_ln565_fu_516_p3 + 3'd1);

assign add_ln577_fu_592_p2 = (select_ln571_fu_576_p3 + 3'd1);

assign add_ln582_1_fu_536_p2 = (add_ln582_fu_470_p2 + zext_ln582_2_fu_532_p1);

assign add_ln582_2_fu_626_p2 = (zext_ln571_fu_619_p1 + zext_ln582_3_fu_623_p1);

assign add_ln582_3_fu_665_p2 = (sub_ln582_fu_656_p2 + zext_ln582_4_fu_662_p1);

assign add_ln582_fu_470_p2 = (zext_ln582_1_fu_466_p1 + zext_ln582_fu_454_p1);

assign and_ln540_fu_302_p2 = (xor_ln540_fu_290_p2 & icmp_ln550_fu_296_p2);

assign and_ln561_1_fu_499_p2 = (xor_ln561_fu_476_p2 & icmp_ln571_fu_493_p2);

assign and_ln561_fu_487_p2 = (xor_ln561_fu_476_p2 & icmp_ln577_fu_481_p2);

assign and_ln565_fu_553_p2 = (or_ln565_1_fu_548_p2 & and_ln561_fu_487_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln540_fu_256_p2 = ((indvar_flatten13_reg_118 == 12'd2560) ? 1'b1 : 1'b0);

assign icmp_ln544_fu_268_p2 = ((indvar_flatten_reg_140 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln550_fu_296_p2 = ((c_reg_162 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln561_fu_408_p2 = ((indvar_flatten59_reg_173 == 12'd3840) ? 1'b1 : 1'b0);

assign icmp_ln565_fu_414_p2 = ((indvar_flatten35_reg_184 == 8'd120) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_493_p2 = ((indvar_flatten21_reg_217 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln577_fu_481_p2 = ((d_reg_239 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln544_fu_314_p2 = (icmp_ln544_fu_268_p2 | and_ln540_fu_302_p2);

assign or_ln565_1_fu_548_p2 = (xor_ln565_fu_542_p2 | icmp_ln565_reg_726);

assign or_ln565_fu_511_p2 = (icmp_ln565_reg_726 | and_ln561_1_fu_499_p2);

assign or_ln571_1_fu_571_p2 = (or_ln571_fu_565_p2 | icmp_ln565_reg_726);

assign or_ln571_fu_565_p2 = (and_ln565_fu_553_p2 | and_ln561_1_fu_499_p2);

assign p_shl2_cast_fu_636_p3 = {{trunc_ln582_fu_632_p1}, {3'd0}};

assign p_shl3_cast_fu_648_p3 = {{trunc_ln582_1_fu_644_p1}, {1'd0}};

assign patches_parameters_V_address0 = zext_ln582_5_fu_671_p1;

assign patches_parameters_V_d0 = 32'd0;

assign patches_superpoints_V_address0 = zext_ln555_3_fu_398_p1;

assign patches_superpoints_V_d0 = 64'd0;

assign select_ln540_1_fu_282_p3 = ((icmp_ln544_fu_268_p2[0:0] == 1'b1) ? add_ln540_fu_262_p2 : ap_phi_mux_a_phi_fu_133_p4);

assign select_ln540_fu_274_p3 = ((icmp_ln544_fu_268_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_phi_fu_155_p4);

assign select_ln544_1_fu_328_p3 = ((and_ln540_fu_302_p2[0:0] == 1'b1) ? add_ln544_fu_308_p2 : select_ln540_fu_274_p3);

assign select_ln544_2_fu_348_p3 = ((icmp_ln544_fu_268_p2[0:0] == 1'b1) ? 8'd1 : add_ln544_1_fu_342_p2);

assign select_ln544_fu_320_p3 = ((or_ln544_fu_314_p2[0:0] == 1'b1) ? 5'd0 : c_reg_162);

assign select_ln561_1_fu_447_p3 = ((icmp_ln565_reg_726[0:0] == 1'b1) ? add_ln561_fu_434_p2 : ap_phi_mux_a_1_phi_fu_199_p4);

assign select_ln561_fu_440_p3 = ((icmp_ln565_reg_726[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_3_phi_fu_210_p4);

assign select_ln565_1_fu_524_p3 = ((and_ln561_1_fu_499_p2[0:0] == 1'b1) ? add_ln565_fu_505_p2 : select_ln561_fu_440_p3);

assign select_ln565_2_fu_426_p3 = ((icmp_ln565_fu_414_p2[0:0] == 1'b1) ? 8'd1 : add_ln565_1_fu_420_p2);

assign select_ln565_fu_516_p3 = ((or_ln565_fu_511_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_c_3_phi_fu_232_p4);

assign select_ln571_1_fu_584_p3 = ((and_ln565_fu_553_p2[0:0] == 1'b1) ? add_ln571_fu_559_p2 : select_ln565_fu_516_p3);

assign select_ln571_2_fu_604_p3 = ((or_ln565_fu_511_p2[0:0] == 1'b1) ? 6'd1 : add_ln571_1_fu_598_p2);

assign select_ln571_fu_576_p3 = ((or_ln571_1_fu_571_p2[0:0] == 1'b1) ? 3'd0 : d_reg_239);

assign sub_ln582_fu_656_p2 = (p_shl2_cast_fu_636_p3 - p_shl3_cast_fu_648_p3);

assign tmp_23_fu_612_p3 = {{add_ln582_1_reg_751}, {2'd0}};

assign tmp_42_cast_fu_381_p3 = {{add_ln555_1_fu_375_p2}, {4'd0}};

assign tmp_fu_359_p3 = {{select_ln540_1_reg_684}, {2'd0}};

assign tmp_s_fu_458_p3 = {{select_ln561_1_fu_447_p3}, {2'd0}};

assign trunc_ln582_1_fu_644_p1 = add_ln582_2_fu_626_p2[10:0];

assign trunc_ln582_fu_632_p1 = add_ln582_2_fu_626_p2[8:0];

assign xor_ln540_fu_290_p2 = (icmp_ln544_fu_268_p2 ^ 1'd1);

assign xor_ln561_fu_476_p2 = (icmp_ln565_reg_726 ^ 1'd1);

assign xor_ln565_fu_542_p2 = (icmp_ln571_fu_493_p2 ^ 1'd1);

assign zext_ln555_1_fu_372_p1 = select_ln544_1_reg_696;

assign zext_ln555_2_fu_389_p1 = select_ln544_reg_691;

assign zext_ln555_3_fu_398_p1 = add_ln555_2_reg_712;

assign zext_ln555_fu_356_p1 = select_ln540_1_reg_684;

assign zext_ln571_fu_619_p1 = tmp_23_fu_612_p3;

assign zext_ln582_1_fu_466_p1 = tmp_s_fu_458_p3;

assign zext_ln582_2_fu_532_p1 = select_ln565_1_fu_524_p3;

assign zext_ln582_3_fu_623_p1 = select_ln571_1_reg_761;

assign zext_ln582_4_fu_662_p1 = select_ln571_reg_756;

assign zext_ln582_5_fu_671_p1 = add_ln582_3_reg_777;

assign zext_ln582_fu_454_p1 = select_ln561_1_fu_447_p3;

endmodule //MPSQ_initializeArrays
