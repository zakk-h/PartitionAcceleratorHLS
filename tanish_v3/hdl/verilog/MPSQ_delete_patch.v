// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_delete_patch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n_patches,
        n_patches_ap_vld,
        n_patches_read,
        index,
        patches_superpoints_V_address0,
        patches_superpoints_V_ce0,
        patches_superpoints_V_we0,
        patches_superpoints_V_d0,
        patches_superpoints_V_address1,
        patches_superpoints_V_ce1,
        patches_superpoints_V_q1,
        patches_parameters_V_address0,
        patches_parameters_V_ce0,
        patches_parameters_V_we0,
        patches_parameters_V_d0,
        patches_parameters_V_address1,
        patches_parameters_V_ce1,
        patches_parameters_V_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state8 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state14 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state17 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state20 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] n_patches;
output   n_patches_ap_vld;
input  [7:0] n_patches_read;
input  [8:0] index;
output  [11:0] patches_superpoints_V_address0;
output   patches_superpoints_V_ce0;
output   patches_superpoints_V_we0;
output  [63:0] patches_superpoints_V_d0;
output  [11:0] patches_superpoints_V_address1;
output   patches_superpoints_V_ce1;
input  [63:0] patches_superpoints_V_q1;
output  [11:0] patches_parameters_V_address0;
output   patches_parameters_V_ce0;
output   patches_parameters_V_we0;
output  [31:0] patches_parameters_V_d0;
output  [11:0] patches_parameters_V_address1;
output   patches_parameters_V_ce1;
input  [31:0] patches_parameters_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_patches_ap_vld;
reg[11:0] patches_superpoints_V_address0;
reg patches_superpoints_V_ce0;
reg patches_superpoints_V_we0;
reg[63:0] patches_superpoints_V_d0;
reg patches_superpoints_V_ce1;
reg[11:0] patches_parameters_V_address0;
reg patches_parameters_V_ce0;
reg patches_parameters_V_we0;
reg[31:0] patches_parameters_V_d0;
reg patches_parameters_V_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_205;
reg   [2:0] a_reg_216;
reg   [4:0] b_reg_227;
reg   [6:0] indvar_flatten21_reg_238;
reg   [2:0] a_2_reg_249;
reg   [5:0] indvar_flatten7_reg_260;
reg   [2:0] b_4_reg_271;
reg   [2:0] c_reg_282;
reg   [6:0] empty_91_reg_293;
reg   [6:0] empty_95_reg_304;
wire   [0:0] tmp_29_fu_315_p3;
reg   [0:0] tmp_29_reg_859;
wire   [0:0] icmp_ln444_fu_327_p2;
reg   [0:0] icmp_ln444_reg_863;
wire   [7:0] i_fu_333_p1;
wire   [7:0] sub_fu_337_p2;
reg   [7:0] sub_reg_872;
wire   [0:0] icmp_ln453_fu_343_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln470_fu_374_p2;
reg   [7:0] add_ln470_reg_886;
wire   [10:0] add_ln470_1_fu_396_p2;
reg   [10:0] add_ln470_1_reg_892;
wire   [11:0] empty_88_fu_420_p2;
reg   [11:0] empty_88_reg_898;
wire   [11:0] empty_90_fu_448_p2;
reg   [11:0] empty_90_reg_903;
wire   [6:0] add_ln459_1_fu_454_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln459_fu_460_p2;
reg   [0:0] icmp_ln459_reg_913;
reg   [0:0] icmp_ln459_reg_913_pp0_iter1_reg;
reg   [0:0] icmp_ln459_reg_913_pp0_iter2_reg;
reg   [0:0] icmp_ln459_reg_913_pp0_iter3_reg;
wire   [4:0] select_ln459_fu_478_p3;
reg   [4:0] select_ln459_reg_917;
wire   [2:0] select_ln459_1_fu_486_p3;
reg   [2:0] select_ln459_1_reg_922;
wire   [4:0] add_ln465_fu_494_p2;
wire   [11:0] add_ln470_4_fu_539_p2;
reg   [11:0] add_ln470_4_reg_934;
wire   [11:0] add_ln470_5_fu_545_p2;
reg   [11:0] add_ln470_5_reg_939;
reg   [11:0] add_ln470_5_reg_939_pp0_iter2_reg;
reg   [11:0] add_ln470_5_reg_939_pp0_iter3_reg;
reg   [63:0] patches_superpoints_V_load_reg_949;
reg    ap_enable_reg_pp0_iter3;
wire   [6:0] add_ln475_1_fu_559_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_state12_pp1_stage0_iter3;
wire    ap_block_state13_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln475_fu_565_p2;
reg   [0:0] icmp_ln475_reg_959;
reg   [0:0] icmp_ln475_reg_959_pp1_iter1_reg;
reg   [0:0] icmp_ln475_reg_959_pp1_iter2_reg;
reg   [0:0] icmp_ln475_reg_959_pp1_iter3_reg;
wire   [2:0] select_ln475_1_fu_591_p3;
reg   [2:0] select_ln475_1_reg_963;
wire   [10:0] add_ln492_1_fu_603_p2;
reg   [10:0] add_ln492_1_reg_969;
wire   [2:0] select_ln481_fu_638_p3;
reg   [2:0] select_ln481_reg_974;
wire   [2:0] select_ln481_1_fu_646_p3;
reg   [2:0] select_ln481_1_reg_979;
wire   [2:0] add_ln487_fu_654_p2;
wire   [5:0] select_ln481_2_fu_666_p3;
wire   [11:0] add_ln492_4_fu_783_p2;
reg   [11:0] add_ln492_4_reg_995;
wire   [11:0] add_ln492_5_fu_789_p2;
reg   [11:0] add_ln492_5_reg_1000;
reg   [11:0] add_ln492_5_reg_1000_pp1_iter2_reg;
reg   [11:0] add_ln492_5_reg_1000_pp1_iter3_reg;
reg   [31:0] patches_parameters_V_load_reg_1010;
reg    ap_enable_reg_pp1_iter3;
wire   [7:0] i_12_fu_803_p2;
wire    ap_CS_fsm_state14;
wire   [6:0] empty_92_fu_809_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state15_pp2_stage0_iter0;
wire    ap_block_state16_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] exitcond214_fu_815_p2;
reg   [0:0] exitcond214_reg_1025;
wire   [11:0] empty_94_fu_825_p2;
reg   [11:0] empty_94_reg_1029;
wire   [6:0] empty_96_fu_834_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state18_pp3_stage0_iter0;
wire    ap_block_state19_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] exitcond3_fu_840_p2;
reg   [0:0] exitcond3_reg_1039;
wire   [11:0] empty_98_fu_850_p2;
reg   [11:0] empty_98_reg_1043;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state8;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state15;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state17;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state18;
reg    ap_enable_reg_pp3_iter1;
reg   [7:0] i_11_reg_195;
reg   [2:0] ap_phi_mux_a_phi_fu_220_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_a_2_phi_fu_253_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_4_phi_fu_275_p4;
wire   [63:0] zext_ln470_7_fu_551_p1;
wire   [63:0] zext_ln470_8_fu_555_p1;
wire   [63:0] zext_ln492_5_fu_795_p1;
wire   [63:0] zext_ln492_6_fu_799_p1;
wire   [63:0] p_cast_fu_830_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] p_cast56_fu_855_p1;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_state20;
wire   [8:0] zext_ln444_fu_323_p1;
wire   [4:0] trunc_ln453_fu_348_p1;
wire   [4:0] add_fu_352_p2;
wire   [6:0] tmp_fu_362_p3;
wire   [7:0] zext_ln470_1_fu_370_p1;
wire   [7:0] zext_ln470_fu_358_p1;
wire   [9:0] tmp_s_fu_384_p3;
wire   [10:0] zext_ln470_3_fu_392_p1;
wire   [10:0] zext_ln470_2_fu_380_p1;
wire   [5:0] empty_87_fu_402_p1;
wire   [11:0] tmp_66_cast_fu_405_p3;
wire   [11:0] tmp_25_fu_413_p3;
wire   [4:0] empty_89_fu_426_p1;
wire   [10:0] tmp_26_fu_437_p3;
wire   [11:0] tmp_68_cast_fu_429_p3;
wire   [11:0] tmp_69_cast_fu_444_p1;
wire   [0:0] icmp_ln465_fu_472_p2;
wire   [2:0] add_ln459_fu_466_p2;
wire   [7:0] zext_ln470_4_fu_500_p1;
wire   [7:0] add_ln470_2_fu_503_p2;
wire   [7:0] trunc_ln470_fu_516_p1;
wire   [7:0] zext_ln470_5_fu_519_p1;
wire   [7:0] add_ln470_3_fu_522_p2;
wire   [11:0] tmp_71_cast_fu_508_p3;
wire   [11:0] zext_ln470_6_fu_536_p1;
wire   [11:0] tmp_73_cast_fu_528_p3;
wire   [0:0] icmp_ln481_fu_577_p2;
wire   [2:0] add_ln475_fu_571_p2;
wire   [10:0] zext_ln492_fu_599_p1;
wire   [0:0] icmp_ln487_fu_614_p2;
wire   [0:0] xor_ln475_fu_608_p2;
wire   [2:0] select_ln475_fu_583_p3;
wire   [0:0] and_ln475_fu_620_p2;
wire   [0:0] or_ln481_fu_632_p2;
wire   [2:0] add_ln481_fu_626_p2;
wire   [5:0] add_ln481_1_fu_660_p2;
wire   [7:0] zext_ln492_1_fu_674_p1;
wire   [7:0] add_ln492_fu_677_p2;
wire   [9:0] tmp_30_fu_682_p3;
wire   [12:0] tmp_31_fu_694_p3;
wire   [62:0] zext_ln492_2_fu_690_p1;
wire   [62:0] zext_ln492_3_fu_705_p1;
wire   [62:0] add_ln492_2_fu_708_p2;
wire   [8:0] trunc_ln492_fu_714_p1;
wire   [10:0] trunc_ln492_1_fu_726_p1;
wire   [11:0] p_shl4_cast_fu_718_p3;
wire   [11:0] p_shl5_cast_fu_730_p3;
wire   [62:0] zext_ln481_fu_701_p1;
wire   [62:0] add_ln492_3_fu_744_p2;
wire   [8:0] trunc_ln492_2_fu_750_p1;
wire   [10:0] trunc_ln492_3_fu_762_p1;
wire   [11:0] p_shl2_cast_fu_754_p3;
wire   [11:0] p_shl3_cast_fu_766_p3;
wire   [11:0] sub_ln492_fu_738_p2;
wire   [11:0] zext_ln492_4_fu_780_p1;
wire   [11:0] sub_ln492_1_fu_774_p2;
wire   [11:0] p_cast53_fu_821_p1;
wire   [11:0] p_cast55_fu_846_p1;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln453_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((icmp_ln453_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state9)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln453_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state15) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state15);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((icmp_ln453_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state18) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state18);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        a_2_reg_249 <= 3'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_reg_959 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        a_2_reg_249 <= select_ln475_1_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_reg_913 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_reg_216 <= select_ln459_1_reg_922;
    end else if (((icmp_ln453_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_216 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        b_4_reg_271 <= 3'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_reg_959 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_4_reg_271 <= select_ln481_1_reg_979;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_fu_460_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_reg_227 <= add_ln465_fu_494_p2;
    end else if (((icmp_ln453_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        b_reg_227 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_reg_282 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_fu_565_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_reg_282 <= add_ln487_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond214_fu_815_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_91_reg_293 <= empty_92_fu_809_p2;
    end else if (((icmp_ln453_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_91_reg_293 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        empty_95_reg_304 <= 7'd0;
    end else if (((exitcond3_fu_840_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        empty_95_reg_304 <= empty_96_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_11_reg_195 <= i_12_fu_803_p2;
    end else if (((icmp_ln444_fu_327_p2 == 1'd1) & (tmp_29_fu_315_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_11_reg_195 <= i_fu_333_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten21_reg_238 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_fu_565_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten21_reg_238 <= add_ln475_1_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten7_reg_260 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_fu_565_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten7_reg_260 <= select_ln481_2_fu_666_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_fu_460_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_205 <= add_ln459_1_fu_454_p2;
    end else if (((icmp_ln453_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_205 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln453_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln470_1_reg_892 <= add_ln470_1_fu_396_p2;
        add_ln470_reg_886 <= add_ln470_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_reg_913 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln470_4_reg_934 <= add_ln470_4_fu_539_p2;
        add_ln470_5_reg_939 <= add_ln470_5_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln470_5_reg_939_pp0_iter2_reg <= add_ln470_5_reg_939;
        add_ln470_5_reg_939_pp0_iter3_reg <= add_ln470_5_reg_939_pp0_iter2_reg;
        icmp_ln459_reg_913_pp0_iter2_reg <= icmp_ln459_reg_913_pp0_iter1_reg;
        icmp_ln459_reg_913_pp0_iter3_reg <= icmp_ln459_reg_913_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_fu_565_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln492_1_reg_969 <= add_ln492_1_fu_603_p2;
        select_ln481_reg_974 <= select_ln481_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_reg_959 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln492_4_reg_995 <= add_ln492_4_fu_783_p2;
        add_ln492_5_reg_1000 <= add_ln492_5_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln492_5_reg_1000_pp1_iter2_reg <= add_ln492_5_reg_1000;
        add_ln492_5_reg_1000_pp1_iter3_reg <= add_ln492_5_reg_1000_pp1_iter2_reg;
        icmp_ln475_reg_959_pp1_iter2_reg <= icmp_ln475_reg_959_pp1_iter1_reg;
        icmp_ln475_reg_959_pp1_iter3_reg <= icmp_ln475_reg_959_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln453_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_88_reg_898[11 : 4] <= empty_88_fu_420_p2[11 : 4];
        empty_90_reg_903[11 : 3] <= empty_90_fu_448_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond214_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_94_reg_1029 <= empty_94_fu_825_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_840_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        empty_98_reg_1043 <= empty_98_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        exitcond214_reg_1025 <= exitcond214_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        exitcond3_reg_1039 <= exitcond3_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_315_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln444_reg_863 <= icmp_ln444_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln459_reg_913 <= icmp_ln459_fu_460_p2;
        icmp_ln459_reg_913_pp0_iter1_reg <= icmp_ln459_reg_913;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln475_reg_959 <= icmp_ln475_fu_565_p2;
        icmp_ln475_reg_959_pp1_iter1_reg <= icmp_ln475_reg_959;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln475_reg_959_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_parameters_V_load_reg_1010 <= patches_parameters_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln459_reg_913_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        patches_superpoints_V_load_reg_949 <= patches_superpoints_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_fu_460_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln459_1_reg_922 <= select_ln459_1_fu_486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_fu_460_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln459_reg_917 <= select_ln459_fu_478_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_fu_565_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln475_1_reg_963 <= select_ln475_1_fu_591_p3;
        select_ln481_1_reg_979 <= select_ln481_1_fu_646_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_327_p2 == 1'd1) & (tmp_29_fu_315_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sub_reg_872 <= sub_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_29_reg_859 <= index[32'd8];
    end
end

always @ (*) begin
    if ((icmp_ln459_fu_460_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln475_fu_565_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond214_fu_815_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_840_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_reg_959 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_a_2_phi_fu_253_p4 = select_ln475_1_reg_963;
    end else begin
        ap_phi_mux_a_2_phi_fu_253_p4 = a_2_reg_249;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_reg_913 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_a_phi_fu_220_p4 = select_ln459_1_reg_922;
    end else begin
        ap_phi_mux_a_phi_fu_220_p4 = a_reg_216;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln475_reg_959 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_b_4_phi_fu_275_p4 = select_ln481_1_reg_979;
    end else begin
        ap_phi_mux_b_4_phi_fu_275_p4 = b_4_reg_271;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_863 == 1'd1) & (tmp_29_reg_859 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        n_patches_ap_vld = 1'b1;
    end else begin
        n_patches_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        patches_parameters_V_address0 = p_cast56_fu_855_p1;
    end else if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_parameters_V_address0 = zext_ln492_6_fu_799_p1;
    end else begin
        patches_parameters_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_parameters_V_ce0 = 1'b1;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_parameters_V_ce1 = 1'b1;
    end else begin
        patches_parameters_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        patches_parameters_V_d0 = 32'd0;
    end else if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_parameters_V_d0 = patches_parameters_V_load_reg_1010;
    end else begin
        patches_parameters_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond3_reg_1039 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln475_reg_959_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_parameters_V_we0 = 1'b1;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        patches_superpoints_V_address0 = p_cast_fu_830_p1;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_V_address0 = zext_ln470_8_fu_555_p1;
    end else begin
        patches_superpoints_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        patches_superpoints_V_ce0 = 1'b1;
    end else begin
        patches_superpoints_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        patches_superpoints_V_ce1 = 1'b1;
    end else begin
        patches_superpoints_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        patches_superpoints_V_d0 = 64'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_V_d0 = patches_superpoints_V_load_reg_949;
    end else begin
        patches_superpoints_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond214_reg_1025 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln459_reg_913_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        patches_superpoints_V_we0 = 1'b1;
    end else begin
        patches_superpoints_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln444_fu_327_p2 == 1'd1) & (tmp_29_fu_315_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & ((icmp_ln444_fu_327_p2 == 1'd0) | (tmp_29_fu_315_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln453_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln459_fu_460_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln459_fu_460_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln475_fu_565_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln475_fu_565_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((exitcond214_fu_815_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((exitcond214_fu_815_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((exitcond3_fu_840_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((exitcond3_fu_840_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_352_p2 = (trunc_ln453_fu_348_p1 + 5'd1);

assign add_ln459_1_fu_454_p2 = (indvar_flatten_reg_205 + 7'd1);

assign add_ln459_fu_466_p2 = (ap_phi_mux_a_phi_fu_220_p4 + 3'd1);

assign add_ln465_fu_494_p2 = (select_ln459_fu_478_p3 + 5'd1);

assign add_ln470_1_fu_396_p2 = (zext_ln470_3_fu_392_p1 + zext_ln470_2_fu_380_p1);

assign add_ln470_2_fu_503_p2 = (add_ln470_reg_886 + zext_ln470_4_fu_500_p1);

assign add_ln470_3_fu_522_p2 = (trunc_ln470_fu_516_p1 + zext_ln470_5_fu_519_p1);

assign add_ln470_4_fu_539_p2 = (tmp_71_cast_fu_508_p3 + zext_ln470_6_fu_536_p1);

assign add_ln470_5_fu_545_p2 = (tmp_73_cast_fu_528_p3 + zext_ln470_6_fu_536_p1);

assign add_ln470_fu_374_p2 = (zext_ln470_1_fu_370_p1 + zext_ln470_fu_358_p1);

assign add_ln475_1_fu_559_p2 = (indvar_flatten21_reg_238 + 7'd1);

assign add_ln475_fu_571_p2 = (ap_phi_mux_a_2_phi_fu_253_p4 + 3'd1);

assign add_ln481_1_fu_660_p2 = (indvar_flatten7_reg_260 + 6'd1);

assign add_ln481_fu_626_p2 = (select_ln475_fu_583_p3 + 3'd1);

assign add_ln487_fu_654_p2 = (select_ln481_fu_638_p3 + 3'd1);

assign add_ln492_1_fu_603_p2 = (add_ln470_1_reg_892 + zext_ln492_fu_599_p1);

assign add_ln492_2_fu_708_p2 = (zext_ln492_2_fu_690_p1 + zext_ln492_3_fu_705_p1);

assign add_ln492_3_fu_744_p2 = (zext_ln481_fu_701_p1 + zext_ln492_3_fu_705_p1);

assign add_ln492_4_fu_783_p2 = (sub_ln492_fu_738_p2 + zext_ln492_4_fu_780_p1);

assign add_ln492_5_fu_789_p2 = (sub_ln492_1_fu_774_p2 + zext_ln492_4_fu_780_p1);

assign add_ln492_fu_677_p2 = (add_ln470_reg_886 + zext_ln492_1_fu_674_p1);

assign and_ln475_fu_620_p2 = (xor_ln475_fu_608_p2 & icmp_ln487_fu_614_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign empty_87_fu_402_p1 = sub_reg_872[5:0];

assign empty_88_fu_420_p2 = (tmp_66_cast_fu_405_p3 + tmp_25_fu_413_p3);

assign empty_89_fu_426_p1 = sub_reg_872[4:0];

assign empty_90_fu_448_p2 = (tmp_68_cast_fu_429_p3 - tmp_69_cast_fu_444_p1);

assign empty_92_fu_809_p2 = (empty_91_reg_293 + 7'd1);

assign empty_94_fu_825_p2 = (empty_88_reg_898 + p_cast53_fu_821_p1);

assign empty_96_fu_834_p2 = (empty_95_reg_304 + 7'd1);

assign empty_98_fu_850_p2 = (empty_90_reg_903 + p_cast55_fu_846_p1);

assign exitcond214_fu_815_p2 = ((empty_91_reg_293 == 7'd80) ? 1'b1 : 1'b0);

assign exitcond3_fu_840_p2 = ((empty_95_reg_304 == 7'd120) ? 1'b1 : 1'b0);

assign i_12_fu_803_p2 = (i_11_reg_195 + 8'd1);

assign i_fu_333_p1 = index[7:0];

assign icmp_ln444_fu_327_p2 = (($signed(zext_ln444_fu_323_p1) > $signed(index)) ? 1'b1 : 1'b0);

assign icmp_ln453_fu_343_p2 = ((i_11_reg_195 < sub_reg_872) ? 1'b1 : 1'b0);

assign icmp_ln459_fu_460_p2 = ((indvar_flatten_reg_205 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln465_fu_472_p2 = ((b_reg_227 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln475_fu_565_p2 = ((indvar_flatten21_reg_238 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln481_fu_577_p2 = ((indvar_flatten7_reg_260 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln487_fu_614_p2 = ((c_reg_282 == 3'd6) ? 1'b1 : 1'b0);

assign n_patches = sub_reg_872;

assign or_ln481_fu_632_p2 = (icmp_ln481_fu_577_p2 | and_ln475_fu_620_p2);

assign p_cast53_fu_821_p1 = empty_91_reg_293;

assign p_cast55_fu_846_p1 = empty_95_reg_304;

assign p_cast56_fu_855_p1 = empty_98_reg_1043;

assign p_cast_fu_830_p1 = empty_94_reg_1029;

assign p_shl2_cast_fu_754_p3 = {{trunc_ln492_2_fu_750_p1}, {3'd0}};

assign p_shl3_cast_fu_766_p3 = {{trunc_ln492_3_fu_762_p1}, {1'd0}};

assign p_shl4_cast_fu_718_p3 = {{trunc_ln492_fu_714_p1}, {3'd0}};

assign p_shl5_cast_fu_730_p3 = {{trunc_ln492_1_fu_726_p1}, {1'd0}};

assign patches_parameters_V_address1 = zext_ln492_5_fu_795_p1;

assign patches_superpoints_V_address1 = zext_ln470_7_fu_551_p1;

assign select_ln459_1_fu_486_p3 = ((icmp_ln465_fu_472_p2[0:0] == 1'b1) ? add_ln459_fu_466_p2 : ap_phi_mux_a_phi_fu_220_p4);

assign select_ln459_fu_478_p3 = ((icmp_ln465_fu_472_p2[0:0] == 1'b1) ? 5'd0 : b_reg_227);

assign select_ln475_1_fu_591_p3 = ((icmp_ln481_fu_577_p2[0:0] == 1'b1) ? add_ln475_fu_571_p2 : ap_phi_mux_a_2_phi_fu_253_p4);

assign select_ln475_fu_583_p3 = ((icmp_ln481_fu_577_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_4_phi_fu_275_p4);

assign select_ln481_1_fu_646_p3 = ((and_ln475_fu_620_p2[0:0] == 1'b1) ? add_ln481_fu_626_p2 : select_ln475_fu_583_p3);

assign select_ln481_2_fu_666_p3 = ((icmp_ln481_fu_577_p2[0:0] == 1'b1) ? 6'd1 : add_ln481_1_fu_660_p2);

assign select_ln481_fu_638_p3 = ((or_ln481_fu_632_p2[0:0] == 1'b1) ? 3'd0 : c_reg_282);

assign sub_fu_337_p2 = ($signed(n_patches_read) + $signed(8'd255));

assign sub_ln492_1_fu_774_p2 = (p_shl2_cast_fu_754_p3 - p_shl3_cast_fu_766_p3);

assign sub_ln492_fu_738_p2 = (p_shl4_cast_fu_718_p3 - p_shl5_cast_fu_730_p3);

assign tmp_25_fu_413_p3 = {{sub_reg_872}, {4'd0}};

assign tmp_26_fu_437_p3 = {{sub_reg_872}, {3'd0}};

assign tmp_29_fu_315_p3 = index[32'd8];

assign tmp_30_fu_682_p3 = {{add_ln492_fu_677_p2}, {2'd0}};

assign tmp_31_fu_694_p3 = {{add_ln492_1_reg_969}, {2'd0}};

assign tmp_66_cast_fu_405_p3 = {{empty_87_fu_402_p1}, {6'd0}};

assign tmp_68_cast_fu_429_p3 = {{empty_89_fu_426_p1}, {7'd0}};

assign tmp_69_cast_fu_444_p1 = tmp_26_fu_437_p3;

assign tmp_71_cast_fu_508_p3 = {{add_ln470_2_fu_503_p2}, {4'd0}};

assign tmp_73_cast_fu_528_p3 = {{add_ln470_3_fu_522_p2}, {4'd0}};

assign tmp_fu_362_p3 = {{add_fu_352_p2}, {2'd0}};

assign tmp_s_fu_384_p3 = {{i_11_reg_195}, {2'd0}};

assign trunc_ln453_fu_348_p1 = i_11_reg_195[4:0];

assign trunc_ln470_fu_516_p1 = add_ln470_1_reg_892[7:0];

assign trunc_ln492_1_fu_726_p1 = add_ln492_2_fu_708_p2[10:0];

assign trunc_ln492_2_fu_750_p1 = add_ln492_3_fu_744_p2[8:0];

assign trunc_ln492_3_fu_762_p1 = add_ln492_3_fu_744_p2[10:0];

assign trunc_ln492_fu_714_p1 = add_ln492_2_fu_708_p2[8:0];

assign xor_ln475_fu_608_p2 = (icmp_ln481_fu_577_p2 ^ 1'd1);

assign zext_ln444_fu_323_p1 = n_patches_read;

assign zext_ln470_1_fu_370_p1 = tmp_fu_362_p3;

assign zext_ln470_2_fu_380_p1 = i_11_reg_195;

assign zext_ln470_3_fu_392_p1 = tmp_s_fu_384_p3;

assign zext_ln470_4_fu_500_p1 = select_ln459_1_reg_922;

assign zext_ln470_5_fu_519_p1 = select_ln459_1_reg_922;

assign zext_ln470_6_fu_536_p1 = select_ln459_reg_917;

assign zext_ln470_7_fu_551_p1 = add_ln470_4_reg_934;

assign zext_ln470_8_fu_555_p1 = add_ln470_5_reg_939_pp0_iter3_reg;

assign zext_ln470_fu_358_p1 = add_fu_352_p2;

assign zext_ln481_fu_701_p1 = tmp_31_fu_694_p3;

assign zext_ln492_1_fu_674_p1 = select_ln475_1_reg_963;

assign zext_ln492_2_fu_690_p1 = tmp_30_fu_682_p3;

assign zext_ln492_3_fu_705_p1 = select_ln481_1_reg_979;

assign zext_ln492_4_fu_780_p1 = select_ln481_reg_974;

assign zext_ln492_5_fu_795_p1 = add_ln492_4_reg_995;

assign zext_ln492_6_fu_799_p1 = add_ln492_5_reg_1000_pp1_iter3_reg;

assign zext_ln492_fu_599_p1 = select_ln475_1_fu_591_p3;

always @ (posedge ap_clk) begin
    empty_88_reg_898[3:0] <= 4'b0000;
    empty_90_reg_903[2:0] <= 3'b000;
end

endmodule //MPSQ_delete_patch
