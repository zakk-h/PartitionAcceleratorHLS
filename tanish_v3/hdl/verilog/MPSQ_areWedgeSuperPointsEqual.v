// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_areWedgeSuperPointsEqual (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wsp2_V_address0,
        wsp2_V_ce0,
        wsp2_V_q0,
        wsp2_V_address1,
        wsp2_V_ce1,
        wsp2_V_q1,
        wsp1_V_offset,
        wsp1_V_offset1,
        wsp2_V_offset,
        wsp2_V_offset3,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] wsp2_V_address0;
output   wsp2_V_ce0;
input  [63:0] wsp2_V_q0;
output  [11:0] wsp2_V_address1;
output   wsp2_V_ce1;
input  [63:0] wsp2_V_q1;
input  [4:0] wsp1_V_offset;
input  [2:0] wsp1_V_offset1;
input  [4:0] wsp2_V_offset;
input  [2:0] wsp2_V_offset3;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] wsp2_V_address0;
reg wsp2_V_ce0;
reg[11:0] wsp2_V_address1;
reg wsp2_V_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] reg_91;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] reg_95;
wire   [7:0] add_ln23_1_fu_131_p2;
reg   [7:0] add_ln23_1_reg_218;
wire   [7:0] add_ln23_3_fu_163_p2;
reg   [7:0] add_ln23_3_reg_223;
wire   [11:0] tmp_32_fu_169_p3;
reg   [11:0] tmp_32_reg_228;
wire   [11:0] tmp_33_fu_181_p3;
reg   [11:0] tmp_33_reg_238;
wire   [0:0] grp_fu_99_p2;
reg   [0:0] icmp_ln870_reg_258;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln23_2_fu_176_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln23_5_fu_188_p1;
wire   [63:0] zext_ln870_fu_198_p1;
wire   [63:0] zext_ln870_1_fu_208_p1;
wire   [6:0] tmp_fu_113_p3;
wire   [7:0] zext_ln23_1_fu_121_p1;
wire   [7:0] zext_ln23_fu_109_p1;
wire   [7:0] add_ln23_fu_125_p2;
wire   [7:0] wsp2_V_offset3_cast23_fu_105_p1;
wire   [6:0] tmp_s_fu_145_p3;
wire   [7:0] zext_ln23_4_fu_153_p1;
wire   [7:0] zext_ln23_3_fu_141_p1;
wire   [7:0] add_ln23_2_fu_157_p2;
wire   [7:0] wsp1_V_offset1_cast25_fu_137_p1;
wire   [11:0] or_ln870_fu_193_p2;
wire   [11:0] or_ln870_1_fu_203_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln23_1_reg_218 <= add_ln23_1_fu_131_p2;
        add_ln23_3_reg_223 <= add_ln23_3_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln870_reg_258 <= grp_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_91 <= wsp2_V_q1;
        reg_95 <= wsp2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_32_reg_228[11 : 4] <= tmp_32_fu_169_p3[11 : 4];
        tmp_33_reg_238[11 : 4] <= tmp_33_fu_181_p3[11 : 4];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wsp2_V_address0 = zext_ln870_fu_198_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wsp2_V_address0 = zext_ln23_2_fu_176_p1;
    end else begin
        wsp2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wsp2_V_address1 = zext_ln870_1_fu_208_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wsp2_V_address1 = zext_ln23_5_fu_188_p1;
    end else begin
        wsp2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        wsp2_V_ce0 = 1'b1;
    end else begin
        wsp2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        wsp2_V_ce1 = 1'b1;
    end else begin
        wsp2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_131_p2 = (add_ln23_fu_125_p2 + wsp2_V_offset3_cast23_fu_105_p1);

assign add_ln23_2_fu_157_p2 = (zext_ln23_4_fu_153_p1 + zext_ln23_3_fu_141_p1);

assign add_ln23_3_fu_163_p2 = (add_ln23_2_fu_157_p2 + wsp1_V_offset1_cast25_fu_137_p1);

assign add_ln23_fu_125_p2 = (zext_ln23_1_fu_121_p1 + zext_ln23_fu_109_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = (icmp_ln870_reg_258 & grp_fu_99_p2);

assign grp_fu_99_p2 = ((reg_91 == reg_95) ? 1'b1 : 1'b0);

assign or_ln870_1_fu_203_p2 = (tmp_33_reg_238 | 12'd15);

assign or_ln870_fu_193_p2 = (tmp_32_reg_228 | 12'd15);

assign tmp_32_fu_169_p3 = {{add_ln23_1_reg_218}, {4'd0}};

assign tmp_33_fu_181_p3 = {{add_ln23_3_reg_223}, {4'd0}};

assign tmp_fu_113_p3 = {{wsp2_V_offset}, {2'd0}};

assign tmp_s_fu_145_p3 = {{wsp1_V_offset}, {2'd0}};

assign wsp1_V_offset1_cast25_fu_137_p1 = wsp1_V_offset1;

assign wsp2_V_offset3_cast23_fu_105_p1 = wsp2_V_offset3;

assign zext_ln23_1_fu_121_p1 = tmp_fu_113_p3;

assign zext_ln23_2_fu_176_p1 = tmp_32_fu_169_p3;

assign zext_ln23_3_fu_141_p1 = wsp1_V_offset;

assign zext_ln23_4_fu_153_p1 = tmp_s_fu_145_p3;

assign zext_ln23_5_fu_188_p1 = tmp_33_fu_181_p3;

assign zext_ln23_fu_109_p1 = wsp2_V_offset;

assign zext_ln870_1_fu_208_p1 = or_ln870_1_fu_203_p2;

assign zext_ln870_fu_198_p1 = or_ln870_fu_193_p2;

always @ (posedge ap_clk) begin
    tmp_32_reg_228[3:0] <= 4'b0000;
    tmp_33_reg_238[3:0] <= 4'b0000;
end

endmodule //MPSQ_areWedgeSuperPointsEqual
