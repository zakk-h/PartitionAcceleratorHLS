-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_delete_patch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    index : IN STD_LOGIC_VECTOR (8 downto 0);
    patches_superpoints_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_V_ce0 : OUT STD_LOGIC;
    patches_superpoints_V_we0 : OUT STD_LOGIC;
    patches_superpoints_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_V_ce1 : OUT STD_LOGIC;
    patches_superpoints_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_V_ce0 : OUT STD_LOGIC;
    patches_parameters_V_we0 : OUT STD_LOGIC;
    patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_V_ce1 : OUT STD_LOGIC;
    patches_parameters_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_delete_patch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_205 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_216 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_227 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_238 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_2_reg_249 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_260 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_4_reg_271 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_282 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_91_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_95_reg_304 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_reg_872 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln453_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln470_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln470_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln470_1_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln470_1_reg_892 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_88_fu_420_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_88_reg_898 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_90_fu_448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_90_reg_903 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln459_1_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln459_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_reg_913_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_reg_913_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_reg_913_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln459_fu_478_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln459_reg_917 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln459_1_fu_486_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln459_1_reg_922 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln465_fu_494_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln470_4_fu_539_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln470_4_reg_934 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln470_5_fu_545_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln470_5_reg_939 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln470_5_reg_939_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln470_5_reg_939_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_superpoints_V_load_reg_949 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln475_1_fu_559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln475_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln475_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln475_reg_959_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln475_reg_959_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln475_reg_959_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln475_1_fu_591_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln475_1_reg_963 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln492_1_fu_603_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln492_1_reg_969 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln481_fu_638_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln481_reg_974 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln481_1_fu_646_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln481_1_reg_979 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln487_fu_654_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln481_2_fu_666_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln492_4_fu_783_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln492_4_reg_995 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln492_5_fu_789_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln492_5_reg_1000 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln492_5_reg_1000_pp1_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln492_5_reg_1000_pp1_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_parameters_V_load_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal i_12_fu_803_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal empty_92_fu_809_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond214_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond214_reg_1025 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_94_fu_825_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_94_reg_1029 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_96_fu_834_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state18_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond3_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_98_fu_850_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_98_reg_1043 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal i_11_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_a_phi_fu_220_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_a_2_phi_fu_253_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_4_phi_fu_275_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln470_7_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln470_8_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln492_5_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln492_6_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal p_cast56_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln444_fu_323_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln453_fu_348_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_fu_352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_362_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln470_1_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln470_fu_358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_384_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln470_3_fu_392_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln470_2_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_87_fu_402_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_cast_fu_405_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_fu_413_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_89_fu_426_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_437_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_cast_fu_429_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_cast_fu_444_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln465_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln459_fu_466_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln470_4_fu_500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln470_2_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln470_fu_516_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln470_5_fu_519_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln470_3_fu_522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_cast_fu_508_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln470_6_fu_536_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_cast_fu_528_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln481_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln475_fu_571_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln492_fu_599_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln487_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln475_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln475_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln475_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln481_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln481_fu_626_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln481_1_fu_660_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln492_1_fu_674_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln492_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_682_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_694_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln492_2_fu_690_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln492_3_fu_705_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln492_2_fu_708_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln492_fu_714_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln492_1_fu_726_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_718_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_730_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln481_fu_701_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln492_3_fu_744_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln492_2_fu_750_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln492_3_fu_762_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_754_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_766_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln492_fu_738_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln492_4_fu_780_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln492_1_fu_774_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast53_fu_821_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast55_fu_846_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                a_2_reg_249 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_reg_959 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_2_reg_249 <= select_ln475_1_reg_963;
            end if; 
        end if;
    end process;

    a_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                a_reg_216 <= select_ln459_1_reg_922;
            elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_216 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_4_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                b_4_reg_271 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_reg_959 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_4_reg_271 <= select_ln481_1_reg_979;
            end if; 
        end if;
    end process;

    b_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_fu_460_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                b_reg_227 <= add_ln465_fu_494_p2;
            elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_reg_227 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_reg_282 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c_reg_282 <= add_ln487_fu_654_p2;
            end if; 
        end if;
    end process;

    empty_91_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond214_fu_815_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                empty_91_reg_293 <= empty_92_fu_809_p2;
            elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_91_reg_293 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    empty_95_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                empty_95_reg_304 <= ap_const_lv7_0;
            elsif (((exitcond3_fu_840_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                empty_95_reg_304 <= empty_96_fu_834_p2;
            end if; 
        end if;
    end process;

    i_11_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_11_reg_195 <= i_12_fu_803_p2;
            elsif (((icmp_ln444_fu_327_p2 = ap_const_lv1_1) and (tmp_29_fu_315_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_11_reg_195 <= i_fu_333_p1;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten21_reg_238 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten21_reg_238 <= add_ln475_1_fu_559_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten7_reg_260 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten7_reg_260 <= select_ln481_2_fu_666_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_fu_460_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_205 <= add_ln459_1_fu_454_p2;
            elsif (((icmp_ln453_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_205 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln453_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln470_1_reg_892 <= add_ln470_1_fu_396_p2;
                add_ln470_reg_886 <= add_ln470_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln470_4_reg_934 <= add_ln470_4_fu_539_p2;
                add_ln470_5_reg_939 <= add_ln470_5_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln470_5_reg_939_pp0_iter2_reg <= add_ln470_5_reg_939;
                add_ln470_5_reg_939_pp0_iter3_reg <= add_ln470_5_reg_939_pp0_iter2_reg;
                icmp_ln459_reg_913_pp0_iter2_reg <= icmp_ln459_reg_913_pp0_iter1_reg;
                icmp_ln459_reg_913_pp0_iter3_reg <= icmp_ln459_reg_913_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln492_1_reg_969 <= add_ln492_1_fu_603_p2;
                select_ln481_reg_974 <= select_ln481_fu_638_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_reg_959 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln492_4_reg_995 <= add_ln492_4_fu_783_p2;
                add_ln492_5_reg_1000 <= add_ln492_5_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln492_5_reg_1000_pp1_iter2_reg <= add_ln492_5_reg_1000;
                add_ln492_5_reg_1000_pp1_iter3_reg <= add_ln492_5_reg_1000_pp1_iter2_reg;
                icmp_ln475_reg_959_pp1_iter2_reg <= icmp_ln475_reg_959_pp1_iter1_reg;
                icmp_ln475_reg_959_pp1_iter3_reg <= icmp_ln475_reg_959_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln453_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    empty_88_reg_898(11 downto 4) <= empty_88_fu_420_p2(11 downto 4);
                    empty_90_reg_903(11 downto 3) <= empty_90_fu_448_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond214_fu_815_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                empty_94_reg_1029 <= empty_94_fu_825_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                empty_98_reg_1043 <= empty_98_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                exitcond214_reg_1025 <= exitcond214_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                exitcond3_reg_1039 <= exitcond3_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_fu_315_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln444_reg_863 <= icmp_ln444_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln459_reg_913 <= icmp_ln459_fu_460_p2;
                icmp_ln459_reg_913_pp0_iter1_reg <= icmp_ln459_reg_913;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln475_reg_959 <= icmp_ln475_fu_565_p2;
                icmp_ln475_reg_959_pp1_iter1_reg <= icmp_ln475_reg_959;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln475_reg_959_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                patches_parameters_V_load_reg_1010 <= patches_parameters_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln459_reg_913_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                patches_superpoints_V_load_reg_949 <= patches_superpoints_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_fu_460_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln459_1_reg_922 <= select_ln459_1_fu_486_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_fu_460_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln459_reg_917 <= select_ln459_fu_478_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln475_1_reg_963 <= select_ln475_1_fu_591_p3;
                select_ln481_1_reg_979 <= select_ln481_1_fu_646_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_327_p2 = ap_const_lv1_1) and (tmp_29_fu_315_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sub_reg_872 <= sub_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_29_reg_859 <= index(8 downto 8);
            end if;
        end if;
    end process;
    empty_88_reg_898(3 downto 0) <= "0000";
    empty_90_reg_903(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_29_fu_315_p3, icmp_ln444_fu_327_p2, icmp_ln453_fu_343_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln459_fu_460_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter0, icmp_ln475_fu_565_p2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter0, exitcond214_fu_815_p2, ap_enable_reg_pp3_iter0, exitcond3_fu_840_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln444_fu_327_p2 = ap_const_lv1_1) and (tmp_29_fu_315_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((icmp_ln444_fu_327_p2 = ap_const_lv1_0) or (tmp_29_fu_315_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln453_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln459_fu_460_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln459_fu_460_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln475_fu_565_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((exitcond214_fu_815_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((exitcond214_fu_815_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((exitcond3_fu_840_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((exitcond3_fu_840_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_fu_352_p2 <= std_logic_vector(unsigned(trunc_ln453_fu_348_p1) + unsigned(ap_const_lv5_1));
    add_ln459_1_fu_454_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_205) + unsigned(ap_const_lv7_1));
    add_ln459_fu_466_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_220_p4) + unsigned(ap_const_lv3_1));
    add_ln465_fu_494_p2 <= std_logic_vector(unsigned(select_ln459_fu_478_p3) + unsigned(ap_const_lv5_1));
    add_ln470_1_fu_396_p2 <= std_logic_vector(unsigned(zext_ln470_3_fu_392_p1) + unsigned(zext_ln470_2_fu_380_p1));
    add_ln470_2_fu_503_p2 <= std_logic_vector(unsigned(add_ln470_reg_886) + unsigned(zext_ln470_4_fu_500_p1));
    add_ln470_3_fu_522_p2 <= std_logic_vector(unsigned(trunc_ln470_fu_516_p1) + unsigned(zext_ln470_5_fu_519_p1));
    add_ln470_4_fu_539_p2 <= std_logic_vector(unsigned(tmp_71_cast_fu_508_p3) + unsigned(zext_ln470_6_fu_536_p1));
    add_ln470_5_fu_545_p2 <= std_logic_vector(unsigned(tmp_73_cast_fu_528_p3) + unsigned(zext_ln470_6_fu_536_p1));
    add_ln470_fu_374_p2 <= std_logic_vector(unsigned(zext_ln470_1_fu_370_p1) + unsigned(zext_ln470_fu_358_p1));
    add_ln475_1_fu_559_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_238) + unsigned(ap_const_lv7_1));
    add_ln475_fu_571_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_253_p4) + unsigned(ap_const_lv3_1));
    add_ln481_1_fu_660_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_260) + unsigned(ap_const_lv6_1));
    add_ln481_fu_626_p2 <= std_logic_vector(unsigned(select_ln475_fu_583_p3) + unsigned(ap_const_lv3_1));
    add_ln487_fu_654_p2 <= std_logic_vector(unsigned(select_ln481_fu_638_p3) + unsigned(ap_const_lv3_1));
    add_ln492_1_fu_603_p2 <= std_logic_vector(unsigned(add_ln470_1_reg_892) + unsigned(zext_ln492_fu_599_p1));
    add_ln492_2_fu_708_p2 <= std_logic_vector(unsigned(zext_ln492_2_fu_690_p1) + unsigned(zext_ln492_3_fu_705_p1));
    add_ln492_3_fu_744_p2 <= std_logic_vector(unsigned(zext_ln481_fu_701_p1) + unsigned(zext_ln492_3_fu_705_p1));
    add_ln492_4_fu_783_p2 <= std_logic_vector(unsigned(sub_ln492_fu_738_p2) + unsigned(zext_ln492_4_fu_780_p1));
    add_ln492_5_fu_789_p2 <= std_logic_vector(unsigned(sub_ln492_1_fu_774_p2) + unsigned(zext_ln492_4_fu_780_p1));
    add_ln492_fu_677_p2 <= std_logic_vector(unsigned(add_ln470_reg_886) + unsigned(zext_ln492_1_fu_674_p1));
    and_ln475_fu_620_p2 <= (xor_ln475_fu_608_p2 and icmp_ln487_fu_614_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(5);
    ap_CS_fsm_state17 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(9);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln459_fu_460_p2)
    begin
        if ((icmp_ln459_fu_460_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln475_fu_565_p2)
    begin
        if ((icmp_ln475_fu_565_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state15_assign_proc : process(exitcond214_fu_815_p2)
    begin
        if ((exitcond214_fu_815_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state18_assign_proc : process(exitcond3_fu_840_p2)
    begin
        if ((exitcond3_fu_840_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_253_p4_assign_proc : process(a_2_reg_249, ap_CS_fsm_pp1_stage0, icmp_ln475_reg_959, select_ln475_1_reg_963, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_reg_959 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_2_phi_fu_253_p4 <= select_ln475_1_reg_963;
        else 
            ap_phi_mux_a_2_phi_fu_253_p4 <= a_2_reg_249;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_220_p4_assign_proc : process(a_reg_216, ap_CS_fsm_pp0_stage0, icmp_ln459_reg_913, select_ln459_1_reg_922, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln459_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_a_phi_fu_220_p4 <= select_ln459_1_reg_922;
        else 
            ap_phi_mux_a_phi_fu_220_p4 <= a_reg_216;
        end if; 
    end process;


    ap_phi_mux_b_4_phi_fu_275_p4_assign_proc : process(b_4_reg_271, ap_CS_fsm_pp1_stage0, icmp_ln475_reg_959, select_ln481_1_reg_979, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln475_reg_959 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_b_4_phi_fu_275_p4 <= select_ln481_1_reg_979;
        else 
            ap_phi_mux_b_4_phi_fu_275_p4 <= b_4_reg_271;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_87_fu_402_p1 <= sub_reg_872(6 - 1 downto 0);
    empty_88_fu_420_p2 <= std_logic_vector(unsigned(tmp_66_cast_fu_405_p3) + unsigned(tmp_25_fu_413_p3));
    empty_89_fu_426_p1 <= sub_reg_872(5 - 1 downto 0);
    empty_90_fu_448_p2 <= std_logic_vector(unsigned(tmp_68_cast_fu_429_p3) - unsigned(tmp_69_cast_fu_444_p1));
    empty_92_fu_809_p2 <= std_logic_vector(unsigned(empty_91_reg_293) + unsigned(ap_const_lv7_1));
    empty_94_fu_825_p2 <= std_logic_vector(unsigned(empty_88_reg_898) + unsigned(p_cast53_fu_821_p1));
    empty_96_fu_834_p2 <= std_logic_vector(unsigned(empty_95_reg_304) + unsigned(ap_const_lv7_1));
    empty_98_fu_850_p2 <= std_logic_vector(unsigned(empty_90_reg_903) + unsigned(p_cast55_fu_846_p1));
    exitcond214_fu_815_p2 <= "1" when (empty_91_reg_293 = ap_const_lv7_50) else "0";
    exitcond3_fu_840_p2 <= "1" when (empty_95_reg_304 = ap_const_lv7_78) else "0";
    i_12_fu_803_p2 <= std_logic_vector(unsigned(i_11_reg_195) + unsigned(ap_const_lv8_1));
    i_fu_333_p1 <= index(8 - 1 downto 0);
    icmp_ln444_fu_327_p2 <= "1" when (signed(zext_ln444_fu_323_p1) > signed(index)) else "0";
    icmp_ln453_fu_343_p2 <= "1" when (unsigned(i_11_reg_195) < unsigned(sub_reg_872)) else "0";
    icmp_ln459_fu_460_p2 <= "1" when (indvar_flatten_reg_205 = ap_const_lv7_50) else "0";
    icmp_ln465_fu_472_p2 <= "1" when (b_reg_227 = ap_const_lv5_10) else "0";
    icmp_ln475_fu_565_p2 <= "1" when (indvar_flatten21_reg_238 = ap_const_lv7_78) else "0";
    icmp_ln481_fu_577_p2 <= "1" when (indvar_flatten7_reg_260 = ap_const_lv6_18) else "0";
    icmp_ln487_fu_614_p2 <= "1" when (c_reg_282 = ap_const_lv3_6) else "0";
    n_patches <= sub_reg_872;

    n_patches_ap_vld_assign_proc : process(tmp_29_reg_859, icmp_ln444_reg_863, ap_CS_fsm_state20)
    begin
        if (((icmp_ln444_reg_863 = ap_const_lv1_1) and (tmp_29_reg_859 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln481_fu_632_p2 <= (icmp_ln481_fu_577_p2 or and_ln475_fu_620_p2);
    p_cast53_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_91_reg_293),12));
    p_cast55_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_95_reg_304),12));
    p_cast56_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_98_reg_1043),64));
    p_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_94_reg_1029),64));
    p_shl2_cast_fu_754_p3 <= (trunc_ln492_2_fu_750_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_766_p3 <= (trunc_ln492_3_fu_762_p1 & ap_const_lv1_0);
    p_shl4_cast_fu_718_p3 <= (trunc_ln492_fu_714_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_730_p3 <= (trunc_ln492_1_fu_726_p1 & ap_const_lv1_0);

    patches_parameters_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, zext_ln492_6_fu_799_p1, p_cast56_fu_855_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            patches_parameters_V_address0 <= p_cast56_fu_855_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_V_address0 <= zext_ln492_6_fu_799_p1(12 - 1 downto 0);
        else 
            patches_parameters_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_parameters_V_address1 <= zext_ln492_5_fu_795_p1(12 - 1 downto 0);

    patches_parameters_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_V_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            patches_parameters_V_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_d0_assign_proc : process(patches_parameters_V_load_reg_1010, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            patches_parameters_V_d0 <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_V_d0 <= patches_parameters_V_load_reg_1010;
        else 
            patches_parameters_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln475_reg_959_pp1_iter3_reg, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, exitcond3_reg_1039, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond3_reg_1039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln475_reg_959_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_V_we0 <= ap_const_logic_1;
        else 
            patches_parameters_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, zext_ln470_8_fu_555_p1, p_cast_fu_830_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_superpoints_V_address0 <= p_cast_fu_830_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_V_address0 <= zext_ln470_8_fu_555_p1(12 - 1 downto 0);
        else 
            patches_superpoints_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_superpoints_V_address1 <= zext_ln470_7_fu_551_p1(12 - 1 downto 0);

    patches_superpoints_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            patches_superpoints_V_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            patches_superpoints_V_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_V_d0_assign_proc : process(patches_superpoints_V_load_reg_949, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_superpoints_V_d0 <= ap_const_lv64_0;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_V_d0 <= patches_superpoints_V_load_reg_949;
        else 
            patches_superpoints_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln459_reg_913_pp0_iter3_reg, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, exitcond214_reg_1025, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond214_reg_1025 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln459_reg_913_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            patches_superpoints_V_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln459_1_fu_486_p3 <= 
        add_ln459_fu_466_p2 when (icmp_ln465_fu_472_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_220_p4;
    select_ln459_fu_478_p3 <= 
        ap_const_lv5_0 when (icmp_ln465_fu_472_p2(0) = '1') else 
        b_reg_227;
    select_ln475_1_fu_591_p3 <= 
        add_ln475_fu_571_p2 when (icmp_ln481_fu_577_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_253_p4;
    select_ln475_fu_583_p3 <= 
        ap_const_lv3_0 when (icmp_ln481_fu_577_p2(0) = '1') else 
        ap_phi_mux_b_4_phi_fu_275_p4;
    select_ln481_1_fu_646_p3 <= 
        add_ln481_fu_626_p2 when (and_ln475_fu_620_p2(0) = '1') else 
        select_ln475_fu_583_p3;
    select_ln481_2_fu_666_p3 <= 
        ap_const_lv6_1 when (icmp_ln481_fu_577_p2(0) = '1') else 
        add_ln481_1_fu_660_p2;
    select_ln481_fu_638_p3 <= 
        ap_const_lv3_0 when (or_ln481_fu_632_p2(0) = '1') else 
        c_reg_282;
    sub_fu_337_p2 <= std_logic_vector(unsigned(n_patches_read) + unsigned(ap_const_lv8_FF));
    sub_ln492_1_fu_774_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_754_p3) - unsigned(p_shl3_cast_fu_766_p3));
    sub_ln492_fu_738_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_718_p3) - unsigned(p_shl5_cast_fu_730_p3));
    tmp_25_fu_413_p3 <= (sub_reg_872 & ap_const_lv4_0);
    tmp_26_fu_437_p3 <= (sub_reg_872 & ap_const_lv3_0);
    tmp_29_fu_315_p3 <= index(8 downto 8);
    tmp_30_fu_682_p3 <= (add_ln492_fu_677_p2 & ap_const_lv2_0);
    tmp_31_fu_694_p3 <= (add_ln492_1_reg_969 & ap_const_lv2_0);
    tmp_66_cast_fu_405_p3 <= (empty_87_fu_402_p1 & ap_const_lv6_0);
    tmp_68_cast_fu_429_p3 <= (empty_89_fu_426_p1 & ap_const_lv7_0);
    tmp_69_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_437_p3),12));
    tmp_71_cast_fu_508_p3 <= (add_ln470_2_fu_503_p2 & ap_const_lv4_0);
    tmp_73_cast_fu_528_p3 <= (add_ln470_3_fu_522_p2 & ap_const_lv4_0);
    tmp_fu_362_p3 <= (add_fu_352_p2 & ap_const_lv2_0);
    tmp_s_fu_384_p3 <= (i_11_reg_195 & ap_const_lv2_0);
    trunc_ln453_fu_348_p1 <= i_11_reg_195(5 - 1 downto 0);
    trunc_ln470_fu_516_p1 <= add_ln470_1_reg_892(8 - 1 downto 0);
    trunc_ln492_1_fu_726_p1 <= add_ln492_2_fu_708_p2(11 - 1 downto 0);
    trunc_ln492_2_fu_750_p1 <= add_ln492_3_fu_744_p2(9 - 1 downto 0);
    trunc_ln492_3_fu_762_p1 <= add_ln492_3_fu_744_p2(11 - 1 downto 0);
    trunc_ln492_fu_714_p1 <= add_ln492_2_fu_708_p2(9 - 1 downto 0);
    xor_ln475_fu_608_p2 <= (icmp_ln481_fu_577_p2 xor ap_const_lv1_1);
    zext_ln444_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),9));
    zext_ln470_1_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_362_p3),8));
    zext_ln470_2_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_195),11));
    zext_ln470_3_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_384_p3),11));
    zext_ln470_4_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln459_1_reg_922),8));
    zext_ln470_5_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln459_1_reg_922),8));
    zext_ln470_6_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln459_reg_917),12));
    zext_ln470_7_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln470_4_reg_934),64));
    zext_ln470_8_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln470_5_reg_939_pp0_iter3_reg),64));
    zext_ln470_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_352_p2),8));
    zext_ln481_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_694_p3),63));
    zext_ln492_1_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln475_1_reg_963),8));
    zext_ln492_2_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_682_p3),63));
    zext_ln492_3_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln481_1_reg_979),63));
    zext_ln492_4_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln481_reg_974),12));
    zext_ln492_5_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln492_4_reg_995),64));
    zext_ln492_6_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln492_5_reg_1000_pp1_iter3_reg),64));
    zext_ln492_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln475_1_fu_591_p3),11));
end behav;
