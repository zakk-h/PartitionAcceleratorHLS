-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_getShadows is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wp_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wp_superpoints_ce0 : OUT STD_LOGIC;
    wp_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wp_superpoints_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_we0 : OUT STD_LOGIC;
    wp_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wp_parameters_ce1 : OUT STD_LOGIC;
    wp_parameters_we1 : OUT STD_LOGIC;
    wp_parameters_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    zTopMin : IN STD_LOGIC_VECTOR (31 downto 0);
    zTopMax : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_getShadows is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_1E : STD_LOGIC_VECTOR (11 downto 0) := "000000011110";
    constant ap_const_lv12_24 : STD_LOGIC_VECTOR (11 downto 0) := "000000100100";
    constant ap_const_lv12_2A : STD_LOGIC_VECTOR (11 downto 0) := "000000101010";
    constant ap_const_lv32_FD050F1C : STD_LOGIC_VECTOR (31 downto 0) := "11111101000001010000111100011100";
    constant ap_const_lv32_2FAF0E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000010111110101111000011100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal wp_parameters_addr_reg_783 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters_addr_28_reg_789 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters_addr_29_reg_795 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters_addr_30_reg_801 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln196_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln196_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_fu_360_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln185_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln199_fu_382_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln199_reg_822 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal wp_superpoints_addr_reg_827 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_superpoints_addr_1_reg_832 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln199_fu_427_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln199_reg_840 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln194_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_j_min_V_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_min_V_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln199_1_fu_446_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln199_1_reg_850 : STD_LOGIC_VECTOR (2 downto 0);
    signal z_j_max_V_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_max_V_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln886_fu_559_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln886_reg_863 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal topL_jL_V_3_7_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_7_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln886_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln_fu_606_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln878_12_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_12_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln886_1_fu_634_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln886_1_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln886_10_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_10_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln878_1_fu_662_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln878_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln878_13_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_13_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln212_fu_681_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_10_reg_233 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_NS_fsm_state5 : STD_LOGIC;
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm_state17 : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm_state23 : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln205_1_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln206_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_3_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln197_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal topL_jL_V_3_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_2_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_4_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_5_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_2_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_3_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_2_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_3_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_1_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_2_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_3_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_262_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln205_fu_278_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln205_fu_282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln205_fu_288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln206_fu_299_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln207_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln208_fu_321_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_336_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln196_1_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln196_fu_332_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln878_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_11_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln196_2_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln196_1_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_397_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln197_fu_410_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln199_fu_443_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln886_9_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_11_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal topL_jL_V_3_fu_569_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln212_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_straightLineProjectorFromLayerIJtoK_fu_245 : component MPSQ_straightLineProjectorFromLayerIJtoK
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start,
        ap_done => grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_done,
        ap_idle => grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_idle,
        ap_ready => grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_ready,
        ap_ce => ap_const_logic_1,
        z_i => grp_straightLineProjectorFromLayerIJtoK_fu_245_z_i,
        z_j => grp_straightLineProjectorFromLayerIJtoK_fu_245_z_j,
        i => ap_const_lv3_5,
        j => add_ln199_1_reg_850,
        k => ap_const_lv3_1,
        ap_return => grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return);

    mux_42_32_1_1_U105 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topL_jR_V_3_3_fu_106,
        din1 => topL_jR_V_3_1_fu_98,
        din2 => topL_jR_V_3_2_fu_102,
        din3 => topL_jR_V_3_3_fu_106,
        din4 => trunc_ln886_reg_863,
        dout => phi_ln_fu_606_p6);

    mux_42_32_1_1_U106 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topR_jL_V_3_3_fu_122,
        din1 => topR_jL_V_3_1_fu_114,
        din2 => topR_jL_V_3_2_fu_118,
        din3 => topR_jL_V_3_3_fu_122,
        din4 => trunc_ln886_reg_863,
        dout => phi_ln886_1_fu_634_p6);

    mux_42_32_1_1_U107 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topR_jR_V_3_3_fu_138,
        din1 => topR_jR_V_3_1_fu_130,
        din2 => topR_jR_V_3_2_fu_134,
        din3 => topR_jR_V_3_3_fu_138,
        din4 => trunc_ln886_reg_863,
        dout => phi_ln878_1_fu_662_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state23) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = ap_NS_fsm_state17) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_NS_fsm_state11) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_NS_fsm_state5) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_10_reg_233 <= add_ln212_fu_681_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_10_reg_233 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_reg_222 <= add_ln199_reg_822;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_222 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln196_reg_807 <= add_ln196_fu_348_p2;
                select_ln185_reg_812 <= select_ln185_fu_360_p3;
                select_ln186_reg_817 <= select_ln186_fu_374_p3;
                    wp_parameters_addr_28_reg_789(11 downto 3) <= zext_ln206_fu_305_p1(12 - 1 downto 0)(11 downto 3);
                    wp_parameters_addr_29_reg_795(11 downto 3) <= zext_ln207_fu_316_p1(12 - 1 downto 0)(11 downto 3);
                    wp_parameters_addr_30_reg_801(11 downto 3) <= zext_ln208_fu_327_p1(12 - 1 downto 0)(11 downto 3);
                    wp_parameters_addr_reg_783(11 downto 3) <= zext_ln205_1_fu_294_p1(12 - 1 downto 0)(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln199_1_reg_850 <= add_ln199_1_fu_446_p2;
                z_j_min_V_reg_845 <= z_j_min_V_fu_439_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln199_reg_822 <= add_ln199_fu_382_p2;
                    wp_superpoints_addr_1_reg_832(11 downto 4) <= zext_ln197_fu_416_p1(12 - 1 downto 0)(11 downto 4);
                    wp_superpoints_addr_reg_827(11 downto 4) <= zext_ln196_3_fu_405_p1(12 - 1 downto 0)(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                icmp_ln878_12_reg_884 <= icmp_ln878_12_fu_619_p2;
                phi_ln_reg_879 <= phi_ln_fu_606_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                icmp_ln878_13_reg_902 <= icmp_ln878_13_fu_675_p2;
                phi_ln878_1_reg_897 <= phi_ln878_1_fu_662_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                icmp_ln886_10_reg_893 <= icmp_ln886_10_fu_647_p2;
                phi_ln886_1_reg_888 <= phi_ln886_1_fu_634_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                icmp_ln886_reg_875 <= icmp_ln886_fu_591_p2;
                topL_jL_V_3_7_reg_870 <= topL_jL_V_3_7_fu_583_p3;
                trunc_ln886_reg_863 <= trunc_ln886_fu_559_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_258 <= wp_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (trunc_ln199_reg_840 = ap_const_lv2_0))) then
                topL_jL_V_3_1_fu_78 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (trunc_ln199_reg_840 = ap_const_lv2_1))) then
                topL_jL_V_3_2_fu_82 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (trunc_ln199_reg_840 = ap_const_lv2_2))) then
                topL_jL_V_3_4_fu_86 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (trunc_ln199_reg_840 = ap_const_lv2_3))) then
                topL_jL_V_3_5_fu_90 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln199_reg_840 = ap_const_lv2_1))) then
                topL_jR_V_3_1_fu_98 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln199_reg_840 = ap_const_lv2_2))) then
                topL_jR_V_3_2_fu_102 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln199_reg_840 = ap_const_lv2_3))) then
                topL_jR_V_3_3_fu_106 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln199_reg_840 = ap_const_lv2_0))) then
                topL_jR_V_3_fu_94 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (trunc_ln199_reg_840 = ap_const_lv2_1))) then
                topR_jL_V_3_1_fu_114 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (trunc_ln199_reg_840 = ap_const_lv2_2))) then
                topR_jL_V_3_2_fu_118 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (trunc_ln199_reg_840 = ap_const_lv2_3))) then
                topR_jL_V_3_3_fu_122 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (trunc_ln199_reg_840 = ap_const_lv2_0))) then
                topR_jL_V_3_fu_110 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (trunc_ln199_reg_840 = ap_const_lv2_1))) then
                topR_jR_V_3_1_fu_130 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (trunc_ln199_reg_840 = ap_const_lv2_2))) then
                topR_jR_V_3_2_fu_134 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (trunc_ln199_reg_840 = ap_const_lv2_3))) then
                topR_jR_V_3_3_fu_138 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (trunc_ln199_reg_840 = ap_const_lv2_0))) then
                topR_jR_V_3_fu_126 <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_421_p2 = ap_const_lv1_0))) then
                trunc_ln199_reg_840 <= trunc_ln199_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                z_j_max_V_reg_855 <= z_j_max_V_fu_452_p1;
            end if;
        end if;
    end process;
    wp_parameters_addr_reg_783(2 downto 0) <= "000";
    wp_parameters_addr_28_reg_789(2 downto 0) <= "110";
    wp_parameters_addr_29_reg_795(2 downto 0) <= "100";
    wp_parameters_addr_30_reg_801(2 downto 0) <= "010";
    wp_superpoints_addr_reg_827(3 downto 0) <= "0000";
    wp_superpoints_addr_1_reg_832(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_421_p2, ap_CS_fsm_state31, icmp_ln212_fu_544_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_421_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln212_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln196_1_fu_392_p2 <= std_logic_vector(unsigned(add_ln196_reg_807) + unsigned(zext_ln196_2_fu_388_p1));
    add_ln196_fu_348_p2 <= std_logic_vector(unsigned(zext_ln196_1_fu_344_p1) + unsigned(zext_ln196_fu_332_p1));
    add_ln199_1_fu_446_p2 <= std_logic_vector(unsigned(zext_ln199_fu_443_p1) + unsigned(ap_const_lv3_1));
    add_ln199_fu_382_p2 <= std_logic_vector(unsigned(i_reg_222) + unsigned(ap_const_lv3_1));
    add_ln205_fu_288_p2 <= std_logic_vector(unsigned(sub_ln205_fu_282_p2) + unsigned(ap_const_lv12_18));
    add_ln206_fu_299_p2 <= std_logic_vector(unsigned(sub_ln205_fu_282_p2) + unsigned(ap_const_lv12_1E));
    add_ln207_fu_310_p2 <= std_logic_vector(unsigned(sub_ln205_fu_282_p2) + unsigned(ap_const_lv12_24));
    add_ln208_fu_321_p2 <= std_logic_vector(unsigned(sub_ln205_fu_282_p2) + unsigned(ap_const_lv12_2A));
    add_ln212_fu_681_p2 <= std_logic_vector(unsigned(i_10_reg_233) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);
    ap_NS_fsm_state17 <= ap_NS_fsm(16);
    ap_NS_fsm_state23 <= ap_NS_fsm(22);
    ap_NS_fsm_state5 <= ap_NS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state31, icmp_ln212_fu_544_p2)
    begin
        if ((((icmp_ln212_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, icmp_ln212_fu_544_p2)
    begin
        if (((icmp_ln212_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_245_ap_start_reg;

    grp_straightLineProjectorFromLayerIJtoK_fu_245_z_i_assign_proc : process(select_ln185_reg_812, select_ln186_reg_817, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_245_z_i <= select_ln186_reg_817;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_245_z_i <= select_ln185_reg_812;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_245_z_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_245_z_j_assign_proc : process(z_j_min_V_reg_845, z_j_max_V_reg_855, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_245_z_j <= z_j_max_V_reg_855;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_245_z_j <= z_j_min_V_reg_845;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_245_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln194_fu_421_p2 <= "1" when (i_reg_222 = ap_const_lv3_4) else "0";
    icmp_ln212_fu_544_p2 <= "1" when (i_10_reg_233 = ap_const_lv3_4) else "0";
    icmp_ln878_11_fu_368_p2 <= "1" when (signed(zTopMax) < signed(ap_const_lv32_2FAF0E4)) else "0";
    icmp_ln878_12_fu_619_p2 <= "1" when (signed(phi_ln_fu_606_p6) < signed(reg_258)) else "0";
    icmp_ln878_13_fu_675_p2 <= "1" when (signed(phi_ln878_1_fu_662_p6) < signed(reg_258)) else "0";
    icmp_ln878_fu_354_p2 <= "1" when (signed(zTopMin) < signed(ap_const_lv32_FD050F1C)) else "0";
    icmp_ln886_10_fu_647_p2 <= "1" when (signed(phi_ln886_1_fu_634_p6) > signed(reg_258)) else "0";
    icmp_ln886_11_fu_577_p2 <= "1" when (trunc_ln886_fu_559_p1 = ap_const_lv2_1) else "0";
    icmp_ln886_9_fu_563_p2 <= "1" when (trunc_ln886_fu_559_p1 = ap_const_lv2_2) else "0";
    icmp_ln886_fu_591_p2 <= "1" when (signed(topL_jL_V_3_7_fu_583_p3) > signed(reg_258)) else "0";
    or_ln197_fu_410_p2 <= (tmp_27_fu_397_p3 or ap_const_lv12_F);
    select_ln185_fu_360_p3 <= 
        ap_const_lv32_FD050F1C when (icmp_ln878_fu_354_p2(0) = '1') else 
        zTopMin;
    select_ln186_fu_374_p3 <= 
        zTopMax when (icmp_ln878_11_fu_368_p2(0) = '1') else 
        ap_const_lv32_2FAF0E4;
    sub_ln205_fu_282_p2 <= std_logic_vector(unsigned(tmp_fu_262_p3) - unsigned(zext_ln205_fu_278_p1));
    tmp_23_fu_336_p3 <= (wp_superpoints_offset & ap_const_lv2_0);
    tmp_27_fu_397_p3 <= (add_ln196_1_fu_392_p2 & ap_const_lv4_0);
    tmp_fu_262_p3 <= (wp_parameters_offset & ap_const_lv7_0);
    tmp_s_fu_270_p3 <= (wp_parameters_offset & ap_const_lv3_0);
    topL_jL_V_3_7_fu_583_p3 <= 
        topL_jL_V_3_2_fu_82 when (icmp_ln886_11_fu_577_p2(0) = '1') else 
        topL_jL_V_3_fu_569_p3;
    topL_jL_V_3_fu_569_p3 <= 
        topL_jL_V_3_4_fu_86 when (icmp_ln886_9_fu_563_p2(0) = '1') else 
        topL_jL_V_3_5_fu_90;
    trunc_ln199_fu_427_p1 <= i_reg_222(2 - 1 downto 0);
    trunc_ln886_fu_559_p1 <= i_10_reg_233(2 - 1 downto 0);

    wp_parameters_address0_assign_proc : process(wp_parameters_addr_reg_783, wp_parameters_addr_28_reg_789, wp_parameters_addr_29_reg_795, wp_parameters_addr_30_reg_801, ap_CS_fsm_state2, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            wp_parameters_address0 <= wp_parameters_addr_29_reg_795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            wp_parameters_address0 <= wp_parameters_addr_reg_783;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            wp_parameters_address0 <= wp_parameters_addr_30_reg_801;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_address0 <= wp_parameters_addr_28_reg_789;
        else 
            wp_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_address1_assign_proc : process(wp_parameters_addr_reg_783, wp_parameters_addr_28_reg_789, wp_parameters_addr_29_reg_795, wp_parameters_addr_30_reg_801, ap_CS_fsm_state2, ap_CS_fsm_state43, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            wp_parameters_address1 <= wp_parameters_addr_30_reg_801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            wp_parameters_address1 <= wp_parameters_addr_28_reg_789;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            wp_parameters_address1 <= wp_parameters_addr_29_reg_795;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_address1 <= wp_parameters_addr_reg_783;
        else 
            wp_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state43, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_ce1 <= ap_const_logic_1;
        else 
            wp_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state30, topL_jR_V_3_fu_94, topR_jR_V_3_fu_126)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            wp_parameters_d0 <= topR_jR_V_3_fu_126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters_d0 <= topL_jR_V_3_fu_94;
        else 
            wp_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_d1_assign_proc : process(ap_CS_fsm_state2, topL_jL_V_3_7_reg_870, phi_ln_reg_879, phi_ln886_1_reg_888, phi_ln878_1_reg_897, ap_CS_fsm_state43, ap_CS_fsm_state30, topL_jL_V_3_1_fu_78, topR_jL_V_3_fu_110, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            wp_parameters_d1 <= phi_ln878_1_reg_897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            wp_parameters_d1 <= phi_ln886_1_reg_888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            wp_parameters_d1 <= phi_ln_reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            wp_parameters_d1 <= topL_jL_V_3_7_reg_870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            wp_parameters_d1 <= topR_jL_V_3_fu_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters_d1 <= topL_jL_V_3_1_fu_78;
        else 
            wp_parameters_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_421_p2, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_421_p2 = ap_const_lv1_1)))) then 
            wp_parameters_we0 <= ap_const_logic_1;
        else 
            wp_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_421_p2, icmp_ln886_reg_875, icmp_ln878_12_reg_884, icmp_ln886_10_reg_893, icmp_ln878_13_reg_902, ap_CS_fsm_state43, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln886_10_reg_893 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln878_12_reg_884 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln886_reg_875 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln878_13_reg_902 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_421_p2 = ap_const_lv1_1)))) then 
            wp_parameters_we1 <= ap_const_logic_1;
        else 
            wp_parameters_we1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_address0_assign_proc : process(wp_superpoints_addr_reg_827, wp_superpoints_addr_1_reg_832, ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            wp_superpoints_address0 <= wp_superpoints_addr_1_reg_832;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wp_superpoints_address0 <= wp_superpoints_addr_reg_827;
        else 
            wp_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wp_superpoints_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            wp_superpoints_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z_j_max_V_fu_452_p1 <= wp_superpoints_q0(32 - 1 downto 0);
    z_j_min_V_fu_439_p1 <= wp_superpoints_q0(32 - 1 downto 0);
    zext_ln196_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_336_p3),8));
    zext_ln196_2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_222),8));
    zext_ln196_3_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_397_p3),64));
    zext_ln196_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wp_superpoints_offset),8));
    zext_ln197_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln197_fu_410_p2),64));
    zext_ln199_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln199_reg_840),3));
    zext_ln205_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_fu_288_p2),64));
    zext_ln205_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_270_p3),12));
    zext_ln206_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_fu_299_p2),64));
    zext_ln207_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_fu_310_p2),64));
    zext_ln208_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_321_p2),64));
end behav;
