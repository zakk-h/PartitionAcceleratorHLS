-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_delete_patch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    index : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_delete_patch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv15_2D0 : STD_LOGIC_VECTOR (14 downto 0) := "000001011010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten37_reg_229 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_reg_240 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten13_reg_251 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_262 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_273 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_reg_284 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_reg_295 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten59_reg_306 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_3_reg_317 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten45_reg_328 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_5_reg_339 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_5_reg_350 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln381_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln381_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_107_fu_443_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_107_reg_1212 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln388_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln388_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln388_reg_1222 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1186_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_104_reg_1227 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln398_fu_455_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln398_reg_1232 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln388_fu_463_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln388_reg_1237 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_shl3_cast_fu_467_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_shl3_cast_reg_1242 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln388_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next47_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next47_reg_1251 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln398_fu_502_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln398_reg_1256 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln390_1_fu_508_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln390_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln390_reg_1267 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln390_reg_1267_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln390_1_fu_540_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln390_1_reg_1271 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln392_1_fu_598_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln392_1_reg_1277 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln394_fu_642_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln394_reg_1284 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln394_1_fu_650_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln394_1_reg_1289 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln396_fu_658_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln394_2_fu_670_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln392_2_fu_684_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln398_9_fu_861_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln398_9_reg_1315 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln404_1_fu_871_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln404_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln404_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln404_1_fu_903_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln404_1_reg_1329 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln406_1_fu_1005_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln406_1_reg_1334 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln410_5_fu_1104_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln410_5_reg_1344 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln408_fu_1110_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln406_2_fu_1122_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_111_fu_1134_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal empty_115_fu_1160_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i_reg_219 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_a_phi_fu_244_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_266_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c_phi_fu_288_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_a_3_phi_fu_321_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_5_phi_fu_343_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_110_reg_361 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2622_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_114_reg_372 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond21_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln398_5_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln398_6_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln410_4_fu_1099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln410_5_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast78_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln381_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln381_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_105_fu_419_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_106_fu_431_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_423_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_164_cast_fu_435_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln398_1_fu_459_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln398_3_fu_490_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_shl4_cast_fu_494_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln398_2_fu_486_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln392_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln390_fu_520_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln396_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln390_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln394_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln390_fu_532_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln390_1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln392_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln392_fu_578_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln392_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln390_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln392_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln392_fu_590_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln392_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln394_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln394_1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_fu_624_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln394_1_fu_664_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln392_1_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln398_fu_692_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln398_1_fu_695_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln398_4_fu_700_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln398_2_fu_716_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln398_3_fu_720_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln398_6_fu_726_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_89_fu_704_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln398_5_fu_712_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal sub_ln398_fu_742_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal zext_ln398_1_fu_748_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln398_4_fu_751_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_90_fu_730_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln398_7_fu_738_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal sub_ln398_1_fu_765_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal zext_ln398_2_fu_771_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln398_5_fu_774_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_170_cast_fu_757_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln398_3_fu_788_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln398_6_fu_791_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln398_9_fu_801_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_805_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln398_8_fu_797_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_172_cast_fu_780_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln398_7_fu_819_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln398_11_fu_829_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_833_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln398_10_fu_825_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln398_2_fu_813_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln398_4_fu_847_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln398_8_fu_850_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln398_3_fu_841_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln406_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln404_fu_883_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln410_fu_911_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln410_fu_914_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln410_fu_918_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_91_fu_932_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln398_12_fu_939_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln410_1_fu_943_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln410_1_fu_949_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln410_6_fu_953_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal icmp_ln408_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln404_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln404_fu_895_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln404_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln406_fu_985_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_176_cast_fu_924_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln410_2_fu_1013_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln410_2_fu_1017_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln410_1_fu_1023_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln410_2_fu_1035_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl11_cast_fu_1027_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl12_cast_fu_1039_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_178_cast_fu_959_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln410_3_fu_1053_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln410_3_fu_1059_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln410_4_fu_1071_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_1063_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl10_cast_fu_1075_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln406_fu_997_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln410_fu_1047_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln410_3_fu_1089_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln410_4_fu_1093_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln410_1_fu_1083_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln406_1_fu_1116_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast71_fu_1146_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_113_fu_1150_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of empty_113_fu_1150_p2 : signal is "no";
    signal p_cast72_fu_1172_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_117_fu_1176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1186_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1186_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_mul_mul_15s_11ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_mul_15s_11ns_15_4_1_U91 : component makePatches_ShadowQuilt_fromEdges_mul_mul_15s_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1186_p0,
        din1 => grp_fu_1186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_3_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                a_3_reg_317 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_reg_1325 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_3_reg_317 <= select_ln404_1_reg_1329;
            end if; 
        end if;
    end process;

    a_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                a_reg_240 <= select_ln390_1_reg_1271;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                a_reg_240 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_5_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                b_5_reg_339 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_reg_1325 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_5_reg_339 <= select_ln406_1_reg_1334;
            end if; 
        end if;
    end process;

    b_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                b_reg_262 <= select_ln392_1_reg_1277;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                b_reg_262 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_5_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_5_reg_350 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_fu_877_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c_5_reg_350 <= add_ln408_fu_1110_p2;
            end if; 
        end if;
    end process;

    c_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_reg_284 <= select_ln394_1_reg_1289;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                c_reg_284 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                d_reg_295 <= add_ln396_fu_658_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                d_reg_295 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    empty_110_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_0))) then 
                empty_110_reg_361 <= ap_const_lv10_0;
            elsif (((exitcond2622_fu_1140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                empty_110_reg_361 <= empty_111_fu_1134_p2;
            end if; 
        end if;
    end process;

    empty_114_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                empty_114_reg_372 <= ap_const_lv7_0;
            elsif (((exitcond21_fu_1166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                empty_114_reg_372 <= empty_115_fu_1160_p2;
            end if; 
        end if;
    end process;

    i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_219 <= zext_ln388_fu_449_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_reg_219 <= indvars_iv_next47_reg_1251;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten13_reg_251 <= select_ln392_2_fu_684_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                indvar_flatten13_reg_251 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten37_reg_229 <= add_ln390_1_fu_508_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                indvar_flatten37_reg_229 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten45_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten45_reg_328 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_fu_877_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten45_reg_328 <= select_ln406_2_fu_1122_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten59_reg_306 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_fu_877_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten59_reg_306 <= add_ln404_1_fu_871_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_273 <= select_ln394_2_fu_670_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_273 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln398_9_reg_1315 <= add_ln398_9_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_1))) then
                add_ln398_reg_1256 <= add_ln398_fu_502_p2;
                indvars_iv_next47_reg_1251 <= indvars_iv_next47_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_fu_877_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln410_5_reg_1344 <= add_ln410_5_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                empty_104_reg_1227 <= grp_fu_1186_p2;
                sext_ln388_reg_1222 <= sext_ln388_fu_452_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln381_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    empty_107_reg_1212(11 downto 3) <= empty_107_fu_443_p2(11 downto 3);
                sub_reg_1201 <= sub_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln390_reg_1267 <= icmp_ln390_fu_514_p2;
                icmp_ln390_reg_1267_pp0_iter1_reg <= icmp_ln390_reg_1267;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln404_reg_1325 <= icmp_ln404_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                or_ln381_reg_1197 <= or_ln381_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    p_shl3_cast_reg_1242(61 downto 2) <= p_shl3_cast_fu_467_p3(61 downto 2);
                trunc_ln388_reg_1237 <= trunc_ln388_fu_463_p1;
                trunc_ln398_reg_1232 <= trunc_ln398_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln390_1_reg_1271 <= select_ln390_1_fu_540_p3;
                select_ln392_1_reg_1277 <= select_ln392_1_fu_598_p3;
                select_ln394_1_reg_1289 <= select_ln394_1_fu_650_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln394_reg_1284 <= select_ln394_fu_642_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_fu_877_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln404_1_reg_1329 <= select_ln404_1_fu_903_p3;
                select_ln406_1_reg_1334 <= select_ln406_1_fu_1005_p3;
            end if;
        end if;
    end process;
    empty_107_reg_1212(2 downto 0) <= "000";
    p_shl3_cast_reg_1242(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, or_ln381_fu_403_p2, ap_CS_fsm_state5, icmp_ln388_fu_475_p2, ap_enable_reg_pp0_iter0, icmp_ln390_fu_514_p2, ap_enable_reg_pp1_iter0, icmp_ln404_fu_877_p2, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, exitcond2622_fu_1140_p2, exitcond21_fu_1166_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((or_ln381_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((or_ln381_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln388_fu_475_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln390_fu_514_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln404_fu_877_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln404_fu_877_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state13 => 
                if (((exitcond2622_fu_1140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((exitcond21_fu_1166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln390_1_fu_508_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_229) + unsigned(ap_const_lv10_1));
    add_ln390_fu_520_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_244_p4) + unsigned(ap_const_lv3_1));
    add_ln392_1_fu_678_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_251) + unsigned(ap_const_lv8_1));
    add_ln392_fu_578_p2 <= std_logic_vector(unsigned(select_ln390_fu_532_p3) + unsigned(ap_const_lv2_1));
    add_ln394_1_fu_664_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_273) + unsigned(ap_const_lv7_1));
    add_ln394_fu_624_p2 <= std_logic_vector(unsigned(select_ln392_fu_590_p3) + unsigned(ap_const_lv5_1));
    add_ln396_fu_658_p2 <= std_logic_vector(unsigned(select_ln394_fu_642_p3) + unsigned(ap_const_lv2_1));
    add_ln398_1_fu_695_p2 <= std_logic_vector(unsigned(add_ln398_reg_1256) + unsigned(zext_ln398_fu_692_p1));
    add_ln398_2_fu_716_p2 <= std_logic_vector(unsigned(p_shl3_cast_reg_1242) + unsigned(trunc_ln398_reg_1232));
    add_ln398_3_fu_720_p2 <= std_logic_vector(unsigned(add_ln398_2_fu_716_p2) + unsigned(zext_ln398_fu_692_p1));
    add_ln398_4_fu_751_p2 <= std_logic_vector(unsigned(sub_ln398_fu_742_p2) + unsigned(zext_ln398_1_fu_748_p1));
    add_ln398_5_fu_774_p2 <= std_logic_vector(unsigned(sub_ln398_1_fu_765_p2) + unsigned(zext_ln398_2_fu_771_p1));
    add_ln398_6_fu_791_p2 <= std_logic_vector(unsigned(tmp_170_cast_fu_757_p3) + unsigned(zext_ln398_3_fu_788_p1));
    add_ln398_7_fu_819_p2 <= std_logic_vector(unsigned(tmp_172_cast_fu_780_p3) + unsigned(zext_ln398_3_fu_788_p1));
    add_ln398_8_fu_850_p2 <= std_logic_vector(unsigned(sub_ln398_2_fu_813_p2) + unsigned(zext_ln398_4_fu_847_p1));
    add_ln398_9_fu_861_p2 <= std_logic_vector(unsigned(sub_ln398_3_fu_841_p2) + unsigned(zext_ln398_4_fu_847_p1));
    add_ln398_fu_502_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_494_p3) + unsigned(trunc_ln398_2_fu_486_p1));
    add_ln404_1_fu_871_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_306) + unsigned(ap_const_lv7_1));
    add_ln404_fu_883_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_3_phi_fu_321_p4) + unsigned(ap_const_lv3_1));
    add_ln406_1_fu_1116_p2 <= std_logic_vector(unsigned(indvar_flatten45_reg_328) + unsigned(ap_const_lv6_1));
    add_ln406_fu_985_p2 <= std_logic_vector(unsigned(select_ln404_fu_895_p3) + unsigned(ap_const_lv3_1));
    add_ln408_fu_1110_p2 <= std_logic_vector(unsigned(select_ln406_fu_997_p3) + unsigned(ap_const_lv3_1));
    add_ln410_1_fu_943_p2 <= std_logic_vector(unsigned(tmp_91_fu_932_p3) + unsigned(trunc_ln398_12_fu_939_p1));
    add_ln410_2_fu_1017_p2 <= std_logic_vector(unsigned(tmp_176_cast_fu_924_p3) + unsigned(zext_ln410_2_fu_1013_p1));
    add_ln410_3_fu_1053_p2 <= std_logic_vector(unsigned(tmp_178_cast_fu_959_p3) + unsigned(zext_ln410_2_fu_1013_p1));
    add_ln410_4_fu_1093_p2 <= std_logic_vector(unsigned(sub_ln410_fu_1047_p2) + unsigned(zext_ln410_3_fu_1089_p1));
    add_ln410_5_fu_1104_p2 <= std_logic_vector(unsigned(sub_ln410_1_fu_1083_p2) + unsigned(zext_ln410_3_fu_1089_p1));
    add_ln410_6_fu_953_p2 <= std_logic_vector(unsigned(add_ln410_1_fu_943_p2) + unsigned(zext_ln410_1_fu_949_p1));
    add_ln410_fu_918_p2 <= std_logic_vector(unsigned(trunc_ln410_fu_911_p1) + unsigned(zext_ln410_fu_914_p1));
    and_ln390_1_fu_572_p2 <= (xor_ln390_fu_548_p2 and icmp_ln394_fu_566_p2);
    and_ln390_fu_560_p2 <= (xor_ln390_fu_548_p2 and icmp_ln396_fu_554_p2);
    and_ln392_fu_618_p2 <= (or_ln392_1_fu_612_p2 and and_ln390_fu_560_p2);
    and_ln404_fu_979_p2 <= (xor_ln404_fu_967_p2 and icmp_ln408_fu_973_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln390_fu_514_p2)
    begin
        if ((icmp_ln390_fu_514_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln404_fu_877_p2)
    begin
        if ((icmp_ln404_fu_877_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_3_phi_fu_321_p4_assign_proc : process(a_3_reg_317, ap_CS_fsm_pp1_stage0, icmp_ln404_reg_1325, select_ln404_1_reg_1329, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_reg_1325 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_3_phi_fu_321_p4 <= select_ln404_1_reg_1329;
        else 
            ap_phi_mux_a_3_phi_fu_321_p4 <= a_3_reg_317;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_244_p4_assign_proc : process(a_reg_240, ap_CS_fsm_pp0_stage0, icmp_ln390_reg_1267, select_ln390_1_reg_1271, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_a_phi_fu_244_p4 <= select_ln390_1_reg_1271;
        else 
            ap_phi_mux_a_phi_fu_244_p4 <= a_reg_240;
        end if; 
    end process;


    ap_phi_mux_b_5_phi_fu_343_p4_assign_proc : process(b_5_reg_339, ap_CS_fsm_pp1_stage0, icmp_ln404_reg_1325, select_ln406_1_reg_1334, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_reg_1325 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_b_5_phi_fu_343_p4 <= select_ln406_1_reg_1334;
        else 
            ap_phi_mux_b_5_phi_fu_343_p4 <= b_5_reg_339;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_266_p4_assign_proc : process(b_reg_262, ap_CS_fsm_pp0_stage0, icmp_ln390_reg_1267, select_ln392_1_reg_1277, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_b_phi_fu_266_p4 <= select_ln392_1_reg_1277;
        else 
            ap_phi_mux_b_phi_fu_266_p4 <= b_reg_262;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_288_p4_assign_proc : process(c_reg_284, ap_CS_fsm_pp0_stage0, icmp_ln390_reg_1267, select_ln394_1_reg_1289, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln390_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_phi_fu_288_p4 <= select_ln394_1_reg_1289;
        else 
            ap_phi_mux_c_phi_fu_288_p4 <= c_reg_284;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_105_fu_419_p1 <= sub_fu_409_p2(5 - 1 downto 0);
    empty_106_fu_431_p1 <= sub_fu_409_p2(9 - 1 downto 0);
    empty_107_fu_443_p2 <= std_logic_vector(unsigned(tmp_cast_fu_423_p3) - unsigned(tmp_164_cast_fu_435_p3));
    empty_111_fu_1134_p2 <= std_logic_vector(unsigned(empty_110_reg_361) + unsigned(ap_const_lv10_1));
    empty_113_fu_1150_p2 <= std_logic_vector(signed(empty_104_reg_1227) + signed(p_cast71_fu_1146_p1));
    empty_115_fu_1160_p2 <= std_logic_vector(unsigned(empty_114_reg_372) + unsigned(ap_const_lv7_1));
    empty_117_fu_1176_p2 <= std_logic_vector(unsigned(empty_107_reg_1212) + unsigned(p_cast72_fu_1172_p1));
    exitcond21_fu_1166_p2 <= "1" when (empty_114_reg_372 = ap_const_lv7_78) else "0";
    exitcond2622_fu_1140_p2 <= "1" when (empty_110_reg_361 = ap_const_lv10_2D0) else "0";
    grp_fu_1186_p0 <= sub_fu_409_p2(15 - 1 downto 0);
    grp_fu_1186_p1 <= ap_const_lv15_2D0(11 - 1 downto 0);
    icmp_ln381_fu_391_p2 <= "1" when (signed(index) < signed(n_patches_read)) else "0";
    icmp_ln388_fu_475_p2 <= "1" when (signed(i_reg_219) < signed(sext_ln388_reg_1222)) else "0";
    icmp_ln390_fu_514_p2 <= "1" when (indvar_flatten37_reg_229 = ap_const_lv10_2D0) else "0";
    icmp_ln392_fu_526_p2 <= "1" when (indvar_flatten13_reg_251 = ap_const_lv8_90) else "0";
    icmp_ln394_fu_566_p2 <= "1" when (indvar_flatten_reg_273 = ap_const_lv7_30) else "0";
    icmp_ln396_fu_554_p2 <= "1" when (d_reg_295 = ap_const_lv2_3) else "0";
    icmp_ln404_fu_877_p2 <= "1" when (indvar_flatten59_reg_306 = ap_const_lv7_78) else "0";
    icmp_ln406_fu_889_p2 <= "1" when (indvar_flatten45_reg_328 = ap_const_lv6_18) else "0";
    icmp_ln408_fu_973_p2 <= "1" when (c_5_reg_350 = ap_const_lv3_6) else "0";
    indvars_iv_next47_fu_480_p2 <= std_logic_vector(unsigned(i_reg_219) + unsigned(ap_const_lv64_1));
    n_patches <= sub_reg_1201;

    n_patches_ap_vld_assign_proc : process(or_ln381_reg_1197, ap_CS_fsm_state16)
    begin
        if (((or_ln381_reg_1197 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln381_fu_403_p2 <= (xor_ln381_fu_397_p2 or tmp_fu_383_p3);
    or_ln392_1_fu_612_p2 <= (xor_ln392_fu_606_p2 or icmp_ln392_fu_526_p2);
    or_ln392_fu_584_p2 <= (icmp_ln392_fu_526_p2 or and_ln390_1_fu_572_p2);
    or_ln394_1_fu_636_p2 <= (or_ln394_fu_630_p2 or icmp_ln392_fu_526_p2);
    or_ln394_fu_630_p2 <= (and_ln392_fu_618_p2 or and_ln390_1_fu_572_p2);
    or_ln406_fu_991_p2 <= (icmp_ln406_fu_889_p2 or and_ln404_fu_979_p2);
    p_cast71_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_110_reg_361),15));
    p_cast72_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_114_reg_372),12));
    p_cast78_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_117_fu_1176_p2),64));
    p_cast_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_113_fu_1150_p2),64));
    p_shl10_cast_fu_1075_p3 <= (trunc_ln410_4_fu_1071_p1 & ap_const_lv1_0);
    p_shl11_cast_fu_1027_p3 <= (trunc_ln410_1_fu_1023_p1 & ap_const_lv3_0);
    p_shl12_cast_fu_1039_p3 <= (trunc_ln410_2_fu_1035_p1 & ap_const_lv1_0);
    p_shl3_cast_fu_467_p3 <= (trunc_ln398_1_fu_459_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_494_p3 <= (trunc_ln398_3_fu_490_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_833_p3 <= (trunc_ln398_11_fu_829_p1 & ap_const_lv2_0);
    p_shl6_cast_fu_805_p3 <= (trunc_ln398_9_fu_801_p1 & ap_const_lv2_0);
    p_shl9_cast_fu_1063_p3 <= (trunc_ln410_3_fu_1059_p1 & ap_const_lv3_0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state15, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln410_5_fu_1130_p1, p_cast78_fu_1181_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patches_parameters_address0 <= p_cast78_fu_1181_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_address0 <= zext_ln410_5_fu_1130_p1(12 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_parameters_address1 <= zext_ln410_4_fu_1099_p1(12 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state15, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(patches_parameters_q1, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state15, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patches_parameters_d0 <= ap_const_lv64_0;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_d0 <= patches_parameters_q1;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln404_reg_1325, ap_CS_fsm_state15, ap_enable_reg_pp1_iter1, exitcond21_fu_1166_p2)
    begin
        if ((((exitcond21_fu_1166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln404_reg_1325 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state13, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln398_6_fu_867_p1, p_cast_fu_1155_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patches_superpoints_address0 <= p_cast_fu_1155_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_address0 <= zext_ln398_6_fu_867_p1(15 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    patches_superpoints_address1 <= zext_ln398_5_fu_856_p1(15 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            patches_superpoints_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(patches_superpoints_q1, ap_CS_fsm_state13, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patches_superpoints_d0 <= ap_const_lv64_0;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_d0 <= patches_superpoints_q1;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln390_reg_1267_pp0_iter1_reg, ap_CS_fsm_state13, ap_enable_reg_pp0_iter2, exitcond2622_fu_1140_p2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln390_reg_1267_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond2622_fu_1140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln390_1_fu_540_p3 <= 
        add_ln390_fu_520_p2 when (icmp_ln392_fu_526_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_244_p4;
    select_ln390_fu_532_p3 <= 
        ap_const_lv2_0 when (icmp_ln392_fu_526_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_266_p4;
    select_ln392_1_fu_598_p3 <= 
        add_ln392_fu_578_p2 when (and_ln390_1_fu_572_p2(0) = '1') else 
        select_ln390_fu_532_p3;
    select_ln392_2_fu_684_p3 <= 
        ap_const_lv8_1 when (icmp_ln392_fu_526_p2(0) = '1') else 
        add_ln392_1_fu_678_p2;
    select_ln392_fu_590_p3 <= 
        ap_const_lv5_0 when (or_ln392_fu_584_p2(0) = '1') else 
        ap_phi_mux_c_phi_fu_288_p4;
    select_ln394_1_fu_650_p3 <= 
        add_ln394_fu_624_p2 when (and_ln392_fu_618_p2(0) = '1') else 
        select_ln392_fu_590_p3;
    select_ln394_2_fu_670_p3 <= 
        ap_const_lv7_1 when (or_ln392_fu_584_p2(0) = '1') else 
        add_ln394_1_fu_664_p2;
    select_ln394_fu_642_p3 <= 
        ap_const_lv2_0 when (or_ln394_1_fu_636_p2(0) = '1') else 
        d_reg_295;
    select_ln404_1_fu_903_p3 <= 
        add_ln404_fu_883_p2 when (icmp_ln406_fu_889_p2(0) = '1') else 
        ap_phi_mux_a_3_phi_fu_321_p4;
    select_ln404_fu_895_p3 <= 
        ap_const_lv3_0 when (icmp_ln406_fu_889_p2(0) = '1') else 
        ap_phi_mux_b_5_phi_fu_343_p4;
    select_ln406_1_fu_1005_p3 <= 
        add_ln406_fu_985_p2 when (and_ln404_fu_979_p2(0) = '1') else 
        select_ln404_fu_895_p3;
    select_ln406_2_fu_1122_p3 <= 
        ap_const_lv6_1 when (icmp_ln406_fu_889_p2(0) = '1') else 
        add_ln406_1_fu_1116_p2;
    select_ln406_fu_997_p3 <= 
        ap_const_lv3_0 when (or_ln406_fu_991_p2(0) = '1') else 
        c_5_reg_350;
        sext_ln388_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_reg_1201),64));

    sub_fu_409_p2 <= std_logic_vector(unsigned(n_patches_read) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln398_1_fu_765_p2 <= std_logic_vector(unsigned(tmp_90_fu_730_p3) - unsigned(trunc_ln398_7_fu_738_p1));
    sub_ln398_2_fu_813_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_805_p3) - unsigned(trunc_ln398_8_fu_797_p1));
    sub_ln398_3_fu_841_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_833_p3) - unsigned(trunc_ln398_10_fu_825_p1));
    sub_ln398_fu_742_p2 <= std_logic_vector(unsigned(tmp_89_fu_704_p3) - unsigned(trunc_ln398_5_fu_712_p1));
    sub_ln410_1_fu_1083_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1063_p3) - unsigned(p_shl10_cast_fu_1075_p3));
    sub_ln410_fu_1047_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_1027_p3) - unsigned(p_shl12_cast_fu_1039_p3));
    tmp_164_cast_fu_435_p3 <= (empty_106_fu_431_p1 & ap_const_lv3_0);
    tmp_170_cast_fu_757_p3 <= (add_ln398_4_fu_751_p2 & ap_const_lv4_0);
    tmp_172_cast_fu_780_p3 <= (add_ln398_5_fu_774_p2 & ap_const_lv4_0);
    tmp_176_cast_fu_924_p3 <= (add_ln410_fu_918_p2 & ap_const_lv2_0);
    tmp_178_cast_fu_959_p3 <= (add_ln410_6_fu_953_p2 & ap_const_lv2_0);
    tmp_89_fu_704_p3 <= (trunc_ln398_4_fu_700_p1 & ap_const_lv2_0);
    tmp_90_fu_730_p3 <= (trunc_ln398_6_fu_726_p1 & ap_const_lv2_0);
    tmp_91_fu_932_p3 <= (trunc_ln388_reg_1237 & ap_const_lv2_0);
    tmp_cast_fu_423_p3 <= (empty_105_fu_419_p1 & ap_const_lv7_0);
    tmp_fu_383_p3 <= index(31 downto 31);
    trunc_ln388_fu_463_p1 <= i_reg_219(59 - 1 downto 0);
    trunc_ln398_10_fu_825_p1 <= add_ln398_7_fu_819_p2(15 - 1 downto 0);
    trunc_ln398_11_fu_829_p1 <= add_ln398_7_fu_819_p2(13 - 1 downto 0);
    trunc_ln398_12_fu_939_p1 <= i_reg_219(61 - 1 downto 0);
    trunc_ln398_1_fu_459_p1 <= i_reg_219(60 - 1 downto 0);
    trunc_ln398_2_fu_486_p1 <= indvars_iv_next47_fu_480_p2(62 - 1 downto 0);
    trunc_ln398_3_fu_490_p1 <= indvars_iv_next47_fu_480_p2(60 - 1 downto 0);
    trunc_ln398_4_fu_700_p1 <= add_ln398_1_fu_695_p2(56 - 1 downto 0);
    trunc_ln398_5_fu_712_p1 <= add_ln398_1_fu_695_p2(58 - 1 downto 0);
    trunc_ln398_6_fu_726_p1 <= add_ln398_3_fu_720_p2(56 - 1 downto 0);
    trunc_ln398_7_fu_738_p1 <= add_ln398_3_fu_720_p2(58 - 1 downto 0);
    trunc_ln398_8_fu_797_p1 <= add_ln398_6_fu_791_p2(15 - 1 downto 0);
    trunc_ln398_9_fu_801_p1 <= add_ln398_6_fu_791_p2(13 - 1 downto 0);
    trunc_ln398_fu_455_p1 <= i_reg_219(62 - 1 downto 0);
    trunc_ln410_1_fu_1023_p1 <= add_ln410_2_fu_1017_p2(9 - 1 downto 0);
    trunc_ln410_2_fu_1035_p1 <= add_ln410_2_fu_1017_p2(11 - 1 downto 0);
    trunc_ln410_3_fu_1059_p1 <= add_ln410_3_fu_1053_p2(9 - 1 downto 0);
    trunc_ln410_4_fu_1071_p1 <= add_ln410_3_fu_1053_p2(11 - 1 downto 0);
    trunc_ln410_fu_911_p1 <= add_ln398_reg_1256(61 - 1 downto 0);
    xor_ln381_fu_397_p2 <= (icmp_ln381_fu_391_p2 xor ap_const_lv1_1);
    xor_ln390_fu_548_p2 <= (icmp_ln392_fu_526_p2 xor ap_const_lv1_1);
    xor_ln392_fu_606_p2 <= (icmp_ln394_fu_566_p2 xor ap_const_lv1_1);
    xor_ln404_fu_967_p2 <= (icmp_ln406_fu_889_p2 xor ap_const_lv1_1);
    zext_ln388_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index),64));
    zext_ln398_1_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln392_1_reg_1277),58));
    zext_ln398_2_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln392_1_reg_1277),58));
    zext_ln398_3_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_1_reg_1289),62));
    zext_ln398_4_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_reg_1284),15));
    zext_ln398_5_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln398_8_fu_850_p2),64));
    zext_ln398_6_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln398_9_reg_1315),64));
    zext_ln398_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln390_1_reg_1271),62));
    zext_ln410_1_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln404_1_fu_903_p3),61));
    zext_ln410_2_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln406_1_fu_1005_p3),63));
    zext_ln410_3_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln406_fu_997_p3),12));
    zext_ln410_4_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln410_4_fu_1093_p2),64));
    zext_ln410_5_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln410_5_reg_1344),64));
    zext_ln410_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln404_1_fu_903_p3),61));
end behav;
