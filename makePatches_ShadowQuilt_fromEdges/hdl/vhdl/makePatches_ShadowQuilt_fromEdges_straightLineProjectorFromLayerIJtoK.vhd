-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_straightLineProjectorFromLayerIJtoK is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    z_i : IN STD_LOGIC_VECTOR (63 downto 0);
    z_j : IN STD_LOGIC_VECTOR (63 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    j : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_straightLineProjectorFromLayerIJtoK is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal radii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal radii_ce0 : STD_LOGIC;
    signal radii_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal radii_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal radii_ce1 : STD_LOGIC;
    signal radii_q1 : STD_LOGIC_VECTOR (24 downto 0);
    signal radii_address2 : STD_LOGIC_VECTOR (2 downto 0);
    signal radii_ce2 : STD_LOGIC;
    signal radii_q2 : STD_LOGIC_VECTOR (24 downto 0);
    signal z_i_read_reg_557 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z_i_read_reg_557_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln118_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_603_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_608_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal radii_leverArmF_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln124_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln132_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln124_fu_163_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_153_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln132_fu_180_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln140_fu_197_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal radius_i_1_fu_208_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_j_1_fu_219_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal radius_k_1_fu_230_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln116_fu_237_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln114_fu_215_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln143_fu_241_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln115_fu_226_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln143_1_fu_252_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal data_V_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_284_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_288_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_fu_274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_306_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_326_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_330_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_298_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_342_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal r_V_fu_346_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_352_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal zext_ln662_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_370_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_380_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_423_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_427_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_11_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_1_fu_441_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_1_fu_445_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_469_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i26_cast_cast_cast_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_437_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_481_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal r_V_2_fu_485_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_8_fu_497_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_491_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal zext_ln662_1_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_509_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_1_fu_519_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_6_fu_527_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln145_fu_541_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_7_fu_533_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_127_ce : STD_LOGIC;
    signal grp_fu_131_ce : STD_LOGIC;
    signal grp_fu_135_ce : STD_LOGIC;
    signal grp_fu_139_ce : STD_LOGIC;
    signal grp_fu_143_ce : STD_LOGIC;
    signal grp_fu_147_ce : STD_LOGIC;
    signal grp_fu_150_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to10 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fdiv_32ns_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitofp_32s_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_straightLineProjectorFromLayerIJtoK_radii IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (24 downto 0);
        address2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    radii_U : component makePatches_ShadowQuilt_fromEdges_straightLineProjectorFromLayerIJtoK_radii
    generic map (
        DataWidth => 25,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => radii_address0,
        ce0 => radii_ce0,
        q0 => radii_q0,
        address1 => radii_address1,
        ce1 => radii_ce1,
        q1 => radii_q1,
        address2 => radii_address2,
        ce2 => radii_ce2,
        q2 => radii_q2);

    fmul_32ns_32ns_32_2_max_dsp_1_U38 : component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv2_reg_603_pp0_iter8_reg,
        din1 => radii_leverArmF_reg_623,
        ce => grp_fu_127_ce,
        dout => grp_fu_127_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U39 : component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv3_reg_608_pp0_iter8_reg,
        din1 => radii_leverArmF_reg_623,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);

    fdiv_32ns_32ns_32_6_no_dsp_1_U40 : component makePatches_ShadowQuilt_fromEdges_fdiv_32ns_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_613,
        din1 => conv1_reg_618,
        ce => grp_fu_135_ce,
        dout => grp_fu_135_p2);

    sitofp_64ns_32_2_no_dsp_1_U41 : component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => z_j,
        ce => grp_fu_139_ce,
        dout => grp_fu_139_p1);

    sitofp_64ns_32_2_no_dsp_1_U42 : component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => z_i,
        ce => grp_fu_143_ce,
        dout => grp_fu_143_p1);

    sitofp_32s_32_2_no_dsp_1_U43 : component makePatches_ShadowQuilt_fromEdges_sitofp_32s_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p1);

    sitofp_32s_32_2_no_dsp_1_U44 : component makePatches_ShadowQuilt_fromEdges_sitofp_32s_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_150_p0,
        ce => grp_fu_150_ce,
        dout => grp_fu_150_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                conv1_reg_618 <= grp_fu_150_p1;
                conv2_reg_603_pp0_iter2_reg <= conv2_reg_603;
                conv2_reg_603_pp0_iter3_reg <= conv2_reg_603_pp0_iter2_reg;
                conv2_reg_603_pp0_iter4_reg <= conv2_reg_603_pp0_iter3_reg;
                conv2_reg_603_pp0_iter5_reg <= conv2_reg_603_pp0_iter4_reg;
                conv2_reg_603_pp0_iter6_reg <= conv2_reg_603_pp0_iter5_reg;
                conv2_reg_603_pp0_iter7_reg <= conv2_reg_603_pp0_iter6_reg;
                conv2_reg_603_pp0_iter8_reg <= conv2_reg_603_pp0_iter7_reg;
                conv3_reg_608_pp0_iter2_reg <= conv3_reg_608;
                conv3_reg_608_pp0_iter3_reg <= conv3_reg_608_pp0_iter2_reg;
                conv3_reg_608_pp0_iter4_reg <= conv3_reg_608_pp0_iter3_reg;
                conv3_reg_608_pp0_iter5_reg <= conv3_reg_608_pp0_iter4_reg;
                conv3_reg_608_pp0_iter6_reg <= conv3_reg_608_pp0_iter5_reg;
                conv3_reg_608_pp0_iter7_reg <= conv3_reg_608_pp0_iter6_reg;
                conv3_reg_608_pp0_iter8_reg <= conv3_reg_608_pp0_iter7_reg;
                conv_reg_613 <= grp_fu_147_p1;
                dc_1_reg_634 <= grp_fu_131_p2;
                dc_reg_629 <= grp_fu_127_p2;
                radii_leverArmF_reg_623 <= grp_fu_135_p2;
                z_i_read_reg_557_pp0_iter10_reg <= z_i_read_reg_557_pp0_iter9_reg;
                z_i_read_reg_557_pp0_iter2_reg <= z_i_read_reg_557_pp0_iter1_reg;
                z_i_read_reg_557_pp0_iter3_reg <= z_i_read_reg_557_pp0_iter2_reg;
                z_i_read_reg_557_pp0_iter4_reg <= z_i_read_reg_557_pp0_iter3_reg;
                z_i_read_reg_557_pp0_iter5_reg <= z_i_read_reg_557_pp0_iter4_reg;
                z_i_read_reg_557_pp0_iter6_reg <= z_i_read_reg_557_pp0_iter5_reg;
                z_i_read_reg_557_pp0_iter7_reg <= z_i_read_reg_557_pp0_iter6_reg;
                z_i_read_reg_557_pp0_iter8_reg <= z_i_read_reg_557_pp0_iter7_reg;
                z_i_read_reg_557_pp0_iter9_reg <= z_i_read_reg_557_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv2_reg_603 <= grp_fu_139_p1;
                conv3_reg_608 <= grp_fu_143_p1;
                icmp_ln118_reg_563 <= icmp_ln118_fu_157_p2;
                icmp_ln126_reg_573 <= icmp_ln126_fu_174_p2;
                icmp_ln134_reg_583 <= icmp_ln134_fu_191_p2;
                z_i_read_reg_557 <= z_i;
                z_i_read_reg_557_pp0_iter1_reg <= z_i_read_reg_557;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln124_fu_163_p2 <= std_logic_vector(unsigned(i) + unsigned(ap_const_lv3_7));
    add_ln132_fu_180_p2 <= std_logic_vector(unsigned(empty_fu_153_p1) + unsigned(ap_const_lv3_7));
    add_ln140_fu_197_p2 <= std_logic_vector(unsigned(k) + unsigned(ap_const_lv3_7));
    add_ln145_fu_541_p2 <= std_logic_vector(unsigned(result_V_fu_394_p3) + unsigned(z_i_read_reg_557_pp0_iter10_reg));
    add_ln341_1_fu_445_p2 <= std_logic_vector(unsigned(zext_ln341_1_fu_441_p1) + unsigned(ap_const_lv9_181));
    add_ln341_fu_306_p2 <= std_logic_vector(unsigned(zext_ln341_fu_302_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to10)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to10 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln145_fu_541_p2) - unsigned(result_V_7_fu_533_p3));
    data_V_1_fu_402_p1 <= dc_1_reg_634;
    data_V_fu_263_p1 <= dc_reg_629;
    empty_fu_153_p1 <= j(3 - 1 downto 0);

    grp_fu_127_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_127_ce <= ap_const_logic_1;
        else 
            grp_fu_127_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_131_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_131_ce <= ap_const_logic_1;
        else 
            grp_fu_131_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_135_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_135_ce <= ap_const_logic_1;
        else 
            grp_fu_135_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_139_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_139_ce <= ap_const_logic_1;
        else 
            grp_fu_139_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_143_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_143_ce <= ap_const_logic_1;
        else 
            grp_fu_143_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_147_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_147_ce <= ap_const_logic_1;
        else 
            grp_fu_147_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_147_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln143_fu_241_p2),32));


    grp_fu_150_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_150_ce <= ap_const_logic_1;
        else 
            grp_fu_150_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_150_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln143_1_fu_252_p2),32));

    icmp_ln118_fu_157_p2 <= "1" when (i = ap_const_lv3_0) else "0";
    icmp_ln126_fu_174_p2 <= "1" when (j = ap_const_lv32_0) else "0";
    icmp_ln134_fu_191_p2 <= "1" when (k = ap_const_lv3_0) else "0";
    isNeg_1_fu_451_p3 <= add_ln341_1_fu_445_p2(8 downto 8);
    isNeg_fu_312_p3 <= add_ln341_fu_306_p2(8 downto 8);
    mantissa_1_fu_427_p4 <= ((ap_const_lv1_1 & tmp_12_fu_423_p1) & ap_const_lv1_0);
    mantissa_fu_288_p4 <= ((ap_const_lv1_1 & tmp_10_fu_284_p1) & ap_const_lv1_0);
    p_Result_1_fu_405_p3 <= data_V_1_fu_402_p1(31 downto 31);
    p_Result_s_fu_266_p3 <= data_V_fu_263_p1(31 downto 31);
    r_V_1_fu_352_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_298_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_342_p1(31-1 downto 0)))));
    r_V_2_fu_485_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_437_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_481_p1(31-1 downto 0)))));
    r_V_3_fu_491_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_437_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_481_p1(31-1 downto 0)))));
    r_V_fu_346_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_298_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_342_p1(31-1 downto 0)))));
    radii_address0 <= zext_ln140_fu_203_p1(3 - 1 downto 0);
    radii_address1 <= zext_ln132_fu_186_p1(3 - 1 downto 0);
    radii_address2 <= zext_ln124_fu_169_p1(3 - 1 downto 0);

    radii_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            radii_ce0 <= ap_const_logic_1;
        else 
            radii_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    radii_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            radii_ce1 <= ap_const_logic_1;
        else 
            radii_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    radii_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            radii_ce2 <= ap_const_logic_1;
        else 
            radii_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    radius_i_1_fu_208_p3 <= 
        ap_const_lv25_0 when (icmp_ln118_reg_563(0) = '1') else 
        radii_q2;
    radius_j_1_fu_219_p3 <= 
        ap_const_lv25_0 when (icmp_ln126_reg_573(0) = '1') else 
        radii_q1;
    radius_k_1_fu_230_p3 <= 
        ap_const_lv25_0 when (icmp_ln134_reg_583(0) = '1') else 
        radii_q0;
    result_V_2_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_fu_380_p3));
    result_V_6_fu_527_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_1_fu_519_p3));
    result_V_7_fu_533_p3 <= 
        result_V_6_fu_527_p2 when (p_Result_1_fu_405_p3(0) = '1') else 
        val_1_fu_519_p3;
    result_V_fu_394_p3 <= 
        result_V_2_fu_388_p2 when (p_Result_s_fu_266_p3(0) = '1') else 
        val_fu_380_p3;
        sext_ln1311_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_459_p2),9));

        sext_ln1311_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_320_p2),9));

    sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i26_cast_cast_cast_fu_477_p1),111));
        sh_prom_i_i_i_i_i26_cast_cast_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_469_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_338_p1),111));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_330_p3),32));

    sub_ln1311_1_fu_459_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_11_fu_413_p4));
    sub_ln1311_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_9_fu_274_p4));
    sub_ln143_1_fu_252_p2 <= std_logic_vector(unsigned(zext_ln115_fu_226_p1) - unsigned(zext_ln114_fu_215_p1));
    sub_ln143_fu_241_p2 <= std_logic_vector(unsigned(zext_ln116_fu_237_p1) - unsigned(zext_ln114_fu_215_p1));
    tmp_10_fu_284_p1 <= data_V_fu_263_p1(23 - 1 downto 0);
    tmp_11_fu_413_p4 <= data_V_1_fu_402_p1(30 downto 23);
    tmp_12_fu_423_p1 <= data_V_1_fu_402_p1(23 - 1 downto 0);
    tmp_1_fu_370_p4 <= r_V_1_fu_352_p2(87 downto 24);
    tmp_6_fu_509_p4 <= r_V_3_fu_491_p2(87 downto 24);
    tmp_8_fu_497_p3 <= r_V_2_fu_485_p2(24 downto 24);
    tmp_9_fu_274_p4 <= data_V_fu_263_p1(30 downto 23);
    tmp_fu_358_p3 <= r_V_fu_346_p2(24 downto 24);
    ush_1_fu_469_p3 <= 
        sext_ln1311_1_fu_465_p1 when (isNeg_1_fu_451_p3(0) = '1') else 
        add_ln341_1_fu_445_p2;
    ush_fu_330_p3 <= 
        sext_ln1311_fu_326_p1 when (isNeg_fu_312_p3(0) = '1') else 
        add_ln341_fu_306_p2;
    val_1_fu_519_p3 <= 
        zext_ln662_1_fu_505_p1 when (isNeg_1_fu_451_p3(0) = '1') else 
        tmp_6_fu_509_p4;
    val_fu_380_p3 <= 
        zext_ln662_fu_366_p1 when (isNeg_fu_312_p3(0) = '1') else 
        tmp_1_fu_370_p4;
    zext_ln114_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_i_1_fu_208_p3),26));
    zext_ln115_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_j_1_fu_219_p3),26));
    zext_ln116_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_k_1_fu_230_p3),26));
    zext_ln124_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_163_p2),64));
    zext_ln132_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_fu_180_p2),64));
    zext_ln140_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_fu_197_p2),64));
    zext_ln15_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_427_p4),111));
    zext_ln15_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_288_p4),111));
    zext_ln341_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_413_p4),9));
    zext_ln341_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_274_p4),9));
    zext_ln662_1_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_497_p3),64));
    zext_ln662_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_358_p3),64));
end behav;
