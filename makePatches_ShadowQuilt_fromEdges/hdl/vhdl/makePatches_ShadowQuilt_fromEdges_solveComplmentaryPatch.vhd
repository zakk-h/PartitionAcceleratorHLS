-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (31 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    nPatchesAtOriginal : IN STD_LOGIC_VECTOR (31 downto 0);
    previous_z_top_min_read : IN STD_LOGIC_VECTOR (63 downto 0);
    complementary_apexZ0 : IN STD_LOGIC_VECTOR (63 downto 0);
    white_space_height_read : IN STD_LOGIC_VECTOR (63 downto 0);
    original_c : IN STD_LOGIC_VECTOR (63 downto 0);
    original_d : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top_min_read : IN STD_LOGIC_VECTOR (63 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    temp_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    temp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    temp_ce1 : OUT STD_LOGIC;
    temp_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_ce : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_start : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_ready : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_done : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_idle : IN STD_LOGIC;
    grp_fu_1575_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1575_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1575_p_ce : OUT STD_LOGIC;
    grp_fu_1578_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1578_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1578_p_ce : OUT STD_LOGIC;
    grp_fu_631_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_631_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_631_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_631_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_631_p_ce : OUT STD_LOGIC;
    grp_fu_636_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_636_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_636_p_ce : OUT STD_LOGIC );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (61 downto 0) := "00000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (61 downto 0) := "00000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (61 downto 0) := "00000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (61 downto 0) := "00000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (61 downto 0) := "00000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (61 downto 0) := "00000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (61 downto 0) := "00001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (61 downto 0) := "00010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (61 downto 0) := "00100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (61 downto 0) := "01000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (61 downto 0) := "10000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv38_6010 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000110000000010000";
    constant ap_const_lv38_4810 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100100000010000";
    constant ap_const_lv38_3010 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000011000000010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_30 : STD_LOGIC_VECTOR (11 downto 0) := "000000110000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_556 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_576 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_587 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_627 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_638 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_649 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_661 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_672 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerSMin_reg_683 : STD_LOGIC_VECTOR (63 downto 0);
    signal layerWithSmallestShift_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_state26_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln892_reg_2905 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln892_reg_2905_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_state35_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state37_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln897_reg_2944 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_reg_2944_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal icmp_ln892_reg_2905_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_get_index_from_z_fu_797_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2766 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln857_fu_928_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln857_reg_2772 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln855_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln855_reg_2778 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln855_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln860_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln860_reg_2787 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln862_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln862_reg_2791 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_2796 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln863_fu_953_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln863_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln863_reg_2806 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_reg_2810 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_970_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_2820 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln882_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln882_reg_2824 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln883_fu_982_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln883_reg_2829 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln873_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln873_reg_2834 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln874_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln874_reg_2839 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln884_fu_999_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln884_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln884_reg_2849 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_2853 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln875_fu_1016_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln875_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln875_reg_2873 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_2877 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln890_fu_1052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln890_reg_2887 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln892_fu_1060_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln892_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln892_reg_2905_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln892_reg_2905_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln892_reg_2905_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln892_reg_2905_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_3_reg_2909 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2909_pp3_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2909_pp3_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2909_pp3_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2909_pp3_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2909_pp3_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2909_pp3_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal grp_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_2925 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_2925_pp3_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2932 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln897_fu_1307_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln897_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_reg_2944_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_4_reg_2948 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2948_pp4_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2948_pp4_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln903_fu_1511_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln903_reg_2954 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state40_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state41_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state42_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state43_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln903_fu_1517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln903_reg_2959 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln903_reg_2959_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln903_reg_2959_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_cast13_fu_1523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast13_reg_2963 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast13_reg_2963_pp5_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast13_reg_2963_pp5_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln54_fu_1598_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln54_reg_2973 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln905_fu_1668_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln905_reg_2983 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln909_fu_1696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln909_reg_3018 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state45_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state46_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state47_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state48_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state49_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state50_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_state51_pp6_stage0_iter6 : BOOLEAN;
    signal ap_block_state52_pp6_stage0_iter7 : BOOLEAN;
    signal ap_block_state53_pp6_stage0_iter8 : BOOLEAN;
    signal ap_block_state54_pp6_stage0_iter9 : BOOLEAN;
    signal ap_block_state55_pp6_stage0_iter10 : BOOLEAN;
    signal ap_block_state56_pp6_stage0_iter11 : BOOLEAN;
    signal ap_block_state57_pp6_stage0_iter12 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal add_ln914_fu_1702_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln914_reg_3022 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal trunc_ln911_fu_1713_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln911_reg_3033_pp6_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln921_fu_1746_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state59_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state60_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state61_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln921_fu_1752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln921_reg_3042 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln921_reg_3042_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln923_fu_1758_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln923_reg_3046 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln923_reg_3046_pp7_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln923_fu_1776_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_3056 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_fu_1796_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_47_reg_3062 : STD_LOGIC_VECTOR (51 downto 0);
    signal layerWithSmallestShift_1_fu_1906_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal layerSMin_1_fu_1914_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1926_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_3077 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal sub_ln943_fu_1940_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln521_fu_1958_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln943_fu_1977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln943_reg_3094 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln943_1_fu_1983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln943_1_reg_3099 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal and_ln943_fu_1993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln945_fu_2098_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln945_reg_3112 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln945_fu_2121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal sub_ln948_fu_2125_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal bitcast_ln521_1_fu_2143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal icmp_ln948_fu_2162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln948_reg_3132 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln948_1_fu_2168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln948_1_reg_3137 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal and_ln948_fu_2178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln950_fu_2283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln950_reg_3150 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln950_fu_2306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal sub_ln953_fu_2310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal bitcast_ln521_2_fu_2328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal icmp_ln953_fu_2347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln953_reg_3170 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln953_1_fu_2353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln953_1_reg_3175 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal and_ln953_fu_2363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln955_fu_2468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln955_reg_3188 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln955_fu_2491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal select_ln958_fu_2516_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_reg_3198 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln975_fu_2524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln975_reg_3205 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ppl_assign2_reg_3209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal trunc_ln1003_fu_2529_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1003_reg_3214 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1028_fu_2601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1028_reg_3230 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1006_fu_2607_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1006_reg_3234 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal select_ln1012_fu_2628_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1012_reg_3239 : STD_LOGIC_VECTOR (63 downto 0);
    signal thirdLastPatchIdx_fu_2636_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal thirdLastPatchIdx_reg_3244 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1038_fu_2641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1038_reg_3249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal add_ln1038_fu_2647_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1038_reg_3253 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1058_fu_2698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state35 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state40 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state45 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state59 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal current_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_ce0 : STD_LOGIC;
    signal current_z_i_index_we0 : STD_LOGIC;
    signal current_z_i_index_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce0 : STD_LOGIC;
    signal new_z_i_index_we0 : STD_LOGIC;
    signal new_z_i_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_index_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce1 : STD_LOGIC;
    signal new_z_i_index_we1 : STD_LOGIC;
    signal new_z_i_index_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_ce0 : STD_LOGIC;
    signal new_z_i_we0 : STD_LOGIC;
    signal new_z_i_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_n_patches_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_GDarray_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_GDarray_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_patches_superpoints_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_patches_parameters_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_z_top : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_temp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_temp_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_temp_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_772_temp_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_temp_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_temp_ce1 : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_ap_start : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_ap_done : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_ap_idle : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_ap_ready : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_GDarray_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_get_index_from_z_fu_797_GDarray_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_797_GDn_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_797_layer : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_797_z_value : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_811_ap_start : STD_LOGIC;
    signal grp_delete_patch_fu_811_ap_done : STD_LOGIC;
    signal grp_delete_patch_fu_811_ap_idle : STD_LOGIC;
    signal grp_delete_patch_fu_811_ap_ready : STD_LOGIC;
    signal grp_delete_patch_fu_811_n_patches : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_811_n_patches_ap_vld : STD_LOGIC;
    signal grp_delete_patch_fu_811_patches_superpoints_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_delete_patch_fu_811_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_811_patches_superpoints_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_811_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_811_patches_superpoints_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_delete_patch_fu_811_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_delete_patch_fu_811_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_811_patches_parameters_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_811_patches_parameters_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_811_patches_parameters_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_811_patches_parameters_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_811_patches_parameters_ce1 : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_ce : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_z_i : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_z_j : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_k : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_839_ap_start : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_839_ap_done : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_839_ap_idle : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_839_ap_ready : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce0 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce1 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_839_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_phi_mux_empty_63_phi_fu_570_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_0_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal counterUpshift_0_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_66_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_6_phi_fu_653_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_phi_mux_i_7_phi_fu_665_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal z_top_min_0_reg_707 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_top_min_1_reg_717 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_top_min_2_reg_728 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_reg_738 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_phi_mux_current_z_top_index_0_phi_fu_753_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_0_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_phi_mux_z_top_min_4_phi_fu_764_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_top_min_4_reg_761 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_772_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_get_index_from_z_fu_797_ap_start_reg : STD_LOGIC := '0';
    signal grp_delete_patch_fu_811_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln911_fu_1717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_839_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state82 : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_4_cast_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal i_5_cast_fu_1319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln905_3_fu_1627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln914_cast_fu_1708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln945_3_fu_2057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln950_3_fu_2242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln955_3_fu_2427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1006_fu_2575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1007_fu_2586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_3_fu_272 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_3_1_fu_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal new_z_i_atTop_3_2_fu_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_3_3_fu_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_3_4_fu_288 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln877_fu_1033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_13_fu_1298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_856_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_860_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_865_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_872_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_877_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln890_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln890_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln894_fu_1078_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln894_1_fu_1095_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1081_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln894_fu_1091_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln894_1_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln894_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1098_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln894_1_fu_1108_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln894_3_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln894_2_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln894_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln894_1_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln894_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln894_1_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dc_fu_1160_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_1166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1188_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_1192_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_42_fu_1178_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_1206_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_1210_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1234_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_1242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1202_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1246_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_1250_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_26_fu_1262_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_1256_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_1270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_1284_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_9_fu_1292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln899_fu_1324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1328_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln899_fu_1338_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln899_1_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_1354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_2_fu_1366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_1392_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_2_fu_1396_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_44_fu_1382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_2_fu_1410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_2_fu_1414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_2_fu_1428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_1434_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_1438_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i54_cast_cast_cast_fu_1446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_1406_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal sh_prom_i_i_i_i_i54_cast_cast_cast_cast_fu_1450_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_5_fu_1454_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_31_fu_1466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_1460_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_2_fu_1474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1478_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_2_fu_1488_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_1374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_10_fu_1496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_1528_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_1_fu_1540_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_fu_1536_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_1_fu_1548_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln54_2_fu_1558_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln54_3_fu_1570_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln54_fu_1566_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln54_1_fu_1578_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln54_fu_1552_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln54_fu_1588_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_1_fu_1582_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln54_2_fu_1594_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln905_fu_1604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln905_fu_1611_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln905_fu_1611_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln905_fu_1611_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_32_fu_1617_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_23_fu_1632_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln905_2_fu_1650_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln905_1_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln905_1_fu_1642_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln905_fu_1662_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_1674_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln905_2_fu_1681_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln905_fu_1685_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_15_fu_1762_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_1762_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_3_fu_1782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_3_fu_1800_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_1813_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_1816_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_3_fu_1830_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_3_fu_1822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_3_fu_1835_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_3_fu_1839_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i91_cast_cast_cast_fu_1847_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_1809_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i91_cast_cast_cast_cast_fu_1851_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_7_fu_1855_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_36_fu_1867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_1861_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_3_fu_1875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1879_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_3_fu_1889_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln923_fu_1897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln923_fu_1903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1926_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_V_4_fu_1946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_3_fu_1950_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_fu_1954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1963_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln943_fu_1973_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln943_fu_1989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_4_fu_1999_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln54_5_fu_2010_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln54_3_fu_2006_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln54_4_fu_2017_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln54_2_fu_2021_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln54_1_fu_2027_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln945_fu_2033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln945_fu_2041_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln945_fu_2041_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln945_fu_2041_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_37_fu_2047_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_29_fu_2062_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln945_2_fu_2080_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln945_1_fu_2088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln945_1_fu_2072_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln945_fu_2092_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2_fu_2104_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln945_2_fu_2111_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln945_fu_2115_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal data_V_5_fu_2131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_2135_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_1_fu_2139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_2148_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln948_fu_2158_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln948_fu_2174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_6_fu_2184_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln54_7_fu_2195_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln54_5_fu_2191_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln54_6_fu_2202_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln54_3_fu_2206_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln54_2_fu_2212_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln950_fu_2218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln950_fu_2226_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln950_fu_2226_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln950_fu_2226_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_38_fu_2232_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_30_fu_2247_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln950_2_fu_2265_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln950_1_fu_2273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln950_1_fu_2257_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln950_fu_2277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln3_fu_2289_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln950_2_fu_2296_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln950_fu_2300_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal data_V_6_fu_2316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_2320_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_2_fu_2324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_2333_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln953_fu_2343_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln953_fu_2359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_8_fu_2369_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln54_9_fu_2380_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln54_7_fu_2376_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln54_8_fu_2387_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln54_4_fu_2391_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln54_3_fu_2397_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln955_fu_2403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln955_fu_2411_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln955_fu_2411_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln955_fu_2411_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_39_fu_2417_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_33_fu_2432_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln955_2_fu_2450_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln955_1_fu_2458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_1_fu_2442_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln955_fu_2462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln4_fu_2474_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln955_2_fu_2481_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln955_fu_2485_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal mul_ln958_fu_2503_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln958_fu_2503_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_2508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1006_fu_2533_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1006_1_fu_2545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_cast_fu_2537_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_cast_fu_2549_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1006_fu_2557_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1006_1_fu_2563_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1006_fu_2569_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1007_fu_2580_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_fu_2591_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1012_fu_2612_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1012_1_fu_2617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1012_fu_2622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_856_ce : STD_LOGIC;
    signal grp_fu_860_ce : STD_LOGIC;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_block_pp4_stage0_00001 : BOOLEAN;
    signal grp_fu_872_ce : STD_LOGIC;
    signal grp_fu_872_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_877_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_state76_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal mul_ln905_fu_1611_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln945_fu_2041_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln950_fu_2226_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln955_fu_2411_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (31 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        GDarray_ce0 : OUT STD_LOGIC;
        GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (63 downto 0);
        z_top : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        temp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp_ce0 : OUT STD_LOGIC;
        temp_we0 : OUT STD_LOGIC;
        temp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        temp_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp_ce1 : OUT STD_LOGIC;
        temp_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_get_index_from_z IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        GDarray_ce0 : OUT STD_LOGIC;
        GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        z_value : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_delete_patch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_patches_ap_vld : OUT STD_LOGIC;
        n_patches_read : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        index : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (63 downto 0);
        z_j : IN STD_LOGIC_VECTOR (63 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (31 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wsp1_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        wsp1_2_ce0 : OUT STD_LOGIC;
        wsp1_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1_2_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        wsp1_2_ce1 : OUT STD_LOGIC;
        wsp1_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1 : IN STD_LOGIC_VECTOR (4 downto 0);
        wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
        wsp2 : IN STD_LOGIC_VECTOR (4 downto 0);
        wsp25 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mux_42_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_64s_64s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_current_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    current_z_i_index_U : component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_current_z_i_index
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_address0,
        ce0 => current_z_i_index_ce0,
        we0 => current_z_i_index_we0,
        d0 => grp_get_index_from_z_fu_797_ap_return,
        q0 => current_z_i_index_q0);

    new_z_i_index_U : component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i_index
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_address0,
        ce0 => new_z_i_index_ce0,
        we0 => new_z_i_index_we0,
        d0 => new_z_i_index_d0,
        q0 => new_z_i_index_q0,
        address1 => new_z_i_index_address1,
        ce1 => new_z_i_index_ce1,
        we1 => new_z_i_index_we1,
        d1 => new_z_i_index_d1,
        q1 => new_z_i_index_q1);

    new_z_i_U : component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_address0,
        ce0 => new_z_i_ce0,
        we0 => new_z_i_we0,
        d0 => new_z_i_d0,
        q0 => new_z_i_q0);

    grp_makePatch_alignedToLine_fu_772 : component makePatches_ShadowQuilt_fromEdges_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_772_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_772_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_772_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_772_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_772_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld,
        GDarray_address0 => grp_makePatch_alignedToLine_fu_772_GDarray_address0,
        GDarray_ce0 => grp_makePatch_alignedToLine_fu_772_GDarray_ce0,
        GDarray_q0 => GDarray_q0,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_772_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_772_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_772_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_772_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_772_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_772_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_772_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_772_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_772_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_772_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        apexZ0 => complementary_apexZ0,
        z_top => grp_makePatch_alignedToLine_fu_772_z_top,
        p_read => grp_makePatch_alignedToLine_fu_772_p_read,
        leftRight => ap_const_lv1_1,
        temp_address0 => grp_makePatch_alignedToLine_fu_772_temp_address0,
        temp_ce0 => grp_makePatch_alignedToLine_fu_772_temp_ce0,
        temp_we0 => grp_makePatch_alignedToLine_fu_772_temp_we0,
        temp_d0 => grp_makePatch_alignedToLine_fu_772_temp_d0,
        temp_q0 => temp_q0,
        temp_address1 => grp_makePatch_alignedToLine_fu_772_temp_address1,
        temp_ce1 => grp_makePatch_alignedToLine_fu_772_temp_ce1,
        temp_q1 => temp_q1,
        ap_return => grp_makePatch_alignedToLine_fu_772_ap_return);

    grp_get_index_from_z_fu_797 : component makePatches_ShadowQuilt_fromEdges_get_index_from_z
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_index_from_z_fu_797_ap_start,
        ap_done => grp_get_index_from_z_fu_797_ap_done,
        ap_idle => grp_get_index_from_z_fu_797_ap_idle,
        ap_ready => grp_get_index_from_z_fu_797_ap_ready,
        GDarray_address0 => grp_get_index_from_z_fu_797_GDarray_address0,
        GDarray_ce0 => grp_get_index_from_z_fu_797_GDarray_ce0,
        GDarray_q0 => GDarray_q0,
        GDn_points_address0 => grp_get_index_from_z_fu_797_GDn_points_address0,
        GDn_points_ce0 => grp_get_index_from_z_fu_797_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        layer => grp_get_index_from_z_fu_797_layer,
        z_value => grp_get_index_from_z_fu_797_z_value,
        ap_return => grp_get_index_from_z_fu_797_ap_return);

    grp_delete_patch_fu_811 : component makePatches_ShadowQuilt_fromEdges_delete_patch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delete_patch_fu_811_ap_start,
        ap_done => grp_delete_patch_fu_811_ap_done,
        ap_idle => grp_delete_patch_fu_811_ap_idle,
        ap_ready => grp_delete_patch_fu_811_ap_ready,
        n_patches => grp_delete_patch_fu_811_n_patches,
        n_patches_ap_vld => grp_delete_patch_fu_811_n_patches_ap_vld,
        n_patches_read => reg_918,
        patches_superpoints_address0 => grp_delete_patch_fu_811_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_delete_patch_fu_811_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_delete_patch_fu_811_patches_superpoints_we0,
        patches_superpoints_d0 => grp_delete_patch_fu_811_patches_superpoints_d0,
        patches_superpoints_address1 => grp_delete_patch_fu_811_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_delete_patch_fu_811_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        patches_parameters_address0 => grp_delete_patch_fu_811_patches_parameters_address0,
        patches_parameters_ce0 => grp_delete_patch_fu_811_patches_parameters_ce0,
        patches_parameters_we0 => grp_delete_patch_fu_811_patches_parameters_we0,
        patches_parameters_d0 => grp_delete_patch_fu_811_patches_parameters_d0,
        patches_parameters_address1 => grp_delete_patch_fu_811_patches_parameters_address1,
        patches_parameters_ce1 => grp_delete_patch_fu_811_patches_parameters_ce1,
        patches_parameters_q1 => patches_parameters_q1,
        index => reg_923);

    grp_areWedgeSuperPointsEqual_fu_839 : component makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_areWedgeSuperPointsEqual_fu_839_ap_start,
        ap_done => grp_areWedgeSuperPointsEqual_fu_839_ap_done,
        ap_idle => grp_areWedgeSuperPointsEqual_fu_839_ap_idle,
        ap_ready => grp_areWedgeSuperPointsEqual_fu_839_ap_ready,
        wsp1_2_address0 => grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address0,
        wsp1_2_ce0 => grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce0,
        wsp1_2_q0 => patches_superpoints_q0,
        wsp1_2_address1 => grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address1,
        wsp1_2_ce1 => grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce1,
        wsp1_2_q1 => patches_superpoints_q1,
        wsp1 => add_ln1006_reg_3234,
        wsp11 => i_9_reg_738,
        wsp2 => thirdLastPatchIdx_reg_3244,
        wsp25 => i_9_reg_738,
        ap_return => grp_areWedgeSuperPointsEqual_fu_839_ap_return);

    fadd_32ns_32ns_32_3_full_dsp_1_U98 : component makePatches_ShadowQuilt_fromEdges_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_905,
        din1 => ap_const_lv32_BF800000,
        ce => ap_const_logic_1,
        dout => grp_fu_851_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U101 : component makePatches_ShadowQuilt_fromEdges_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_865_p0,
        din1 => grp_fu_865_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_865_p2);

    mul_64ns_66ns_129_1_1_U104 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln905_fu_1611_p0,
        din1 => mul_ln905_fu_1611_p1,
        dout => mul_ln905_fu_1611_p2);

    mux_42_64_1_1_U105 : component makePatches_ShadowQuilt_fromEdges_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => new_z_i_atTop_3_1_fu_276,
        din1 => new_z_i_atTop_3_2_fu_280,
        din2 => new_z_i_atTop_3_3_fu_284,
        din3 => new_z_i_atTop_3_4_fu_288,
        din4 => tmp_15_fu_1762_p5,
        dout => tmp_15_fu_1762_p6);

    mux_42_64_1_1_U106 : component makePatches_ShadowQuilt_fromEdges_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => new_z_i_atTop_3_1_fu_276,
        din1 => new_z_i_atTop_3_2_fu_280,
        din2 => new_z_i_atTop_3_3_fu_284,
        din3 => new_z_i_atTop_3_4_fu_288,
        din4 => tmp_11_fu_1926_p5,
        dout => tmp_11_fu_1926_p6);

    mul_64ns_66ns_129_1_1_U107 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln945_fu_2041_p0,
        din1 => mul_ln945_fu_2041_p1,
        dout => mul_ln945_fu_2041_p2);

    mul_64ns_66ns_129_1_1_U108 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln950_fu_2226_p0,
        din1 => mul_ln950_fu_2226_p1,
        dout => mul_ln950_fu_2226_p2);

    mul_64ns_66ns_129_1_1_U109 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln955_fu_2411_p0,
        din1 => mul_ln955_fu_2411_p1,
        dout => mul_ln955_fu_2411_p2);

    mul_64s_64s_64_1_1_U110 : component makePatches_ShadowQuilt_fromEdges_mul_64s_64s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln958_fu_2503_p0,
        din1 => white_space_height_read,
        dout => mul_ln958_fu_2503_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln860_fu_944_p2 = ap_const_lv1_1) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln860_fu_944_p2 = ap_const_lv1_1) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_16_fu_970_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_16_fu_970_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((tmp_16_fu_970_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state23);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((tmp_16_fu_970_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state35) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state35)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state35);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state40) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state40)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state40);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state45) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state45)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state45);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter10 <= ap_enable_reg_pp6_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter11 <= ap_enable_reg_pp6_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter12 <= ap_enable_reg_pp6_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_enable_reg_pp6_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter8 <= ap_enable_reg_pp6_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter9 <= ap_enable_reg_pp6_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state59) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state59)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state59);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_0_preg <= white_space_height_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_1_preg <= reg_923;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_2_preg <= ap_phi_mux_current_z_top_index_0_phi_fu_753_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_3_preg <= counter_0_reg_598;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_4_preg <= counterUpshift_0_reg_608;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_5_preg <= z_top_min_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_6_preg <= select_ln1012_reg_3239;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    ap_return_7_preg <= ap_phi_mux_z_top_min_4_phi_fu_764_p6;
                end if; 
            end if;
        end if;
    end process;


    grp_areWedgeSuperPointsEqual_fu_839_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_areWedgeSuperPointsEqual_fu_839_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1038_fu_2641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81) and (ap_const_logic_1 = ap_NS_fsm_state82))) then 
                    grp_areWedgeSuperPointsEqual_fu_839_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_areWedgeSuperPointsEqual_fu_839_ap_ready = ap_const_logic_1)) then 
                    grp_areWedgeSuperPointsEqual_fu_839_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_delete_patch_fu_811_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delete_patch_fu_811_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    grp_delete_patch_fu_811_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delete_patch_fu_811_ap_ready = ap_const_logic_1)) then 
                    grp_delete_patch_fu_811_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_index_from_z_fu_797_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_index_from_z_fu_797_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_get_index_from_z_fu_797_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_index_from_z_fu_797_ap_ready = ap_const_logic_1)) then 
                    grp_get_index_from_z_fu_797_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_772_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_772_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                    grp_makePatch_alignedToLine_fu_772_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_772_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_772_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln909_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counterUpshift_0_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                if ((tmp_16_reg_2820 = ap_const_lv1_1)) then 
                    counterUpshift_0_reg_608 <= p_read13;
                elsif ((tmp_16_reg_2820 = ap_const_lv1_0)) then 
                    counterUpshift_0_reg_608 <= add_ln882_reg_2824;
                end if;
            end if; 
        end if;
    end process;

    counter_0_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                if ((tmp_16_reg_2820 = ap_const_lv1_1)) then 
                    counter_0_reg_598 <= add_ln873_reg_2834;
                elsif ((tmp_16_reg_2820 = ap_const_lv1_0)) then 
                    counter_0_reg_598 <= p_read12;
                end if;
            end if; 
        end if;
    end process;

    current_z_top_index_0_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1028_reg_3230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
                current_z_top_index_0_reg_750 <= select_ln890_reg_2887;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                current_z_top_index_0_reg_750 <= add_ln1058_fu_2698_p2;
            end if; 
        end if;
    end process;

    empty_63_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln860_reg_2787 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                empty_63_reg_567 <= add_ln862_reg_2791;
            elsif (((icmp_ln860_fu_944_p2 = ap_const_lv1_0) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_63_reg_567 <= tmp_reg_2766;
            end if; 
        end if;
    end process;

    empty_66_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                if ((tmp_16_reg_2820 = ap_const_lv1_1)) then 
                    empty_66_reg_618 <= add_ln874_reg_2839;
                elsif ((tmp_16_reg_2820 = ap_const_lv1_0)) then 
                    empty_66_reg_618 <= add_ln883_reg_2829;
                end if;
            end if; 
        end if;
    end process;

    i_1_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln860_fu_944_p2 = ap_const_lv1_1) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_556 <= ap_const_lv3_0;
            elsif (((icmp_ln863_fu_959_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_1_reg_556 <= add_ln863_fu_953_p2;
            end if; 
        end if;
    end process;

    i_2_reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_970_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_2_reg_587 <= ap_const_lv3_0;
            elsif (((icmp_ln875_fu_1022_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_587 <= add_ln875_fu_1016_p2;
            end if; 
        end if;
    end process;

    i_3_reg_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_970_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_3_reg_576 <= ap_const_lv3_0;
            elsif (((icmp_ln884_fu_1005_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_3_reg_576 <= add_ln884_fu_999_p2;
            end if; 
        end if;
    end process;

    i_4_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln892_fu_1066_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_4_reg_627 <= add_ln892_fu_1060_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_4_reg_627 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_5_reg_638 <= ap_const_lv3_0;
            elsif (((icmp_ln897_fu_1313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_5_reg_638 <= add_ln897_fu_1307_p2;
            end if; 
        end if;
    end process;

    i_6_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_6_reg_649 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln903_reg_2959 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                i_6_reg_649 <= add_ln903_reg_2954;
            end if; 
        end if;
    end process;

    i_7_reg_661_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_7_reg_661 <= ap_const_lv3_1;
            elsif (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln909_reg_3018 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                i_7_reg_661 <= add_ln914_reg_3022;
            end if; 
        end if;
    end process;

    i_8_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_8_reg_672 <= ap_const_lv3_0;
            elsif (((icmp_ln921_fu_1752_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                i_8_reg_672 <= add_ln921_fu_1746_p2;
            end if; 
        end if;
    end process;

    i_9_reg_738_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86) and (grp_areWedgeSuperPointsEqual_fu_839_ap_return = ap_const_lv1_1))) then 
                i_9_reg_738 <= add_ln1038_reg_3253;
            elsif (((icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                i_9_reg_738 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_get_index_from_z_fu_797_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    i_reg_544 <= ap_const_lv3_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    i_reg_544 <= add_ln857_reg_2772;
                end if;
            end if; 
        end if;
    end process;

    layerSMin_reg_683_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                layerSMin_reg_683 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            elsif (((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (icmp_ln921_reg_3042_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                layerSMin_reg_683 <= layerSMin_1_fu_1914_p3;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                layerWithSmallestShift_reg_695 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (icmp_ln921_reg_3042_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                layerWithSmallestShift_reg_695 <= layerWithSmallestShift_1_fu_1906_p3;
            end if; 
        end if;
    end process;

    z_top_min_0_reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = and_ln943_fu_1993_p2))) then 
                z_top_min_0_reg_707 <= tmp_11_reg_3077;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                z_top_min_0_reg_707 <= trunc_ln945_fu_2121_p1;
            end if; 
        end if;
    end process;

    z_top_min_1_reg_717_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_const_lv1_0 = and_ln948_fu_2178_p2))) then 
                z_top_min_1_reg_717 <= z_top_min_0_reg_707;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                z_top_min_1_reg_717 <= trunc_ln950_fu_2306_p1;
            end if; 
        end if;
    end process;

    z_top_min_2_reg_728_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_const_lv1_0 = and_ln953_fu_2363_p2))) then 
                z_top_min_2_reg_728 <= z_top_min_1_reg_717;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                z_top_min_2_reg_728 <= trunc_ln955_fu_2491_p1;
            end if; 
        end if;
    end process;

    z_top_min_4_reg_761_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1028_reg_3230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
                z_top_min_4_reg_761 <= select_ln958_reg_3198;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                z_top_min_4_reg_761 <= tmp_11_reg_3077;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                add_ln1006_reg_3234 <= add_ln1006_fu_2607_p2;
                select_ln1012_reg_3239 <= select_ln1012_fu_2628_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                add_ln1038_reg_3253 <= add_ln1038_fu_2647_p2;
                icmp_ln1038_reg_3249 <= icmp_ln1038_fu_2641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln903_reg_2959 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    add_ln54_reg_2973(37 downto 3) <= add_ln54_fu_1598_p2(37 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln857_reg_2772 <= add_ln857_fu_928_p2;
                    zext_ln855_reg_2778(2 downto 0) <= zext_ln855_fu_934_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln860_fu_944_p2 = ap_const_lv1_1) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln862_reg_2791 <= add_ln862_fu_948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_970_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                add_ln873_reg_2834 <= add_ln873_fu_988_p2;
                add_ln874_reg_2839 <= add_ln874_fu_993_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_970_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                add_ln882_reg_2824 <= add_ln882_fu_977_p2;
                add_ln883_reg_2829 <= add_ln883_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln903_reg_2954 <= add_ln903_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln903_reg_2959_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    add_ln905_reg_2983(63 downto 3) <= add_ln905_fu_1668_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln909_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                add_ln914_reg_3022 <= add_ln914_fu_1702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln943_fu_1993_p2) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    add_ln945_reg_3112(63 downto 3) <= add_ln945_fu_2098_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln948_fu_2178_p2) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    add_ln950_reg_3150(63 downto 3) <= add_ln950_fu_2283_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln953_fu_2363_p2) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    add_ln955_reg_3188(63 downto 3) <= add_ln955_fu_2468_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln892_reg_2905_pp3_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                conv_reg_2932 <= grp_fu_1578_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln863_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_1_cast_reg_2810(2 downto 0) <= i_1_cast_fu_965_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln875_fu_1022_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_2_cast_reg_2877(2 downto 0) <= i_2_cast_fu_1028_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_fu_1005_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    i_3_cast_reg_2853(2 downto 0) <= i_3_cast_fu_1011_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln903_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    i_6_cast13_reg_2963(2 downto 0) <= i_6_cast13_fu_1523_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    i_6_cast13_reg_2963_pp5_iter1_reg(2 downto 0) <= i_6_cast13_reg_2963(2 downto 0);
                icmp_ln903_reg_2959 <= icmp_ln903_fu_1517_p2;
                icmp_ln903_reg_2959_pp5_iter1_reg <= icmp_ln903_reg_2959;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                    i_6_cast13_reg_2963_pp5_iter2_reg(2 downto 0) <= i_6_cast13_reg_2963_pp5_iter1_reg(2 downto 0);
                icmp_ln903_reg_2959_pp5_iter2_reg <= icmp_ln903_reg_2959_pp5_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                icmp_ln1028_reg_3230 <= icmp_ln1028_fu_2601_p2;
                trunc_ln1003_reg_3214 <= trunc_ln1003_fu_2529_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln860_reg_2787 <= icmp_ln860_fu_944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln863_reg_2806 <= icmp_ln863_fu_959_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln875_reg_2873 <= icmp_ln875_fu_1022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln884_reg_2849 <= icmp_ln884_fu_1005_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln892_reg_2905 <= icmp_ln892_fu_1066_p2;
                icmp_ln892_reg_2905_pp3_iter1_reg <= icmp_ln892_reg_2905;
                new_z_i_index_addr_3_reg_2909_pp3_iter1_reg <= new_z_i_index_addr_3_reg_2909;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln892_reg_2905_pp3_iter2_reg <= icmp_ln892_reg_2905_pp3_iter1_reg;
                icmp_ln892_reg_2905_pp3_iter3_reg <= icmp_ln892_reg_2905_pp3_iter2_reg;
                icmp_ln892_reg_2905_pp3_iter4_reg <= icmp_ln892_reg_2905_pp3_iter3_reg;
                icmp_ln892_reg_2905_pp3_iter5_reg <= icmp_ln892_reg_2905_pp3_iter4_reg;
                icmp_ln892_reg_2905_pp3_iter6_reg <= icmp_ln892_reg_2905_pp3_iter5_reg;
                new_z_i_index_addr_3_reg_2909_pp3_iter2_reg <= new_z_i_index_addr_3_reg_2909_pp3_iter1_reg;
                new_z_i_index_addr_3_reg_2909_pp3_iter3_reg <= new_z_i_index_addr_3_reg_2909_pp3_iter2_reg;
                new_z_i_index_addr_3_reg_2909_pp3_iter4_reg <= new_z_i_index_addr_3_reg_2909_pp3_iter3_reg;
                new_z_i_index_addr_3_reg_2909_pp3_iter5_reg <= new_z_i_index_addr_3_reg_2909_pp3_iter4_reg;
                new_z_i_index_addr_3_reg_2909_pp3_iter6_reg <= new_z_i_index_addr_3_reg_2909_pp3_iter5_reg;
                sub_reg_2925_pp3_iter6_reg <= sub_reg_2925;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln897_reg_2944 <= icmp_ln897_fu_1313_p2;
                icmp_ln897_reg_2944_pp4_iter1_reg <= icmp_ln897_reg_2944;
                new_z_i_index_addr_4_reg_2948_pp4_iter1_reg <= new_z_i_index_addr_4_reg_2948;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln897_reg_2944_pp4_iter2_reg <= icmp_ln897_reg_2944_pp4_iter1_reg;
                new_z_i_index_addr_4_reg_2948_pp4_iter2_reg <= new_z_i_index_addr_4_reg_2948_pp4_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                icmp_ln909_reg_3018 <= icmp_ln909_fu_1696_p2;
                trunc_ln911_reg_3033_pp6_iter1_reg <= trunc_ln911_reg_3033;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                icmp_ln921_reg_3042 <= icmp_ln921_fu_1752_p2;
                icmp_ln921_reg_3042_pp7_iter1_reg <= icmp_ln921_reg_3042;
                trunc_ln923_reg_3046_pp7_iter1_reg <= trunc_ln923_reg_3046;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                icmp_ln943_1_reg_3099 <= icmp_ln943_1_fu_1983_p2;
                icmp_ln943_reg_3094 <= icmp_ln943_fu_1977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                icmp_ln948_1_reg_3137 <= icmp_ln948_1_fu_2168_p2;
                icmp_ln948_reg_3132 <= icmp_ln948_fu_2162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                icmp_ln953_1_reg_3175 <= icmp_ln953_1_fu_2353_p2;
                icmp_ln953_reg_3170 <= icmp_ln953_fu_2347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                icmp_ln975_reg_3205 <= icmp_ln975_fu_2524_p2;
                select_ln958_reg_3198 <= select_ln958_fu_2516_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (trunc_ln911_reg_3033_pp6_iter11_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_3_1_fu_276 <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (trunc_ln911_reg_3033_pp6_iter11_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_3_2_fu_280 <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (trunc_ln911_reg_3033_pp6_iter11_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_3_3_fu_284 <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (trunc_ln911_reg_3033_pp6_iter11_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_3_4_fu_288 <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
                new_z_i_atTop_3_fu_272 <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln892_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                new_z_i_index_addr_3_reg_2909 <= i_4_cast_fu_1072_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln897_fu_1313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                new_z_i_index_addr_4_reg_2948 <= i_5_cast_fu_1319_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                ppl_assign2_reg_3209 <= grp_makePatch_alignedToLine_fu_772_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln897_reg_2944_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln892_reg_2905_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                reg_905 <= grp_fu_1575_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74))) then
                reg_918 <= n_patches_i;
                reg_923 <= grp_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                select_ln890_reg_2887 <= select_ln890_fu_1052_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln892_reg_2905_pp3_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                sub_reg_2925 <= grp_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                thirdLastPatchIdx_reg_3244 <= thirdLastPatchIdx_fu_2636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                tmp_11_reg_3077 <= tmp_11_fu_1926_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_16_reg_2820 <= tmp_16_fu_970_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln921_reg_3042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                tmp_46_reg_3056 <= data_V_3_fu_1782_p1(62 downto 52);
                tmp_47_reg_3062 <= tmp_47_fu_1796_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_2766 <= grp_get_index_from_z_fu_797_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_s_reg_2796 <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln909_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                trunc_ln911_reg_3033 <= trunc_ln911_fu_1713_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                trunc_ln911_reg_3033_pp6_iter10_reg <= trunc_ln911_reg_3033_pp6_iter9_reg;
                trunc_ln911_reg_3033_pp6_iter11_reg <= trunc_ln911_reg_3033_pp6_iter10_reg;
                trunc_ln911_reg_3033_pp6_iter2_reg <= trunc_ln911_reg_3033_pp6_iter1_reg;
                trunc_ln911_reg_3033_pp6_iter3_reg <= trunc_ln911_reg_3033_pp6_iter2_reg;
                trunc_ln911_reg_3033_pp6_iter4_reg <= trunc_ln911_reg_3033_pp6_iter3_reg;
                trunc_ln911_reg_3033_pp6_iter5_reg <= trunc_ln911_reg_3033_pp6_iter4_reg;
                trunc_ln911_reg_3033_pp6_iter6_reg <= trunc_ln911_reg_3033_pp6_iter5_reg;
                trunc_ln911_reg_3033_pp6_iter7_reg <= trunc_ln911_reg_3033_pp6_iter6_reg;
                trunc_ln911_reg_3033_pp6_iter8_reg <= trunc_ln911_reg_3033_pp6_iter7_reg;
                trunc_ln911_reg_3033_pp6_iter9_reg <= trunc_ln911_reg_3033_pp6_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln921_fu_1752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                trunc_ln923_reg_3046 <= trunc_ln923_fu_1758_p1;
            end if;
        end if;
    end process;
    zext_ln855_reg_2778(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_1_cast_reg_2810(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_2853(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_2877(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_6_cast13_reg_2963(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_6_cast13_reg_2963_pp5_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_6_cast13_reg_2963_pp5_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    add_ln54_reg_2973(2 downto 0) <= "000";
    add_ln905_reg_2983(2 downto 0) <= "000";
    add_ln945_reg_3112(2 downto 0) <= "000";
    add_ln950_reg_3150(2 downto 0) <= "000";
    add_ln955_reg_3188(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1, ap_CS_fsm_state74, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln855_fu_938_p2, icmp_ln860_fu_944_p2, ap_enable_reg_pp0_iter0, icmp_ln863_fu_959_p2, tmp_16_fu_970_p3, ap_CS_fsm_state19, ap_enable_reg_pp1_iter0, icmp_ln884_fu_1005_p2, ap_enable_reg_pp2_iter0, icmp_ln875_fu_1022_p2, ap_enable_reg_pp3_iter0, icmp_ln892_fu_1066_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, icmp_ln897_fu_1313_p2, ap_enable_reg_pp5_iter0, icmp_ln903_fu_1517_p2, icmp_ln909_fu_1696_p2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp7_iter0, icmp_ln921_fu_1752_p2, ap_enable_reg_pp7_iter2, ap_CS_fsm_state64, and_ln943_fu_1993_p2, ap_CS_fsm_state68, and_ln948_fu_2178_p2, ap_CS_fsm_state72, and_ln953_fu_2363_p2, icmp_ln975_fu_2524_p2, ap_CS_fsm_state78, icmp_ln1028_reg_3230, ap_CS_fsm_state80, icmp_ln1038_reg_3249, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter3, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter11, ap_enable_reg_pp6_iter12, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter1, grp_makePatch_alignedToLine_fu_772_ap_done, grp_get_index_from_z_fu_797_ap_done, grp_delete_patch_fu_811_ap_done, grp_areWedgeSuperPointsEqual_fu_839_ap_return, ap_CS_fsm_state16, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89, ap_block_state76_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_get_index_from_z_fu_797_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln860_fu_944_p2 = ap_const_lv1_1) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln860_fu_944_p2 = ap_const_lv1_0) and (icmp_ln855_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_get_index_from_z_fu_797_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln863_fu_959_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln863_fu_959_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                if (((tmp_16_fu_970_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln884_fu_1005_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln884_fu_1005_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln875_fu_1022_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln875_fu_1022_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln892_fu_1066_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln892_fu_1066_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln897_fu_1313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((icmp_ln897_fu_1313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln903_fu_1517_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln903_fu_1517_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln909_fu_1696_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (ap_enable_reg_pp6_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln909_fu_1696_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (ap_enable_reg_pp6_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln921_fu_1752_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln921_fu_1752_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = and_ln943_fu_1993_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_const_lv1_0 = and_ln948_fu_2178_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_const_lv1_0 = and_ln953_fu_2363_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((icmp_ln975_fu_2524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_makePatch_alignedToLine_fu_772_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86) and (grp_areWedgeSuperPointsEqual_fu_839_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                elsif (((icmp_ln1038_reg_3249 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (grp_delete_patch_fu_811_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state91) and (grp_makePatch_alignedToLine_fu_772_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarray_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state64, ap_CS_fsm_state68, ap_CS_fsm_state72, ap_CS_fsm_state78, ap_enable_reg_pp5_iter2, grp_makePatch_alignedToLine_fu_772_GDarray_address0, grp_get_index_from_z_fu_797_GDarray_address0, ap_CS_fsm_state16, ap_block_pp5_stage0, ap_CS_fsm_state91, zext_ln905_3_fu_1627_p1, zext_ln945_3_fu_2057_p1, zext_ln950_3_fu_2242_p1, zext_ln955_3_fu_2427_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            GDarray_address0 <= zext_ln955_3_fu_2427_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            GDarray_address0 <= zext_ln950_3_fu_2242_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            GDarray_address0 <= zext_ln945_3_fu_2057_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            GDarray_address0 <= zext_ln905_3_fu_1627_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            GDarray_address0 <= grp_get_index_from_z_fu_797_GDarray_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            GDarray_address0 <= grp_makePatch_alignedToLine_fu_772_GDarray_address0;
        else 
            GDarray_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    GDarray_ce0_assign_proc : process(ap_CS_fsm_state2, ap_block_pp5_stage0_11001, ap_CS_fsm_state64, ap_CS_fsm_state68, ap_CS_fsm_state72, ap_CS_fsm_state78, ap_enable_reg_pp5_iter2, grp_makePatch_alignedToLine_fu_772_GDarray_ce0, grp_get_index_from_z_fu_797_GDarray_ce0, ap_CS_fsm_state16, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            GDarray_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            GDarray_ce0 <= grp_get_index_from_z_fu_797_GDarray_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            GDarray_ce0 <= grp_makePatch_alignedToLine_fu_772_GDarray_ce0;
        else 
            GDarray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state22, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_GDn_points_address0, grp_get_index_from_z_fu_797_GDn_points_address0, ap_CS_fsm_state16, ap_CS_fsm_state91, i_4_cast_fu_1072_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            GDn_points_address0 <= i_4_cast_fu_1072_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            GDn_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            GDn_points_address0 <= grp_get_index_from_z_fu_797_GDn_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            GDn_points_address0 <= grp_makePatch_alignedToLine_fu_772_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state22, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_GDn_points_ce0, grp_get_index_from_z_fu_797_GDn_points_ce0, ap_CS_fsm_state16, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            GDn_points_ce0 <= grp_get_index_from_z_fu_797_GDn_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_772_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1006_1_fu_2563_p2 <= std_logic_vector(unsigned(sub_ln1006_fu_2557_p2) + unsigned(ap_const_lv12_30));
    add_ln1006_fu_2607_p2 <= std_logic_vector(unsigned(trunc_ln1003_reg_3214) + unsigned(ap_const_lv5_1F));
    add_ln1007_fu_2580_p2 <= std_logic_vector(unsigned(sub_ln1006_fu_2557_p2) + unsigned(ap_const_lv12_37));
    add_ln1038_fu_2647_p2 <= std_logic_vector(unsigned(i_9_reg_738) + unsigned(ap_const_lv3_1));
    add_ln1058_fu_2698_p2 <= std_logic_vector(unsigned(select_ln890_reg_2887) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln341_2_fu_1414_p2 <= std_logic_vector(unsigned(zext_ln341_2_fu_1410_p1) + unsigned(ap_const_lv9_181));
    add_ln341_fu_1210_p2 <= std_logic_vector(unsigned(zext_ln341_fu_1206_p1) + unsigned(ap_const_lv9_181));
    add_ln510_fu_1816_p2 <= std_logic_vector(unsigned(zext_ln510_fu_1813_p1) + unsigned(ap_const_lv12_C01));
    add_ln54_1_fu_2027_p2 <= std_logic_vector(unsigned(sub_ln54_2_fu_2021_p2) + unsigned(ap_const_lv38_6010));
    add_ln54_2_fu_2212_p2 <= std_logic_vector(unsigned(sub_ln54_3_fu_2206_p2) + unsigned(ap_const_lv38_4810));
    add_ln54_3_fu_2397_p2 <= std_logic_vector(unsigned(sub_ln54_4_fu_2391_p2) + unsigned(ap_const_lv38_3010));
    add_ln54_fu_1598_p2 <= std_logic_vector(unsigned(sub_ln54_1_fu_1582_p2) + unsigned(sext_ln54_2_fu_1594_p1));
    add_ln857_fu_928_p2 <= std_logic_vector(unsigned(i_reg_544) + unsigned(ap_const_lv3_1));
    add_ln862_fu_948_p2 <= std_logic_vector(unsigned(tmp_reg_2766) + unsigned(ap_const_lv32_1));
    add_ln863_fu_953_p2 <= std_logic_vector(unsigned(i_1_reg_556) + unsigned(ap_const_lv3_1));
    add_ln873_fu_988_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(ap_const_lv32_1));
    add_ln874_fu_993_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_63_phi_fu_570_p4) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln875_fu_1016_p2 <= std_logic_vector(unsigned(i_2_reg_587) + unsigned(ap_const_lv3_1));
    add_ln877_fu_1033_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln882_fu_977_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(ap_const_lv32_1));
    add_ln883_fu_982_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_63_phi_fu_570_p4) + unsigned(ap_const_lv32_1));
    add_ln884_fu_999_p2 <= std_logic_vector(unsigned(i_3_reg_576) + unsigned(ap_const_lv3_1));
    add_ln890_fu_1040_p2 <= std_logic_vector(unsigned(GDn_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln892_fu_1060_p2 <= std_logic_vector(unsigned(i_4_reg_627) + unsigned(ap_const_lv3_1));
    add_ln897_fu_1307_p2 <= std_logic_vector(unsigned(i_5_reg_638) + unsigned(ap_const_lv3_1));
    add_ln903_fu_1511_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_6_phi_fu_653_p4) + unsigned(ap_const_lv3_1));
    add_ln905_fu_1668_p2 <= std_logic_vector(signed(sext_ln905_fu_1604_p1) + signed(sub_ln905_fu_1662_p2));
    add_ln914_fu_1702_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_7_phi_fu_665_p4) + unsigned(ap_const_lv3_1));
    add_ln921_fu_1746_p2 <= std_logic_vector(unsigned(i_8_reg_672) + unsigned(ap_const_lv3_1));
    add_ln945_fu_2098_p2 <= std_logic_vector(unsigned(sub_ln945_fu_2092_p2) + unsigned(sext_ln945_fu_2033_p1));
    add_ln950_fu_2283_p2 <= std_logic_vector(unsigned(sub_ln950_fu_2277_p2) + unsigned(sext_ln950_fu_2218_p1));
    add_ln955_fu_2468_p2 <= std_logic_vector(unsigned(sub_ln955_fu_2462_p2) + unsigned(sext_ln955_fu_2403_p1));
    and_ln894_1_fu_1154_p2 <= (grp_fu_865_p2 and and_ln894_fu_1148_p2);
    and_ln894_fu_1148_p2 <= (or_ln894_fu_1124_p2 and or_ln894_1_fu_1142_p2);
    and_ln899_fu_1360_p2 <= (or_ln899_fu_1354_p2 and grp_fu_865_p2);
    and_ln943_fu_1993_p2 <= (or_ln943_fu_1989_p2 and grp_fu_631_p_dout0);
    and_ln948_fu_2178_p2 <= (or_ln948_fu_2174_p2 and grp_fu_631_p_dout0);
    and_ln953_fu_2363_p2 <= (or_ln953_fu_2359_p2 and grp_fu_631_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(28);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(23);
    ap_CS_fsm_state39 <= ap_CS_fsm(25);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(27);
    ap_CS_fsm_state58 <= ap_CS_fsm(29);
    ap_CS_fsm_state62 <= ap_CS_fsm(31);
    ap_CS_fsm_state63 <= ap_CS_fsm(32);
    ap_CS_fsm_state64 <= ap_CS_fsm(33);
    ap_CS_fsm_state65 <= ap_CS_fsm(34);
    ap_CS_fsm_state66 <= ap_CS_fsm(35);
    ap_CS_fsm_state67 <= ap_CS_fsm(36);
    ap_CS_fsm_state68 <= ap_CS_fsm(37);
    ap_CS_fsm_state69 <= ap_CS_fsm(38);
    ap_CS_fsm_state70 <= ap_CS_fsm(39);
    ap_CS_fsm_state71 <= ap_CS_fsm(40);
    ap_CS_fsm_state72 <= ap_CS_fsm(41);
    ap_CS_fsm_state73 <= ap_CS_fsm(42);
    ap_CS_fsm_state74 <= ap_CS_fsm(43);
    ap_CS_fsm_state75 <= ap_CS_fsm(44);
    ap_CS_fsm_state76 <= ap_CS_fsm(45);
    ap_CS_fsm_state77 <= ap_CS_fsm(46);
    ap_CS_fsm_state78 <= ap_CS_fsm(47);
    ap_CS_fsm_state79 <= ap_CS_fsm(48);
    ap_CS_fsm_state80 <= ap_CS_fsm(49);
    ap_CS_fsm_state81 <= ap_CS_fsm(50);
    ap_CS_fsm_state82 <= ap_CS_fsm(51);
    ap_CS_fsm_state83 <= ap_CS_fsm(52);
    ap_CS_fsm_state84 <= ap_CS_fsm(53);
    ap_CS_fsm_state86 <= ap_CS_fsm(55);
    ap_CS_fsm_state87 <= ap_CS_fsm(56);
    ap_CS_fsm_state88 <= ap_CS_fsm(57);
    ap_CS_fsm_state89 <= ap_CS_fsm(58);
    ap_CS_fsm_state90 <= ap_CS_fsm(59);
    ap_CS_fsm_state91 <= ap_CS_fsm(60);
    ap_CS_fsm_state92 <= ap_CS_fsm(61);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_NS_fsm_state82 <= ap_NS_fsm(51);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp6_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp6_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp6_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp6_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp6_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp6_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp6_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state76_on_subcall_done_assign_proc : process(icmp_ln975_reg_3205, grp_delete_patch_fu_811_ap_done)
    begin
                ap_block_state76_on_subcall_done <= ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (grp_delete_patch_fu_811_ap_done = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state17_assign_proc : process(icmp_ln863_fu_959_p2)
    begin
        if ((icmp_ln863_fu_959_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln884_fu_1005_p2)
    begin
        if ((icmp_ln884_fu_1005_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state23_assign_proc : process(icmp_ln875_fu_1022_p2)
    begin
        if ((icmp_ln875_fu_1022_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state26_assign_proc : process(icmp_ln892_fu_1066_p2)
    begin
        if ((icmp_ln892_fu_1066_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state35_assign_proc : process(icmp_ln897_fu_1313_p2)
    begin
        if ((icmp_ln897_fu_1313_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state40_assign_proc : process(icmp_ln903_fu_1517_p2)
    begin
        if ((icmp_ln903_fu_1517_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state40 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state45_assign_proc : process(icmp_ln909_fu_1696_p2)
    begin
        if ((icmp_ln909_fu_1696_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state45 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state59_assign_proc : process(icmp_ln921_fu_1752_p2)
    begin
        if ((icmp_ln921_fu_1752_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state59 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state59 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7)
    begin
        if (((ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3)
    begin
        if (((ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4, ap_enable_reg_pp6_iter5, ap_enable_reg_pp6_iter6, ap_enable_reg_pp6_iter7, ap_enable_reg_pp6_iter8, ap_enable_reg_pp6_iter9, ap_enable_reg_pp6_iter10, ap_enable_reg_pp6_iter11, ap_enable_reg_pp6_iter12)
    begin
        if (((ap_enable_reg_pp6_iter12 = ap_const_logic_0) and (ap_enable_reg_pp6_iter11 = ap_const_logic_0) and (ap_enable_reg_pp6_iter10 = ap_const_logic_0) and (ap_enable_reg_pp6_iter9 = ap_const_logic_0) and (ap_enable_reg_pp6_iter8 = ap_const_logic_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_0) and (ap_enable_reg_pp6_iter6 = ap_const_logic_0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_current_z_top_index_0_phi_fu_753_p6_assign_proc : process(select_ln890_reg_2887, icmp_ln1028_reg_3230, icmp_ln1038_reg_3249, current_z_top_index_0_reg_750, ap_CS_fsm_state87)
    begin
        if (((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_phi_mux_current_z_top_index_0_phi_fu_753_p6 <= select_ln890_reg_2887;
        else 
            ap_phi_mux_current_z_top_index_0_phi_fu_753_p6 <= current_z_top_index_0_reg_750;
        end if; 
    end process;


    ap_phi_mux_empty_63_phi_fu_570_p4_assign_proc : process(icmp_ln860_reg_2787, add_ln862_reg_2791, ap_CS_fsm_state19, empty_63_reg_567)
    begin
        if (((icmp_ln860_reg_2787 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_phi_mux_empty_63_phi_fu_570_p4 <= add_ln862_reg_2791;
        else 
            ap_phi_mux_empty_63_phi_fu_570_p4 <= empty_63_reg_567;
        end if; 
    end process;


    ap_phi_mux_i_6_phi_fu_653_p4_assign_proc : process(i_6_reg_649, add_ln903_reg_2954, ap_CS_fsm_pp5_stage0, icmp_ln903_reg_2959, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln903_reg_2959 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_i_6_phi_fu_653_p4 <= add_ln903_reg_2954;
        else 
            ap_phi_mux_i_6_phi_fu_653_p4 <= i_6_reg_649;
        end if; 
    end process;


    ap_phi_mux_i_7_phi_fu_665_p4_assign_proc : process(i_7_reg_661, icmp_ln909_reg_3018, ap_CS_fsm_pp6_stage0, add_ln914_reg_3022, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln909_reg_3018 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            ap_phi_mux_i_7_phi_fu_665_p4 <= add_ln914_reg_3022;
        else 
            ap_phi_mux_i_7_phi_fu_665_p4 <= i_7_reg_661;
        end if; 
    end process;


    ap_phi_mux_z_top_min_4_phi_fu_764_p6_assign_proc : process(select_ln958_reg_3198, icmp_ln1028_reg_3230, icmp_ln1038_reg_3249, ap_CS_fsm_state87, z_top_min_4_reg_761)
    begin
        if (((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (icmp_ln1028_reg_3230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_phi_mux_z_top_min_4_phi_fu_764_p6 <= select_ln958_reg_3198;
        else 
            ap_phi_mux_z_top_min_4_phi_fu_764_p6 <= z_top_min_4_reg_761;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(white_space_height_read, ap_CS_fsm_state87, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_0 <= white_space_height_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(reg_923, ap_CS_fsm_state87, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_1 <= reg_923;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_phi_mux_current_z_top_index_0_phi_fu_753_p6, ap_CS_fsm_state87, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_2 <= ap_phi_mux_current_z_top_index_0_phi_fu_753_p6;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(counter_0_reg_598, ap_CS_fsm_state87, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_3 <= counter_0_reg_598;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(counterUpshift_0_reg_608, ap_CS_fsm_state87, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_4 <= counterUpshift_0_reg_608;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(z_top_min_read, ap_CS_fsm_state87, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_5 <= z_top_min_read;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(select_ln1012_reg_3239, ap_CS_fsm_state87, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_6 <= select_ln1012_reg_3239;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state87, ap_phi_mux_z_top_min_4_phi_fu_764_p6, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            ap_return_7 <= ap_phi_mux_z_top_min_4_phi_fu_764_p6;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;

    bitcast_ln521_1_fu_2143_p1 <= zext_ln368_1_fu_2139_p1;
    bitcast_ln521_2_fu_2328_p1 <= zext_ln368_2_fu_2324_p1;
    bitcast_ln521_fu_1958_p1 <= zext_ln368_fu_1954_p1;
    bitcast_ln894_1_fu_1095_p1 <= sub_reg_2925_pp3_iter6_reg;
    bitcast_ln894_fu_1078_p1 <= conv_reg_2932;
    bitcast_ln899_fu_1324_p1 <= reg_905;

    current_z_i_index_address0_assign_proc : process(zext_ln855_reg_2778, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, i_1_cast_fu_965_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_3_cast_fu_1011_p1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_2_cast_fu_1028_p1, ap_CS_fsm_state16, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            current_z_i_index_address0 <= i_2_cast_fu_1028_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            current_z_i_index_address0 <= i_3_cast_fu_1011_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            current_z_i_index_address0 <= i_1_cast_fu_965_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            current_z_i_index_address0 <= zext_ln855_reg_2778(3 - 1 downto 0);
        else 
            current_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, grp_get_index_from_z_fu_797_ap_done, ap_CS_fsm_state16)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_get_index_from_z_fu_797_ap_done = ap_const_logic_1)))) then 
            current_z_i_index_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_we0_assign_proc : process(grp_get_index_from_z_fu_797_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_get_index_from_z_fu_797_ap_done = ap_const_logic_1))) then 
            current_z_i_index_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_2_fu_1366_p3 <= 
        ap_const_lv32_0 when (and_ln899_fu_1360_p2(0) = '1') else 
        bitcast_ln899_fu_1324_p1;
    data_V_3_fu_1782_p1 <= grp_fu_636_p_dout0;
    data_V_4_fu_1946_p1 <= grp_fu_636_p_dout0;
    data_V_5_fu_2131_p1 <= grp_fu_636_p_dout0;
    data_V_6_fu_2316_p1 <= grp_fu_636_p_dout0;
    data_V_fu_1166_p1 <= dc_fu_1160_p3;
    dc_fu_1160_p3 <= 
        conv_reg_2932 when (and_ln894_1_fu_1154_p2(0) = '1') else 
        sub_reg_2925_pp3_iter6_reg;
    grp_areWedgeSuperPointsEqual_fu_839_ap_start <= grp_areWedgeSuperPointsEqual_fu_839_ap_start_reg;
    grp_delete_patch_fu_811_ap_start <= grp_delete_patch_fu_811_ap_start_reg;
    grp_fu_1575_p_ce <= ap_const_logic_1;
    grp_fu_1575_p_din0 <= grp_fu_856_p0;
    grp_fu_1578_p_ce <= ap_const_logic_1;
    grp_fu_1578_p_din0 <= new_z_i_index_q1;
    grp_fu_631_p_ce <= ap_const_logic_1;
    grp_fu_631_p_din0 <= grp_fu_872_p0;
    grp_fu_631_p_din1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_631_p_opcode <= ap_const_lv5_4;
    grp_fu_636_p_ce <= ap_const_logic_1;
    grp_fu_636_p_din0 <= grp_fu_877_p0;
    grp_fu_856_ce <= ap_const_logic_1;

    grp_fu_856_p0_assign_proc : process(GDn_points_q0, new_z_i_index_q0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_856_p0 <= new_z_i_index_q0;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_856_p0 <= GDn_points_q0;
        else 
            grp_fu_856_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_856_p1 <= grp_fu_1575_p_dout0;
    grp_fu_860_ce <= ap_const_logic_1;
    grp_fu_860_p0 <= new_z_i_index_q1;
    grp_fu_860_p1 <= grp_fu_1578_p_dout0;

    grp_fu_865_p0_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp3_iter6, ap_block_pp3_stage0, ap_block_pp4_stage0, grp_fu_1575_p_dout0, grp_fu_1578_p_dout0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_865_p0 <= grp_fu_1575_p_dout0;
        elsif (((ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_865_p0 <= grp_fu_1578_p_dout0;
        else 
            grp_fu_865_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_865_p1_assign_proc : process(ap_enable_reg_pp4_iter2, sub_reg_2925, ap_enable_reg_pp3_iter6, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_865_p1 <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_865_p1 <= sub_reg_2925;
        else 
            grp_fu_865_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_872_ce <= ap_const_logic_1;
    grp_fu_872_opcode <= ap_const_lv5_4;

    grp_fu_872_p0_assign_proc : process(bitcast_ln521_fu_1958_p1, ap_CS_fsm_state63, bitcast_ln521_1_fu_2143_p1, ap_CS_fsm_state67, bitcast_ln521_2_fu_2328_p1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_872_p0 <= bitcast_ln521_2_fu_2328_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_872_p0 <= bitcast_ln521_1_fu_2143_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_872_p0 <= bitcast_ln521_fu_1958_p1;
        else 
            grp_fu_872_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_872_p1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_872_p2 <= grp_fu_631_p_dout0;
    grp_fu_877_ce <= ap_const_logic_1;

    grp_fu_877_p0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, sub_ln923_fu_1776_p2, ap_CS_fsm_state62, sub_ln943_fu_1940_p2, sub_ln948_fu_2125_p2, ap_CS_fsm_state66, sub_ln953_fu_2310_p2, ap_CS_fsm_state70, ap_block_pp7_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_877_p0 <= sub_ln953_fu_2310_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_877_p0 <= sub_ln948_fu_2125_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_877_p0 <= sub_ln943_fu_1940_p2;
        elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            grp_fu_877_p0 <= sub_ln923_fu_1776_p2;
        else 
            grp_fu_877_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_877_p1 <= grp_fu_636_p_dout0;
    grp_fu_880_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv32_1));
    grp_fu_899_p2 <= std_logic_vector(unsigned(n_patches_i) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_get_index_from_z_fu_797_ap_start <= grp_get_index_from_z_fu_797_ap_start_reg;

    grp_get_index_from_z_fu_797_layer_assign_proc : process(ap_CS_fsm_state2, i_reg_544, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_get_index_from_z_fu_797_layer <= i_reg_544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_797_layer <= ap_const_lv3_4;
        else 
            grp_get_index_from_z_fu_797_layer <= "XXX";
        end if; 
    end process;


    grp_get_index_from_z_fu_797_z_value_assign_proc : process(z_top_min_read, ap_CS_fsm_state2, tmp_s_reg_2796, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_get_index_from_z_fu_797_z_value <= tmp_s_reg_2796;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_797_z_value <= z_top_min_read;
        else 
            grp_get_index_from_z_fu_797_z_value <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_makePatch_alignedToLine_fu_772_ap_start <= grp_makePatch_alignedToLine_fu_772_ap_start_reg;

    grp_makePatch_alignedToLine_fu_772_p_read_assign_proc : process(ppl, ppl_assign2_reg_3209, ap_CS_fsm_state78, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_makePatch_alignedToLine_fu_772_p_read <= ppl_assign2_reg_3209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_makePatch_alignedToLine_fu_772_p_read <= ppl;
        else 
            grp_makePatch_alignedToLine_fu_772_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_makePatch_alignedToLine_fu_772_z_top_assign_proc : process(tmp_11_reg_3077, select_ln958_reg_3198, ap_CS_fsm_state78, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_makePatch_alignedToLine_fu_772_z_top <= tmp_11_reg_3077;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_makePatch_alignedToLine_fu_772_z_top <= select_ln958_reg_3198;
        else 
            grp_makePatch_alignedToLine_fu_772_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din1 <= complementary_apexZ0;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din2 <= grp_straightLineProjectorFromLayerIJtoK_fu_823_z_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din3 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din4 <= grp_straightLineProjectorFromLayerIJtoK_fu_823_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_din5 <= grp_straightLineProjectorFromLayerIJtoK_fu_823_k;
    grp_straightLineProjectorFromLayerIJtoK_fu_602_p_start <= grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_done <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_done;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_idle <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_idle;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_ready <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_ready;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_602_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_823_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_823_i <= ap_const_lv3_1;

    grp_straightLineProjectorFromLayerIJtoK_fu_823_j_assign_proc : process(icmp_ln909_reg_3018, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, ap_CS_fsm_state4, zext_ln911_fu_1717_p1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln909_reg_3018 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_j <= zext_ln911_fu_1717_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_j <= ap_const_lv32_5;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_823_k_assign_proc : process(add_ln857_reg_2772, icmp_ln909_reg_3018, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln909_reg_3018 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_k <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_k <= add_ln857_reg_2772;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_k <= "XXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_823_z_i <= complementary_apexZ0;

    grp_straightLineProjectorFromLayerIJtoK_fu_823_z_j_assign_proc : process(z_top_min_read, icmp_ln909_reg_3018, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, new_z_i_q0, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln909_reg_3018 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_z_j <= new_z_i_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_z_j <= z_top_min_read;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_823_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_cast_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_556),64));
    i_2_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_587),64));
    i_3_cast_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_576),64));
    i_4_cast_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_627),64));
    i_5_cast_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_638),64));
    i_6_cast13_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_6_phi_fu_653_p4),64));
    icmp_ln1012_fu_2622_p2 <= "1" when (signed(sub_ln1012_fu_2612_p2) < signed(sub_ln1012_1_fu_2617_p2)) else "0";
    icmp_ln1028_fu_2601_p2 <= "1" when (signed(tmp_41_fu_2591_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_ln1038_fu_2641_p2 <= "1" when (i_9_reg_738 = ap_const_lv3_5) else "0";
    icmp_ln855_fu_938_p2 <= "1" when (i_reg_544 = ap_const_lv3_5) else "0";
    icmp_ln860_fu_944_p2 <= "1" when (z_top_min_read = previous_z_top_min_read) else "0";
    icmp_ln863_fu_959_p2 <= "1" when (i_1_reg_556 = ap_const_lv3_5) else "0";
    icmp_ln875_fu_1022_p2 <= "1" when (i_2_reg_587 = ap_const_lv3_5) else "0";
    icmp_ln884_fu_1005_p2 <= "1" when (i_3_reg_576 = ap_const_lv3_5) else "0";
    icmp_ln890_fu_1046_p2 <= "1" when (signed(empty_66_reg_618) < signed(add_ln890_fu_1040_p2)) else "0";
    icmp_ln892_fu_1066_p2 <= "1" when (i_4_reg_627 = ap_const_lv3_5) else "0";
    icmp_ln894_1_fu_1118_p2 <= "1" when (trunc_ln894_fu_1091_p1 = ap_const_lv23_0) else "0";
    icmp_ln894_2_fu_1130_p2 <= "0" when (tmp_2_fu_1098_p4 = ap_const_lv8_FF) else "1";
    icmp_ln894_3_fu_1136_p2 <= "1" when (trunc_ln894_1_fu_1108_p1 = ap_const_lv23_0) else "0";
    icmp_ln894_fu_1112_p2 <= "0" when (tmp_9_fu_1081_p4 = ap_const_lv8_FF) else "1";
    icmp_ln897_fu_1313_p2 <= "1" when (i_5_reg_638 = ap_const_lv3_5) else "0";
    icmp_ln899_1_fu_1348_p2 <= "1" when (trunc_ln899_fu_1338_p1 = ap_const_lv23_0) else "0";
    icmp_ln899_fu_1342_p2 <= "0" when (tmp_6_fu_1328_p4 = ap_const_lv8_FF) else "1";
    icmp_ln903_fu_1517_p2 <= "1" when (ap_phi_mux_i_6_phi_fu_653_p4 = ap_const_lv3_5) else "0";
    icmp_ln909_fu_1696_p2 <= "1" when (ap_phi_mux_i_7_phi_fu_665_p4 = ap_const_lv3_5) else "0";
    icmp_ln921_fu_1752_p2 <= "1" when (i_8_reg_672 = ap_const_lv3_4) else "0";
    icmp_ln923_fu_1897_p2 <= "1" when (signed(val_3_fu_1889_p3) < signed(layerSMin_reg_683)) else "0";
    icmp_ln943_1_fu_1983_p2 <= "1" when (trunc_ln943_fu_1973_p1 = ap_const_lv52_0) else "0";
    icmp_ln943_fu_1977_p2 <= "0" when (tmp_12_fu_1963_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln948_1_fu_2168_p2 <= "1" when (trunc_ln948_fu_2158_p1 = ap_const_lv52_0) else "0";
    icmp_ln948_fu_2162_p2 <= "0" when (tmp_18_fu_2148_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln953_1_fu_2353_p2 <= "1" when (trunc_ln953_fu_2343_p1 = ap_const_lv52_0) else "0";
    icmp_ln953_fu_2347_p2 <= "0" when (tmp_21_fu_2333_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln975_fu_2524_p2 <= "1" when (signed(n_patches_i) > signed(nPatchesAtOriginal)) else "0";
    isNeg_2_fu_1420_p3 <= add_ln341_2_fu_1414_p2(8 downto 8);
    isNeg_3_fu_1822_p3 <= add_ln510_fu_1816_p2(11 downto 11);
    isNeg_fu_1216_p3 <= add_ln341_fu_1210_p2(8 downto 8);
    layerSMin_1_fu_1914_p3 <= 
        val_3_fu_1889_p3 when (icmp_ln923_fu_1897_p2(0) = '1') else 
        layerSMin_reg_683;
    layerWithSmallestShift_1_fu_1906_p3 <= 
        zext_ln923_fu_1903_p1 when (icmp_ln923_fu_1897_p2(0) = '1') else 
        layerWithSmallestShift_reg_695;
    lshr_ln905_fu_1685_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln905_2_fu_1681_p1(31-1 downto 0)))));
    lshr_ln945_fu_2115_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln945_2_fu_2111_p1(31-1 downto 0)))));
    lshr_ln950_fu_2300_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln950_2_fu_2296_p1(31-1 downto 0)))));
    lshr_ln955_fu_2485_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln955_2_fu_2481_p1(31-1 downto 0)))));
    mantissa_2_fu_1396_p4 <= ((ap_const_lv1_1 & tmp_45_fu_1392_p1) & ap_const_lv1_0);
    mantissa_3_fu_1800_p4 <= ((ap_const_lv1_1 & tmp_47_reg_3062) & ap_const_lv1_0);
    mantissa_fu_1192_p4 <= ((ap_const_lv1_1 & tmp_43_fu_1188_p1) & ap_const_lv1_0);
    mul_ln905_fu_1611_p0 <= mul_ln905_fu_1611_p00(64 - 1 downto 0);
    mul_ln905_fu_1611_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln905_fu_1604_p1),129));
    mul_ln905_fu_1611_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln945_fu_2041_p0 <= mul_ln945_fu_2041_p00(64 - 1 downto 0);
    mul_ln945_fu_2041_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln945_fu_2033_p1),129));
    mul_ln945_fu_2041_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln950_fu_2226_p0 <= mul_ln950_fu_2226_p00(64 - 1 downto 0);
    mul_ln950_fu_2226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln950_fu_2218_p1),129));
    mul_ln950_fu_2226_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln955_fu_2411_p0 <= mul_ln955_fu_2411_p00(64 - 1 downto 0);
    mul_ln955_fu_2411_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln955_fu_2403_p1),129));
    mul_ln955_fu_2411_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln958_fu_2503_p0 <= std_logic_vector(unsigned(z_top_min_2_reg_728) - unsigned(z_top_min_read));

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_n_patches_o, grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld, grp_delete_patch_fu_811_n_patches, grp_delete_patch_fu_811_n_patches_ap_vld, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state89) and (grp_delete_patch_fu_811_n_patches_ap_vld = ap_const_logic_1)) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76) and (grp_delete_patch_fu_811_n_patches_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_delete_patch_fu_811_n_patches;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state91) and (grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_772_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld, grp_delete_patch_fu_811_n_patches_ap_vld, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            n_patches_o_ap_vld <= grp_delete_patch_fu_811_n_patches_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_772_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_address0_assign_proc : process(i_6_cast13_reg_2963_pp5_iter2_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter3, ap_block_pp5_stage0, ap_block_pp6_stage0, trunc_ln914_cast_fu_1708_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            new_z_i_address0 <= trunc_ln914_cast_fu_1708_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_address0 <= i_6_cast13_reg_2963_pp5_iter2_reg(3 - 1 downto 0);
        else 
            new_z_i_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter3)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            new_z_i_ce0 <= ap_const_logic_1;
        else 
            new_z_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    new_z_i_d0 <= lshr_ln905_fu_1685_p2(64 - 1 downto 0);

    new_z_i_index_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp0_stage0, i_1_cast_reg_2810, ap_CS_fsm_pp1_stage0, i_3_cast_reg_2853, ap_CS_fsm_pp2_stage0, i_2_cast_reg_2877, new_z_i_index_addr_3_reg_2909_pp3_iter6_reg, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter7, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, i_5_cast_fu_1319_p1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            new_z_i_index_address0 <= i_5_cast_fu_1319_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_address0 <= new_z_i_index_addr_3_reg_2909_pp3_iter6_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            new_z_i_index_address0 <= i_2_cast_reg_2877(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            new_z_i_index_address0 <= i_3_cast_reg_2853(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            new_z_i_index_address0 <= i_1_cast_reg_2810(3 - 1 downto 0);
        else 
            new_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_address1_assign_proc : process(new_z_i_index_addr_3_reg_2909_pp3_iter3_reg, new_z_i_index_addr_4_reg_2948_pp4_iter2_reg, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, i_6_cast13_fu_1523_p1, ap_enable_reg_pp3_iter4, ap_enable_reg_pp4_iter3, ap_block_pp5_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_index_address1 <= i_6_cast13_fu_1523_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_4_reg_2948_pp4_iter2_reg;
        elsif (((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_3_reg_2909_pp3_iter3_reg;
        else 
            new_z_i_index_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter7)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            new_z_i_index_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_ce1_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp3_iter4, ap_enable_reg_pp4_iter3)
    begin
        if ((((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            new_z_i_index_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter7, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, grp_fu_880_p2, add_ln877_fu_1033_p2, result_V_13_fu_1298_p3)
    begin
        if (((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_d0 <= result_V_13_fu_1298_p3;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            new_z_i_index_d0 <= add_ln877_fu_1033_p2;
        elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            new_z_i_index_d0 <= grp_fu_880_p2;
        else 
            new_z_i_index_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    new_z_i_index_d1 <= 
        result_V_10_fu_1496_p2 when (p_Result_2_fu_1374_p3(0) = '1') else 
        val_2_fu_1488_p3;

    new_z_i_index_we0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln863_reg_2806, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln884_reg_2849, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln875_reg_2873, icmp_ln892_reg_2905_pp3_iter6_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter7)
    begin
        if ((((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (icmp_ln892_reg_2905_pp3_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln875_reg_2873 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln884_reg_2849 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln863_reg_2806 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            new_z_i_index_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_we1_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln897_reg_2944_pp4_iter2_reg, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (icmp_ln897_reg_2944_pp4_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            new_z_i_index_we1 <= ap_const_logic_1;
        else 
            new_z_i_index_we1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln903_reg_2959_pp5_iter2_reg, ap_enable_reg_pp5_iter3)
    begin
        if (((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (icmp_ln903_reg_2959_pp5_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            new_z_i_we0 <= ap_const_logic_1;
        else 
            new_z_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1006_fu_2569_p2 <= (ap_const_lv12_1 or add_ln1006_1_fu_2563_p2);
    or_ln54_fu_1588_p2 <= (sub_ln54_fu_1552_p2 or ap_const_lv17_10);
    or_ln894_1_fu_1142_p2 <= (icmp_ln894_3_fu_1136_p2 or icmp_ln894_2_fu_1130_p2);
    or_ln894_fu_1124_p2 <= (icmp_ln894_fu_1112_p2 or icmp_ln894_1_fu_1118_p2);
    or_ln899_fu_1354_p2 <= (icmp_ln899_fu_1342_p2 or icmp_ln899_1_fu_1348_p2);
    or_ln943_fu_1989_p2 <= (icmp_ln943_reg_3094 or icmp_ln943_1_reg_3099);
    or_ln948_fu_2174_p2 <= (icmp_ln948_reg_3132 or icmp_ln948_1_reg_3137);
    or_ln953_fu_2359_p2 <= (icmp_ln953_reg_3170 or icmp_ln953_1_reg_3175);
    p_Result_2_fu_1374_p3 <= data_V_2_fu_1366_p3(31 downto 31);
    p_Result_3_fu_1950_p1 <= data_V_4_fu_1946_p1(63 - 1 downto 0);
    p_Result_4_fu_2135_p1 <= data_V_5_fu_2131_p1(63 - 1 downto 0);
    p_Result_5_fu_2320_p1 <= data_V_6_fu_2316_p1(63 - 1 downto 0);
    p_Result_s_fu_1170_p3 <= data_V_fu_1166_p1(31 downto 31);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state79, icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_patches_parameters_address0, grp_delete_patch_fu_811_patches_parameters_address0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89, zext_ln1007_fu_2586_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            patches_parameters_address0 <= zext_ln1007_fu_2586_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_parameters_address0 <= grp_delete_patch_fu_811_patches_parameters_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_772_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(ap_CS_fsm_state79, icmp_ln975_reg_3205, grp_delete_patch_fu_811_patches_parameters_address1, ap_CS_fsm_state76, ap_CS_fsm_state89, zext_ln1006_fu_2575_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            patches_parameters_address1 <= zext_ln1006_fu_2575_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_parameters_address1 <= grp_delete_patch_fu_811_patches_parameters_address1;
        else 
            patches_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_CS_fsm_state79, icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_patches_parameters_ce0, grp_delete_patch_fu_811_patches_parameters_ce0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_parameters_ce0 <= grp_delete_patch_fu_811_patches_parameters_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_772_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_CS_fsm_state79, icmp_ln975_reg_3205, grp_delete_patch_fu_811_patches_parameters_ce1, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_parameters_ce1 <= grp_delete_patch_fu_811_patches_parameters_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_patches_parameters_d0, grp_delete_patch_fu_811_patches_parameters_d0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_parameters_d0 <= grp_delete_patch_fu_811_patches_parameters_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_772_patches_parameters_d0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_patches_parameters_we0, grp_delete_patch_fu_811_patches_parameters_we0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_parameters_we0 <= grp_delete_patch_fu_811_patches_parameters_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_772_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, icmp_ln1038_reg_3249, grp_makePatch_alignedToLine_fu_772_patches_superpoints_address0, grp_delete_patch_fu_811_patches_superpoints_address0, grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if ((((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82)))) then 
            patches_superpoints_address0 <= grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_address0 <= grp_delete_patch_fu_811_patches_superpoints_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_772_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_address1_assign_proc : process(icmp_ln975_reg_3205, icmp_ln1038_reg_3249, grp_delete_patch_fu_811_patches_superpoints_address1, grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address1, ap_CS_fsm_state76, ap_CS_fsm_state89, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if ((((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82)))) then 
            patches_superpoints_address1 <= grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_address1 <= grp_delete_patch_fu_811_patches_superpoints_address1;
        else 
            patches_superpoints_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, icmp_ln1038_reg_3249, grp_makePatch_alignedToLine_fu_772_patches_superpoints_ce0, grp_delete_patch_fu_811_patches_superpoints_ce0, grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if ((((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82)))) then 
            patches_superpoints_ce0 <= grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_ce0 <= grp_delete_patch_fu_811_patches_superpoints_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_772_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln975_reg_3205, icmp_ln1038_reg_3249, grp_delete_patch_fu_811_patches_superpoints_ce1, grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce1, ap_CS_fsm_state76, ap_CS_fsm_state89, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if ((((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln1038_reg_3249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82)))) then 
            patches_superpoints_ce1 <= grp_areWedgeSuperPointsEqual_fu_839_wsp1_2_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_ce1 <= grp_delete_patch_fu_811_patches_superpoints_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_patches_superpoints_d0, grp_delete_patch_fu_811_patches_superpoints_d0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_d0 <= grp_delete_patch_fu_811_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_772_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(icmp_ln975_reg_3205, ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_patches_superpoints_we0, grp_delete_patch_fu_811_patches_superpoints_we0, ap_CS_fsm_state91, ap_CS_fsm_state76, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or ((icmp_ln975_reg_3205 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_we0 <= grp_delete_patch_fu_811_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_772_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_4_fu_1256_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1202_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1246_p1(31-1 downto 0)))));
    r_V_5_fu_1454_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_1406_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i54_cast_cast_cast_cast_fu_1450_p1(31-1 downto 0)))));
    r_V_6_fu_1460_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_1406_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i54_cast_cast_cast_cast_fu_1450_p1(31-1 downto 0)))));
    r_V_7_fu_1855_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_1809_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i91_cast_cast_cast_cast_fu_1851_p1(31-1 downto 0)))));
    r_V_8_fu_1861_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_1809_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i91_cast_cast_cast_cast_fu_1851_p1(31-1 downto 0)))));
    r_V_fu_1250_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1202_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1246_p1(31-1 downto 0)))));
    result_V_10_fu_1496_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_2_fu_1488_p3));
    result_V_13_fu_1298_p3 <= 
        result_V_9_fu_1292_p2 when (p_Result_s_fu_1170_p3(0) = '1') else 
        val_fu_1284_p3;
    result_V_9_fu_1292_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_1284_p3));
    select_ln1012_fu_2628_p3 <= 
        sub_ln1012_1_fu_2617_p2 when (icmp_ln1012_fu_2622_p2(0) = '1') else 
        sub_ln1012_fu_2612_p2;
    select_ln890_fu_1052_p3 <= 
        empty_66_reg_618 when (icmp_ln890_fu_1046_p2(0) = '1') else 
        add_ln890_fu_1040_p2;
    select_ln958_fu_2516_p3 <= 
        new_z_i_atTop_3_fu_272 when (tmp_40_fu_2508_p3(0) = '1') else 
        z_top_min_2_reg_728;
        sext_ln1311_2_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_1428_p2),9));

        sext_ln1311_3_fu_1835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_3_fu_1830_p2),12));

        sext_ln1311_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1224_p2),9));

        sext_ln54_1_fu_1578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_3_fu_1570_p3),38));

        sext_ln54_2_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln54_fu_1588_p2),38));

        sext_ln54_3_fu_2006_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_4_fu_1999_p3),38));

        sext_ln54_4_fu_2017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_5_fu_2010_p3),38));

        sext_ln54_5_fu_2191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_6_fu_2184_p3),38));

        sext_ln54_6_fu_2202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_7_fu_2195_p3),38));

        sext_ln54_7_fu_2376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_8_fu_2369_p3),38));

        sext_ln54_8_fu_2387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_9_fu_2380_p3),38));

        sext_ln54_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_2_fu_1558_p3),38));

        sext_ln905_fu_1604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_reg_2973),64));

        sext_ln945_fu_2033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_1_fu_2027_p2),64));

        sext_ln950_fu_2218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_2_fu_2212_p2),64));

        sext_ln955_fu_2403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_3_fu_2397_p2),64));

    sh_prom_i_i_i_i_i54_cast_cast_cast_cast_fu_1450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i54_cast_cast_cast_fu_1446_p1),79));
        sh_prom_i_i_i_i_i54_cast_cast_cast_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1438_p3),32));

    sh_prom_i_i_i_i_i91_cast_cast_cast_cast_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i91_cast_cast_cast_fu_1847_p1),169));
        sh_prom_i_i_i_i_i91_cast_cast_cast_fu_1847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_1839_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1242_p1),79));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1234_p3),32));

    shl_ln1_fu_1674_p3 <= (add_ln905_reg_2983 & ap_const_lv3_0);
    shl_ln2_fu_2104_p3 <= (add_ln945_reg_3112 & ap_const_lv3_0);
    shl_ln3_fu_2289_p3 <= (add_ln950_reg_3150 & ap_const_lv3_0);
    shl_ln4_fu_2474_p3 <= (add_ln955_reg_3188 & ap_const_lv3_0);
    shl_ln54_1_fu_1540_p3 <= (i_6_reg_649 & ap_const_lv11_0);
    shl_ln54_2_fu_1558_p3 <= (new_z_i_index_q1 & ap_const_lv5_0);
    shl_ln54_3_fu_1570_p3 <= (new_z_i_index_q1 & ap_const_lv3_0);
    shl_ln54_4_fu_1999_p3 <= (select_ln890_reg_2887 & ap_const_lv5_0);
    shl_ln54_5_fu_2010_p3 <= (select_ln890_reg_2887 & ap_const_lv3_0);
    shl_ln54_6_fu_2184_p3 <= (select_ln890_reg_2887 & ap_const_lv5_0);
    shl_ln54_7_fu_2195_p3 <= (select_ln890_reg_2887 & ap_const_lv3_0);
    shl_ln54_8_fu_2369_p3 <= (select_ln890_reg_2887 & ap_const_lv5_0);
    shl_ln54_9_fu_2380_p3 <= (select_ln890_reg_2887 & ap_const_lv3_0);
    shl_ln905_1_fu_1642_p3 <= (tmp_23_fu_1632_p4 & ap_const_lv5_0);
    shl_ln905_2_fu_1650_p3 <= (tmp_32_fu_1617_p4 & ap_const_lv3_0);
    shl_ln945_1_fu_2072_p3 <= (tmp_29_fu_2062_p4 & ap_const_lv5_0);
    shl_ln945_2_fu_2080_p3 <= (tmp_37_fu_2047_p4 & ap_const_lv3_0);
    shl_ln950_1_fu_2257_p3 <= (tmp_30_fu_2247_p4 & ap_const_lv5_0);
    shl_ln950_2_fu_2265_p3 <= (tmp_38_fu_2232_p4 & ap_const_lv3_0);
    shl_ln955_1_fu_2442_p3 <= (tmp_33_fu_2432_p4 & ap_const_lv5_0);
    shl_ln955_2_fu_2450_p3 <= (tmp_39_fu_2417_p4 & ap_const_lv3_0);
    shl_ln_fu_1528_p3 <= (i_6_reg_649 & ap_const_lv13_0);
    sub_ln1006_fu_2557_p2 <= std_logic_vector(unsigned(tmp_47_cast_fu_2537_p3) - unsigned(tmp_48_cast_fu_2549_p3));
    sub_ln1012_1_fu_2617_p2 <= std_logic_vector(unsigned(original_d) - unsigned(patches_parameters_q0));
    sub_ln1012_fu_2612_p2 <= std_logic_vector(unsigned(original_c) - unsigned(patches_parameters_q1));
    sub_ln1311_2_fu_1428_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_44_fu_1382_p4));
    sub_ln1311_3_fu_1830_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_46_reg_3056));
    sub_ln1311_fu_1224_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_42_fu_1178_p4));
    sub_ln54_1_fu_1582_p2 <= std_logic_vector(signed(sext_ln54_fu_1566_p1) - signed(sext_ln54_1_fu_1578_p1));
    sub_ln54_2_fu_2021_p2 <= std_logic_vector(signed(sext_ln54_3_fu_2006_p1) - signed(sext_ln54_4_fu_2017_p1));
    sub_ln54_3_fu_2206_p2 <= std_logic_vector(signed(sext_ln54_5_fu_2191_p1) - signed(sext_ln54_6_fu_2202_p1));
    sub_ln54_4_fu_2391_p2 <= std_logic_vector(signed(sext_ln54_7_fu_2376_p1) - signed(sext_ln54_8_fu_2387_p1));
    sub_ln54_fu_1552_p2 <= std_logic_vector(unsigned(zext_ln54_fu_1536_p1) - unsigned(zext_ln54_1_fu_1548_p1));
    sub_ln905_fu_1662_p2 <= std_logic_vector(unsigned(zext_ln905_1_fu_1658_p1) - unsigned(shl_ln905_1_fu_1642_p3));
    sub_ln923_fu_1776_p2 <= std_logic_vector(unsigned(tmp_15_fu_1762_p6) - unsigned(z_top_min_read));
    sub_ln943_fu_1940_p2 <= std_logic_vector(unsigned(tmp_11_fu_1926_p6) - unsigned(z_top_min_read));
    sub_ln945_fu_2092_p2 <= std_logic_vector(unsigned(zext_ln945_1_fu_2088_p1) - unsigned(shl_ln945_1_fu_2072_p3));
    sub_ln948_fu_2125_p2 <= std_logic_vector(unsigned(z_top_min_0_reg_707) - unsigned(z_top_min_read));
    sub_ln950_fu_2277_p2 <= std_logic_vector(unsigned(zext_ln950_1_fu_2273_p1) - unsigned(shl_ln950_1_fu_2257_p3));
    sub_ln953_fu_2310_p2 <= std_logic_vector(unsigned(z_top_min_1_reg_717) - unsigned(z_top_min_read));
    sub_ln955_fu_2462_p2 <= std_logic_vector(unsigned(zext_ln955_1_fu_2458_p1) - unsigned(shl_ln955_1_fu_2442_p3));
    temp_address0 <= grp_makePatch_alignedToLine_fu_772_temp_address0;
    temp_address1 <= grp_makePatch_alignedToLine_fu_772_temp_address1;

    temp_ce0_assign_proc : process(ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_temp_ce0, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            temp_ce0 <= grp_makePatch_alignedToLine_fu_772_temp_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_temp_ce1, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            temp_ce1 <= grp_makePatch_alignedToLine_fu_772_temp_ce1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= grp_makePatch_alignedToLine_fu_772_temp_d0;

    temp_we0_assign_proc : process(ap_CS_fsm_state78, grp_makePatch_alignedToLine_fu_772_temp_we0, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            temp_we0 <= grp_makePatch_alignedToLine_fu_772_temp_we0;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    thirdLastPatchIdx_fu_2636_p2 <= std_logic_vector(unsigned(trunc_ln1003_reg_3214) + unsigned(ap_const_lv5_1D));
    tmp_11_fu_1926_p5 <= layerWithSmallestShift_reg_695(2 - 1 downto 0);
    tmp_12_fu_1963_p4 <= data_V_4_fu_1946_p1(62 downto 52);
    tmp_15_fu_1762_p5 <= i_8_reg_672(2 - 1 downto 0);
    tmp_16_fu_970_p1 <= white_space_height_read;
    tmp_16_fu_970_p3 <= tmp_16_fu_970_p1(63 downto 63);
    tmp_17_fu_1274_p4 <= r_V_4_fu_1256_p2(55 downto 24);
    tmp_18_fu_2148_p4 <= data_V_5_fu_2131_p1(62 downto 52);
    tmp_21_fu_2333_p4 <= data_V_6_fu_2316_p1(62 downto 52);
    tmp_22_fu_1478_p4 <= r_V_6_fu_1460_p2(55 downto 24);
    tmp_23_fu_1632_p4 <= mul_ln905_fu_1611_p2(127 downto 69);
    tmp_26_fu_1262_p3 <= r_V_fu_1250_p2(24 downto 24);
    tmp_28_fu_1879_p4 <= r_V_8_fu_1861_p2(116 downto 53);
    tmp_29_fu_2062_p4 <= mul_ln945_fu_2041_p2(127 downto 69);
    tmp_2_fu_1098_p4 <= bitcast_ln894_1_fu_1095_p1(30 downto 23);
    tmp_30_fu_2247_p4 <= mul_ln950_fu_2226_p2(127 downto 69);
    tmp_31_fu_1466_p3 <= r_V_5_fu_1454_p2(24 downto 24);
    tmp_32_fu_1617_p4 <= mul_ln905_fu_1611_p2(128 downto 69);
    tmp_33_fu_2432_p4 <= mul_ln955_fu_2411_p2(127 downto 69);
    tmp_36_fu_1867_p3 <= r_V_7_fu_1855_p2(53 downto 53);
    tmp_37_fu_2047_p4 <= mul_ln945_fu_2041_p2(128 downto 69);
    tmp_38_fu_2232_p4 <= mul_ln950_fu_2226_p2(128 downto 69);
    tmp_39_fu_2417_p4 <= mul_ln955_fu_2411_p2(128 downto 69);
    tmp_40_fu_2508_p3 <= mul_ln958_fu_2503_p2(63 downto 63);
    tmp_41_fu_2591_p4 <= n_patches_i(31 downto 2);
    tmp_42_fu_1178_p4 <= data_V_fu_1166_p1(30 downto 23);
    tmp_43_fu_1188_p1 <= data_V_fu_1166_p1(23 - 1 downto 0);
    tmp_44_fu_1382_p4 <= data_V_2_fu_1366_p3(30 downto 23);
    tmp_45_fu_1392_p1 <= data_V_2_fu_1366_p3(23 - 1 downto 0);
    tmp_47_cast_fu_2537_p3 <= (trunc_ln1006_fu_2533_p1 & ap_const_lv7_0);
    tmp_47_fu_1796_p1 <= data_V_3_fu_1782_p1(52 - 1 downto 0);
    tmp_48_cast_fu_2549_p3 <= (trunc_ln1006_1_fu_2545_p1 & ap_const_lv3_0);
    tmp_6_fu_1328_p4 <= bitcast_ln899_fu_1324_p1(30 downto 23);
    tmp_9_fu_1081_p4 <= bitcast_ln894_fu_1078_p1(30 downto 23);
    trunc_ln1003_fu_2529_p1 <= n_patches_i(5 - 1 downto 0);
    trunc_ln1006_1_fu_2545_p1 <= grp_fu_899_p2(9 - 1 downto 0);
    trunc_ln1006_fu_2533_p1 <= grp_fu_899_p2(5 - 1 downto 0);
    trunc_ln894_1_fu_1108_p1 <= bitcast_ln894_1_fu_1095_p1(23 - 1 downto 0);
    trunc_ln894_fu_1091_p1 <= bitcast_ln894_fu_1078_p1(23 - 1 downto 0);
    trunc_ln899_fu_1338_p1 <= bitcast_ln899_fu_1324_p1(23 - 1 downto 0);
    trunc_ln911_fu_1713_p1 <= ap_phi_mux_i_7_phi_fu_665_p4(2 - 1 downto 0);
    trunc_ln914_cast_fu_1708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_7_phi_fu_665_p4),64));
    trunc_ln923_fu_1758_p1 <= i_8_reg_672(2 - 1 downto 0);
    trunc_ln943_fu_1973_p1 <= data_V_4_fu_1946_p1(52 - 1 downto 0);
    trunc_ln945_fu_2121_p1 <= lshr_ln945_fu_2115_p2(64 - 1 downto 0);
    trunc_ln948_fu_2158_p1 <= data_V_5_fu_2131_p1(52 - 1 downto 0);
    trunc_ln950_fu_2306_p1 <= lshr_ln950_fu_2300_p2(64 - 1 downto 0);
    trunc_ln953_fu_2343_p1 <= data_V_6_fu_2316_p1(52 - 1 downto 0);
    trunc_ln955_fu_2491_p1 <= lshr_ln955_fu_2485_p2(64 - 1 downto 0);
    ush_2_fu_1438_p3 <= 
        sext_ln1311_2_fu_1434_p1 when (isNeg_2_fu_1420_p3(0) = '1') else 
        add_ln341_2_fu_1414_p2;
    ush_3_fu_1839_p3 <= 
        sext_ln1311_3_fu_1835_p1 when (isNeg_3_fu_1822_p3(0) = '1') else 
        add_ln510_fu_1816_p2;
    ush_fu_1234_p3 <= 
        sext_ln1311_fu_1230_p1 when (isNeg_fu_1216_p3(0) = '1') else 
        add_ln341_fu_1210_p2;
    val_2_fu_1488_p3 <= 
        zext_ln662_2_fu_1474_p1 when (isNeg_2_fu_1420_p3(0) = '1') else 
        tmp_22_fu_1478_p4;
    val_3_fu_1889_p3 <= 
        zext_ln662_3_fu_1875_p1 when (isNeg_3_fu_1822_p3(0) = '1') else 
        tmp_28_fu_1879_p4;
    val_fu_1284_p3 <= 
        zext_ln662_fu_1270_p1 when (isNeg_fu_1216_p3(0) = '1') else 
        tmp_17_fu_1274_p4;
    zext_ln1006_fu_2575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1006_fu_2569_p2),64));
    zext_ln1007_fu_2586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1007_fu_2580_p2),64));
    zext_ln15_2_fu_1406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1396_p4),79));
    zext_ln15_3_fu_1809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_1800_p4),169));
    zext_ln15_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1192_p4),79));
    zext_ln341_2_fu_1410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1382_p4),9));
    zext_ln341_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1178_p4),9));
    zext_ln368_1_fu_2139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_2135_p1),64));
    zext_ln368_2_fu_2324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_2320_p1),64));
    zext_ln368_fu_1954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_1950_p1),64));
    zext_ln510_fu_1813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_3056),12));
    zext_ln54_1_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_1_fu_1540_p3),17));
    zext_ln54_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1528_p3),17));
    zext_ln662_2_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1466_p3),32));
    zext_ln662_3_fu_1875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_1867_p3),64));
    zext_ln662_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1262_p3),32));
    zext_ln855_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_544),64));
    zext_ln905_1_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln905_2_fu_1650_p3),64));
    zext_ln905_2_fu_1681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1674_p3),192));
    zext_ln905_3_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1617_p4),64));
    zext_ln911_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln914_reg_3022),32));
    zext_ln923_fu_1903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln923_reg_3046_pp7_iter1_reg),32));
    zext_ln945_1_fu_2088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln945_2_fu_2080_p3),64));
    zext_ln945_2_fu_2111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_2104_p3),192));
    zext_ln945_3_fu_2057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_2047_p4),64));
    zext_ln950_1_fu_2273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln950_2_fu_2265_p3),64));
    zext_ln950_2_fu_2296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_2289_p3),192));
    zext_ln950_3_fu_2242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_2232_p4),64));
    zext_ln955_1_fu_2458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln955_2_fu_2450_p3),64));
    zext_ln955_2_fu_2481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_2474_p3),192));
    zext_ln955_3_fu_2427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_2417_p4),64));
end behav;
