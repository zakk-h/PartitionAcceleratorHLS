-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    apexZ0 : IN STD_LOGIC_VECTOR (63 downto 0);
    stop : IN STD_LOGIC_VECTOR (31 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight : IN STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (31 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_we1 : OUT STD_LOGIC;
    patches_parameters_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "makePatches_ShadowQuilt_fromEdges_makePatches_ShadowQuilt_fromEdges,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.322914,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=0,HLS_SYN_FF=40083,HLS_SYN_LUT=118940,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_2FAF080 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000010111110101111000010000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFD050F80 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111101000001010000111110000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_14FB1E4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001010011111011000111100100";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFEB04E1C : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111110101100000100111000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv64_3938700 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000011100100111000011100000000";
    constant ap_const_lv32_5F5E100 : STD_LOGIC_VECTOR (31 downto 0) := "00000101111101011110000100000000";
    constant ap_const_lv64_FFFFFFFFFD050F1C : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111101000001010000111100011100";
    constant ap_const_lv64_E4E1C0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000111001001110000111000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln475_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln475_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln458_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_i_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln486_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln486_1_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_start : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_ap_done : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_ap_idle : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_ap_ready : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_n_patches_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextPatchPair_fu_205_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_GDarray_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_solveNextPatchPair_fu_205_GDarray_ce0 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveNextPatchPair_fu_205_GDn_points_ce0 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_superpoints_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_solveNextPatchPair_fu_205_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_superpoints_we0 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_patches_superpoints_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_solveNextPatchPair_fu_205_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextPatchPair_fu_205_patches_parameters_ce0 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_parameters_we0 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_parameters_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_patches_parameters_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextPatchPair_fu_205_patches_parameters_ce1 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_parameters_we1 : STD_LOGIC;
    signal grp_solveNextPatchPair_fu_205_patches_parameters_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_z_top_max_19_ph_phi_fu_128_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_top_max_19_ph_reg_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_top_max_fu_415_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal phi_ln501_reg_136 : STD_LOGIC_VECTOR (0 downto 0);
    signal nPatchesInColumn_assign_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_max_19_reg_159 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln501_1_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal complementary_apexZ0_0_reg_181 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_top_min_0_reg_193 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextPatchPair_fu_205_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln501_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal saved_apexZ0_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_V_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_285_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_289_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_75_fu_275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_303_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_331_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_299_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_343_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal r_V_fu_347_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_14_fu_353_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal zext_ln662_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_371_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_381_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_17_fu_389_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_fu_395_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln145_fu_403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln477_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln501_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln501_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_solveNextPatchPair IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (31 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        GDarray_ce0 : OUT STD_LOGIC;
        GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_we1 : OUT STD_LOGIC;
        patches_parameters_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ppl : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (63 downto 0);
        z_top_max_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_solveNextPatchPair_fu_205 : component makePatches_ShadowQuilt_fromEdges_solveNextPatchPair
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_solveNextPatchPair_fu_205_ap_start,
        ap_done => grp_solveNextPatchPair_fu_205_ap_done,
        ap_idle => grp_solveNextPatchPair_fu_205_ap_idle,
        ap_ready => grp_solveNextPatchPair_fu_205_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_solveNextPatchPair_fu_205_n_patches_o,
        n_patches_o_ap_vld => grp_solveNextPatchPair_fu_205_n_patches_o_ap_vld,
        GDarray_address0 => grp_solveNextPatchPair_fu_205_GDarray_address0,
        GDarray_ce0 => grp_solveNextPatchPair_fu_205_GDarray_ce0,
        GDarray_q0 => GDarray_q0,
        GDn_points_address0 => grp_solveNextPatchPair_fu_205_GDn_points_address0,
        GDn_points_ce0 => grp_solveNextPatchPair_fu_205_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        patches_superpoints_address0 => grp_solveNextPatchPair_fu_205_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_solveNextPatchPair_fu_205_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_solveNextPatchPair_fu_205_patches_superpoints_we0,
        patches_superpoints_d0 => grp_solveNextPatchPair_fu_205_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        patches_superpoints_address1 => grp_solveNextPatchPair_fu_205_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_solveNextPatchPair_fu_205_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        patches_parameters_address0 => grp_solveNextPatchPair_fu_205_patches_parameters_address0,
        patches_parameters_ce0 => grp_solveNextPatchPair_fu_205_patches_parameters_ce0,
        patches_parameters_we0 => grp_solveNextPatchPair_fu_205_patches_parameters_we0,
        patches_parameters_d0 => grp_solveNextPatchPair_fu_205_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        patches_parameters_address1 => grp_solveNextPatchPair_fu_205_patches_parameters_address1,
        patches_parameters_ce1 => grp_solveNextPatchPair_fu_205_patches_parameters_ce1,
        patches_parameters_we1 => grp_solveNextPatchPair_fu_205_patches_parameters_we1,
        patches_parameters_d1 => grp_solveNextPatchPair_fu_205_patches_parameters_d1,
        patches_parameters_q1 => patches_parameters_q1,
        apexZ0 => saved_apexZ0_fu_108,
        ppl => ppl,
        p_read1 => nPatchesInColumn_assign_reg_147,
        p_read4 => z_top_min_0_reg_193,
        z_top_max_read => z_top_max_19_reg_159,
        p_read7 => complementary_apexZ0_0_reg_181,
        ap_return_0 => grp_solveNextPatchPair_fu_205_ap_return_0,
        ap_return_1 => grp_solveNextPatchPair_fu_205_ap_return_1,
        ap_return_2 => grp_solveNextPatchPair_fu_205_ap_return_2,
        ap_return_3 => grp_solveNextPatchPair_fu_205_ap_return_3,
        ap_return_4 => grp_solveNextPatchPair_fu_205_ap_return_4,
        ap_return_5 => grp_solveNextPatchPair_fu_205_ap_return_5,
        ap_return_6 => grp_solveNextPatchPair_fu_205_ap_return_6);

    fmul_32ns_32ns_32_2_max_dsp_1_U175 : component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv2_i_reg_509,
        din1 => ap_const_lv32_40A00000,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    sitofp_64ns_32_2_no_dsp_1_U176 : component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => saved_apexZ0_fu_108,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_solveNextPatchPair_fu_205_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_solveNextPatchPair_fu_205_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = and_ln501_1_fu_436_p2) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_solveNextPatchPair_fu_205_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveNextPatchPair_fu_205_ap_ready = ap_const_logic_1)) then 
                    grp_solveNextPatchPair_fu_205_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    complementary_apexZ0_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                complementary_apexZ0_0_reg_181 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                complementary_apexZ0_0_reg_181 <= grp_solveNextPatchPair_fu_205_ap_return_4;
            end if; 
        end if;
    end process;

    nPatchesInColumn_assign_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                nPatchesInColumn_assign_reg_147 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                nPatchesInColumn_assign_reg_147 <= grp_solveNextPatchPair_fu_205_ap_return_1;
            end if; 
        end if;
    end process;

    phi_ln501_1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_ln501_1_reg_170 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                phi_ln501_1_reg_170 <= icmp_ln486_fu_470_p2;
            end if; 
        end if;
    end process;

    phi_ln501_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_ln501_reg_136 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                phi_ln501_reg_136 <= icmp_ln486_1_fu_476_p2;
            end if; 
        end if;
    end process;

    saved_apexZ0_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                saved_apexZ0_fu_108 <= ap_const_lv64_14FB1E4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                saved_apexZ0_fu_108 <= grp_solveNextPatchPair_fu_205_ap_return_0;
            end if; 
        end if;
    end process;

    z_top_max_19_ph_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln475_reg_505 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                z_top_max_19_ph_reg_124 <= z_top_max_fu_415_p3;
            elsif (((icmp_ln458_fu_252_p2 = ap_const_lv1_1) and (icmp_ln475_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                z_top_max_19_ph_reg_124 <= ap_const_lv64_2FAF080;
            end if; 
        end if;
    end process;

    z_top_max_19_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                z_top_max_19_reg_159 <= ap_phi_mux_z_top_max_19_ph_phi_fu_128_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                z_top_max_19_reg_159 <= grp_solveNextPatchPair_fu_205_ap_return_5;
            end if; 
        end if;
    end process;

    z_top_min_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                z_top_min_0_reg_193 <= ap_const_lv64_FFFFFFFFFD050F80;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then 
                z_top_min_0_reg_193 <= grp_solveNextPatchPair_fu_205_ap_return_6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv2_i_reg_509 <= grp_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dc_reg_514 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln458_fu_252_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln475_reg_505 <= icmp_ln475_fu_258_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln475_fu_258_p2, ap_CS_fsm_state2, icmp_ln458_fu_252_p2, ap_CS_fsm_state8, grp_solveNextPatchPair_fu_205_ap_done, ap_CS_fsm_state7, and_ln501_1_fu_436_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln458_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln458_fu_252_p2 = ap_const_lv1_1) and (icmp_ln475_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = and_ln501_1_fu_436_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    GDarray_address0 <= grp_solveNextPatchPair_fu_205_GDarray_address0;
    GDarray_ce0 <= grp_solveNextPatchPair_fu_205_GDarray_ce0;
    GDn_points_address0 <= grp_solveNextPatchPair_fu_205_GDn_points_address0;
    GDn_points_ce0 <= grp_solveNextPatchPair_fu_205_GDn_points_ce0;
    add_ln145_fu_403_p2 <= std_logic_vector(unsigned(result_V_fu_395_p3) + unsigned(ap_const_lv64_3938700));
    add_ln341_fu_307_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_181));
    and_ln501_1_fu_436_p2 <= (phi_ln501_1_reg_170 and and_ln501_fu_430_p2);
    and_ln501_fu_430_p2 <= (phi_ln501_reg_136 and icmp_ln501_fu_424_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln458_fu_252_p2)
    begin
        if (((icmp_ln458_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_z_top_max_19_ph_phi_fu_128_p4_assign_proc : process(icmp_ln475_reg_505, z_top_max_19_ph_reg_124, z_top_max_fu_415_p3, ap_CS_fsm_state6)
    begin
        if (((icmp_ln475_reg_505 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_z_top_max_19_ph_phi_fu_128_p4 <= z_top_max_fu_415_p3;
        else 
            ap_phi_mux_z_top_max_19_ph_phi_fu_128_p4 <= z_top_max_19_ph_reg_124;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln458_fu_252_p2)
    begin
        if (((icmp_ln458_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_264_p1 <= dc_reg_514;
    grp_solveNextPatchPair_fu_205_ap_start <= grp_solveNextPatchPair_fu_205_ap_start_reg;
    icmp_ln458_fu_252_p2 <= "1" when (signed(saved_apexZ0_fu_108) > signed(ap_const_lv64_FFFFFFFFFEB04E1C)) else "0";
    icmp_ln475_fu_258_p2 <= "1" when (signed(n_patches_i) > signed(ap_const_lv32_0)) else "0";
    icmp_ln477_fu_409_p2 <= "1" when (signed(add_ln145_fu_403_p2) > signed(ap_const_lv64_2FAF080)) else "0";
    icmp_ln486_1_fu_476_p2 <= "1" when (signed(grp_solveNextPatchPair_fu_205_ap_return_3) < signed(ap_const_lv64_E4E1C0)) else "0";
    icmp_ln486_fu_470_p2 <= "1" when (signed(grp_solveNextPatchPair_fu_205_ap_return_2) > signed(ap_const_lv64_FFFFFFFFFD050F1C)) else "0";
    icmp_ln501_fu_424_p2 <= "1" when (signed(nPatchesInColumn_assign_reg_147) < signed(ap_const_lv32_5F5E100)) else "0";
    isNeg_fu_313_p3 <= add_ln341_fu_307_p2(8 downto 8);
    mantissa_fu_289_p4 <= ((ap_const_lv1_1 & tmp_76_fu_285_p1) & ap_const_lv1_0);

    n_patches_o_assign_proc : process(n_patches_i, ap_CS_fsm_state8, grp_solveNextPatchPair_fu_205_n_patches_o, grp_solveNextPatchPair_fu_205_n_patches_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_solveNextPatchPair_fu_205_n_patches_o_ap_vld = ap_const_logic_1))) then 
            n_patches_o <= grp_solveNextPatchPair_fu_205_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(ap_CS_fsm_state8, grp_solveNextPatchPair_fu_205_n_patches_o_ap_vld)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            n_patches_o_ap_vld <= grp_solveNextPatchPair_fu_205_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_267_p3 <= data_V_fu_264_p1(31 downto 31);
    patches_parameters_address0 <= grp_solveNextPatchPair_fu_205_patches_parameters_address0;
    patches_parameters_address1 <= grp_solveNextPatchPair_fu_205_patches_parameters_address1;
    patches_parameters_ce0 <= grp_solveNextPatchPair_fu_205_patches_parameters_ce0;
    patches_parameters_ce1 <= grp_solveNextPatchPair_fu_205_patches_parameters_ce1;
    patches_parameters_d0 <= grp_solveNextPatchPair_fu_205_patches_parameters_d0;
    patches_parameters_d1 <= grp_solveNextPatchPair_fu_205_patches_parameters_d1;
    patches_parameters_we0 <= grp_solveNextPatchPair_fu_205_patches_parameters_we0;
    patches_parameters_we1 <= grp_solveNextPatchPair_fu_205_patches_parameters_we1;
    patches_superpoints_address0 <= grp_solveNextPatchPair_fu_205_patches_superpoints_address0;
    patches_superpoints_address1 <= grp_solveNextPatchPair_fu_205_patches_superpoints_address1;
    patches_superpoints_ce0 <= grp_solveNextPatchPair_fu_205_patches_superpoints_ce0;
    patches_superpoints_ce1 <= grp_solveNextPatchPair_fu_205_patches_superpoints_ce1;
    patches_superpoints_d0 <= grp_solveNextPatchPair_fu_205_patches_superpoints_d0;
    patches_superpoints_we0 <= grp_solveNextPatchPair_fu_205_patches_superpoints_we0;
    r_V_14_fu_353_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_299_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_343_p1(31-1 downto 0)))));
    r_V_fu_347_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_299_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_343_p1(31-1 downto 0)))));
    result_V_17_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_fu_381_p3));
    result_V_fu_395_p3 <= 
        result_V_17_fu_389_p2 when (p_Result_s_fu_267_p3(0) = '1') else 
        val_fu_381_p3;
        sext_ln1311_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_321_p2),9));

    sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_339_p1),111));
        sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_331_p3),32));

    sub_ln1311_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_75_fu_275_p4));
    tmp_75_fu_275_p4 <= data_V_fu_264_p1(30 downto 23);
    tmp_76_fu_285_p1 <= data_V_fu_264_p1(23 - 1 downto 0);
    tmp_fu_359_p3 <= r_V_fu_347_p2(24 downto 24);
    tmp_s_fu_371_p4 <= r_V_14_fu_353_p2(87 downto 24);
    ush_fu_331_p3 <= 
        sext_ln1311_fu_327_p1 when (isNeg_fu_313_p3(0) = '1') else 
        add_ln341_fu_307_p2;
    val_fu_381_p3 <= 
        zext_ln662_fu_367_p1 when (isNeg_fu_313_p3(0) = '1') else 
        tmp_s_fu_371_p4;
    z_top_max_fu_415_p3 <= 
        ap_const_lv64_2FAF080 when (icmp_ln477_fu_409_p2(0) = '1') else 
        add_ln145_fu_403_p2;
    zext_ln15_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_289_p4),111));
    zext_ln341_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_275_p4),9));
    zext_ln662_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_359_p3),64));
end behav;
