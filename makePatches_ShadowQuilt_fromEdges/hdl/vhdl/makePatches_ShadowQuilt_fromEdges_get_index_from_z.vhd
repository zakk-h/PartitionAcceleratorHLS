-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_get_index_from_z is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    z_value : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_get_index_from_z is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_138_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_138_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_138_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_138_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal minVal_reg_162 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal GDn_points_load_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln438_fu_216_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln438_reg_524 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln438_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln438_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln438_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_534_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_534_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_534_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_534_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_265_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln54_reg_538 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln440_fu_334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln440_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln440_1_fu_361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln440_1_reg_553 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_reg_558 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_88_fu_380_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_88_reg_564 : STD_LOGIC_VECTOR (51 downto 0);
    signal minVal_1_fu_487_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal index_1_fu_495_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state7 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_142_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln440_3_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_182_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_s_fu_193_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_fu_189_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_13_fu_200_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_fu_204_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln54_fu_210_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln54_17_fu_231_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln54_18_fu_243_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln54_14_fu_239_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln54_15_fu_251_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln54_14_fu_255_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln54_fu_261_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln440_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln440_fu_277_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln440_fu_277_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln440_fu_277_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_81_fu_283_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_fu_298_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln440_2_fu_316_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln440_1_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln440_1_fu_308_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln440_fu_328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln9_fu_340_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln440_2_fu_347_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln440_fu_351_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal trunc_ln440_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_384_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_400_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_414_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_423_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_393_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_439_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_86_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_15_fu_445_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_463_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_473_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln441_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln440_fu_277_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;



begin
    sitodp_64ns_64_2_no_dsp_1_U85 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln440_1_reg_553,
        ce => ap_const_logic_1,
        dout => grp_fu_174_p1);

    mul_64ns_66ns_129_1_1_U86 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln440_fu_277_p0,
        din1 => mul_ln440_fu_277_p1,
        dout => mul_ln440_fu_277_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter4_state7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter4_state7))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_reg_534 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_138 <= add_ln438_reg_529;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_138 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_reg_534_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                index_reg_150 <= index_1_fu_495_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                index_reg_150 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minVal_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_reg_534_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                minVal_reg_162 <= minVal_1_fu_487_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minVal_reg_162 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                GDn_points_load_reg_519 <= GDn_points_q0;
                    sext_ln438_reg_524(38 downto 11) <= sext_ln438_fu_216_p1(38 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln438_reg_529 <= add_ln438_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_reg_534 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln440_reg_548(63 downto 3) <= add_ln440_fu_334_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_fu_226_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln54_reg_538(38 downto 3) <= add_ln54_fu_265_p2(38 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_138_pp0_iter1_reg <= i_reg_138;
                icmp_ln438_reg_534 <= icmp_ln438_fu_226_p2;
                icmp_ln438_reg_534_pp0_iter1_reg <= icmp_ln438_reg_534;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_reg_138_pp0_iter2_reg <= i_reg_138_pp0_iter1_reg;
                i_reg_138_pp0_iter3_reg <= i_reg_138_pp0_iter2_reg;
                i_reg_138_pp0_iter4_reg <= i_reg_138_pp0_iter3_reg;
                icmp_ln438_reg_534_pp0_iter2_reg <= icmp_ln438_reg_534_pp0_iter1_reg;
                icmp_ln438_reg_534_pp0_iter3_reg <= icmp_ln438_reg_534_pp0_iter2_reg;
                icmp_ln438_reg_534_pp0_iter4_reg <= icmp_ln438_reg_534_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_reg_534_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln440_1_reg_553 <= sub_ln440_1_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln438_reg_534_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_87_reg_558 <= data_V_fu_366_p1(62 downto 52);
                tmp_88_reg_564 <= tmp_88_fu_380_p1;
            end if;
        end if;
    end process;
    sext_ln438_reg_524(10 downto 0) <= "00000010000";
    add_ln54_reg_538(2 downto 0) <= "000";
    add_ln440_reg_548(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    GDarray_address0 <= zext_ln440_3_fu_293_p1(11 - 1 downto 0);

    GDarray_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            GDarray_ce0 <= ap_const_logic_1;
        else 
            GDarray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    GDn_points_address0 <= idxprom_fu_177_p1(3 - 1 downto 0);

    GDn_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln438_fu_220_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_142_p4) + unsigned(ap_const_lv32_1));
    add_ln440_fu_334_p2 <= std_logic_vector(unsigned(sub_ln440_fu_328_p2) + unsigned(sext_ln440_fu_270_p1));
    add_ln510_fu_400_p2 <= std_logic_vector(unsigned(zext_ln510_fu_397_p1) + unsigned(ap_const_lv12_C01));
    add_ln54_fu_265_p2 <= std_logic_vector(signed(sext_ln54_fu_261_p1) + signed(sext_ln438_reg_524));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state7_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln438_fu_226_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln438_fu_226_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_142_p4_assign_proc : process(i_reg_138, ap_CS_fsm_pp0_stage0, add_ln438_reg_529, icmp_ln438_reg_534, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln438_reg_534 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_142_p4 <= add_ln438_reg_529;
        else 
            ap_phi_mux_i_phi_fu_142_p4 <= i_reg_138;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= index_reg_150;
    data_V_fu_366_p1 <= grp_fu_174_p1;
    icmp_ln438_fu_226_p2 <= "1" when (ap_phi_mux_i_phi_fu_142_p4 = GDn_points_load_reg_519) else "0";
    icmp_ln441_fu_481_p2 <= "1" when (signed(val_fu_473_p3) < signed(minVal_reg_162)) else "0";
    idxprom_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),64));
    index_1_fu_495_p3 <= 
        i_reg_138_pp0_iter4_reg when (icmp_ln441_fu_481_p2(0) = '1') else 
        index_reg_150;
    isNeg_fu_406_p3 <= add_ln510_fu_400_p2(11 downto 11);
    lshr_ln440_fu_351_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln440_2_fu_347_p1(31-1 downto 0)))));
    mantissa_fu_384_p4 <= ((ap_const_lv1_1 & tmp_88_reg_564) & ap_const_lv1_0);
    minVal_1_fu_487_p3 <= 
        val_fu_473_p3 when (icmp_ln441_fu_481_p2(0) = '1') else 
        minVal_reg_162;
    mul_ln440_fu_277_p0 <= mul_ln440_fu_277_p00(64 - 1 downto 0);
    mul_ln440_fu_277_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln440_fu_270_p1),129));
    mul_ln440_fu_277_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    or_ln54_fu_210_p2 <= (sub_ln54_fu_204_p2 or ap_const_lv17_10);
    r_V_15_fu_445_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_393_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1(31-1 downto 0)))));
    r_V_fu_439_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_393_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1(31-1 downto 0)))));
        sext_ln1311_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_414_p2),12));

        sext_ln438_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln54_fu_210_p2),39));

        sext_ln440_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_reg_538),64));

        sext_ln54_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_14_fu_255_p2),39));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_431_p1),169));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_423_p3),32));

    shl_ln440_1_fu_308_p3 <= (tmp_fu_298_p4 & ap_const_lv5_0);
    shl_ln440_2_fu_316_p3 <= (tmp_81_fu_283_p4 & ap_const_lv3_0);
    shl_ln54_17_fu_231_p3 <= (ap_phi_mux_i_phi_fu_142_p4 & ap_const_lv5_0);
    shl_ln54_18_fu_243_p3 <= (ap_phi_mux_i_phi_fu_142_p4 & ap_const_lv3_0);
    shl_ln54_s_fu_193_p3 <= (layer & ap_const_lv11_0);
    shl_ln9_fu_340_p3 <= (add_ln440_reg_548 & ap_const_lv3_0);
    shl_ln_fu_182_p3 <= (layer & ap_const_lv13_0);
    sub_ln1311_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_87_reg_558));
    sub_ln440_1_fu_361_p2 <= std_logic_vector(unsigned(trunc_ln440_fu_357_p1) - unsigned(z_value));
    sub_ln440_fu_328_p2 <= std_logic_vector(unsigned(zext_ln440_1_fu_324_p1) - unsigned(shl_ln440_1_fu_308_p3));
    sub_ln54_14_fu_255_p2 <= std_logic_vector(unsigned(zext_ln54_14_fu_239_p1) - unsigned(zext_ln54_15_fu_251_p1));
    sub_ln54_fu_204_p2 <= std_logic_vector(unsigned(zext_ln54_fu_189_p1) - unsigned(zext_ln54_13_fu_200_p1));
    tmp_81_fu_283_p4 <= mul_ln440_fu_277_p2(128 downto 69);
    tmp_86_fu_451_p3 <= r_V_fu_439_p2(53 downto 53);
    tmp_88_fu_380_p1 <= data_V_fu_366_p1(52 - 1 downto 0);
    tmp_fu_298_p4 <= mul_ln440_fu_277_p2(127 downto 69);
    tmp_s_fu_463_p4 <= r_V_15_fu_445_p2(116 downto 53);
    trunc_ln440_fu_357_p1 <= lshr_ln440_fu_351_p2(64 - 1 downto 0);
    ush_fu_423_p3 <= 
        sext_ln1311_fu_419_p1 when (isNeg_fu_406_p3(0) = '1') else 
        add_ln510_fu_400_p2;
    val_fu_473_p3 <= 
        zext_ln662_fu_459_p1 when (isNeg_fu_406_p3(0) = '1') else 
        tmp_s_fu_463_p4;
    zext_ln15_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_384_p4),169));
    zext_ln440_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln440_2_fu_316_p3),64));
    zext_ln440_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_fu_340_p3),192));
    zext_ln440_3_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_283_p4),64));
    zext_ln510_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_reg_558),12));
    zext_ln54_13_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_s_fu_193_p3),17));
    zext_ln54_14_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_17_fu_231_p3),38));
    zext_ln54_15_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_18_fu_243_p3),38));
    zext_ln54_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_182_p3),17));
    zext_ln662_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_451_p3),64));
end behav;
