// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makePatches_ShadowQuilt_fromEdges_delete_patch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n_patches,
        n_patches_ap_vld,
        n_patches_read,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_superpoints_address1,
        patches_superpoints_ce1,
        patches_superpoints_q1,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0,
        patches_parameters_address1,
        patches_parameters_ce1,
        patches_parameters_q1,
        index
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_pp0_stage0 = 13'd32;
parameter    ap_ST_fsm_state9 = 13'd64;
parameter    ap_ST_fsm_pp1_stage0 = 13'd128;
parameter    ap_ST_fsm_state12 = 13'd256;
parameter    ap_ST_fsm_state13 = 13'd512;
parameter    ap_ST_fsm_state14 = 13'd1024;
parameter    ap_ST_fsm_state15 = 13'd2048;
parameter    ap_ST_fsm_state16 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] n_patches;
output   n_patches_ap_vld;
input  [31:0] n_patches_read;
output  [14:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
output  [14:0] patches_superpoints_address1;
output   patches_superpoints_ce1;
input  [63:0] patches_superpoints_q1;
output  [11:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [63:0] patches_parameters_d0;
output  [11:0] patches_parameters_address1;
output   patches_parameters_ce1;
input  [63:0] patches_parameters_q1;
input  [31:0] index;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_patches_ap_vld;
reg[14:0] patches_superpoints_address0;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg[63:0] patches_superpoints_d0;
reg patches_superpoints_ce1;
reg[11:0] patches_parameters_address0;
reg patches_parameters_ce0;
reg patches_parameters_we0;
reg[63:0] patches_parameters_d0;
reg patches_parameters_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten37_reg_229;
reg   [2:0] a_reg_240;
reg   [7:0] indvar_flatten13_reg_251;
reg   [1:0] b_reg_262;
reg   [6:0] indvar_flatten_reg_273;
reg   [4:0] c_reg_284;
reg   [1:0] d_reg_295;
reg   [6:0] indvar_flatten59_reg_306;
reg   [2:0] a_3_reg_317;
reg   [5:0] indvar_flatten45_reg_328;
reg   [2:0] b_5_reg_339;
reg   [2:0] c_5_reg_350;
wire   [0:0] or_ln381_fu_403_p2;
reg   [0:0] or_ln381_reg_1197;
wire  signed [31:0] sub_fu_409_p2;
reg  signed [31:0] sub_reg_1201;
wire   [11:0] empty_107_fu_443_p2;
reg   [11:0] empty_107_reg_1212;
wire   [63:0] zext_ln388_fu_449_p1;
wire    ap_CS_fsm_state4;
wire  signed [63:0] sext_ln388_fu_452_p1;
reg  signed [63:0] sext_ln388_reg_1222;
wire  signed [14:0] grp_fu_1186_p2;
reg  signed [14:0] empty_104_reg_1227;
wire   [61:0] trunc_ln398_fu_455_p1;
reg   [61:0] trunc_ln398_reg_1232;
wire    ap_CS_fsm_state5;
wire   [58:0] trunc_ln388_fu_463_p1;
reg   [58:0] trunc_ln388_reg_1237;
wire   [61:0] p_shl3_cast_fu_467_p3;
reg   [61:0] p_shl3_cast_reg_1242;
wire   [0:0] icmp_ln388_fu_475_p2;
wire   [63:0] indvars_iv_next47_fu_480_p2;
reg   [63:0] indvars_iv_next47_reg_1251;
wire   [61:0] add_ln398_fu_502_p2;
reg   [61:0] add_ln398_reg_1256;
wire   [9:0] add_ln390_1_fu_508_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln390_fu_514_p2;
reg   [0:0] icmp_ln390_reg_1267;
reg   [0:0] icmp_ln390_reg_1267_pp0_iter1_reg;
wire   [2:0] select_ln390_1_fu_540_p3;
reg   [2:0] select_ln390_1_reg_1271;
wire   [1:0] select_ln392_1_fu_598_p3;
reg   [1:0] select_ln392_1_reg_1277;
wire   [1:0] select_ln394_fu_642_p3;
reg   [1:0] select_ln394_reg_1284;
wire   [4:0] select_ln394_1_fu_650_p3;
reg   [4:0] select_ln394_1_reg_1289;
wire   [1:0] add_ln396_fu_658_p2;
wire   [6:0] select_ln394_2_fu_670_p3;
wire   [7:0] select_ln392_2_fu_684_p3;
wire   [14:0] add_ln398_9_fu_861_p2;
reg   [14:0] add_ln398_9_reg_1315;
wire   [6:0] add_ln404_1_fu_871_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln404_fu_877_p2;
reg   [0:0] icmp_ln404_reg_1325;
wire   [2:0] select_ln404_1_fu_903_p3;
reg   [2:0] select_ln404_1_reg_1329;
wire   [2:0] select_ln406_1_fu_1005_p3;
reg   [2:0] select_ln406_1_reg_1334;
wire   [11:0] add_ln410_5_fu_1104_p2;
reg   [11:0] add_ln410_5_reg_1344;
wire   [2:0] add_ln408_fu_1110_p2;
wire   [5:0] select_ln406_2_fu_1122_p3;
wire   [9:0] empty_111_fu_1134_p2;
wire    ap_CS_fsm_state13;
wire   [6:0] empty_115_fu_1160_p2;
wire    ap_CS_fsm_state15;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state9;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_enable_reg_pp1_iter1;
reg   [63:0] i_reg_219;
wire    ap_CS_fsm_state12;
reg   [2:0] ap_phi_mux_a_phi_fu_244_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_b_phi_fu_266_p4;
reg   [4:0] ap_phi_mux_c_phi_fu_288_p4;
reg   [2:0] ap_phi_mux_a_3_phi_fu_321_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_5_phi_fu_343_p4;
reg   [9:0] empty_110_reg_361;
wire   [0:0] exitcond2622_fu_1140_p2;
reg   [6:0] empty_114_reg_372;
wire   [0:0] exitcond21_fu_1166_p2;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln398_5_fu_856_p1;
wire   [63:0] zext_ln398_6_fu_867_p1;
wire   [63:0] zext_ln410_4_fu_1099_p1;
wire   [63:0] zext_ln410_5_fu_1130_p1;
wire   [63:0] p_cast_fu_1155_p1;
wire   [63:0] p_cast78_fu_1181_p1;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln381_fu_391_p2;
wire   [0:0] tmp_fu_383_p3;
wire   [0:0] xor_ln381_fu_397_p2;
wire   [4:0] empty_105_fu_419_p1;
wire   [8:0] empty_106_fu_431_p1;
wire   [11:0] tmp_cast_fu_423_p3;
wire   [11:0] tmp_164_cast_fu_435_p3;
wire   [59:0] trunc_ln398_1_fu_459_p1;
wire   [59:0] trunc_ln398_3_fu_490_p1;
wire   [61:0] p_shl4_cast_fu_494_p3;
wire   [61:0] trunc_ln398_2_fu_486_p1;
wire   [0:0] icmp_ln392_fu_526_p2;
wire   [2:0] add_ln390_fu_520_p2;
wire   [0:0] icmp_ln396_fu_554_p2;
wire   [0:0] xor_ln390_fu_548_p2;
wire   [0:0] icmp_ln394_fu_566_p2;
wire   [1:0] select_ln390_fu_532_p3;
wire   [0:0] and_ln390_1_fu_572_p2;
wire   [0:0] or_ln392_fu_584_p2;
wire   [1:0] add_ln392_fu_578_p2;
wire   [0:0] xor_ln392_fu_606_p2;
wire   [0:0] and_ln390_fu_560_p2;
wire   [0:0] or_ln392_1_fu_612_p2;
wire   [4:0] select_ln392_fu_590_p3;
wire   [0:0] and_ln392_fu_618_p2;
wire   [0:0] or_ln394_fu_630_p2;
wire   [0:0] or_ln394_1_fu_636_p2;
wire   [4:0] add_ln394_fu_624_p2;
wire   [6:0] add_ln394_1_fu_664_p2;
wire   [7:0] add_ln392_1_fu_678_p2;
wire   [61:0] zext_ln398_fu_692_p1;
wire   [61:0] add_ln398_1_fu_695_p2;
wire   [55:0] trunc_ln398_4_fu_700_p1;
wire   [61:0] add_ln398_2_fu_716_p2;
wire   [61:0] add_ln398_3_fu_720_p2;
wire   [55:0] trunc_ln398_6_fu_726_p1;
wire   [57:0] tmp_89_fu_704_p3;
wire   [57:0] trunc_ln398_5_fu_712_p1;
wire   [57:0] sub_ln398_fu_742_p2;
wire   [57:0] zext_ln398_1_fu_748_p1;
wire   [57:0] add_ln398_4_fu_751_p2;
wire   [57:0] tmp_90_fu_730_p3;
wire   [57:0] trunc_ln398_7_fu_738_p1;
wire   [57:0] sub_ln398_1_fu_765_p2;
wire   [57:0] zext_ln398_2_fu_771_p1;
wire   [57:0] add_ln398_5_fu_774_p2;
wire   [61:0] tmp_170_cast_fu_757_p3;
wire   [61:0] zext_ln398_3_fu_788_p1;
wire   [61:0] add_ln398_6_fu_791_p2;
wire   [12:0] trunc_ln398_9_fu_801_p1;
wire   [14:0] p_shl6_cast_fu_805_p3;
wire   [14:0] trunc_ln398_8_fu_797_p1;
wire   [61:0] tmp_172_cast_fu_780_p3;
wire   [61:0] add_ln398_7_fu_819_p2;
wire   [12:0] trunc_ln398_11_fu_829_p1;
wire   [14:0] p_shl5_cast_fu_833_p3;
wire   [14:0] trunc_ln398_10_fu_825_p1;
wire   [14:0] sub_ln398_2_fu_813_p2;
wire   [14:0] zext_ln398_4_fu_847_p1;
wire   [14:0] add_ln398_8_fu_850_p2;
wire   [14:0] sub_ln398_3_fu_841_p2;
wire   [0:0] icmp_ln406_fu_889_p2;
wire   [2:0] add_ln404_fu_883_p2;
wire   [60:0] trunc_ln410_fu_911_p1;
wire   [60:0] zext_ln410_fu_914_p1;
wire   [60:0] add_ln410_fu_918_p2;
wire   [60:0] tmp_91_fu_932_p3;
wire   [60:0] trunc_ln398_12_fu_939_p1;
wire   [60:0] add_ln410_1_fu_943_p2;
wire   [60:0] zext_ln410_1_fu_949_p1;
wire   [60:0] add_ln410_6_fu_953_p2;
wire   [0:0] icmp_ln408_fu_973_p2;
wire   [0:0] xor_ln404_fu_967_p2;
wire   [2:0] select_ln404_fu_895_p3;
wire   [0:0] and_ln404_fu_979_p2;
wire   [0:0] or_ln406_fu_991_p2;
wire   [2:0] add_ln406_fu_985_p2;
wire   [62:0] tmp_176_cast_fu_924_p3;
wire   [62:0] zext_ln410_2_fu_1013_p1;
wire   [62:0] add_ln410_2_fu_1017_p2;
wire   [8:0] trunc_ln410_1_fu_1023_p1;
wire   [10:0] trunc_ln410_2_fu_1035_p1;
wire   [11:0] p_shl11_cast_fu_1027_p3;
wire   [11:0] p_shl12_cast_fu_1039_p3;
wire   [62:0] tmp_178_cast_fu_959_p3;
wire   [62:0] add_ln410_3_fu_1053_p2;
wire   [8:0] trunc_ln410_3_fu_1059_p1;
wire   [10:0] trunc_ln410_4_fu_1071_p1;
wire   [11:0] p_shl9_cast_fu_1063_p3;
wire   [11:0] p_shl10_cast_fu_1075_p3;
wire   [2:0] select_ln406_fu_997_p3;
wire   [11:0] sub_ln410_fu_1047_p2;
wire   [11:0] zext_ln410_3_fu_1089_p1;
wire   [11:0] add_ln410_4_fu_1093_p2;
wire   [11:0] sub_ln410_1_fu_1083_p2;
wire   [5:0] add_ln406_1_fu_1116_p2;
wire   [14:0] p_cast71_fu_1146_p1;
(* use_dsp48 = "no" *) wire   [14:0] empty_113_fu_1150_p2;
wire   [11:0] p_cast72_fu_1172_p1;
wire   [11:0] empty_117_fu_1176_p2;
wire  signed [14:0] grp_fu_1186_p0;
wire   [10:0] grp_fu_1186_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

makePatches_ShadowQuilt_fromEdges_mul_mul_15s_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_15s_11ns_15_4_1_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1186_p0),
    .din1(grp_fu_1186_p1),
    .ce(1'b1),
    .dout(grp_fu_1186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        a_3_reg_317 <= 3'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        a_3_reg_317 <= select_ln404_1_reg_1329;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_reg_240 <= select_ln390_1_reg_1271;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        a_reg_240 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_5_reg_339 <= 3'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_5_reg_339 <= select_ln406_1_reg_1334;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_reg_262 <= select_ln392_1_reg_1277;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        b_reg_262 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_5_reg_350 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_fu_877_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_5_reg_350 <= add_ln408_fu_1110_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_reg_284 <= select_ln394_1_reg_1289;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        c_reg_284 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_fu_514_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_reg_295 <= add_ln396_fu_658_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        d_reg_295 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd0))) begin
        empty_110_reg_361 <= 10'd0;
    end else if (((exitcond2622_fu_1140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        empty_110_reg_361 <= empty_111_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_114_reg_372 <= 7'd0;
    end else if (((exitcond21_fu_1166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        empty_114_reg_372 <= empty_115_fu_1160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_219 <= zext_ln388_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_219 <= indvars_iv_next47_reg_1251;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_fu_514_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_251 <= select_ln392_2_fu_684_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        indvar_flatten13_reg_251 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_fu_514_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten37_reg_229 <= add_ln390_1_fu_508_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        indvar_flatten37_reg_229 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten45_reg_328 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_fu_877_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten45_reg_328 <= select_ln406_2_fu_1122_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten59_reg_306 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_fu_877_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten59_reg_306 <= add_ln404_1_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_fu_514_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_273 <= select_ln394_2_fu_670_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        indvar_flatten_reg_273 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln398_9_reg_1315 <= add_ln398_9_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd1))) begin
        add_ln398_reg_1256 <= add_ln398_fu_502_p2;
        indvars_iv_next47_reg_1251 <= indvars_iv_next47_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_fu_877_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln410_5_reg_1344 <= add_ln410_5_fu_1104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_104_reg_1227 <= grp_fu_1186_p2;
        sext_ln388_reg_1222 <= sext_ln388_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln381_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_107_reg_1212[11 : 3] <= empty_107_fu_443_p2[11 : 3];
        sub_reg_1201 <= sub_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln390_reg_1267 <= icmp_ln390_fu_514_p2;
        icmp_ln390_reg_1267_pp0_iter1_reg <= icmp_ln390_reg_1267;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln404_reg_1325 <= icmp_ln404_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        or_ln381_reg_1197 <= or_ln381_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_shl3_cast_reg_1242[61 : 2] <= p_shl3_cast_fu_467_p3[61 : 2];
        trunc_ln388_reg_1237 <= trunc_ln388_fu_463_p1;
        trunc_ln398_reg_1232 <= trunc_ln398_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_fu_514_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln390_1_reg_1271 <= select_ln390_1_fu_540_p3;
        select_ln392_1_reg_1277 <= select_ln392_1_fu_598_p3;
        select_ln394_1_reg_1289 <= select_ln394_1_fu_650_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_fu_514_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln394_reg_1284 <= select_ln394_fu_642_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_fu_877_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln404_1_reg_1329 <= select_ln404_1_fu_903_p3;
        select_ln406_1_reg_1334 <= select_ln406_1_fu_1005_p3;
    end
end

always @ (*) begin
    if ((icmp_ln390_fu_514_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln404_fu_877_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_a_3_phi_fu_321_p4 = select_ln404_1_reg_1329;
    end else begin
        ap_phi_mux_a_3_phi_fu_321_p4 = a_3_reg_317;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_a_phi_fu_244_p4 = select_ln390_1_reg_1271;
    end else begin
        ap_phi_mux_a_phi_fu_244_p4 = a_reg_240;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_b_5_phi_fu_343_p4 = select_ln406_1_reg_1334;
    end else begin
        ap_phi_mux_b_5_phi_fu_343_p4 = b_5_reg_339;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_b_phi_fu_266_p4 = select_ln392_1_reg_1277;
    end else begin
        ap_phi_mux_b_phi_fu_266_p4 = b_reg_262;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln390_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_phi_fu_288_p4 = select_ln394_1_reg_1289;
    end else begin
        ap_phi_mux_c_phi_fu_288_p4 = c_reg_284;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln381_reg_1197 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        n_patches_ap_vld = 1'b1;
    end else begin
        n_patches_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        patches_parameters_address0 = p_cast78_fu_1181_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_parameters_address0 = zext_ln410_5_fu_1130_p1;
    end else begin
        patches_parameters_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_parameters_ce1 = 1'b1;
    end else begin
        patches_parameters_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        patches_parameters_d0 = 64'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_parameters_d0 = patches_parameters_q1;
    end else begin
        patches_parameters_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond21_fu_1166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln404_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        patches_superpoints_address0 = p_cast_fu_1155_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_address0 = zext_ln398_6_fu_867_p1;
    end else begin
        patches_superpoints_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        patches_superpoints_ce1 = 1'b1;
    end else begin
        patches_superpoints_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        patches_superpoints_d0 = 64'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_d0 = patches_superpoints_q1;
    end else begin
        patches_superpoints_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln390_reg_1267_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond2622_fu_1140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((or_ln381_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((or_ln381_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_475_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln390_fu_514_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln390_fu_514_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln404_fu_877_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln404_fu_877_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond2622_fu_1140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((exitcond21_fu_1166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln390_1_fu_508_p2 = (indvar_flatten37_reg_229 + 10'd1);

assign add_ln390_fu_520_p2 = (ap_phi_mux_a_phi_fu_244_p4 + 3'd1);

assign add_ln392_1_fu_678_p2 = (indvar_flatten13_reg_251 + 8'd1);

assign add_ln392_fu_578_p2 = (select_ln390_fu_532_p3 + 2'd1);

assign add_ln394_1_fu_664_p2 = (indvar_flatten_reg_273 + 7'd1);

assign add_ln394_fu_624_p2 = (select_ln392_fu_590_p3 + 5'd1);

assign add_ln396_fu_658_p2 = (select_ln394_fu_642_p3 + 2'd1);

assign add_ln398_1_fu_695_p2 = (add_ln398_reg_1256 + zext_ln398_fu_692_p1);

assign add_ln398_2_fu_716_p2 = (p_shl3_cast_reg_1242 + trunc_ln398_reg_1232);

assign add_ln398_3_fu_720_p2 = (add_ln398_2_fu_716_p2 + zext_ln398_fu_692_p1);

assign add_ln398_4_fu_751_p2 = (sub_ln398_fu_742_p2 + zext_ln398_1_fu_748_p1);

assign add_ln398_5_fu_774_p2 = (sub_ln398_1_fu_765_p2 + zext_ln398_2_fu_771_p1);

assign add_ln398_6_fu_791_p2 = (tmp_170_cast_fu_757_p3 + zext_ln398_3_fu_788_p1);

assign add_ln398_7_fu_819_p2 = (tmp_172_cast_fu_780_p3 + zext_ln398_3_fu_788_p1);

assign add_ln398_8_fu_850_p2 = (sub_ln398_2_fu_813_p2 + zext_ln398_4_fu_847_p1);

assign add_ln398_9_fu_861_p2 = (sub_ln398_3_fu_841_p2 + zext_ln398_4_fu_847_p1);

assign add_ln398_fu_502_p2 = (p_shl4_cast_fu_494_p3 + trunc_ln398_2_fu_486_p1);

assign add_ln404_1_fu_871_p2 = (indvar_flatten59_reg_306 + 7'd1);

assign add_ln404_fu_883_p2 = (ap_phi_mux_a_3_phi_fu_321_p4 + 3'd1);

assign add_ln406_1_fu_1116_p2 = (indvar_flatten45_reg_328 + 6'd1);

assign add_ln406_fu_985_p2 = (select_ln404_fu_895_p3 + 3'd1);

assign add_ln408_fu_1110_p2 = (select_ln406_fu_997_p3 + 3'd1);

assign add_ln410_1_fu_943_p2 = (tmp_91_fu_932_p3 + trunc_ln398_12_fu_939_p1);

assign add_ln410_2_fu_1017_p2 = (tmp_176_cast_fu_924_p3 + zext_ln410_2_fu_1013_p1);

assign add_ln410_3_fu_1053_p2 = (tmp_178_cast_fu_959_p3 + zext_ln410_2_fu_1013_p1);

assign add_ln410_4_fu_1093_p2 = (sub_ln410_fu_1047_p2 + zext_ln410_3_fu_1089_p1);

assign add_ln410_5_fu_1104_p2 = (sub_ln410_1_fu_1083_p2 + zext_ln410_3_fu_1089_p1);

assign add_ln410_6_fu_953_p2 = (add_ln410_1_fu_943_p2 + zext_ln410_1_fu_949_p1);

assign add_ln410_fu_918_p2 = (trunc_ln410_fu_911_p1 + zext_ln410_fu_914_p1);

assign and_ln390_1_fu_572_p2 = (xor_ln390_fu_548_p2 & icmp_ln394_fu_566_p2);

assign and_ln390_fu_560_p2 = (xor_ln390_fu_548_p2 & icmp_ln396_fu_554_p2);

assign and_ln392_fu_618_p2 = (or_ln392_1_fu_612_p2 & and_ln390_fu_560_p2);

assign and_ln404_fu_979_p2 = (xor_ln404_fu_967_p2 & icmp_ln408_fu_973_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_105_fu_419_p1 = sub_fu_409_p2[4:0];

assign empty_106_fu_431_p1 = sub_fu_409_p2[8:0];

assign empty_107_fu_443_p2 = (tmp_cast_fu_423_p3 - tmp_164_cast_fu_435_p3);

assign empty_111_fu_1134_p2 = (empty_110_reg_361 + 10'd1);

assign empty_113_fu_1150_p2 = ($signed(empty_104_reg_1227) + $signed(p_cast71_fu_1146_p1));

assign empty_115_fu_1160_p2 = (empty_114_reg_372 + 7'd1);

assign empty_117_fu_1176_p2 = (empty_107_reg_1212 + p_cast72_fu_1172_p1);

assign exitcond21_fu_1166_p2 = ((empty_114_reg_372 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond2622_fu_1140_p2 = ((empty_110_reg_361 == 10'd720) ? 1'b1 : 1'b0);

assign grp_fu_1186_p0 = sub_fu_409_p2[14:0];

assign grp_fu_1186_p1 = 15'd720;

assign icmp_ln381_fu_391_p2 = (($signed(index) < $signed(n_patches_read)) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_475_p2 = (($signed(i_reg_219) < $signed(sext_ln388_reg_1222)) ? 1'b1 : 1'b0);

assign icmp_ln390_fu_514_p2 = ((indvar_flatten37_reg_229 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln392_fu_526_p2 = ((indvar_flatten13_reg_251 == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln394_fu_566_p2 = ((indvar_flatten_reg_273 == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln396_fu_554_p2 = ((d_reg_295 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln404_fu_877_p2 = ((indvar_flatten59_reg_306 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln406_fu_889_p2 = ((indvar_flatten45_reg_328 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln408_fu_973_p2 = ((c_5_reg_350 == 3'd6) ? 1'b1 : 1'b0);

assign indvars_iv_next47_fu_480_p2 = (i_reg_219 + 64'd1);

assign n_patches = sub_reg_1201;

assign or_ln381_fu_403_p2 = (xor_ln381_fu_397_p2 | tmp_fu_383_p3);

assign or_ln392_1_fu_612_p2 = (xor_ln392_fu_606_p2 | icmp_ln392_fu_526_p2);

assign or_ln392_fu_584_p2 = (icmp_ln392_fu_526_p2 | and_ln390_1_fu_572_p2);

assign or_ln394_1_fu_636_p2 = (or_ln394_fu_630_p2 | icmp_ln392_fu_526_p2);

assign or_ln394_fu_630_p2 = (and_ln392_fu_618_p2 | and_ln390_1_fu_572_p2);

assign or_ln406_fu_991_p2 = (icmp_ln406_fu_889_p2 | and_ln404_fu_979_p2);

assign p_cast71_fu_1146_p1 = empty_110_reg_361;

assign p_cast72_fu_1172_p1 = empty_114_reg_372;

assign p_cast78_fu_1181_p1 = empty_117_fu_1176_p2;

assign p_cast_fu_1155_p1 = empty_113_fu_1150_p2;

assign p_shl10_cast_fu_1075_p3 = {{trunc_ln410_4_fu_1071_p1}, {1'd0}};

assign p_shl11_cast_fu_1027_p3 = {{trunc_ln410_1_fu_1023_p1}, {3'd0}};

assign p_shl12_cast_fu_1039_p3 = {{trunc_ln410_2_fu_1035_p1}, {1'd0}};

assign p_shl3_cast_fu_467_p3 = {{trunc_ln398_1_fu_459_p1}, {2'd0}};

assign p_shl4_cast_fu_494_p3 = {{trunc_ln398_3_fu_490_p1}, {2'd0}};

assign p_shl5_cast_fu_833_p3 = {{trunc_ln398_11_fu_829_p1}, {2'd0}};

assign p_shl6_cast_fu_805_p3 = {{trunc_ln398_9_fu_801_p1}, {2'd0}};

assign p_shl9_cast_fu_1063_p3 = {{trunc_ln410_3_fu_1059_p1}, {3'd0}};

assign patches_parameters_address1 = zext_ln410_4_fu_1099_p1;

assign patches_superpoints_address1 = zext_ln398_5_fu_856_p1;

assign select_ln390_1_fu_540_p3 = ((icmp_ln392_fu_526_p2[0:0] == 1'b1) ? add_ln390_fu_520_p2 : ap_phi_mux_a_phi_fu_244_p4);

assign select_ln390_fu_532_p3 = ((icmp_ln392_fu_526_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_b_phi_fu_266_p4);

assign select_ln392_1_fu_598_p3 = ((and_ln390_1_fu_572_p2[0:0] == 1'b1) ? add_ln392_fu_578_p2 : select_ln390_fu_532_p3);

assign select_ln392_2_fu_684_p3 = ((icmp_ln392_fu_526_p2[0:0] == 1'b1) ? 8'd1 : add_ln392_1_fu_678_p2);

assign select_ln392_fu_590_p3 = ((or_ln392_fu_584_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_c_phi_fu_288_p4);

assign select_ln394_1_fu_650_p3 = ((and_ln392_fu_618_p2[0:0] == 1'b1) ? add_ln394_fu_624_p2 : select_ln392_fu_590_p3);

assign select_ln394_2_fu_670_p3 = ((or_ln392_fu_584_p2[0:0] == 1'b1) ? 7'd1 : add_ln394_1_fu_664_p2);

assign select_ln394_fu_642_p3 = ((or_ln394_1_fu_636_p2[0:0] == 1'b1) ? 2'd0 : d_reg_295);

assign select_ln404_1_fu_903_p3 = ((icmp_ln406_fu_889_p2[0:0] == 1'b1) ? add_ln404_fu_883_p2 : ap_phi_mux_a_3_phi_fu_321_p4);

assign select_ln404_fu_895_p3 = ((icmp_ln406_fu_889_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_5_phi_fu_343_p4);

assign select_ln406_1_fu_1005_p3 = ((and_ln404_fu_979_p2[0:0] == 1'b1) ? add_ln406_fu_985_p2 : select_ln404_fu_895_p3);

assign select_ln406_2_fu_1122_p3 = ((icmp_ln406_fu_889_p2[0:0] == 1'b1) ? 6'd1 : add_ln406_1_fu_1116_p2);

assign select_ln406_fu_997_p3 = ((or_ln406_fu_991_p2[0:0] == 1'b1) ? 3'd0 : c_5_reg_350);

assign sext_ln388_fu_452_p1 = sub_reg_1201;

assign sub_fu_409_p2 = ($signed(n_patches_read) + $signed(32'd4294967295));

assign sub_ln398_1_fu_765_p2 = (tmp_90_fu_730_p3 - trunc_ln398_7_fu_738_p1);

assign sub_ln398_2_fu_813_p2 = (p_shl6_cast_fu_805_p3 - trunc_ln398_8_fu_797_p1);

assign sub_ln398_3_fu_841_p2 = (p_shl5_cast_fu_833_p3 - trunc_ln398_10_fu_825_p1);

assign sub_ln398_fu_742_p2 = (tmp_89_fu_704_p3 - trunc_ln398_5_fu_712_p1);

assign sub_ln410_1_fu_1083_p2 = (p_shl9_cast_fu_1063_p3 - p_shl10_cast_fu_1075_p3);

assign sub_ln410_fu_1047_p2 = (p_shl11_cast_fu_1027_p3 - p_shl12_cast_fu_1039_p3);

assign tmp_164_cast_fu_435_p3 = {{empty_106_fu_431_p1}, {3'd0}};

assign tmp_170_cast_fu_757_p3 = {{add_ln398_4_fu_751_p2}, {4'd0}};

assign tmp_172_cast_fu_780_p3 = {{add_ln398_5_fu_774_p2}, {4'd0}};

assign tmp_176_cast_fu_924_p3 = {{add_ln410_fu_918_p2}, {2'd0}};

assign tmp_178_cast_fu_959_p3 = {{add_ln410_6_fu_953_p2}, {2'd0}};

assign tmp_89_fu_704_p3 = {{trunc_ln398_4_fu_700_p1}, {2'd0}};

assign tmp_90_fu_730_p3 = {{trunc_ln398_6_fu_726_p1}, {2'd0}};

assign tmp_91_fu_932_p3 = {{trunc_ln388_reg_1237}, {2'd0}};

assign tmp_cast_fu_423_p3 = {{empty_105_fu_419_p1}, {7'd0}};

assign tmp_fu_383_p3 = index[32'd31];

assign trunc_ln388_fu_463_p1 = i_reg_219[58:0];

assign trunc_ln398_10_fu_825_p1 = add_ln398_7_fu_819_p2[14:0];

assign trunc_ln398_11_fu_829_p1 = add_ln398_7_fu_819_p2[12:0];

assign trunc_ln398_12_fu_939_p1 = i_reg_219[60:0];

assign trunc_ln398_1_fu_459_p1 = i_reg_219[59:0];

assign trunc_ln398_2_fu_486_p1 = indvars_iv_next47_fu_480_p2[61:0];

assign trunc_ln398_3_fu_490_p1 = indvars_iv_next47_fu_480_p2[59:0];

assign trunc_ln398_4_fu_700_p1 = add_ln398_1_fu_695_p2[55:0];

assign trunc_ln398_5_fu_712_p1 = add_ln398_1_fu_695_p2[57:0];

assign trunc_ln398_6_fu_726_p1 = add_ln398_3_fu_720_p2[55:0];

assign trunc_ln398_7_fu_738_p1 = add_ln398_3_fu_720_p2[57:0];

assign trunc_ln398_8_fu_797_p1 = add_ln398_6_fu_791_p2[14:0];

assign trunc_ln398_9_fu_801_p1 = add_ln398_6_fu_791_p2[12:0];

assign trunc_ln398_fu_455_p1 = i_reg_219[61:0];

assign trunc_ln410_1_fu_1023_p1 = add_ln410_2_fu_1017_p2[8:0];

assign trunc_ln410_2_fu_1035_p1 = add_ln410_2_fu_1017_p2[10:0];

assign trunc_ln410_3_fu_1059_p1 = add_ln410_3_fu_1053_p2[8:0];

assign trunc_ln410_4_fu_1071_p1 = add_ln410_3_fu_1053_p2[10:0];

assign trunc_ln410_fu_911_p1 = add_ln398_reg_1256[60:0];

assign xor_ln381_fu_397_p2 = (icmp_ln381_fu_391_p2 ^ 1'd1);

assign xor_ln390_fu_548_p2 = (icmp_ln392_fu_526_p2 ^ 1'd1);

assign xor_ln392_fu_606_p2 = (icmp_ln394_fu_566_p2 ^ 1'd1);

assign xor_ln404_fu_967_p2 = (icmp_ln406_fu_889_p2 ^ 1'd1);

assign zext_ln388_fu_449_p1 = index;

assign zext_ln398_1_fu_748_p1 = select_ln392_1_reg_1277;

assign zext_ln398_2_fu_771_p1 = select_ln392_1_reg_1277;

assign zext_ln398_3_fu_788_p1 = select_ln394_1_reg_1289;

assign zext_ln398_4_fu_847_p1 = select_ln394_reg_1284;

assign zext_ln398_5_fu_856_p1 = add_ln398_8_fu_850_p2;

assign zext_ln398_6_fu_867_p1 = add_ln398_9_reg_1315;

assign zext_ln398_fu_692_p1 = select_ln390_1_reg_1271;

assign zext_ln410_1_fu_949_p1 = select_ln404_1_fu_903_p3;

assign zext_ln410_2_fu_1013_p1 = select_ln406_1_fu_1005_p3;

assign zext_ln410_3_fu_1089_p1 = select_ln406_fu_997_p3;

assign zext_ln410_4_fu_1099_p1 = add_ln410_4_fu_1093_p2;

assign zext_ln410_5_fu_1130_p1 = add_ln410_5_reg_1344;

assign zext_ln410_fu_914_p1 = select_ln404_1_fu_903_p3;

always @ (posedge ap_clk) begin
    empty_107_reg_1212[2:0] <= 3'b000;
    p_shl3_cast_reg_1242[1:0] <= 2'b00;
end

endmodule //makePatches_ShadowQuilt_fromEdges_delete_patch
