// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makePatches_ShadowQuilt_fromEdges_get_index_from_z (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        GDarray_address0,
        GDarray_ce0,
        GDarray_q0,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        layer,
        z_value,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] GDarray_address0;
output   GDarray_ce0;
input  [191:0] GDarray_q0;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
input  [2:0] layer;
input  [63:0] z_value;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg GDarray_ce0;
reg GDn_points_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_reg_138;
reg   [31:0] i_reg_138_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_reg_138_pp0_iter2_reg;
reg   [31:0] i_reg_138_pp0_iter3_reg;
reg   [31:0] i_reg_138_pp0_iter4_reg;
reg   [31:0] index_reg_150;
reg   [63:0] minVal_reg_162;
wire    ap_CS_fsm_state2;
reg   [31:0] GDn_points_load_reg_519;
wire  signed [38:0] sext_ln438_fu_216_p1;
reg  signed [38:0] sext_ln438_reg_524;
wire   [31:0] add_ln438_fu_220_p2;
reg   [31:0] add_ln438_reg_529;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln438_fu_226_p2;
reg   [0:0] icmp_ln438_reg_534;
reg   [0:0] icmp_ln438_reg_534_pp0_iter1_reg;
reg   [0:0] icmp_ln438_reg_534_pp0_iter2_reg;
reg   [0:0] icmp_ln438_reg_534_pp0_iter3_reg;
reg   [0:0] icmp_ln438_reg_534_pp0_iter4_reg;
wire   [38:0] add_ln54_fu_265_p2;
reg   [38:0] add_ln54_reg_538;
wire   [63:0] add_ln440_fu_334_p2;
reg   [63:0] add_ln440_reg_548;
wire   [63:0] sub_ln440_1_fu_361_p2;
reg   [63:0] sub_ln440_1_reg_553;
reg   [10:0] tmp_87_reg_558;
wire   [51:0] tmp_88_fu_380_p1;
reg   [51:0] tmp_88_reg_564;
wire   [63:0] minVal_1_fu_487_p3;
reg    ap_enable_reg_pp0_iter5;
wire   [31:0] index_1_fu_495_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter4_state7;
reg   [31:0] ap_phi_mux_i_phi_fu_142_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom_fu_177_p1;
wire   [63:0] zext_ln440_3_fu_293_p1;
wire   [15:0] shl_ln_fu_182_p3;
wire   [13:0] shl_ln54_s_fu_193_p3;
wire   [16:0] zext_ln54_fu_189_p1;
wire   [16:0] zext_ln54_13_fu_200_p1;
wire   [16:0] sub_ln54_fu_204_p2;
wire   [16:0] or_ln54_fu_210_p2;
wire   [36:0] shl_ln54_17_fu_231_p3;
wire   [34:0] shl_ln54_18_fu_243_p3;
wire   [37:0] zext_ln54_14_fu_239_p1;
wire   [37:0] zext_ln54_15_fu_251_p1;
wire   [37:0] sub_ln54_14_fu_255_p2;
wire  signed [38:0] sext_ln54_fu_261_p1;
wire  signed [63:0] sext_ln440_fu_270_p1;
wire   [63:0] mul_ln440_fu_277_p0;
wire   [65:0] mul_ln440_fu_277_p1;
wire   [128:0] mul_ln440_fu_277_p2;
wire   [59:0] tmp_81_fu_283_p4;
wire   [58:0] tmp_fu_298_p4;
wire   [62:0] shl_ln440_2_fu_316_p3;
wire   [63:0] zext_ln440_1_fu_324_p1;
wire   [63:0] shl_ln440_1_fu_308_p3;
wire   [63:0] sub_ln440_fu_328_p2;
wire   [66:0] shl_ln9_fu_340_p3;
wire   [191:0] zext_ln440_2_fu_347_p1;
wire   [191:0] lshr_ln440_fu_351_p2;
wire   [63:0] trunc_ln440_fu_357_p1;
wire   [63:0] grp_fu_174_p1;
wire   [63:0] data_V_fu_366_p1;
wire   [53:0] mantissa_fu_384_p4;
wire   [11:0] zext_ln510_fu_397_p1;
wire   [11:0] add_ln510_fu_400_p2;
wire   [10:0] sub_ln1311_fu_414_p2;
wire   [0:0] isNeg_fu_406_p3;
wire  signed [11:0] sext_ln1311_fu_419_p1;
wire   [11:0] ush_fu_423_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_431_p1;
wire   [168:0] zext_ln15_fu_393_p1;
wire   [168:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1;
wire   [168:0] r_V_fu_439_p2;
wire   [0:0] tmp_86_fu_451_p3;
wire   [168:0] r_V_15_fu_445_p2;
wire   [63:0] zext_ln662_fu_459_p1;
wire   [63:0] tmp_s_fu_463_p4;
wire   [63:0] val_fu_473_p3;
wire   [0:0] icmp_ln441_fu_481_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [128:0] mul_ln440_fu_277_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_2_no_dsp_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln440_1_reg_553),
    .ce(1'b1),
    .dout(grp_fu_174_p1)
);

makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
mul_64ns_66ns_129_1_1_U86(
    .din0(mul_ln440_fu_277_p0),
    .din1(mul_ln440_fu_277_p1),
    .dout(mul_ln440_fu_277_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter4_state7) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter4_state7))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_reg_534 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_138 <= add_ln438_reg_529;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_138 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_reg_534_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        index_reg_150 <= index_1_fu_495_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        index_reg_150 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_reg_534_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        minVal_reg_162 <= minVal_1_fu_487_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        minVal_reg_162 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        GDn_points_load_reg_519 <= GDn_points_q0;
        sext_ln438_reg_524[38 : 11] <= sext_ln438_fu_216_p1[38 : 11];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln438_reg_529 <= add_ln438_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_reg_534 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln440_reg_548[63 : 3] <= add_ln440_fu_334_p2[63 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln54_reg_538[38 : 3] <= add_ln54_fu_265_p2[38 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_138_pp0_iter1_reg <= i_reg_138;
        icmp_ln438_reg_534 <= icmp_ln438_fu_226_p2;
        icmp_ln438_reg_534_pp0_iter1_reg <= icmp_ln438_reg_534;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_reg_138_pp0_iter2_reg <= i_reg_138_pp0_iter1_reg;
        i_reg_138_pp0_iter3_reg <= i_reg_138_pp0_iter2_reg;
        i_reg_138_pp0_iter4_reg <= i_reg_138_pp0_iter3_reg;
        icmp_ln438_reg_534_pp0_iter2_reg <= icmp_ln438_reg_534_pp0_iter1_reg;
        icmp_ln438_reg_534_pp0_iter3_reg <= icmp_ln438_reg_534_pp0_iter2_reg;
        icmp_ln438_reg_534_pp0_iter4_reg <= icmp_ln438_reg_534_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_reg_534_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln440_1_reg_553 <= sub_ln440_1_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_reg_534_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_87_reg_558 <= {{data_V_fu_366_p1[62:52]}};
        tmp_88_reg_564 <= tmp_88_fu_380_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        GDarray_ce0 = 1'b1;
    end else begin
        GDarray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        GDn_points_ce0 = 1'b1;
    end else begin
        GDn_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_condition_pp0_exit_iter4_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter4_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln438_fu_226_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln438_reg_534 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_142_p4 = add_ln438_reg_529;
    end else begin
        ap_phi_mux_i_phi_fu_142_p4 = i_reg_138;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDarray_address0 = zext_ln440_3_fu_293_p1;

assign GDn_points_address0 = idxprom_fu_177_p1;

assign add_ln438_fu_220_p2 = (ap_phi_mux_i_phi_fu_142_p4 + 32'd1);

assign add_ln440_fu_334_p2 = ($signed(sub_ln440_fu_328_p2) + $signed(sext_ln440_fu_270_p1));

assign add_ln510_fu_400_p2 = ($signed(zext_ln510_fu_397_p1) + $signed(12'd3073));

assign add_ln54_fu_265_p2 = ($signed(sext_ln54_fu_261_p1) + $signed(sext_ln438_reg_524));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = index_reg_150;

assign data_V_fu_366_p1 = grp_fu_174_p1;

assign icmp_ln438_fu_226_p2 = ((ap_phi_mux_i_phi_fu_142_p4 == GDn_points_load_reg_519) ? 1'b1 : 1'b0);

assign icmp_ln441_fu_481_p2 = (($signed(val_fu_473_p3) < $signed(minVal_reg_162)) ? 1'b1 : 1'b0);

assign idxprom_fu_177_p1 = layer;

assign index_1_fu_495_p3 = ((icmp_ln441_fu_481_p2[0:0] == 1'b1) ? i_reg_138_pp0_iter4_reg : index_reg_150);

assign isNeg_fu_406_p3 = add_ln510_fu_400_p2[32'd11];

assign lshr_ln440_fu_351_p2 = GDarray_q0 >> zext_ln440_2_fu_347_p1;

assign mantissa_fu_384_p4 = {{{{1'd1}, {tmp_88_reg_564}}}, {1'd0}};

assign minVal_1_fu_487_p3 = ((icmp_ln441_fu_481_p2[0:0] == 1'b1) ? val_fu_473_p3 : minVal_reg_162);

assign mul_ln440_fu_277_p0 = mul_ln440_fu_277_p00;

assign mul_ln440_fu_277_p00 = $unsigned(sext_ln440_fu_270_p1);

assign mul_ln440_fu_277_p1 = 129'd24595658764946068822;

assign or_ln54_fu_210_p2 = (sub_ln54_fu_204_p2 | 17'd16);

assign r_V_15_fu_445_p2 = zext_ln15_fu_393_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1;

assign r_V_fu_439_p2 = zext_ln15_fu_393_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1;

assign sext_ln1311_fu_419_p1 = $signed(sub_ln1311_fu_414_p2);

assign sext_ln438_fu_216_p1 = $signed(or_ln54_fu_210_p2);

assign sext_ln440_fu_270_p1 = $signed(add_ln54_reg_538);

assign sext_ln54_fu_261_p1 = $signed(sub_ln54_14_fu_255_p2);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_435_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_431_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_431_p1 = $signed(ush_fu_423_p3);

assign shl_ln440_1_fu_308_p3 = {{tmp_fu_298_p4}, {5'd0}};

assign shl_ln440_2_fu_316_p3 = {{tmp_81_fu_283_p4}, {3'd0}};

assign shl_ln54_17_fu_231_p3 = {{ap_phi_mux_i_phi_fu_142_p4}, {5'd0}};

assign shl_ln54_18_fu_243_p3 = {{ap_phi_mux_i_phi_fu_142_p4}, {3'd0}};

assign shl_ln54_s_fu_193_p3 = {{layer}, {11'd0}};

assign shl_ln9_fu_340_p3 = {{add_ln440_reg_548}, {3'd0}};

assign shl_ln_fu_182_p3 = {{layer}, {13'd0}};

assign sub_ln1311_fu_414_p2 = (11'd1023 - tmp_87_reg_558);

assign sub_ln440_1_fu_361_p2 = (trunc_ln440_fu_357_p1 - z_value);

assign sub_ln440_fu_328_p2 = (zext_ln440_1_fu_324_p1 - shl_ln440_1_fu_308_p3);

assign sub_ln54_14_fu_255_p2 = (zext_ln54_14_fu_239_p1 - zext_ln54_15_fu_251_p1);

assign sub_ln54_fu_204_p2 = (zext_ln54_fu_189_p1 - zext_ln54_13_fu_200_p1);

assign tmp_81_fu_283_p4 = {{mul_ln440_fu_277_p2[128:69]}};

assign tmp_86_fu_451_p3 = r_V_fu_439_p2[32'd53];

assign tmp_88_fu_380_p1 = data_V_fu_366_p1[51:0];

assign tmp_fu_298_p4 = {{mul_ln440_fu_277_p2[127:69]}};

assign tmp_s_fu_463_p4 = {{r_V_15_fu_445_p2[116:53]}};

assign trunc_ln440_fu_357_p1 = lshr_ln440_fu_351_p2[63:0];

assign ush_fu_423_p3 = ((isNeg_fu_406_p3[0:0] == 1'b1) ? sext_ln1311_fu_419_p1 : add_ln510_fu_400_p2);

assign val_fu_473_p3 = ((isNeg_fu_406_p3[0:0] == 1'b1) ? zext_ln662_fu_459_p1 : tmp_s_fu_463_p4);

assign zext_ln15_fu_393_p1 = mantissa_fu_384_p4;

assign zext_ln440_1_fu_324_p1 = shl_ln440_2_fu_316_p3;

assign zext_ln440_2_fu_347_p1 = shl_ln9_fu_340_p3;

assign zext_ln440_3_fu_293_p1 = tmp_81_fu_283_p4;

assign zext_ln510_fu_397_p1 = tmp_87_reg_558;

assign zext_ln54_13_fu_200_p1 = shl_ln54_s_fu_193_p3;

assign zext_ln54_14_fu_239_p1 = shl_ln54_17_fu_231_p3;

assign zext_ln54_15_fu_251_p1 = shl_ln54_18_fu_243_p3;

assign zext_ln54_fu_189_p1 = shl_ln_fu_182_p3;

assign zext_ln662_fu_459_p1 = tmp_86_fu_451_p3;

always @ (posedge ap_clk) begin
    sext_ln438_reg_524[10:0] <= 11'b00000010000;
    add_ln54_reg_538[2:0] <= 3'b000;
    add_ln440_reg_548[2:0] <= 3'b000;
end

endmodule //makePatches_ShadowQuilt_fromEdges_get_index_from_z
