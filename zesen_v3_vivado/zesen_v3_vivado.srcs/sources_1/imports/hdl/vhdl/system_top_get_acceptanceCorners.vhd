-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_get_acceptanceCorners is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jR_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jR_0_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jR_1_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jR_2_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jR_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jR_3_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jR_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jR_0_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jR_1_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jR_2_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jR_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jR_3_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jR_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jL_0_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jL_1_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jL_2_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomL_jL_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomL_jL_3_ce0 : OUT STD_LOGIC;
    shadow_bottomL_jL_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jL_0_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jL_1_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jL_2_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shadow_bottomR_jL_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    shadow_bottomR_jL_3_ce0 : OUT STD_LOGIC;
    shadow_bottomR_jL_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    z1_min_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    z1_min_0_ce0 : OUT STD_LOGIC;
    z1_min_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    z1_max_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    z1_max_0_ce0 : OUT STD_LOGIC;
    z1_max_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_0_ce0 : OUT STD_LOGIC;
    a_corner_0_we0 : OUT STD_LOGIC;
    a_corner_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_corner_1_ce0 : OUT STD_LOGIC;
    a_corner_1_we0 : OUT STD_LOGIC;
    a_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_0_ce0 : OUT STD_LOGIC;
    b_corner_0_we0 : OUT STD_LOGIC;
    b_corner_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_corner_1_ce0 : OUT STD_LOGIC;
    b_corner_1_we0 : OUT STD_LOGIC;
    b_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_0_ce0 : OUT STD_LOGIC;
    c_corner_0_we0 : OUT STD_LOGIC;
    c_corner_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_corner_1_ce0 : OUT STD_LOGIC;
    c_corner_1_we0 : OUT STD_LOGIC;
    c_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_corner_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_0_ce0 : OUT STD_LOGIC;
    d_corner_0_we0 : OUT STD_LOGIC;
    d_corner_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_corner_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    d_corner_1_ce0 : OUT STD_LOGIC;
    d_corner_1_we0 : OUT STD_LOGIC;
    d_corner_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    squareAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    squareAcceptance_ce0 : OUT STD_LOGIC;
    squareAcceptance_we0 : OUT STD_LOGIC;
    squareAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    flatTop_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    flatTop_ce0 : OUT STD_LOGIC;
    flatTop_we0 : OUT STD_LOGIC;
    flatTop_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    flatBottom_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    flatBottom_ce0 : OUT STD_LOGIC;
    flatBottom_we0 : OUT STD_LOGIC;
    flatBottom_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    triangleAcceptance_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    triangleAcceptance_ce0 : OUT STD_LOGIC;
    triangleAcceptance_we0 : OUT STD_LOGIC;
    triangleAcceptance_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of system_top_get_acceptanceCorners is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_7FF00000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal idxprom_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom_reg_755 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln201_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln201_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal shadow_bottomR_jR_2_load_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shadow_bottomL_jR_3_load_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln204_1_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln204_1_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln201_2_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln201_2_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln207_1_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln207_1_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln210_1_fu_658_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln210_1_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal shadow_bottomL_jL_3_load_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shadow_bottomR_jL_3_load_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln201_3_fu_680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln201_3_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln204_3_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln204_3_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln207_2_fu_707_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln207_2_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln210_2_fu_720_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln210_2_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_corner_1_addr_reg_961 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_corner_1_addr_reg_966 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_corner_1_addr_reg_971 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_corner_1_addr_reg_976 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1499_1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_1_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_2_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_2_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln1499_3_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_3_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln1495_5_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_5_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_p_0_0_0_phi_fu_527_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_2_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1499_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal squareAcceptance_addr_1_gep_fu_448_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flatTop_addr_1_gep_fu_456_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal squareAcceptance_addr_2_gep_fu_478_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flatBottom_addr_1_gep_fu_486_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal squareAcceptance_addr_3_gep_fu_494_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal triangleAcceptance_addr_1_gep_fu_516_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1495_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_4_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln204_fu_562_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_6_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln201_1_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_2_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln207_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_4_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln210_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_5_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_7_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_3_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln204_2_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_8_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_6_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                a_corner_1_addr_reg_961 <= idxprom_reg_755(2 - 1 downto 0);
                b_corner_1_addr_reg_966 <= idxprom_reg_755(2 - 1 downto 0);
                c_corner_1_addr_reg_971 <= idxprom_reg_755(2 - 1 downto 0);
                d_corner_1_addr_reg_976 <= idxprom_reg_755(2 - 1 downto 0);
                icmp_ln1499_1_reg_984 <= icmp_ln1499_1_fu_733_p2;
                select_ln201_3_reg_935 <= select_ln201_3_fu_680_p3;
                select_ln204_3_reg_940 <= select_ln204_3_fu_693_p3;
                select_ln207_2_reg_948 <= select_ln207_2_fu_707_p3;
                select_ln210_2_reg_955 <= select_ln210_2_fu_720_p3;
                shadow_bottomL_jL_3_load_reg_925 <= shadow_bottomL_jL_3_q0;
                shadow_bottomR_jL_3_load_reg_930 <= shadow_bottomR_jL_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln1495_5_reg_999 <= icmp_ln1495_5_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln1499_2_reg_988 <= icmp_ln1499_2_fu_739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln1499_3_reg_992 <= icmp_ln1499_3_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    idxprom_reg_755(1 downto 0) <= idxprom_fu_535_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                select_ln201_2_reg_907 <= select_ln201_2_fu_630_p3;
                select_ln204_1_reg_901 <= select_ln204_1_fu_588_p3;
                select_ln207_1_reg_913 <= select_ln207_1_fu_644_p3;
                select_ln210_1_reg_919 <= select_ln210_1_fu_658_p3;
                shadow_bottomL_jR_3_load_reg_879 <= shadow_bottomL_jR_3_q0;
                shadow_bottomR_jR_2_load_reg_873 <= shadow_bottomR_jR_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln201_reg_867 <= select_ln201_fu_548_p3;
            end if;
        end if;
    end process;
    idxprom_reg_755(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_corner_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    a_corner_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_corner_0_ce0 <= ap_const_logic_1;
        else 
            a_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_corner_0_d0 <= z1_min_0_q0;

    a_corner_0_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_corner_0_we0 <= ap_const_logic_1;
        else 
            a_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_1_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state4, a_corner_1_addr_reg_961, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_1_address0 <= a_corner_1_addr_reg_961;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_corner_1_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            a_corner_1_address0 <= "XX";
        end if; 
    end process;


    a_corner_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            a_corner_1_ce0 <= ap_const_logic_1;
        else 
            a_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_corner_1_d0_assign_proc : process(ap_CS_fsm_state4, select_ln201_3_fu_680_p3, select_ln204_3_reg_940, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_corner_1_d0 <= select_ln204_3_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_corner_1_d0 <= select_ln201_3_fu_680_p3;
        else 
            a_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_corner_1_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln1494_2_fu_747_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1494_2_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            a_corner_1_we0 <= ap_const_logic_1;
        else 
            a_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_0_0_phi_fu_527_p4_assign_proc : process(select_ln204_3_reg_940, select_ln207_2_reg_948, ap_CS_fsm_state7, icmp_ln1494_2_fu_747_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
            if ((icmp_ln1494_2_fu_747_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_0_0_0_phi_fu_527_p4 <= select_ln207_2_reg_948;
            elsif ((icmp_ln1494_2_fu_747_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_0_0_0_phi_fu_527_p4 <= select_ln204_3_reg_940;
            else 
                ap_phi_mux_p_0_0_0_phi_fu_527_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_0_0_0_phi_fu_527_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    b_corner_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_corner_0_ce0 <= ap_const_logic_1;
        else 
            b_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_0_d0 <= z1_max_0_q0;

    b_corner_0_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_corner_0_we0 <= ap_const_logic_1;
        else 
            b_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_1_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state4, b_corner_1_addr_reg_966, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_1_address0 <= b_corner_1_addr_reg_966;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_corner_1_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            b_corner_1_address0 <= "XX";
        end if; 
    end process;


    b_corner_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            b_corner_1_ce0 <= ap_const_logic_1;
        else 
            b_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_corner_1_d0_assign_proc : process(ap_CS_fsm_state4, select_ln204_3_fu_693_p3, ap_CS_fsm_state7, ap_phi_mux_p_0_0_0_phi_fu_527_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_corner_1_d0 <= ap_phi_mux_p_0_0_0_phi_fu_527_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_corner_1_d0 <= select_ln204_3_fu_693_p3;
        else 
            b_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_corner_1_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1495_5_fu_751_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1495_5_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            b_corner_1_we0 <= ap_const_logic_1;
        else 
            b_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    c_corner_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_corner_0_ce0 <= ap_const_logic_1;
        else 
            c_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_corner_0_d0 <= z1_min_0_q0;

    c_corner_0_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_corner_0_we0 <= ap_const_logic_1;
        else 
            c_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_1_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state4, c_corner_1_addr_reg_971, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_1_address0 <= c_corner_1_addr_reg_971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_corner_1_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            c_corner_1_address0 <= "XX";
        end if; 
    end process;


    c_corner_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            c_corner_1_ce0 <= ap_const_logic_1;
        else 
            c_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_corner_1_d0_assign_proc : process(ap_CS_fsm_state4, select_ln204_3_reg_940, select_ln207_2_fu_707_p3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_corner_1_d0 <= select_ln204_3_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_corner_1_d0 <= select_ln207_2_fu_707_p3;
        else 
            c_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_corner_1_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln1494_2_fu_747_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1494_2_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            c_corner_1_we0 <= ap_const_logic_1;
        else 
            c_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    d_corner_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_corner_0_ce0 <= ap_const_logic_1;
        else 
            d_corner_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_corner_0_d0 <= z1_max_0_q0;

    d_corner_0_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_corner_0_we0 <= ap_const_logic_1;
        else 
            d_corner_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_1_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state4, d_corner_1_addr_reg_976, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_1_address0 <= d_corner_1_addr_reg_976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_corner_1_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            d_corner_1_address0 <= "XX";
        end if; 
    end process;


    d_corner_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            d_corner_1_ce0 <= ap_const_logic_1;
        else 
            d_corner_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_corner_1_d0_assign_proc : process(ap_CS_fsm_state4, select_ln210_2_fu_720_p3, ap_CS_fsm_state7, ap_phi_mux_p_0_0_0_phi_fu_527_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_corner_1_d0 <= ap_phi_mux_p_0_0_0_phi_fu_527_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_corner_1_d0 <= select_ln210_2_fu_720_p3;
        else 
            d_corner_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_corner_1_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1495_5_fu_751_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1495_5_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_corner_1_we0 <= ap_const_logic_1;
        else 
            d_corner_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flatBottom_addr_1_gep_fu_486_p3 <= idxprom_reg_755(2 - 1 downto 0);

    flatBottom_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state5, ap_CS_fsm_state6, flatBottom_addr_1_gep_fu_486_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            flatBottom_address0 <= flatBottom_addr_1_gep_fu_486_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flatBottom_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            flatBottom_address0 <= "XX";
        end if; 
    end process;


    flatBottom_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            flatBottom_ce0 <= ap_const_logic_1;
        else 
            flatBottom_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatBottom_d0 <= ap_const_lv1_0;

    flatBottom_we0_assign_proc : process(icmp_ln1499_2_fu_739_p2, ap_CS_fsm_state5, icmp_ln1499_3_fu_743_p2, ap_CS_fsm_state6)
    begin
        if ((((icmp_ln1499_3_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln1499_2_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            flatBottom_we0 <= ap_const_logic_1;
        else 
            flatBottom_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flatTop_addr_1_gep_fu_456_p3 <= idxprom_reg_755(2 - 1 downto 0);

    flatTop_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state4, ap_CS_fsm_state5, flatTop_addr_1_gep_fu_456_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flatTop_address0 <= flatTop_addr_1_gep_fu_456_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flatTop_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            flatTop_address0 <= "XX";
        end if; 
    end process;


    flatTop_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            flatTop_ce0 <= ap_const_logic_1;
        else 
            flatTop_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatTop_d0 <= ap_const_lv1_0;

    flatTop_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1499_1_reg_984, ap_CS_fsm_state5, icmp_ln1499_fu_728_p2)
    begin
        if ((((icmp_ln1499_1_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln1499_fu_728_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            flatTop_we0 <= ap_const_logic_1;
        else 
            flatTop_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_1_fu_610_p2 <= "1" when (signed(shadow_bottomR_jL_1_q0) > signed(shadow_bottomR_jL_0_q0)) else "0";
    icmp_ln1494_2_fu_747_p2 <= "1" when (signed(select_ln207_2_reg_948) > signed(select_ln201_3_reg_935)) else "0";
    icmp_ln1494_3_fu_702_p2 <= "1" when (signed(shadow_bottomL_jL_3_q0) > signed(select_ln207_1_reg_913)) else "0";
    icmp_ln1494_4_fu_638_p2 <= "1" when (signed(shadow_bottomL_jL_2_q0) > signed(select_ln207_fu_602_p3)) else "0";
    icmp_ln1494_5_fu_652_p2 <= "1" when (signed(shadow_bottomR_jL_2_q0) > signed(select_ln210_fu_616_p3)) else "0";
    icmp_ln1494_6_fu_715_p2 <= "1" when (signed(shadow_bottomR_jL_3_q0) > signed(select_ln210_1_reg_919)) else "0";
    icmp_ln1494_fu_596_p2 <= "1" when (signed(shadow_bottomL_jL_1_q0) > signed(shadow_bottomL_jL_0_q0)) else "0";
    icmp_ln1495_1_fu_570_p2 <= "1" when (signed(shadow_bottomL_jR_1_q0) < signed(select_ln201_reg_867)) else "0";
    icmp_ln1495_2_fu_624_p2 <= "1" when (signed(shadow_bottomL_jR_2_q0) < signed(select_ln201_1_fu_575_p3)) else "0";
    icmp_ln1495_3_fu_676_p2 <= "1" when (signed(shadow_bottomL_jR_3_load_reg_879) < signed(select_ln201_2_reg_907)) else "0";
    icmp_ln1495_4_fu_556_p2 <= "1" when (signed(shadow_bottomR_jR_0_q0) < signed(ap_const_lv32_7FF00000)) else "0";
    icmp_ln1495_5_fu_751_p2 <= "1" when (signed(select_ln204_3_reg_940) < signed(select_ln210_2_reg_955)) else "0";
    icmp_ln1495_6_fu_582_p2 <= "1" when (signed(shadow_bottomR_jR_1_q0) < signed(select_ln204_fu_562_p3)) else "0";
    icmp_ln1495_7_fu_666_p2 <= "1" when (signed(shadow_bottomR_jR_2_load_reg_873) < signed(select_ln204_1_reg_901)) else "0";
    icmp_ln1495_8_fu_687_p2 <= "1" when (signed(shadow_bottomR_jR_3_q0) < signed(select_ln204_2_fu_670_p3)) else "0";
    icmp_ln1495_fu_542_p2 <= "1" when (signed(shadow_bottomL_jR_0_q0) < signed(ap_const_lv32_7FF00000)) else "0";
    icmp_ln1499_1_fu_733_p2 <= "1" when (select_ln204_3_fu_693_p3 = shadow_bottomR_jR_3_q0) else "0";
    icmp_ln1499_2_fu_739_p2 <= "1" when (select_ln207_2_reg_948 = shadow_bottomL_jL_3_load_reg_925) else "0";
    icmp_ln1499_3_fu_743_p2 <= "1" when (select_ln210_2_reg_955 = shadow_bottomR_jL_3_load_reg_930) else "0";
    icmp_ln1499_fu_728_p2 <= "1" when (select_ln201_3_fu_680_p3 = shadow_bottomL_jR_3_load_reg_879) else "0";
    idxprom_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),64));
    select_ln201_1_fu_575_p3 <= 
        shadow_bottomL_jR_1_q0 when (icmp_ln1495_1_fu_570_p2(0) = '1') else 
        select_ln201_reg_867;
    select_ln201_2_fu_630_p3 <= 
        shadow_bottomL_jR_2_q0 when (icmp_ln1495_2_fu_624_p2(0) = '1') else 
        select_ln201_1_fu_575_p3;
    select_ln201_3_fu_680_p3 <= 
        shadow_bottomL_jR_3_load_reg_879 when (icmp_ln1495_3_fu_676_p2(0) = '1') else 
        select_ln201_2_reg_907;
    select_ln201_fu_548_p3 <= 
        shadow_bottomL_jR_0_q0 when (icmp_ln1495_fu_542_p2(0) = '1') else 
        ap_const_lv32_7FF00000;
    select_ln204_1_fu_588_p3 <= 
        shadow_bottomR_jR_1_q0 when (icmp_ln1495_6_fu_582_p2(0) = '1') else 
        select_ln204_fu_562_p3;
    select_ln204_2_fu_670_p3 <= 
        shadow_bottomR_jR_2_load_reg_873 when (icmp_ln1495_7_fu_666_p2(0) = '1') else 
        select_ln204_1_reg_901;
    select_ln204_3_fu_693_p3 <= 
        shadow_bottomR_jR_3_q0 when (icmp_ln1495_8_fu_687_p2(0) = '1') else 
        select_ln204_2_fu_670_p3;
    select_ln204_fu_562_p3 <= 
        shadow_bottomR_jR_0_q0 when (icmp_ln1495_4_fu_556_p2(0) = '1') else 
        ap_const_lv32_7FF00000;
    select_ln207_1_fu_644_p3 <= 
        shadow_bottomL_jL_2_q0 when (icmp_ln1494_4_fu_638_p2(0) = '1') else 
        select_ln207_fu_602_p3;
    select_ln207_2_fu_707_p3 <= 
        shadow_bottomL_jL_3_q0 when (icmp_ln1494_3_fu_702_p2(0) = '1') else 
        select_ln207_1_reg_913;
    select_ln207_fu_602_p3 <= 
        shadow_bottomL_jL_1_q0 when (icmp_ln1494_fu_596_p2(0) = '1') else 
        shadow_bottomL_jL_0_q0;
    select_ln210_1_fu_658_p3 <= 
        shadow_bottomR_jL_2_q0 when (icmp_ln1494_5_fu_652_p2(0) = '1') else 
        select_ln210_fu_616_p3;
    select_ln210_2_fu_720_p3 <= 
        shadow_bottomR_jL_3_q0 when (icmp_ln1494_6_fu_715_p2(0) = '1') else 
        select_ln210_1_reg_919;
    select_ln210_fu_616_p3 <= 
        shadow_bottomR_jL_1_q0 when (icmp_ln1494_1_fu_610_p2(0) = '1') else 
        shadow_bottomR_jL_0_q0;
    shadow_bottomL_jL_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jL_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_0_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jL_1_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jL_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_1_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jL_2_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jL_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jL_2_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jL_3_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jL_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shadow_bottomL_jL_3_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jL_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_0_address0 <= idxprom_fu_535_p1(2 - 1 downto 0);

    shadow_bottomL_jR_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            shadow_bottomL_jR_0_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_1_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jR_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_1_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_2_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jR_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_2_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomL_jR_3_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomL_jR_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomL_jR_3_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomL_jR_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jL_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_0_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_1_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jL_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_1_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_2_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jL_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jL_2_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jL_3_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jL_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shadow_bottomR_jL_3_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jL_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_0_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jR_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_0_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_1_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jR_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_1_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_2_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jR_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shadow_bottomR_jR_2_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shadow_bottomR_jR_3_address0 <= idxprom_reg_755(2 - 1 downto 0);

    shadow_bottomR_jR_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shadow_bottomR_jR_3_ce0 <= ap_const_logic_1;
        else 
            shadow_bottomR_jR_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    squareAcceptance_addr_1_gep_fu_448_p3 <= idxprom_reg_755(2 - 1 downto 0);
    squareAcceptance_addr_2_gep_fu_478_p3 <= idxprom_reg_755(2 - 1 downto 0);
    squareAcceptance_addr_3_gep_fu_494_p3 <= idxprom_reg_755(2 - 1 downto 0);

    squareAcceptance_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, squareAcceptance_addr_1_gep_fu_448_p3, squareAcceptance_addr_2_gep_fu_478_p3, squareAcceptance_addr_3_gep_fu_494_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            squareAcceptance_address0 <= squareAcceptance_addr_3_gep_fu_494_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            squareAcceptance_address0 <= squareAcceptance_addr_2_gep_fu_478_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            squareAcceptance_address0 <= squareAcceptance_addr_1_gep_fu_448_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            squareAcceptance_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            squareAcceptance_address0 <= "XX";
        end if; 
    end process;


    squareAcceptance_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            squareAcceptance_ce0 <= ap_const_logic_1;
        else 
            squareAcceptance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    squareAcceptance_d0 <= ap_const_lv1_0;

    squareAcceptance_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1499_1_reg_984, icmp_ln1499_2_reg_988, ap_CS_fsm_state5, icmp_ln1499_3_reg_992, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln1499_fu_728_p2)
    begin
        if ((((icmp_ln1499_3_reg_992 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln1499_2_reg_988 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln1499_1_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln1499_fu_728_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            squareAcceptance_we0 <= ap_const_logic_1;
        else 
            squareAcceptance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    triangleAcceptance_addr_1_gep_fu_516_p3 <= idxprom_reg_755(2 - 1 downto 0);

    triangleAcceptance_address0_assign_proc : process(idxprom_reg_755, ap_CS_fsm_state7, triangleAcceptance_addr_1_gep_fu_516_p3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            triangleAcceptance_address0 <= triangleAcceptance_addr_1_gep_fu_516_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            triangleAcceptance_address0 <= idxprom_reg_755(2 - 1 downto 0);
        else 
            triangleAcceptance_address0 <= "XX";
        end if; 
    end process;


    triangleAcceptance_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            triangleAcceptance_ce0 <= ap_const_logic_1;
        else 
            triangleAcceptance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangleAcceptance_d0 <= ap_const_lv1_1;

    triangleAcceptance_we0_assign_proc : process(icmp_ln1495_5_reg_999, ap_CS_fsm_state7, icmp_ln1494_2_fu_747_p2, ap_CS_fsm_state8)
    begin
        if ((((icmp_ln1495_5_reg_999 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln1494_2_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            triangleAcceptance_we0 <= ap_const_logic_1;
        else 
            triangleAcceptance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_max_0_address0 <= idxprom_fu_535_p1(2 - 1 downto 0);

    z1_max_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            z1_max_0_ce0 <= ap_const_logic_1;
        else 
            z1_max_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_min_0_address0 <= idxprom_fu_535_p1(2 - 1 downto 0);

    z1_min_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            z1_min_0_ce0 <= ap_const_logic_1;
        else 
            z1_min_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
