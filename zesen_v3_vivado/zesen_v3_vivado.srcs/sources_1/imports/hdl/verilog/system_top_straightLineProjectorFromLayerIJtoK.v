// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_straightLineProjectorFromLayerIJtoK (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        z_i,
        z_j,
        i,
        j,
        k,
        ap_return
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] z_i;
input  [31:0] z_j;
input  [2:0] i;
input  [2:0] j;
input  [2:0] k;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] get_radiiradii_address0;
reg    get_radiiradii_ce0;
wire   [31:0] get_radiiradii_q0;
wire   [2:0] get_radiiradii_address1;
reg    get_radiiradii_ce1;
wire   [31:0] get_radiiradii_q1;
wire   [0:0] icmp_ln870_fu_101_p2;
reg   [0:0] icmp_ln870_reg_302;
wire   [4:0] trunc_ln731_fu_118_p1;
reg   [4:0] trunc_ln731_reg_312;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln870_1_fu_122_p2;
reg   [0:0] icmp_ln870_1_reg_317;
wire   [0:0] icmp_ln870_2_fu_139_p2;
reg   [0:0] icmp_ln870_2_reg_327;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state52;
wire   [31:0] grp_fu_244_p2;
reg   [31:0] sdiv_ln1148_reg_352;
wire   [32:0] ret_V_4_fu_258_p2;
reg  signed [32:0] ret_V_4_reg_357;
wire   [51:0] r_V_1_fu_274_p2;
reg   [51:0] r_V_1_reg_362;
wire    ap_CS_fsm_state53;
wire   [63:0] zext_ln113_fu_113_p1;
wire   [63:0] zext_ln113_1_fu_134_p1;
wire   [63:0] zext_ln113_2_fu_151_p1;
wire   [2:0] add_ln28_fu_107_p2;
wire   [2:0] add_ln33_fu_128_p2;
wire   [2:0] add_ln38_fu_145_p2;
wire   [24:0] radius_i_V_fu_156_p3;
wire   [4:0] trunc_ln731_1_fu_170_p1;
wire   [24:0] radius_j_V_fu_174_p3;
wire   [4:0] trunc_ln731_2_fu_189_p1;
wire   [24:0] radius_k_V_fu_193_p3;
wire   [24:0] radius_k_V_2_fu_201_p3;
wire   [24:0] radius_i_V_2_fu_163_p3;
wire   [25:0] zext_ln1193_fu_208_p1;
wire   [25:0] zext_ln1193_1_fu_212_p1;
wire   [24:0] radius_j_V_2_fu_182_p3;
wire   [25:0] zext_ln1193_2_fu_222_p1;
wire   [25:0] ret_V_fu_216_p2;
wire  signed [25:0] ret_V_1_fu_226_p2;
wire   [45:0] grp_fu_244_p0;
wire  signed [31:0] sext_ln703_1_fu_254_p0;
wire  signed [32:0] sext_ln703_fu_250_p1;
wire  signed [32:0] sext_ln703_1_fu_254_p1;
wire  signed [31:0] radii_leverArm_fu_264_p1;
wire  signed [31:0] lhs_2_fu_280_p1;
wire    ap_CS_fsm_state54;
wire   [51:0] lhs_2_fu_280_p3;
wire   [51:0] ret_V_3_fu_287_p2;
reg    grp_fu_244_ap_start;
wire    grp_fu_244_ap_done;
reg   [53:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
end

system_top_straightLineProjectorFromLayerIJtoK_get_radiiradii #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
get_radiiradii_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(get_radiiradii_address0),
    .ce0(get_radiiradii_ce0),
    .q0(get_radiiradii_q0),
    .address1(get_radiiradii_address1),
    .ce1(get_radiiradii_ce1),
    .q1(get_radiiradii_q1)
);

system_top_sdiv_46ns_26s_32_50_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 50 ),
    .din0_WIDTH( 46 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 32 ))
sdiv_46ns_26s_32_50_seq_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_244_ap_start),
    .done(grp_fu_244_ap_done),
    .din0(grp_fu_244_p0),
    .din1(ret_V_1_fu_226_p2),
    .ce(1'b1),
    .dout(grp_fu_244_p2)
);

system_top_mul_33s_32s_52_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_33s_32s_52_1_1_U173(
    .din0(ret_V_4_reg_357),
    .din1(radii_leverArm_fu_264_p1),
    .dout(r_V_1_fu_274_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln870_1_reg_317 <= icmp_ln870_1_fu_122_p2;
        icmp_ln870_2_reg_327 <= icmp_ln870_2_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln870_reg_302 <= icmp_ln870_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        r_V_1_reg_362 <= r_V_1_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ret_V_4_reg_357 <= ret_V_4_fu_258_p2;
        sdiv_ln1148_reg_352 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln870_reg_302 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln731_reg_312 <= trunc_ln731_fu_118_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        get_radiiradii_address0 = zext_ln113_2_fu_151_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        get_radiiradii_address0 = zext_ln113_fu_113_p1;
    end else begin
        get_radiiradii_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        get_radiiradii_ce0 = 1'b1;
    end else begin
        get_radiiradii_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        get_radiiradii_ce1 = 1'b1;
    end else begin
        get_radiiradii_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_244_ap_start = 1'b1;
    end else begin
        grp_fu_244_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_107_p2 = ($signed(i) + $signed(3'd7));

assign add_ln33_fu_128_p2 = ($signed(j) + $signed(3'd7));

assign add_ln38_fu_145_p2 = ($signed(k) + $signed(3'd7));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_return = {{ret_V_3_fu_287_p2[51:20]}};

assign get_radiiradii_address1 = zext_ln113_1_fu_134_p1;

assign grp_fu_244_p0 = {{ret_V_fu_216_p2}, {20'd0}};

assign icmp_ln870_1_fu_122_p2 = ((j == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln870_2_fu_139_p2 = ((k == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_101_p2 = ((i == 3'd0) ? 1'b1 : 1'b0);

assign lhs_2_fu_280_p1 = z_i;

assign lhs_2_fu_280_p3 = {{lhs_2_fu_280_p1}, {20'd0}};

assign radii_leverArm_fu_264_p1 = sdiv_ln1148_reg_352[31:0];

assign radius_i_V_2_fu_163_p3 = ((icmp_ln870_reg_302[0:0] == 1'b1) ? 25'd0 : radius_i_V_fu_156_p3);

assign radius_i_V_fu_156_p3 = {{trunc_ln731_reg_312}, {20'd0}};

assign radius_j_V_2_fu_182_p3 = ((icmp_ln870_1_reg_317[0:0] == 1'b1) ? 25'd0 : radius_j_V_fu_174_p3);

assign radius_j_V_fu_174_p3 = {{trunc_ln731_1_fu_170_p1}, {20'd0}};

assign radius_k_V_2_fu_201_p3 = ((icmp_ln870_2_reg_327[0:0] == 1'b1) ? 25'd0 : radius_k_V_fu_193_p3);

assign radius_k_V_fu_193_p3 = {{trunc_ln731_2_fu_189_p1}, {20'd0}};

assign ret_V_1_fu_226_p2 = (zext_ln1193_2_fu_222_p1 - zext_ln1193_1_fu_212_p1);

assign ret_V_3_fu_287_p2 = (r_V_1_reg_362 + lhs_2_fu_280_p3);

assign ret_V_4_fu_258_p2 = ($signed(sext_ln703_fu_250_p1) - $signed(sext_ln703_1_fu_254_p1));

assign ret_V_fu_216_p2 = (zext_ln1193_fu_208_p1 - zext_ln1193_1_fu_212_p1);

assign sext_ln703_1_fu_254_p0 = z_i;

assign sext_ln703_1_fu_254_p1 = sext_ln703_1_fu_254_p0;

assign sext_ln703_fu_250_p1 = $signed(z_j);

assign trunc_ln731_1_fu_170_p1 = get_radiiradii_q1[4:0];

assign trunc_ln731_2_fu_189_p1 = get_radiiradii_q0[4:0];

assign trunc_ln731_fu_118_p1 = get_radiiradii_q0[4:0];

assign zext_ln113_1_fu_134_p1 = add_ln33_fu_128_p2;

assign zext_ln113_2_fu_151_p1 = add_ln38_fu_145_p2;

assign zext_ln113_fu_113_p1 = add_ln28_fu_107_p2;

assign zext_ln1193_1_fu_212_p1 = radius_i_V_2_fu_163_p3;

assign zext_ln1193_2_fu_222_p1 = radius_j_V_2_fu_182_p3;

assign zext_ln1193_fu_208_p1 = radius_k_V_2_fu_201_p3;

endmodule //system_top_straightLineProjectorFromLayerIJtoK
