// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_p_find_starting_index_and_value (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        num_points_address1,
        num_points_ce1,
        num_points_q1,
        points_address1,
        points_ce1,
        points_q1,
        projectionToRow_dout,
        projectionToRow_empty_n,
        projectionToRow_read,
        start_index,
        start_index_ap_vld,
        start_value_i,
        start_value_o,
        start_value_o_ap_vld,
        i_dout,
        i_empty_n,
        i_read
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] num_points_address1;
output   num_points_ce1;
input  [31:0] num_points_q1;
output  [11:0] points_address1;
output   points_ce1;
input  [127:0] points_q1;
input  [31:0] projectionToRow_dout;
input   projectionToRow_empty_n;
output   projectionToRow_read;
output  [31:0] start_index;
output   start_index_ap_vld;
input  [31:0] start_value_i;
output  [31:0] start_value_o;
output   start_value_o_ap_vld;
input  [2:0] i_dout;
input   i_empty_n;
output   i_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg num_points_ce1;
reg points_ce1;
reg projectionToRow_read;
reg[31:0] start_index;
reg start_index_ap_vld;
reg[31:0] start_value_o;
reg start_value_o_ap_vld;
reg i_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    projectionToRow_blk_n;
reg    i_blk_n;
reg   [31:0] p_Val2_20_reg_1265;
reg   [2:0] i_1_reg_1273;
reg   [0:0] p_Result_53_reg_1283;
reg   [31:0] num_points_load_reg_1289;
wire    ap_CS_fsm_state2;
wire   [0:0] tobool_i19_i_fu_228_p2;
reg   [0:0] tobool_i19_i_reg_1294;
wire   [31:0] tmp_V_10_fu_238_p3;
reg   [31:0] tmp_V_10_reg_1299;
wire   [63:0] m_22_i_fu_244_p1;
reg   [63:0] m_22_i_reg_1306;
wire   [15:0] shl_ln_fu_248_p3;
reg   [15:0] shl_ln_reg_1312;
wire   [31:0] add_ln300_fu_255_p2;
reg   [31:0] add_ln300_reg_1317;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln300_fu_261_p2;
wire   [0:0] icmp_ln958_1_fu_419_p2;
reg   [0:0] icmp_ln958_1_reg_1330;
wire   [31:0] sub_ln959_1_fu_431_p2;
reg   [31:0] sub_ln959_1_reg_1335;
wire   [31:0] add_ln958_1_fu_445_p2;
reg   [31:0] add_ln958_1_reg_1340;
wire   [0:0] select_ln958_2_fu_451_p3;
reg   [0:0] select_ln958_2_reg_1345;
wire   [7:0] trunc_ln943_1_fu_459_p1;
reg   [7:0] trunc_ln943_1_reg_1350;
wire   [31:0] z_bits_fu_463_p1;
reg   [31:0] z_bits_reg_1355;
wire    ap_CS_fsm_state4;
wire   [0:0] p_Result_49_fu_467_p3;
reg   [0:0] p_Result_49_reg_1361;
wire   [31:0] m_32_fu_481_p3;
reg   [31:0] m_32_reg_1366;
reg   [31:0] p_Result_50_fu_489_p4;
reg   [31:0] p_Result_50_reg_1373;
wire   [31:0] retval_0_i81_i_fu_599_p3;
reg   [31:0] retval_0_i81_i_reg_1378;
wire   [0:0] icmp_ln958_fu_705_p2;
reg   [0:0] icmp_ln958_reg_1383;
wire    ap_CS_fsm_state5;
wire   [31:0] sub_ln959_fu_717_p2;
reg   [31:0] sub_ln959_reg_1388;
wire   [31:0] add_ln958_fu_731_p2;
reg   [31:0] add_ln958_reg_1393;
wire   [0:0] select_ln958_fu_737_p3;
reg   [0:0] select_ln958_reg_1398;
wire   [7:0] trunc_ln943_fu_745_p1;
reg   [7:0] trunc_ln943_reg_1403;
wire   [31:0] select_ln935_fu_859_p3;
reg   [31:0] select_ln935_reg_1408;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln935_1_fu_867_p2;
reg   [0:0] icmp_ln935_1_reg_1413;
wire    ap_CS_fsm_state8;
wire   [0:0] p_Result_58_fu_873_p3;
reg   [0:0] p_Result_58_reg_1418;
wire   [31:0] m_35_fu_887_p3;
reg   [31:0] m_35_reg_1423;
reg   [31:0] p_Result_59_fu_895_p4;
reg   [31:0] p_Result_59_reg_1430;
wire   [0:0] icmp_ln958_2_fu_1004_p2;
reg   [0:0] icmp_ln958_2_reg_1435;
wire    ap_CS_fsm_state9;
wire   [31:0] sub_ln959_2_fu_1016_p2;
reg   [31:0] sub_ln959_2_reg_1440;
wire   [31:0] add_ln958_2_fu_1030_p2;
reg   [31:0] add_ln958_2_reg_1445;
wire   [0:0] select_ln958_4_fu_1036_p3;
reg   [0:0] select_ln958_4_reg_1450;
wire   [7:0] trunc_ln943_2_fu_1044_p1;
reg   [7:0] trunc_ln943_2_reg_1455;
wire   [31:0] grp_fu_207_p2;
reg   [31:0] dc_reg_1460;
wire    ap_CS_fsm_state10;
wire   [30:0] LD_3_fu_1145_p1;
reg   [30:0] LD_3_reg_1465;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln302_fu_1216_p2;
reg   [0:0] icmp_ln302_reg_1480;
wire   [0:0] icmp_ln302_1_fu_1222_p2;
reg   [0:0] icmp_ln302_1_reg_1485;
wire   [0:0] icmp_ln302_2_fu_1228_p2;
reg   [0:0] icmp_ln302_2_reg_1490;
wire   [0:0] icmp_ln302_3_fu_1234_p2;
reg   [0:0] icmp_ln302_3_reg_1495;
reg   [31:0] j_reg_194;
wire    ap_CS_fsm_state12;
wire   [63:0] idxprom_i_fu_215_p1;
wire   [63:0] zext_ln301_fu_305_p1;
reg    ap_block_state1;
reg   [31:0] start_index_preg;
wire   [0:0] and_ln302_1_fu_1254_p2;
wire   [31:0] sub_ln703_fu_1260_p2;
reg   [31:0] start_value_o_preg;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_211_p0;
wire   [31:0] grp_fu_211_p1;
wire   [31:0] sub_i23_i_fu_233_p2;
wire   [11:0] trunc_ln301_fu_266_p1;
wire   [15:0] shl_ln301_1_fu_270_p3;
wire   [15:0] add_ln301_fu_278_p2;
wire   [2:0] lshr_ln_fu_283_p4;
wire   [8:0] trunc_ln301_1_fu_293_p1;
wire   [11:0] tmp_67_fu_297_p3;
reg   [31:0] p_Result_54_fu_310_p4;
reg   [31:0] l_2_fu_319_p3;
wire   [31:0] sub_ln944_1_fu_327_p2;
wire   [31:0] lsb_index_2_fu_333_p2;
wire   [30:0] tmp_fu_339_p4;
wire   [5:0] trunc_ln947_1_fu_355_p1;
wire   [5:0] sub_ln947_1_fu_359_p2;
wire   [31:0] zext_ln947_1_fu_365_p1;
wire   [31:0] lshr_ln947_1_fu_369_p2;
wire   [31:0] shl_ln949_1_fu_375_p2;
wire   [31:0] or_ln949_fu_381_p2;
wire   [31:0] and_ln949_2_fu_387_p2;
wire   [0:0] tmp_113_fu_398_p3;
wire   [0:0] p_Result_55_fu_412_p3;
wire   [0:0] xor_ln949_1_fu_406_p2;
wire   [0:0] icmp_ln946_1_fu_349_p2;
wire   [0:0] icmp_ln949_1_fu_392_p2;
wire   [0:0] select_ln946_1_fu_437_p3;
wire   [0:0] and_ln949_3_fu_425_p2;
wire   [31:0] tmp_V_fu_475_p2;
wire   [63:0] zext_ln959_2_fu_499_p1;
wire   [63:0] zext_ln958_1_fu_507_p1;
wire   [63:0] lshr_ln958_1_fu_510_p2;
wire   [63:0] shl_ln959_1_fu_502_p2;
wire   [63:0] m_25_fu_515_p3;
wire   [63:0] zext_ln961_1_fu_522_p1;
wire   [63:0] m_26_fu_525_p2;
wire   [62:0] m_34_fu_531_p4;
wire   [0:0] p_Result_40_fu_545_p3;
wire   [7:0] sub_ln964_1_fu_561_p2;
wire   [7:0] select_ln943_1_fu_553_p3;
wire   [7:0] add_ln964_1_fu_566_p2;
wire   [63:0] zext_ln962_1_fu_541_p1;
wire   [8:0] tmp_11_i_fu_572_p3;
wire   [63:0] p_Result_56_fu_579_p5;
wire   [31:0] LD_2_fu_591_p1;
wire   [31:0] bitcast_ln744_1_fu_595_p1;
reg   [31:0] l_fu_606_p3;
wire   [31:0] sub_ln944_fu_613_p2;
wire   [31:0] lsb_index_fu_619_p2;
wire   [30:0] tmp_110_fu_625_p4;
wire   [5:0] trunc_ln947_fu_641_p1;
wire   [5:0] sub_ln947_fu_645_p2;
wire   [31:0] zext_ln947_fu_651_p1;
wire   [31:0] lshr_ln947_fu_655_p2;
wire   [31:0] shl_ln949_fu_661_p2;
wire   [31:0] or_ln949_3_fu_667_p2;
wire   [31:0] and_ln949_fu_673_p2;
wire   [0:0] tmp_111_fu_684_p3;
wire   [0:0] p_Result_51_fu_698_p3;
wire   [0:0] xor_ln949_fu_692_p2;
wire   [0:0] icmp_ln946_fu_635_p2;
wire   [0:0] icmp_ln949_fu_678_p2;
wire   [0:0] select_ln946_fu_723_p3;
wire   [0:0] and_ln949_1_fu_711_p2;
wire   [63:0] zext_ln959_fu_754_p1;
wire   [63:0] zext_ln959_1_fu_757_p1;
wire   [63:0] zext_ln958_fu_766_p1;
wire   [63:0] lshr_ln958_fu_769_p2;
wire   [63:0] shl_ln959_fu_760_p2;
wire   [63:0] m_fu_775_p3;
wire   [63:0] zext_ln961_fu_782_p1;
wire   [63:0] m_21_fu_785_p2;
wire   [62:0] m_33_fu_791_p4;
wire   [0:0] p_Result_s_fu_805_p3;
wire   [7:0] sub_ln964_fu_821_p2;
wire   [7:0] select_ln943_fu_813_p3;
wire   [7:0] add_ln964_fu_826_p2;
wire   [63:0] zext_ln962_fu_801_p1;
wire   [8:0] tmp_i_fu_832_p3;
wire   [63:0] p_Result_52_fu_839_p5;
wire   [31:0] LD_fu_851_p1;
wire   [0:0] icmp_ln935_fu_749_p2;
wire   [31:0] bitcast_ln744_fu_855_p1;
wire   [31:0] tmp_V_7_fu_881_p2;
reg   [31:0] l_3_fu_905_p3;
wire   [31:0] sub_ln944_2_fu_912_p2;
wire   [31:0] lsb_index_3_fu_918_p2;
wire   [30:0] tmp_116_fu_924_p4;
wire   [5:0] trunc_ln947_2_fu_940_p1;
wire   [5:0] sub_ln947_2_fu_944_p2;
wire   [31:0] zext_ln947_2_fu_950_p1;
wire   [31:0] lshr_ln947_2_fu_954_p2;
wire   [31:0] shl_ln949_2_fu_960_p2;
wire   [31:0] or_ln949_4_fu_966_p2;
wire   [31:0] and_ln949_4_fu_972_p2;
wire   [0:0] tmp_117_fu_983_p3;
wire   [0:0] p_Result_60_fu_997_p3;
wire   [0:0] xor_ln949_2_fu_991_p2;
wire   [0:0] icmp_ln946_2_fu_934_p2;
wire   [0:0] icmp_ln949_2_fu_977_p2;
wire   [0:0] select_ln946_2_fu_1022_p3;
wire   [0:0] and_ln949_5_fu_1010_p2;
wire   [63:0] zext_ln959_3_fu_1048_p1;
wire   [63:0] zext_ln959_4_fu_1051_p1;
wire   [63:0] zext_ln958_2_fu_1060_p1;
wire   [63:0] lshr_ln958_2_fu_1063_p2;
wire   [63:0] shl_ln959_2_fu_1054_p2;
wire   [63:0] m_29_fu_1069_p3;
wire   [63:0] zext_ln961_2_fu_1076_p1;
wire   [63:0] m_30_fu_1079_p2;
wire   [62:0] m_36_fu_1085_p4;
wire   [0:0] p_Result_46_fu_1099_p3;
wire   [7:0] sub_ln964_2_fu_1115_p2;
wire   [7:0] select_ln943_2_fu_1107_p3;
wire   [7:0] add_ln964_2_fu_1120_p2;
wire   [63:0] zext_ln962_2_fu_1095_p1;
wire   [8:0] tmp_13_i_fu_1126_p3;
wire   [63:0] p_Result_61_fu_1133_p5;
wire   [31:0] data_V_fu_1149_p1;
wire   [30:0] trunc_ln368_fu_1152_p1;
wire   [31:0] p_Result_57_fu_1160_p3;
wire   [30:0] data_V_1_fu_1173_p3;
wire   [31:0] p_Result_62_fu_1183_p3;
wire   [7:0] tmp_s_fu_1196_p4;
wire   [22:0] trunc_ln302_fu_1156_p1;
wire   [7:0] tmp_1_fu_1206_p4;
wire   [22:0] trunc_ln302_1_fu_1179_p1;
wire   [0:0] or_ln302_fu_1240_p2;
wire   [0:0] or_ln302_1_fu_1244_p2;
wire   [0:0] and_ln302_fu_1248_p2;
wire   [0:0] grp_fu_211_p2;
reg   [11:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 start_index_preg = 32'd0;
#0 start_value_o_preg = 32'd0;
end

system_top_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln935_reg_1408),
    .din1(retval_0_i81_i_reg_1378),
    .ce(1'b1),
    .dout(grp_fu_207_p2)
);

system_top_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_211_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln300_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_index_preg <= 32'd0;
    end else begin
        if (((1'd1 == and_ln302_1_fu_1254_p2) & (1'b1 == ap_CS_fsm_state12))) begin
            start_index_preg <= j_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_value_o_preg <= 32'd0;
    end else begin
        if (((1'd1 == and_ln302_1_fu_1254_p2) & (1'b1 == ap_CS_fsm_state12))) begin
            start_value_o_preg <= sub_ln703_fu_1260_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_194 <= add_ln300_reg_1317;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_194 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln935_1_reg_1413 == 1'd0))) begin
        LD_3_reg_1465 <= LD_3_fu_1145_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln300_reg_1317 <= add_ln300_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_261_p2 == 1'd0) & (tobool_i19_i_reg_1294 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln958_1_reg_1340 <= add_ln958_1_fu_445_p2;
        icmp_ln958_1_reg_1330 <= icmp_ln958_1_fu_419_p2;
        select_ln958_2_reg_1345 <= select_ln958_2_fu_451_p3;
        sub_ln959_1_reg_1335 <= sub_ln959_1_fu_431_p2;
        trunc_ln943_1_reg_1350 <= trunc_ln943_1_fu_459_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln935_1_reg_1413 == 1'd0))) begin
        add_ln958_2_reg_1445 <= add_ln958_2_fu_1030_p2;
        icmp_ln958_2_reg_1435 <= icmp_ln958_2_fu_1004_p2;
        select_ln958_4_reg_1450 <= select_ln958_4_fu_1036_p3;
        sub_ln959_2_reg_1440 <= sub_ln959_2_fu_1016_p2;
        trunc_ln943_2_reg_1455 <= trunc_ln943_2_fu_1044_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln958_reg_1393 <= add_ln958_fu_731_p2;
        icmp_ln958_reg_1383 <= icmp_ln958_fu_705_p2;
        select_ln958_reg_1398 <= select_ln958_fu_737_p3;
        sub_ln959_reg_1388 <= sub_ln959_fu_717_p2;
        trunc_ln943_reg_1403 <= trunc_ln943_fu_745_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dc_reg_1460 <= grp_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_1_reg_1273 <= i_dout;
        p_Result_53_reg_1283 <= projectionToRow_dout[32'd31];
        p_Val2_20_reg_1265 <= projectionToRow_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        icmp_ln302_1_reg_1485 <= icmp_ln302_1_fu_1222_p2;
        icmp_ln302_2_reg_1490 <= icmp_ln302_2_fu_1228_p2;
        icmp_ln302_3_reg_1495 <= icmp_ln302_3_fu_1234_p2;
        icmp_ln302_reg_1480 <= icmp_ln302_fu_1216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln935_1_reg_1413 <= icmp_ln935_1_fu_867_p2;
        m_35_reg_1423 <= m_35_fu_887_p3;
        p_Result_58_reg_1418 <= start_value_i[32'd31];
        p_Result_59_reg_1430 <= p_Result_59_fu_895_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_22_i_reg_1306[31 : 0] <= m_22_i_fu_244_p1[31 : 0];
        num_points_load_reg_1289 <= num_points_q1;
        shl_ln_reg_1312[15 : 13] <= shl_ln_fu_248_p3[15 : 13];
        tmp_V_10_reg_1299 <= tmp_V_10_fu_238_p3;
        tobool_i19_i_reg_1294 <= tobool_i19_i_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_32_reg_1366 <= m_32_fu_481_p3;
        p_Result_49_reg_1361 <= points_q1[32'd31];
        p_Result_50_reg_1373 <= p_Result_50_fu_489_p4;
        retval_0_i81_i_reg_1378 <= retval_0_i81_i_fu_599_p3;
        z_bits_reg_1355 <= z_bits_fu_463_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln935_reg_1408 <= select_ln935_fu_859_p3;
    end
end

always @ (*) begin
    if (((icmp_ln300_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln300_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_blk_n = i_empty_n;
    end else begin
        i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_empty_n == 1'b0) | (projectionToRow_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_read = 1'b1;
    end else begin
        i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((i_empty_n == 1'b0) | (projectionToRow_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_points_ce1 = 1'b1;
    end else begin
        num_points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        points_ce1 = 1'b1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        projectionToRow_blk_n = projectionToRow_empty_n;
    end else begin
        projectionToRow_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_empty_n == 1'b0) | (projectionToRow_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        projectionToRow_read = 1'b1;
    end else begin
        projectionToRow_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln302_1_fu_1254_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        start_index = j_reg_194;
    end else begin
        start_index = start_index_preg;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln302_1_fu_1254_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        start_index_ap_vld = 1'b1;
    end else begin
        start_index_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln302_1_fu_1254_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        start_value_o = sub_ln703_fu_1260_p2;
    end else begin
        start_value_o = start_value_o_preg;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln302_1_fu_1254_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        start_value_o_ap_vld = 1'b1;
    end else begin
        start_value_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((i_empty_n == 1'b0) | (projectionToRow_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln300_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_2_fu_591_p1 = p_Result_56_fu_579_p5[31:0];

assign LD_3_fu_1145_p1 = p_Result_61_fu_1133_p5[30:0];

assign LD_fu_851_p1 = p_Result_52_fu_839_p5[31:0];

assign add_ln300_fu_255_p2 = (j_reg_194 + 32'd1);

assign add_ln301_fu_278_p2 = (shl_ln301_1_fu_270_p3 + shl_ln_reg_1312);

assign add_ln958_1_fu_445_p2 = ($signed(sub_ln944_1_fu_327_p2) + $signed(32'd4294967271));

assign add_ln958_2_fu_1030_p2 = ($signed(sub_ln944_2_fu_912_p2) + $signed(32'd4294967271));

assign add_ln958_fu_731_p2 = ($signed(sub_ln944_fu_613_p2) + $signed(32'd4294967271));

assign add_ln964_1_fu_566_p2 = (sub_ln964_1_fu_561_p2 + select_ln943_1_fu_553_p3);

assign add_ln964_2_fu_1120_p2 = (sub_ln964_2_fu_1115_p2 + select_ln943_2_fu_1107_p3);

assign add_ln964_fu_826_p2 = (sub_ln964_fu_821_p2 + select_ln943_fu_813_p3);

assign and_ln302_1_fu_1254_p2 = (grp_fu_211_p2 & and_ln302_fu_1248_p2);

assign and_ln302_fu_1248_p2 = (or_ln302_fu_1240_p2 & or_ln302_1_fu_1244_p2);

assign and_ln949_1_fu_711_p2 = (xor_ln949_fu_692_p2 & p_Result_51_fu_698_p3);

assign and_ln949_2_fu_387_p2 = (tmp_V_10_reg_1299 & or_ln949_fu_381_p2);

assign and_ln949_3_fu_425_p2 = (xor_ln949_1_fu_406_p2 & p_Result_55_fu_412_p3);

assign and_ln949_4_fu_972_p2 = (or_ln949_4_fu_966_p2 & m_35_reg_1423);

assign and_ln949_5_fu_1010_p2 = (xor_ln949_2_fu_991_p2 & p_Result_60_fu_997_p3);

assign and_ln949_fu_673_p2 = (or_ln949_3_fu_667_p2 & m_32_reg_1366);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((i_empty_n == 1'b0) | (projectionToRow_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln744_1_fu_595_p1 = LD_2_fu_591_p1;

assign bitcast_ln744_fu_855_p1 = LD_fu_851_p1;

assign data_V_1_fu_1173_p3 = ((icmp_ln935_1_reg_1413[0:0] == 1'b1) ? 31'd0 : LD_3_reg_1465);

assign data_V_fu_1149_p1 = dc_reg_1460;

assign grp_fu_211_p0 = p_Result_57_fu_1160_p3;

assign grp_fu_211_p1 = p_Result_62_fu_1183_p3;

assign icmp_ln300_fu_261_p2 = ((j_reg_194 == num_points_load_reg_1289) ? 1'b1 : 1'b0);

assign icmp_ln302_1_fu_1222_p2 = ((trunc_ln302_fu_1156_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln302_2_fu_1228_p2 = ((tmp_1_fu_1206_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln302_3_fu_1234_p2 = ((trunc_ln302_1_fu_1179_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln302_fu_1216_p2 = ((tmp_s_fu_1196_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln935_1_fu_867_p2 = ((start_value_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_749_p2 = ((z_bits_reg_1355 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln946_1_fu_349_p2 = (($signed(tmp_fu_339_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln946_2_fu_934_p2 = (($signed(tmp_116_fu_924_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln946_fu_635_p2 = (($signed(tmp_110_fu_625_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln949_1_fu_392_p2 = ((and_ln949_2_fu_387_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_2_fu_977_p2 = ((and_ln949_4_fu_972_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_fu_678_p2 = ((and_ln949_fu_673_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln958_1_fu_419_p2 = (($signed(lsb_index_2_fu_333_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_2_fu_1004_p2 = (($signed(lsb_index_3_fu_918_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_705_p2 = (($signed(lsb_index_fu_619_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign idxprom_i_fu_215_p1 = i_dout;


always @ (p_Result_54_fu_310_p4) begin
    if (p_Result_54_fu_310_p4[0] == 1'b1) begin
        l_2_fu_319_p3 = 32'd0;
    end else if (p_Result_54_fu_310_p4[1] == 1'b1) begin
        l_2_fu_319_p3 = 32'd1;
    end else if (p_Result_54_fu_310_p4[2] == 1'b1) begin
        l_2_fu_319_p3 = 32'd2;
    end else if (p_Result_54_fu_310_p4[3] == 1'b1) begin
        l_2_fu_319_p3 = 32'd3;
    end else if (p_Result_54_fu_310_p4[4] == 1'b1) begin
        l_2_fu_319_p3 = 32'd4;
    end else if (p_Result_54_fu_310_p4[5] == 1'b1) begin
        l_2_fu_319_p3 = 32'd5;
    end else if (p_Result_54_fu_310_p4[6] == 1'b1) begin
        l_2_fu_319_p3 = 32'd6;
    end else if (p_Result_54_fu_310_p4[7] == 1'b1) begin
        l_2_fu_319_p3 = 32'd7;
    end else if (p_Result_54_fu_310_p4[8] == 1'b1) begin
        l_2_fu_319_p3 = 32'd8;
    end else if (p_Result_54_fu_310_p4[9] == 1'b1) begin
        l_2_fu_319_p3 = 32'd9;
    end else if (p_Result_54_fu_310_p4[10] == 1'b1) begin
        l_2_fu_319_p3 = 32'd10;
    end else if (p_Result_54_fu_310_p4[11] == 1'b1) begin
        l_2_fu_319_p3 = 32'd11;
    end else if (p_Result_54_fu_310_p4[12] == 1'b1) begin
        l_2_fu_319_p3 = 32'd12;
    end else if (p_Result_54_fu_310_p4[13] == 1'b1) begin
        l_2_fu_319_p3 = 32'd13;
    end else if (p_Result_54_fu_310_p4[14] == 1'b1) begin
        l_2_fu_319_p3 = 32'd14;
    end else if (p_Result_54_fu_310_p4[15] == 1'b1) begin
        l_2_fu_319_p3 = 32'd15;
    end else if (p_Result_54_fu_310_p4[16] == 1'b1) begin
        l_2_fu_319_p3 = 32'd16;
    end else if (p_Result_54_fu_310_p4[17] == 1'b1) begin
        l_2_fu_319_p3 = 32'd17;
    end else if (p_Result_54_fu_310_p4[18] == 1'b1) begin
        l_2_fu_319_p3 = 32'd18;
    end else if (p_Result_54_fu_310_p4[19] == 1'b1) begin
        l_2_fu_319_p3 = 32'd19;
    end else if (p_Result_54_fu_310_p4[20] == 1'b1) begin
        l_2_fu_319_p3 = 32'd20;
    end else if (p_Result_54_fu_310_p4[21] == 1'b1) begin
        l_2_fu_319_p3 = 32'd21;
    end else if (p_Result_54_fu_310_p4[22] == 1'b1) begin
        l_2_fu_319_p3 = 32'd22;
    end else if (p_Result_54_fu_310_p4[23] == 1'b1) begin
        l_2_fu_319_p3 = 32'd23;
    end else if (p_Result_54_fu_310_p4[24] == 1'b1) begin
        l_2_fu_319_p3 = 32'd24;
    end else if (p_Result_54_fu_310_p4[25] == 1'b1) begin
        l_2_fu_319_p3 = 32'd25;
    end else if (p_Result_54_fu_310_p4[26] == 1'b1) begin
        l_2_fu_319_p3 = 32'd26;
    end else if (p_Result_54_fu_310_p4[27] == 1'b1) begin
        l_2_fu_319_p3 = 32'd27;
    end else if (p_Result_54_fu_310_p4[28] == 1'b1) begin
        l_2_fu_319_p3 = 32'd28;
    end else if (p_Result_54_fu_310_p4[29] == 1'b1) begin
        l_2_fu_319_p3 = 32'd29;
    end else if (p_Result_54_fu_310_p4[30] == 1'b1) begin
        l_2_fu_319_p3 = 32'd30;
    end else if (p_Result_54_fu_310_p4[31] == 1'b1) begin
        l_2_fu_319_p3 = 32'd31;
    end else begin
        l_2_fu_319_p3 = 32'd32;
    end
end


always @ (p_Result_59_reg_1430) begin
    if (p_Result_59_reg_1430[0] == 1'b1) begin
        l_3_fu_905_p3 = 32'd0;
    end else if (p_Result_59_reg_1430[1] == 1'b1) begin
        l_3_fu_905_p3 = 32'd1;
    end else if (p_Result_59_reg_1430[2] == 1'b1) begin
        l_3_fu_905_p3 = 32'd2;
    end else if (p_Result_59_reg_1430[3] == 1'b1) begin
        l_3_fu_905_p3 = 32'd3;
    end else if (p_Result_59_reg_1430[4] == 1'b1) begin
        l_3_fu_905_p3 = 32'd4;
    end else if (p_Result_59_reg_1430[5] == 1'b1) begin
        l_3_fu_905_p3 = 32'd5;
    end else if (p_Result_59_reg_1430[6] == 1'b1) begin
        l_3_fu_905_p3 = 32'd6;
    end else if (p_Result_59_reg_1430[7] == 1'b1) begin
        l_3_fu_905_p3 = 32'd7;
    end else if (p_Result_59_reg_1430[8] == 1'b1) begin
        l_3_fu_905_p3 = 32'd8;
    end else if (p_Result_59_reg_1430[9] == 1'b1) begin
        l_3_fu_905_p3 = 32'd9;
    end else if (p_Result_59_reg_1430[10] == 1'b1) begin
        l_3_fu_905_p3 = 32'd10;
    end else if (p_Result_59_reg_1430[11] == 1'b1) begin
        l_3_fu_905_p3 = 32'd11;
    end else if (p_Result_59_reg_1430[12] == 1'b1) begin
        l_3_fu_905_p3 = 32'd12;
    end else if (p_Result_59_reg_1430[13] == 1'b1) begin
        l_3_fu_905_p3 = 32'd13;
    end else if (p_Result_59_reg_1430[14] == 1'b1) begin
        l_3_fu_905_p3 = 32'd14;
    end else if (p_Result_59_reg_1430[15] == 1'b1) begin
        l_3_fu_905_p3 = 32'd15;
    end else if (p_Result_59_reg_1430[16] == 1'b1) begin
        l_3_fu_905_p3 = 32'd16;
    end else if (p_Result_59_reg_1430[17] == 1'b1) begin
        l_3_fu_905_p3 = 32'd17;
    end else if (p_Result_59_reg_1430[18] == 1'b1) begin
        l_3_fu_905_p3 = 32'd18;
    end else if (p_Result_59_reg_1430[19] == 1'b1) begin
        l_3_fu_905_p3 = 32'd19;
    end else if (p_Result_59_reg_1430[20] == 1'b1) begin
        l_3_fu_905_p3 = 32'd20;
    end else if (p_Result_59_reg_1430[21] == 1'b1) begin
        l_3_fu_905_p3 = 32'd21;
    end else if (p_Result_59_reg_1430[22] == 1'b1) begin
        l_3_fu_905_p3 = 32'd22;
    end else if (p_Result_59_reg_1430[23] == 1'b1) begin
        l_3_fu_905_p3 = 32'd23;
    end else if (p_Result_59_reg_1430[24] == 1'b1) begin
        l_3_fu_905_p3 = 32'd24;
    end else if (p_Result_59_reg_1430[25] == 1'b1) begin
        l_3_fu_905_p3 = 32'd25;
    end else if (p_Result_59_reg_1430[26] == 1'b1) begin
        l_3_fu_905_p3 = 32'd26;
    end else if (p_Result_59_reg_1430[27] == 1'b1) begin
        l_3_fu_905_p3 = 32'd27;
    end else if (p_Result_59_reg_1430[28] == 1'b1) begin
        l_3_fu_905_p3 = 32'd28;
    end else if (p_Result_59_reg_1430[29] == 1'b1) begin
        l_3_fu_905_p3 = 32'd29;
    end else if (p_Result_59_reg_1430[30] == 1'b1) begin
        l_3_fu_905_p3 = 32'd30;
    end else if (p_Result_59_reg_1430[31] == 1'b1) begin
        l_3_fu_905_p3 = 32'd31;
    end else begin
        l_3_fu_905_p3 = 32'd32;
    end
end


always @ (p_Result_50_reg_1373) begin
    if (p_Result_50_reg_1373[0] == 1'b1) begin
        l_fu_606_p3 = 32'd0;
    end else if (p_Result_50_reg_1373[1] == 1'b1) begin
        l_fu_606_p3 = 32'd1;
    end else if (p_Result_50_reg_1373[2] == 1'b1) begin
        l_fu_606_p3 = 32'd2;
    end else if (p_Result_50_reg_1373[3] == 1'b1) begin
        l_fu_606_p3 = 32'd3;
    end else if (p_Result_50_reg_1373[4] == 1'b1) begin
        l_fu_606_p3 = 32'd4;
    end else if (p_Result_50_reg_1373[5] == 1'b1) begin
        l_fu_606_p3 = 32'd5;
    end else if (p_Result_50_reg_1373[6] == 1'b1) begin
        l_fu_606_p3 = 32'd6;
    end else if (p_Result_50_reg_1373[7] == 1'b1) begin
        l_fu_606_p3 = 32'd7;
    end else if (p_Result_50_reg_1373[8] == 1'b1) begin
        l_fu_606_p3 = 32'd8;
    end else if (p_Result_50_reg_1373[9] == 1'b1) begin
        l_fu_606_p3 = 32'd9;
    end else if (p_Result_50_reg_1373[10] == 1'b1) begin
        l_fu_606_p3 = 32'd10;
    end else if (p_Result_50_reg_1373[11] == 1'b1) begin
        l_fu_606_p3 = 32'd11;
    end else if (p_Result_50_reg_1373[12] == 1'b1) begin
        l_fu_606_p3 = 32'd12;
    end else if (p_Result_50_reg_1373[13] == 1'b1) begin
        l_fu_606_p3 = 32'd13;
    end else if (p_Result_50_reg_1373[14] == 1'b1) begin
        l_fu_606_p3 = 32'd14;
    end else if (p_Result_50_reg_1373[15] == 1'b1) begin
        l_fu_606_p3 = 32'd15;
    end else if (p_Result_50_reg_1373[16] == 1'b1) begin
        l_fu_606_p3 = 32'd16;
    end else if (p_Result_50_reg_1373[17] == 1'b1) begin
        l_fu_606_p3 = 32'd17;
    end else if (p_Result_50_reg_1373[18] == 1'b1) begin
        l_fu_606_p3 = 32'd18;
    end else if (p_Result_50_reg_1373[19] == 1'b1) begin
        l_fu_606_p3 = 32'd19;
    end else if (p_Result_50_reg_1373[20] == 1'b1) begin
        l_fu_606_p3 = 32'd20;
    end else if (p_Result_50_reg_1373[21] == 1'b1) begin
        l_fu_606_p3 = 32'd21;
    end else if (p_Result_50_reg_1373[22] == 1'b1) begin
        l_fu_606_p3 = 32'd22;
    end else if (p_Result_50_reg_1373[23] == 1'b1) begin
        l_fu_606_p3 = 32'd23;
    end else if (p_Result_50_reg_1373[24] == 1'b1) begin
        l_fu_606_p3 = 32'd24;
    end else if (p_Result_50_reg_1373[25] == 1'b1) begin
        l_fu_606_p3 = 32'd25;
    end else if (p_Result_50_reg_1373[26] == 1'b1) begin
        l_fu_606_p3 = 32'd26;
    end else if (p_Result_50_reg_1373[27] == 1'b1) begin
        l_fu_606_p3 = 32'd27;
    end else if (p_Result_50_reg_1373[28] == 1'b1) begin
        l_fu_606_p3 = 32'd28;
    end else if (p_Result_50_reg_1373[29] == 1'b1) begin
        l_fu_606_p3 = 32'd29;
    end else if (p_Result_50_reg_1373[30] == 1'b1) begin
        l_fu_606_p3 = 32'd30;
    end else if (p_Result_50_reg_1373[31] == 1'b1) begin
        l_fu_606_p3 = 32'd31;
    end else begin
        l_fu_606_p3 = 32'd32;
    end
end

assign lsb_index_2_fu_333_p2 = ($signed(sub_ln944_1_fu_327_p2) + $signed(32'd4294967272));

assign lsb_index_3_fu_918_p2 = ($signed(sub_ln944_2_fu_912_p2) + $signed(32'd4294967272));

assign lsb_index_fu_619_p2 = ($signed(sub_ln944_fu_613_p2) + $signed(32'd4294967272));

assign lshr_ln947_1_fu_369_p2 = 32'd4294967295 >> zext_ln947_1_fu_365_p1;

assign lshr_ln947_2_fu_954_p2 = 32'd4294967295 >> zext_ln947_2_fu_950_p1;

assign lshr_ln947_fu_655_p2 = 32'd4294967295 >> zext_ln947_fu_651_p1;

assign lshr_ln958_1_fu_510_p2 = m_22_i_reg_1306 >> zext_ln958_1_fu_507_p1;

assign lshr_ln958_2_fu_1063_p2 = zext_ln959_3_fu_1048_p1 >> zext_ln958_2_fu_1060_p1;

assign lshr_ln958_fu_769_p2 = zext_ln959_fu_754_p1 >> zext_ln958_fu_766_p1;

assign lshr_ln_fu_283_p4 = {{add_ln301_fu_278_p2[15:13]}};

assign m_21_fu_785_p2 = (m_fu_775_p3 + zext_ln961_fu_782_p1);

assign m_22_i_fu_244_p1 = tmp_V_10_fu_238_p3;

assign m_25_fu_515_p3 = ((icmp_ln958_1_reg_1330[0:0] == 1'b1) ? lshr_ln958_1_fu_510_p2 : shl_ln959_1_fu_502_p2);

assign m_26_fu_525_p2 = (m_25_fu_515_p3 + zext_ln961_1_fu_522_p1);

assign m_29_fu_1069_p3 = ((icmp_ln958_2_reg_1435[0:0] == 1'b1) ? lshr_ln958_2_fu_1063_p2 : shl_ln959_2_fu_1054_p2);

assign m_30_fu_1079_p2 = (m_29_fu_1069_p3 + zext_ln961_2_fu_1076_p1);

assign m_32_fu_481_p3 = ((p_Result_49_fu_467_p3[0:0] == 1'b1) ? tmp_V_fu_475_p2 : z_bits_fu_463_p1);

assign m_33_fu_791_p4 = {{m_21_fu_785_p2[63:1]}};

assign m_34_fu_531_p4 = {{m_26_fu_525_p2[63:1]}};

assign m_35_fu_887_p3 = ((p_Result_58_fu_873_p3[0:0] == 1'b1) ? tmp_V_7_fu_881_p2 : start_value_i);

assign m_36_fu_1085_p4 = {{m_30_fu_1079_p2[63:1]}};

assign m_fu_775_p3 = ((icmp_ln958_reg_1383[0:0] == 1'b1) ? lshr_ln958_fu_769_p2 : shl_ln959_fu_760_p2);

assign num_points_address1 = idxprom_i_fu_215_p1;

assign or_ln302_1_fu_1244_p2 = (icmp_ln302_3_reg_1495 | icmp_ln302_2_reg_1490);

assign or_ln302_fu_1240_p2 = (icmp_ln302_reg_1480 | icmp_ln302_1_reg_1485);

assign or_ln949_3_fu_667_p2 = (shl_ln949_fu_661_p2 | lshr_ln947_fu_655_p2);

assign or_ln949_4_fu_966_p2 = (shl_ln949_2_fu_960_p2 | lshr_ln947_2_fu_954_p2);

assign or_ln949_fu_381_p2 = (shl_ln949_1_fu_375_p2 | lshr_ln947_1_fu_369_p2);

assign p_Result_40_fu_545_p3 = m_26_fu_525_p2[32'd25];

assign p_Result_46_fu_1099_p3 = m_30_fu_1079_p2[32'd25];

assign p_Result_49_fu_467_p3 = points_q1[32'd31];

integer ap_tvar_int_0;

always @ (m_32_fu_481_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_50_fu_489_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_50_fu_489_p4[ap_tvar_int_0] = m_32_fu_481_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_51_fu_698_p3 = m_32_reg_1366[lsb_index_fu_619_p2];

assign p_Result_52_fu_839_p5 = {{zext_ln962_fu_801_p1[63:32]}, {tmp_i_fu_832_p3}, {zext_ln962_fu_801_p1[22:0]}};

integer ap_tvar_int_1;

always @ (tmp_V_10_reg_1299) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_54_fu_310_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_54_fu_310_p4[ap_tvar_int_1] = tmp_V_10_reg_1299[31 - ap_tvar_int_1];
        end
    end
end

assign p_Result_55_fu_412_p3 = tmp_V_10_reg_1299[lsb_index_2_fu_333_p2];

assign p_Result_56_fu_579_p5 = {{zext_ln962_1_fu_541_p1[63:32]}, {tmp_11_i_fu_572_p3}, {zext_ln962_1_fu_541_p1[22:0]}};

assign p_Result_57_fu_1160_p3 = {{1'd0}, {trunc_ln368_fu_1152_p1}};

assign p_Result_58_fu_873_p3 = start_value_i[32'd31];

integer ap_tvar_int_2;

always @ (m_35_fu_887_p3) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            p_Result_59_fu_895_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            p_Result_59_fu_895_p4[ap_tvar_int_2] = m_35_fu_887_p3[31 - ap_tvar_int_2];
        end
    end
end

assign p_Result_60_fu_997_p3 = m_35_reg_1423[lsb_index_3_fu_918_p2];

assign p_Result_61_fu_1133_p5 = {{zext_ln962_2_fu_1095_p1[63:32]}, {tmp_13_i_fu_1126_p3}, {zext_ln962_2_fu_1095_p1[22:0]}};

assign p_Result_62_fu_1183_p3 = {{1'd0}, {data_V_1_fu_1173_p3}};

assign p_Result_s_fu_805_p3 = m_21_fu_785_p2[32'd25];

assign points_address1 = zext_ln301_fu_305_p1;

assign retval_0_i81_i_fu_599_p3 = ((tobool_i19_i_reg_1294[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_1_fu_595_p1);

assign select_ln935_fu_859_p3 = ((icmp_ln935_fu_749_p2[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_fu_855_p1);

assign select_ln943_1_fu_553_p3 = ((p_Result_40_fu_545_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln943_2_fu_1107_p3 = ((p_Result_46_fu_1099_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln943_fu_813_p3 = ((p_Result_s_fu_805_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln946_1_fu_437_p3 = ((icmp_ln946_1_fu_349_p2[0:0] == 1'b1) ? icmp_ln949_1_fu_392_p2 : p_Result_55_fu_412_p3);

assign select_ln946_2_fu_1022_p3 = ((icmp_ln946_2_fu_934_p2[0:0] == 1'b1) ? icmp_ln949_2_fu_977_p2 : p_Result_60_fu_997_p3);

assign select_ln946_fu_723_p3 = ((icmp_ln946_fu_635_p2[0:0] == 1'b1) ? icmp_ln949_fu_678_p2 : p_Result_51_fu_698_p3);

assign select_ln958_2_fu_451_p3 = ((icmp_ln958_1_fu_419_p2[0:0] == 1'b1) ? select_ln946_1_fu_437_p3 : and_ln949_3_fu_425_p2);

assign select_ln958_4_fu_1036_p3 = ((icmp_ln958_2_fu_1004_p2[0:0] == 1'b1) ? select_ln946_2_fu_1022_p3 : and_ln949_5_fu_1010_p2);

assign select_ln958_fu_737_p3 = ((icmp_ln958_fu_705_p2[0:0] == 1'b1) ? select_ln946_fu_723_p3 : and_ln949_1_fu_711_p2);

assign shl_ln301_1_fu_270_p3 = {{trunc_ln301_fu_266_p1}, {4'd0}};

assign shl_ln949_1_fu_375_p2 = 32'd1 << lsb_index_2_fu_333_p2;

assign shl_ln949_2_fu_960_p2 = 32'd1 << lsb_index_3_fu_918_p2;

assign shl_ln949_fu_661_p2 = 32'd1 << lsb_index_fu_619_p2;

assign shl_ln959_1_fu_502_p2 = m_22_i_reg_1306 << zext_ln959_2_fu_499_p1;

assign shl_ln959_2_fu_1054_p2 = zext_ln959_3_fu_1048_p1 << zext_ln959_4_fu_1051_p1;

assign shl_ln959_fu_760_p2 = zext_ln959_fu_754_p1 << zext_ln959_1_fu_757_p1;

assign shl_ln_fu_248_p3 = {{i_1_reg_1273}, {13'd0}};

assign sub_i23_i_fu_233_p2 = (32'd0 - p_Val2_20_reg_1265);

assign sub_ln703_fu_1260_p2 = (z_bits_reg_1355 - p_Val2_20_reg_1265);

assign sub_ln944_1_fu_327_p2 = (32'd32 - l_2_fu_319_p3);

assign sub_ln944_2_fu_912_p2 = (32'd32 - l_3_fu_905_p3);

assign sub_ln944_fu_613_p2 = (32'd32 - l_fu_606_p3);

assign sub_ln947_1_fu_359_p2 = ($signed(6'd57) - $signed(trunc_ln947_1_fu_355_p1));

assign sub_ln947_2_fu_944_p2 = ($signed(6'd57) - $signed(trunc_ln947_2_fu_940_p1));

assign sub_ln947_fu_645_p2 = ($signed(6'd57) - $signed(trunc_ln947_fu_641_p1));

assign sub_ln959_1_fu_431_p2 = (32'd25 - sub_ln944_1_fu_327_p2);

assign sub_ln959_2_fu_1016_p2 = (32'd25 - sub_ln944_2_fu_912_p2);

assign sub_ln959_fu_717_p2 = (32'd25 - sub_ln944_fu_613_p2);

assign sub_ln964_1_fu_561_p2 = (8'd12 - trunc_ln943_1_reg_1350);

assign sub_ln964_2_fu_1115_p2 = (8'd12 - trunc_ln943_2_reg_1455);

assign sub_ln964_fu_821_p2 = (8'd12 - trunc_ln943_reg_1403);

assign tmp_110_fu_625_p4 = {{lsb_index_fu_619_p2[31:1]}};

assign tmp_111_fu_684_p3 = lsb_index_fu_619_p2[32'd31];

assign tmp_113_fu_398_p3 = lsb_index_2_fu_333_p2[32'd31];

assign tmp_116_fu_924_p4 = {{lsb_index_3_fu_918_p2[31:1]}};

assign tmp_117_fu_983_p3 = lsb_index_3_fu_918_p2[32'd31];

assign tmp_11_i_fu_572_p3 = {{p_Result_53_reg_1283}, {add_ln964_1_fu_566_p2}};

assign tmp_13_i_fu_1126_p3 = {{p_Result_58_reg_1418}, {add_ln964_2_fu_1120_p2}};

assign tmp_1_fu_1206_p4 = {{data_V_1_fu_1173_p3[30:23]}};

assign tmp_67_fu_297_p3 = {{lshr_ln_fu_283_p4}, {trunc_ln301_1_fu_293_p1}};

assign tmp_V_10_fu_238_p3 = ((p_Result_53_reg_1283[0:0] == 1'b1) ? sub_i23_i_fu_233_p2 : p_Val2_20_reg_1265);

assign tmp_V_7_fu_881_p2 = (32'd0 - start_value_i);

assign tmp_V_fu_475_p2 = (32'd0 - z_bits_fu_463_p1);

assign tmp_fu_339_p4 = {{lsb_index_2_fu_333_p2[31:1]}};

assign tmp_i_fu_832_p3 = {{p_Result_49_reg_1361}, {add_ln964_fu_826_p2}};

assign tmp_s_fu_1196_p4 = {{data_V_fu_1149_p1[30:23]}};

assign tobool_i19_i_fu_228_p2 = ((p_Val2_20_reg_1265 == 32'd0) ? 1'b1 : 1'b0);

assign trunc_ln301_1_fu_293_p1 = j_reg_194[8:0];

assign trunc_ln301_fu_266_p1 = j_reg_194[11:0];

assign trunc_ln302_1_fu_1179_p1 = data_V_1_fu_1173_p3[22:0];

assign trunc_ln302_fu_1156_p1 = data_V_fu_1149_p1[22:0];

assign trunc_ln368_fu_1152_p1 = data_V_fu_1149_p1[30:0];

assign trunc_ln943_1_fu_459_p1 = l_2_fu_319_p3[7:0];

assign trunc_ln943_2_fu_1044_p1 = l_3_fu_905_p3[7:0];

assign trunc_ln943_fu_745_p1 = l_fu_606_p3[7:0];

assign trunc_ln947_1_fu_355_p1 = sub_ln944_1_fu_327_p2[5:0];

assign trunc_ln947_2_fu_940_p1 = sub_ln944_2_fu_912_p2[5:0];

assign trunc_ln947_fu_641_p1 = sub_ln944_fu_613_p2[5:0];

assign xor_ln949_1_fu_406_p2 = (tmp_113_fu_398_p3 ^ 1'd1);

assign xor_ln949_2_fu_991_p2 = (tmp_117_fu_983_p3 ^ 1'd1);

assign xor_ln949_fu_692_p2 = (tmp_111_fu_684_p3 ^ 1'd1);

assign z_bits_fu_463_p1 = points_q1[31:0];

assign zext_ln301_fu_305_p1 = tmp_67_fu_297_p3;

assign zext_ln947_1_fu_365_p1 = sub_ln947_1_fu_359_p2;

assign zext_ln947_2_fu_950_p1 = sub_ln947_2_fu_944_p2;

assign zext_ln947_fu_651_p1 = sub_ln947_fu_645_p2;

assign zext_ln958_1_fu_507_p1 = add_ln958_1_reg_1340;

assign zext_ln958_2_fu_1060_p1 = add_ln958_2_reg_1445;

assign zext_ln958_fu_766_p1 = add_ln958_reg_1393;

assign zext_ln959_1_fu_757_p1 = sub_ln959_reg_1388;

assign zext_ln959_2_fu_499_p1 = sub_ln959_1_reg_1335;

assign zext_ln959_3_fu_1048_p1 = m_35_reg_1423;

assign zext_ln959_4_fu_1051_p1 = sub_ln959_2_reg_1440;

assign zext_ln959_fu_754_p1 = m_32_reg_1366;

assign zext_ln961_1_fu_522_p1 = select_ln958_2_reg_1345;

assign zext_ln961_2_fu_1076_p1 = select_ln958_4_reg_1450;

assign zext_ln961_fu_782_p1 = select_ln958_reg_1398;

assign zext_ln962_1_fu_541_p1 = m_34_fu_531_p4;

assign zext_ln962_2_fu_1095_p1 = m_36_fu_1085_p4;

assign zext_ln962_fu_801_p1 = m_33_fu_791_p4;

always @ (posedge ap_clk) begin
    m_22_i_reg_1306[63:32] <= 32'b00000000000000000000000000000000;
    shl_ln_reg_1312[12:0] <= 13'b0000000000000;
end

endmodule //system_top_p_find_starting_index_and_value
