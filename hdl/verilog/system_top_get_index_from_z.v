// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_get_index_from_z (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        points_address0,
        points_ce0,
        points_q0,
        num_points_address0,
        num_points_ce0,
        num_points_q0,
        layer,
        z_value,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] points_address0;
output   points_ce0;
input  [127:0] points_q0;
output  [2:0] num_points_address0;
output   num_points_ce0;
input  [31:0] num_points_q0;
input  [2:0] layer;
input  [31:0] z_value;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg points_ce0;
reg num_points_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [31:0] num_points_load_reg_281;
wire   [15:0] shl_ln_fu_131_p3;
reg   [15:0] shl_ln_reg_286;
wire   [31:0] add_ln585_fu_138_p2;
reg   [31:0] add_ln585_reg_291;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln585_fu_144_p2;
wire   [31:0] select_ln588_fu_215_p3;
reg   [31:0] select_ln588_reg_304;
wire    ap_CS_fsm_state4;
wire   [31:0] minVal_V_1_fu_250_p3;
wire    ap_CS_fsm_state5;
wire   [31:0] index_1_fu_257_p3;
reg   [31:0] i_reg_90;
reg   [31:0] index_reg_102;
reg   [31:0] minVal_V_reg_114;
wire   [63:0] idxprom_fu_126_p1;
wire   [63:0] zext_ln588_fu_188_p1;
wire   [11:0] trunc_ln588_fu_149_p1;
wire   [15:0] shl_ln588_1_fu_153_p3;
wire   [15:0] add_ln588_fu_161_p2;
wire   [2:0] lshr_ln_fu_166_p4;
wire   [8:0] trunc_ln588_1_fu_176_p1;
wire   [11:0] tmp_7_fu_180_p3;
wire   [31:0] z_V_fu_193_p1;
wire   [31:0] sub_ln703_fu_197_p2;
wire   [0:0] tmp_fu_202_p3;
wire   [31:0] sub_ln703_1_fu_210_p2;
wire   [0:0] tmp_3_fu_223_p3;
wire   [31:0] sub_ln703_2_fu_231_p2;
wire   [31:0] select_ln589_fu_237_p3;
wire   [0:0] icmp_ln1495_fu_245_p2;
reg   [31:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((icmp_ln585_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_preg <= index_reg_102;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_90 <= add_ln585_reg_291;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        index_reg_102 <= index_1_fu_257_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        index_reg_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        minVal_V_reg_114 <= minVal_V_1_fu_250_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        minVal_V_reg_114 <= 32'd2146435072;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln585_reg_291 <= add_ln585_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        num_points_load_reg_281 <= num_points_q0;
        shl_ln_reg_286[15 : 13] <= shl_ln_fu_131_p3[15 : 13];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln588_reg_304 <= select_ln588_fu_215_p3;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln585_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln585_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln585_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return = index_reg_102;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_points_ce0 = 1'b1;
    end else begin
        num_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln585_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln585_fu_138_p2 = (i_reg_90 + 32'd1);

assign add_ln588_fu_161_p2 = (shl_ln588_1_fu_153_p3 + shl_ln_reg_286);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln1495_fu_245_p2 = (($signed(select_ln588_reg_304) < $signed(select_ln589_fu_237_p3)) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_144_p2 = ((i_reg_90 == num_points_load_reg_281) ? 1'b1 : 1'b0);

assign idxprom_fu_126_p1 = layer;

assign index_1_fu_257_p3 = ((icmp_ln1495_fu_245_p2[0:0] == 1'b1) ? i_reg_90 : index_reg_102);

assign lshr_ln_fu_166_p4 = {{add_ln588_fu_161_p2[15:13]}};

assign minVal_V_1_fu_250_p3 = ((icmp_ln1495_fu_245_p2[0:0] == 1'b1) ? select_ln588_reg_304 : minVal_V_reg_114);

assign num_points_address0 = idxprom_fu_126_p1;

assign points_address0 = zext_ln588_fu_188_p1;

assign select_ln588_fu_215_p3 = ((tmp_fu_202_p3[0:0] == 1'b1) ? sub_ln703_1_fu_210_p2 : sub_ln703_fu_197_p2);

assign select_ln589_fu_237_p3 = ((tmp_3_fu_223_p3[0:0] == 1'b1) ? sub_ln703_2_fu_231_p2 : minVal_V_reg_114);

assign shl_ln588_1_fu_153_p3 = {{trunc_ln588_fu_149_p1}, {4'd0}};

assign shl_ln_fu_131_p3 = {{layer}, {13'd0}};

assign sub_ln703_1_fu_210_p2 = (z_value - z_V_fu_193_p1);

assign sub_ln703_2_fu_231_p2 = (32'd0 - minVal_V_reg_114);

assign sub_ln703_fu_197_p2 = (z_V_fu_193_p1 - z_value);

assign tmp_3_fu_223_p3 = minVal_V_reg_114[32'd31];

assign tmp_7_fu_180_p3 = {{lshr_ln_fu_166_p4}, {trunc_ln588_1_fu_176_p1}};

assign tmp_fu_202_p3 = sub_ln703_fu_197_p2[32'd31];

assign trunc_ln588_1_fu_176_p1 = i_reg_90[8:0];

assign trunc_ln588_fu_149_p1 = i_reg_90[11:0];

assign z_V_fu_193_p1 = points_q0[31:0];

assign zext_ln588_fu_188_p1 = tmp_7_fu_180_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_286[12:0] <= 13'b0000000000000;
end

endmodule //system_top_get_index_from_z
