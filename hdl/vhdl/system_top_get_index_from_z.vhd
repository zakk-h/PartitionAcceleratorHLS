-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_get_index_from_z is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    points_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce0 : OUT STD_LOGIC;
    points_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce0 : OUT STD_LOGIC;
    num_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    z_value : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of system_top_get_index_from_z is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7FF00000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111100000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal num_points_load_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_131_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln585_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln585_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln585_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln588_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal minVal_V_1_fu_250_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal index_1_fu_257_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal minVal_V_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxprom_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln588_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln588_fu_149_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln588_1_fu_153_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln588_fu_161_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_166_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln588_1_fu_176_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_180_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal z_V_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_1_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_2_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln589_fu_237_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln585_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_preg <= index_reg_102;
                end if; 
            end if;
        end if;
    end process;


    i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_90 <= add_ln585_reg_291;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                index_reg_102 <= index_1_fu_257_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                index_reg_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minVal_V_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                minVal_V_reg_114 <= minVal_V_1_fu_250_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minVal_V_reg_114 <= ap_const_lv32_7FF00000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln585_reg_291 <= add_ln585_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                num_points_load_reg_281 <= num_points_q0;
                    shl_ln_reg_286(15 downto 13) <= shl_ln_fu_131_p3(15 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln588_reg_304 <= select_ln588_fu_215_p3;
            end if;
        end if;
    end process;
    shl_ln_reg_286(12 downto 0) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln585_fu_144_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln585_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln585_fu_138_p2 <= std_logic_vector(unsigned(i_reg_90) + unsigned(ap_const_lv32_1));
    add_ln588_fu_161_p2 <= std_logic_vector(unsigned(shl_ln588_1_fu_153_p3) + unsigned(shl_ln_reg_286));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln585_fu_144_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln585_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln585_fu_144_p2)
    begin
        if (((icmp_ln585_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state3, icmp_ln585_fu_144_p2, index_reg_102, ap_return_preg)
    begin
        if (((icmp_ln585_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return <= index_reg_102;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln1495_fu_245_p2 <= "1" when (signed(select_ln588_reg_304) < signed(select_ln589_fu_237_p3)) else "0";
    icmp_ln585_fu_144_p2 <= "1" when (i_reg_90 = num_points_load_reg_281) else "0";
    idxprom_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),64));
    index_1_fu_257_p3 <= 
        i_reg_90 when (icmp_ln1495_fu_245_p2(0) = '1') else 
        index_reg_102;
    lshr_ln_fu_166_p4 <= add_ln588_fu_161_p2(15 downto 13);
    minVal_V_1_fu_250_p3 <= 
        select_ln588_reg_304 when (icmp_ln1495_fu_245_p2(0) = '1') else 
        minVal_V_reg_114;
    num_points_address0 <= idxprom_fu_126_p1(3 - 1 downto 0);

    num_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            num_points_ce0 <= ap_const_logic_1;
        else 
            num_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    points_address0 <= zext_ln588_fu_188_p1(12 - 1 downto 0);

    points_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            points_ce0 <= ap_const_logic_1;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln588_fu_215_p3 <= 
        sub_ln703_1_fu_210_p2 when (tmp_fu_202_p3(0) = '1') else 
        sub_ln703_fu_197_p2;
    select_ln589_fu_237_p3 <= 
        sub_ln703_2_fu_231_p2 when (tmp_3_fu_223_p3(0) = '1') else 
        minVal_V_reg_114;
    shl_ln588_1_fu_153_p3 <= (trunc_ln588_fu_149_p1 & ap_const_lv4_0);
    shl_ln_fu_131_p3 <= (layer & ap_const_lv13_0);
    sub_ln703_1_fu_210_p2 <= std_logic_vector(unsigned(z_value) - unsigned(z_V_fu_193_p1));
    sub_ln703_2_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(minVal_V_reg_114));
    sub_ln703_fu_197_p2 <= std_logic_vector(unsigned(z_V_fu_193_p1) - unsigned(z_value));
    tmp_3_fu_223_p3 <= minVal_V_reg_114(31 downto 31);
    tmp_7_fu_180_p3 <= (lshr_ln_fu_166_p4 & trunc_ln588_1_fu_176_p1);
    tmp_fu_202_p3 <= sub_ln703_fu_197_p2(31 downto 31);
    trunc_ln588_1_fu_176_p1 <= i_reg_90(9 - 1 downto 0);
    trunc_ln588_fu_149_p1 <= i_reg_90(12 - 1 downto 0);
    z_V_fu_193_p1 <= points_q0(32 - 1 downto 0);
    zext_ln588_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_180_p3),64));
end behav;
