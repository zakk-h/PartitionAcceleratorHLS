// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_straightLineProjectorFromLayerIJtoK (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        z_i,
        z_j,
        i,
        j,
        k,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] z_i;
input  [31:0] z_j;
input  [2:0] i;
input  [2:0] j;
input  [2:0] k;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] radiiDivisionList_address0;
reg    radiiDivisionList_ce0;
wire   [34:0] radiiDivisionList_q0;
wire   [3:0] sub_ln160_fu_93_p2;
reg   [3:0] sub_ln160_reg_258;
wire   [2:0] trunc_ln160_fu_99_p1;
reg   [2:0] trunc_ln160_reg_263;
wire   [3:0] sub_ln160_1_fu_103_p2;
reg   [3:0] sub_ln160_1_reg_269;
wire   [0:0] icmp_ln160_fu_109_p2;
reg   [0:0] icmp_ln160_reg_275;
wire   [0:0] icmp_ln160_1_fu_115_p2;
reg   [0:0] icmp_ln160_1_reg_281;
wire   [3:0] neg4_fu_121_p2;
reg   [3:0] neg4_reg_287;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] sub_ln162_fu_184_p2;
reg  signed [31:0] sub_ln162_reg_303;
reg   [34:0] radiiDivisionList_load_reg_308;
wire    ap_CS_fsm_state4;
reg   [31:0] trunc_ln1_reg_323;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln162_1_fu_179_p1;
wire   [3:0] k_cast_fu_89_p1;
wire   [3:0] i_cast_fu_85_p1;
wire   [3:0] j_cast_fu_81_p1;
wire   [2:0] neg_fu_127_p2;
wire   [2:0] abs_fu_132_p3;
wire   [3:0] tmp_1_fu_146_p3;
wire   [5:0] tmp_fu_138_p3;
wire   [5:0] zext_ln162_fu_154_p1;
wire   [3:0] abs6_fu_164_p3;
wire   [5:0] sub_ln162_2_fu_158_p2;
wire  signed [5:0] sext_ln162_1_fu_169_p1;
wire   [5:0] add_ln162_fu_173_p2;
wire   [34:0] grp_fu_196_p0;
wire   [63:0] grp_fu_196_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_2_fu_212_p3;
wire   [0:0] tmp_3_fu_224_p3;
wire   [0:0] and_ln160_fu_219_p2;
wire   [0:0] and_ln160_1_fu_231_p2;
wire   [0:0] or_ln160_fu_244_p2;
wire   [31:0] sub_ln162_1_fu_236_p2;
wire   [31:0] add_ln166_fu_240_p2;
reg   [6:0] ap_NS_fsm;
wire   [63:0] grp_fu_196_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList #(
    .DataWidth( 35 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
radiiDivisionList_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(radiiDivisionList_address0),
    .ce0(radiiDivisionList_ce0),
    .q0(radiiDivisionList_q0)
);

MPSQ_mul_35ns_32s_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 35 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_35ns_32s_64_3_1_U316(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .din1(sub_ln162_reg_303),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln160_1_reg_281 <= icmp_ln160_1_fu_115_p2;
        icmp_ln160_reg_275 <= icmp_ln160_fu_109_p2;
        neg4_reg_287 <= neg4_fu_121_p2;
        sub_ln160_1_reg_269 <= sub_ln160_1_fu_103_p2;
        sub_ln160_reg_258 <= sub_ln160_fu_93_p2;
        trunc_ln160_reg_263 <= trunc_ln160_fu_99_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        radiiDivisionList_load_reg_308 <= radiiDivisionList_q0;
        sub_ln162_reg_303 <= sub_ln162_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln1_reg_323 <= {{grp_fu_196_p2[63:32]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        radiiDivisionList_ce0 = 1'b1;
    end else begin
        radiiDivisionList_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs6_fu_164_p3 = ((icmp_ln160_reg_275[0:0] == 1'b1) ? sub_ln160_1_reg_269 : neg4_reg_287);

assign abs_fu_132_p3 = ((icmp_ln160_1_reg_281[0:0] == 1'b1) ? trunc_ln160_reg_263 : neg_fu_127_p2);

assign add_ln162_fu_173_p2 = ($signed(sub_ln162_2_fu_158_p2) + $signed(sext_ln162_1_fu_169_p1));

assign add_ln166_fu_240_p2 = (trunc_ln1_reg_323 + z_i);

assign and_ln160_1_fu_231_p2 = (tmp_3_fu_224_p3 & icmp_ln160_1_reg_281);

assign and_ln160_fu_219_p2 = (tmp_2_fu_212_p3 & icmp_ln160_reg_275);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = ((or_ln160_fu_244_p2[0:0] == 1'b1) ? sub_ln162_1_fu_236_p2 : add_ln166_fu_240_p2);

assign grp_fu_196_p0 = grp_fu_196_p00;

assign grp_fu_196_p00 = radiiDivisionList_load_reg_308;

assign i_cast_fu_85_p1 = i;

assign icmp_ln160_1_fu_115_p2 = (($signed(sub_ln160_fu_93_p2) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_109_p2 = (($signed(sub_ln160_1_fu_103_p2) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign j_cast_fu_81_p1 = j;

assign k_cast_fu_89_p1 = k;

assign neg4_fu_121_p2 = (4'd0 - sub_ln160_1_fu_103_p2);

assign neg_fu_127_p2 = (3'd0 - trunc_ln160_reg_263);

assign or_ln160_fu_244_p2 = (and_ln160_fu_219_p2 | and_ln160_1_fu_231_p2);

assign radiiDivisionList_address0 = zext_ln162_1_fu_179_p1;

assign sext_ln162_1_fu_169_p1 = $signed(abs6_fu_164_p3);

assign sub_ln160_1_fu_103_p2 = (j_cast_fu_81_p1 - i_cast_fu_85_p1);

assign sub_ln160_fu_93_p2 = (k_cast_fu_89_p1 - i_cast_fu_85_p1);

assign sub_ln162_1_fu_236_p2 = (z_i - trunc_ln1_reg_323);

assign sub_ln162_2_fu_158_p2 = (tmp_fu_138_p3 - zext_ln162_fu_154_p1);

assign sub_ln162_fu_184_p2 = (z_j - z_i);

assign tmp_1_fu_146_p3 = {{abs_fu_132_p3}, {1'd0}};

assign tmp_2_fu_212_p3 = sub_ln160_reg_258[32'd3];

assign tmp_3_fu_224_p3 = sub_ln160_1_reg_269[32'd3];

assign tmp_fu_138_p3 = {{abs_fu_132_p3}, {3'd0}};

assign trunc_ln160_fu_99_p1 = sub_ln160_fu_93_p2[2:0];

assign zext_ln162_1_fu_179_p1 = add_ln162_fu_173_p2;

assign zext_ln162_fu_154_p1 = tmp_1_fu_146_p3;

endmodule //MPSQ_straightLineProjectorFromLayerIJtoK
