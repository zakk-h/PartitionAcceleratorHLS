// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_get_index_from_z (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        layer,
        z_value,
        GDarrayDecoded_address0,
        GDarrayDecoded_ce0,
        GDarrayDecoded_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
input  [2:0] layer;
input  [31:0] z_value;
output  [11:0] GDarrayDecoded_address0;
output   GDarrayDecoded_ce0;
input  [31:0] GDarrayDecoded_q0;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg GDn_points_ce0;
reg GDarrayDecoded_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] i_04_reg_94;
reg   [7:0] i_04_reg_94_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] i_04_reg_94_pp0_iter2_reg;
reg   [7:0] index_reg_106;
reg   [63:0] minVal_reg_118;
reg   [31:0] GDn_points_load_reg_243;
wire    ap_CS_fsm_state2;
wire  signed [32:0] rhs_fu_135_p1;
reg  signed [32:0] rhs_reg_248;
wire   [7:0] i_fu_139_p2;
reg   [7:0] i_reg_253;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln522_fu_149_p2;
reg   [0:0] icmp_ln522_reg_258;
reg   [0:0] icmp_ln522_reg_258_pp0_iter1_reg;
reg   [0:0] icmp_ln522_reg_258_pp0_iter2_reg;
reg   [31:0] lhs_reg_267;
wire   [32:0] diff_fu_200_p3;
reg   [32:0] diff_reg_272;
wire   [63:0] minVal_1_fu_217_p3;
reg    ap_enable_reg_pp0_iter3;
wire   [7:0] index_1_fu_225_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter2_state5;
reg   [7:0] ap_phi_mux_i_04_phi_fu_98_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom_fu_130_p1;
wire   [63:0] tmp_s_fu_169_p3;
wire   [31:0] zext_ln522_fu_145_p1;
wire   [11:0] tmp_fu_154_p4;
wire   [11:0] or_ln215_fu_163_p2;
wire  signed [32:0] sext_ln215_fu_178_p1;
wire   [32:0] ret_fu_181_p2;
wire   [0:0] tmp_24_fu_192_p3;
wire   [32:0] sub_ln180_fu_186_p2;
wire  signed [63:0] sext_ln524_fu_208_p1;
wire   [0:0] icmp_ln525_fu_211_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state5) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln522_reg_258 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_04_reg_94 <= i_reg_253;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_04_reg_94 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln522_reg_258_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        index_reg_106 <= index_1_fu_225_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        index_reg_106 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln522_reg_258_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        minVal_reg_118 <= minVal_1_fu_217_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        minVal_reg_118 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        GDn_points_load_reg_243 <= GDn_points_q0;
        rhs_reg_248 <= rhs_fu_135_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln522_reg_258_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        diff_reg_272 <= diff_fu_200_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_04_reg_94_pp0_iter1_reg <= i_04_reg_94;
        icmp_ln522_reg_258 <= icmp_ln522_fu_149_p2;
        icmp_ln522_reg_258_pp0_iter1_reg <= icmp_ln522_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_04_reg_94_pp0_iter2_reg <= i_04_reg_94_pp0_iter1_reg;
        icmp_ln522_reg_258_pp0_iter2_reg <= icmp_ln522_reg_258_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_253 <= i_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln522_reg_258 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_reg_267 <= GDarrayDecoded_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        GDarrayDecoded_ce0 = 1'b1;
    end else begin
        GDarrayDecoded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        GDn_points_ce0 = 1'b1;
    end else begin
        GDn_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln522_fu_149_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln522_reg_258 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_04_phi_fu_98_p4 = i_reg_253;
    end else begin
        ap_phi_mux_i_04_phi_fu_98_p4 = i_04_reg_94;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDarrayDecoded_address0 = tmp_s_fu_169_p3;

assign GDn_points_address0 = idxprom_fu_130_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = index_reg_106;

assign diff_fu_200_p3 = ((tmp_24_fu_192_p3[0:0] == 1'b1) ? sub_ln180_fu_186_p2 : ret_fu_181_p2);

assign i_fu_139_p2 = (ap_phi_mux_i_04_phi_fu_98_p4 + 8'd1);

assign icmp_ln522_fu_149_p2 = (($signed(zext_ln522_fu_145_p1) < $signed(GDn_points_load_reg_243)) ? 1'b1 : 1'b0);

assign icmp_ln525_fu_211_p2 = (($signed(sext_ln524_fu_208_p1) < $signed(minVal_reg_118)) ? 1'b1 : 1'b0);

assign idxprom_fu_130_p1 = layer;

assign index_1_fu_225_p3 = ((icmp_ln525_fu_211_p2[0:0] == 1'b1) ? i_04_reg_94_pp0_iter2_reg : index_reg_106);

assign minVal_1_fu_217_p3 = ((icmp_ln525_fu_211_p2[0:0] == 1'b1) ? sext_ln524_fu_208_p1 : minVal_reg_118);

assign or_ln215_fu_163_p2 = (tmp_fu_154_p4 | 12'd1);

assign ret_fu_181_p2 = ($signed(sext_ln215_fu_178_p1) - $signed(rhs_reg_248));

assign rhs_fu_135_p1 = $signed(z_value);

assign sext_ln215_fu_178_p1 = $signed(lhs_reg_267);

assign sext_ln524_fu_208_p1 = $signed(diff_reg_272);

assign sub_ln180_fu_186_p2 = (33'd0 - ret_fu_181_p2);

assign tmp_24_fu_192_p3 = ret_fu_181_p2[32'd32];

assign tmp_fu_154_p4 = {{{layer}, {ap_phi_mux_i_04_phi_fu_98_p4}}, {1'd0}};

assign tmp_s_fu_169_p3 = {{52'd0}, {or_ln215_fu_163_p2}};

assign zext_ln522_fu_145_p1 = ap_phi_mux_i_04_phi_fu_98_p4;

endmodule //MPSQ_get_index_from_z
