// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MPSQ_MPSQ,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.190000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=31099,HLS_SYN_LUT=44451,HLS_VERSION=2020_2}" *)

module MPSQ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stop,
        ppl,
        leftRight,
        n_patches_i,
        n_patches_o,
        n_patches_o_ap_vld,
        GDarray_address0,
        GDarray_ce0,
        GDarray_q0,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        patches_superpointsOUTPUT_address0,
        patches_superpointsOUTPUT_ce0,
        patches_superpointsOUTPUT_we0,
        patches_superpointsOUTPUT_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_pp0_stage0 = 11'd16;
parameter    ap_ST_fsm_state9 = 11'd32;
parameter    ap_ST_fsm_state10 = 11'd64;
parameter    ap_ST_fsm_state11 = 11'd128;
parameter    ap_ST_fsm_state12 = 11'd256;
parameter    ap_ST_fsm_pp1_stage0 = 11'd512;
parameter    ap_ST_fsm_state18 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] stop;
input  [31:0] ppl;
input   leftRight;
input  [7:0] n_patches_i;
output  [7:0] n_patches_o;
output   n_patches_o_ap_vld;
output  [10:0] GDarray_address0;
output   GDarray_ce0;
input  [63:0] GDarray_q0;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
output  [11:0] patches_superpointsOUTPUT_address0;
output   patches_superpointsOUTPUT_ce0;
output   patches_superpointsOUTPUT_we0;
output  [63:0] patches_superpointsOUTPUT_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] n_patches_o;
reg GDarray_ce0;
reg[2:0] GDn_points_address0;
reg GDn_points_ce0;
reg patches_superpointsOUTPUT_ce0;
reg patches_superpointsOUTPUT_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] b_reg_246;
reg   [11:0] indvar_flatten13_reg_281;
reg   [5:0] a_6_reg_292;
reg   [7:0] indvar_flatten_reg_303;
reg   [2:0] b_8_reg_314;
reg   [4:0] c_reg_325;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln623_fu_362_p2;
reg   [2:0] add_ln623_reg_689;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln623_fu_368_p2;
wire   [12:0] zext_ln623_1_fu_387_p1;
reg   [12:0] zext_ln623_1_reg_702;
wire    ap_CS_fsm_state4;
reg   [31:0] GDn_points_load_reg_707;
wire   [13:0] shl_ln_fu_391_p3;
reg   [13:0] shl_ln_reg_712;
wire   [11:0] add_ln629_fu_399_p2;
reg   [11:0] add_ln629_reg_717;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln629_fu_409_p2;
reg   [0:0] icmp_ln629_reg_722;
reg   [0:0] icmp_ln629_reg_722_pp0_iter1_reg;
reg   [0:0] icmp_ln629_reg_722_pp0_iter2_reg;
reg   [2:0] lshr_ln_reg_726;
wire   [12:0] add_ln634_1_fu_445_p2;
reg   [12:0] add_ln634_1_reg_731;
reg   [12:0] add_ln634_1_reg_731_pp0_iter2_reg;
wire   [10:0] trunc_ln634_fu_450_p1;
reg   [10:0] trunc_ln634_reg_736;
reg   [10:0] trunc_ln634_reg_736_pp0_iter2_reg;
reg   [31:0] trunc_ln_reg_746;
wire   [31:0] trunc_ln69_fu_480_p1;
reg   [31:0] trunc_ln69_reg_751;
wire   [0:0] icmp_ln886_fu_514_p2;
reg   [0:0] icmp_ln886_reg_756;
wire    ap_CS_fsm_state10;
wire   [31:0] loopCounter_3_fu_520_p2;
reg   [31:0] loopCounter_3_reg_760;
wire   [0:0] icmp_ln652_fu_526_p2;
reg   [0:0] icmp_ln652_reg_765;
wire   [31:0] grp_solveNextColumn_fu_336_ap_return;
wire    ap_CS_fsm_state12;
wire   [11:0] add_ln662_1_fu_532_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_state15_pp1_stage0_iter2;
wire    ap_block_state16_pp1_stage0_iter3;
wire    ap_block_state17_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln662_fu_538_p2;
reg   [0:0] icmp_ln662_reg_779;
reg   [0:0] icmp_ln662_reg_779_pp1_iter1_reg;
reg   [0:0] icmp_ln662_reg_779_pp1_iter2_reg;
reg   [0:0] icmp_ln662_reg_779_pp1_iter3_reg;
wire   [5:0] select_ln662_1_fu_564_p3;
reg   [5:0] select_ln662_1_reg_783;
wire   [4:0] select_ln665_fu_602_p3;
reg   [4:0] select_ln665_reg_790;
wire   [2:0] select_ln665_1_fu_610_p3;
reg   [2:0] select_ln665_1_reg_795;
wire   [4:0] add_ln668_fu_618_p2;
wire   [7:0] select_ln665_2_fu_630_p3;
wire   [11:0] add_ln670_2_fu_674_p2;
reg   [11:0] add_ln670_2_reg_811;
wire   [63:0] zext_ln670_3_fu_680_p1;
reg   [63:0] zext_ln670_3_reg_816;
reg   [63:0] zext_ln670_3_reg_816_pp1_iter3_reg;
wire   [63:0] patches_superpoints_V_q0;
reg   [63:0] patches_superpoints_V_load_reg_826;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    grp_solveNextColumn_fu_336_ap_ready;
wire    grp_solveNextColumn_fu_336_ap_done;
reg    ap_block_state12_on_subcall_done;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg   [11:0] patches_superpoints_V_address0;
reg    patches_superpoints_V_ce0;
reg    patches_superpoints_V_we0;
reg   [63:0] patches_superpoints_V_d0;
reg    patches_superpoints_V_ce1;
wire   [63:0] patches_superpoints_V_q1;
reg   [11:0] patches_parameters_V_address0;
reg    patches_parameters_V_ce0;
reg    patches_parameters_V_we0;
reg   [31:0] patches_parameters_V_d0;
wire   [31:0] patches_parameters_V_q0;
reg    patches_parameters_V_ce1;
reg    patches_parameters_V_we1;
wire   [31:0] patches_parameters_V_q1;
reg   [11:0] GDarrayDecoded_V_address0;
reg    GDarrayDecoded_V_ce0;
reg    GDarrayDecoded_V_we0;
wire   [31:0] GDarrayDecoded_V_q0;
wire   [11:0] GDarrayDecoded_V_address1;
reg    GDarrayDecoded_V_ce1;
reg    GDarrayDecoded_V_we1;
wire    grp_solveNextColumn_fu_336_ap_start;
wire    grp_solveNextColumn_fu_336_ap_idle;
wire   [7:0] grp_solveNextColumn_fu_336_n_patches_o;
wire    grp_solveNextColumn_fu_336_n_patches_o_ap_vld;
wire   [2:0] grp_solveNextColumn_fu_336_GDn_points_address0;
wire    grp_solveNextColumn_fu_336_GDn_points_ce0;
wire   [11:0] grp_solveNextColumn_fu_336_GDarrayDecoded_address0;
wire    grp_solveNextColumn_fu_336_GDarrayDecoded_ce0;
wire   [11:0] grp_solveNextColumn_fu_336_patches_superpoints_address0;
wire    grp_solveNextColumn_fu_336_patches_superpoints_ce0;
wire    grp_solveNextColumn_fu_336_patches_superpoints_we0;
wire   [63:0] grp_solveNextColumn_fu_336_patches_superpoints_d0;
wire   [11:0] grp_solveNextColumn_fu_336_patches_superpoints_address1;
wire    grp_solveNextColumn_fu_336_patches_superpoints_ce1;
wire   [11:0] grp_solveNextColumn_fu_336_patches_parameters_address0;
wire    grp_solveNextColumn_fu_336_patches_parameters_ce0;
wire    grp_solveNextColumn_fu_336_patches_parameters_we0;
wire   [31:0] grp_solveNextColumn_fu_336_patches_parameters_d0;
wire   [11:0] grp_solveNextColumn_fu_336_patches_parameters_address1;
wire    grp_solveNextColumn_fu_336_patches_parameters_ce1;
wire    grp_solveNextColumn_fu_336_patches_parameters_we1;
wire   [31:0] grp_solveNextColumn_fu_336_patches_parameters_d1;
wire    grp_initializeArrays_fu_354_ap_start;
wire    grp_initializeArrays_fu_354_ap_done;
wire    grp_initializeArrays_fu_354_ap_idle;
wire    grp_initializeArrays_fu_354_ap_ready;
wire   [11:0] grp_initializeArrays_fu_354_patches_superpoints_V_address0;
wire    grp_initializeArrays_fu_354_patches_superpoints_V_ce0;
wire    grp_initializeArrays_fu_354_patches_superpoints_V_we0;
wire   [63:0] grp_initializeArrays_fu_354_patches_superpoints_V_d0;
wire   [11:0] grp_initializeArrays_fu_354_patches_parameters_V_address0;
wire    grp_initializeArrays_fu_354_patches_parameters_V_ce0;
wire    grp_initializeArrays_fu_354_patches_parameters_V_we0;
wire   [31:0] grp_initializeArrays_fu_354_patches_parameters_V_d0;
reg   [2:0] a_reg_234;
wire    ap_CS_fsm_state9;
reg   [11:0] ap_phi_mux_b_phi_fu_250_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] apexZ0_V_2_reg_258;
reg   [31:0] loopCounter_reg_270;
reg   [5:0] ap_phi_mux_a_6_phi_fu_296_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_8_phi_fu_318_p4;
reg    grp_solveNextColumn_fu_336_ap_start_reg;
wire    ap_CS_fsm_state11;
reg    grp_initializeArrays_fu_354_ap_start_reg;
wire   [63:0] zext_ln623_fu_374_p1;
wire   [63:0] zext_ln634_1_fu_465_p1;
wire   [63:0] zext_ln634_2_fu_491_p1;
wire   [63:0] zext_ln635_fu_509_p1;
wire   [10:0] tmp_fu_379_p3;
wire   [31:0] b_cast_fu_405_p1;
wire   [10:0] trunc_ln634_1_fu_414_p1;
wire   [13:0] shl_ln634_1_fu_418_p3;
wire   [13:0] add_ln634_fu_426_p2;
wire   [12:0] zext_ln634_fu_441_p1;
wire   [7:0] trunc_ln634_2_fu_454_p1;
wire   [10:0] tmp_s_fu_458_p3;
wire   [13:0] tmp_43_fu_484_p3;
wire   [11:0] tmp_114_cast_fu_496_p3;
wire   [11:0] or_ln635_fu_503_p2;
wire   [0:0] icmp_ln665_fu_550_p2;
wire   [5:0] add_ln662_fu_544_p2;
wire   [0:0] icmp_ln668_fu_578_p2;
wire   [0:0] xor_ln662_fu_572_p2;
wire   [2:0] select_ln662_fu_556_p3;
wire   [0:0] and_ln662_fu_584_p2;
wire   [0:0] or_ln665_fu_596_p2;
wire   [2:0] add_ln665_fu_590_p2;
wire   [7:0] add_ln665_1_fu_624_p2;
wire   [7:0] tmp_42_fu_641_p3;
wire   [7:0] zext_ln670_fu_638_p1;
wire   [7:0] add_ln670_fu_648_p2;
wire   [7:0] zext_ln670_1_fu_654_p1;
wire   [7:0] add_ln670_1_fu_657_p2;
wire   [11:0] tmp_119_cast_fu_663_p3;
wire   [11:0] zext_ln670_2_fu_671_p1;
wire    ap_CS_fsm_state18;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 grp_solveNextColumn_fu_336_ap_start_reg = 1'b0;
#0 grp_initializeArrays_fu_354_ap_start_reg = 1'b0;
end

MPSQ_patches_superpoints_V #(
    .DataWidth( 64 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
patches_superpoints_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(patches_superpoints_V_address0),
    .ce0(patches_superpoints_V_ce0),
    .we0(patches_superpoints_V_we0),
    .d0(patches_superpoints_V_d0),
    .q0(patches_superpoints_V_q0),
    .address1(grp_solveNextColumn_fu_336_patches_superpoints_address1),
    .ce1(patches_superpoints_V_ce1),
    .q1(patches_superpoints_V_q1)
);

MPSQ_patches_parameters_V #(
    .DataWidth( 32 ),
    .AddressRange( 3840 ),
    .AddressWidth( 12 ))
patches_parameters_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(patches_parameters_V_address0),
    .ce0(patches_parameters_V_ce0),
    .we0(patches_parameters_V_we0),
    .d0(patches_parameters_V_d0),
    .q0(patches_parameters_V_q0),
    .address1(grp_solveNextColumn_fu_336_patches_parameters_address1),
    .ce1(patches_parameters_V_ce1),
    .we1(patches_parameters_V_we1),
    .d1(grp_solveNextColumn_fu_336_patches_parameters_d1),
    .q1(patches_parameters_V_q1)
);

MPSQ_GDarrayDecoded_V #(
    .DataWidth( 32 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
GDarrayDecoded_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GDarrayDecoded_V_address0),
    .ce0(GDarrayDecoded_V_ce0),
    .we0(GDarrayDecoded_V_we0),
    .d0(trunc_ln69_reg_751),
    .q0(GDarrayDecoded_V_q0),
    .address1(GDarrayDecoded_V_address1),
    .ce1(GDarrayDecoded_V_ce1),
    .we1(GDarrayDecoded_V_we1),
    .d1(trunc_ln_reg_746)
);

MPSQ_solveNextColumn grp_solveNextColumn_fu_336(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_solveNextColumn_fu_336_ap_start),
    .ap_done(grp_solveNextColumn_fu_336_ap_done),
    .ap_idle(grp_solveNextColumn_fu_336_ap_idle),
    .ap_ready(grp_solveNextColumn_fu_336_ap_ready),
    .n_patches_i(n_patches_i),
    .n_patches_o(grp_solveNextColumn_fu_336_n_patches_o),
    .n_patches_o_ap_vld(grp_solveNextColumn_fu_336_n_patches_o_ap_vld),
    .GDn_points_address0(grp_solveNextColumn_fu_336_GDn_points_address0),
    .GDn_points_ce0(grp_solveNextColumn_fu_336_GDn_points_ce0),
    .GDn_points_q0(GDn_points_q0),
    .apexZ0(apexZ0_V_2_reg_258),
    .ppl(ppl),
    .GDarrayDecoded_address0(grp_solveNextColumn_fu_336_GDarrayDecoded_address0),
    .GDarrayDecoded_ce0(grp_solveNextColumn_fu_336_GDarrayDecoded_ce0),
    .GDarrayDecoded_q0(GDarrayDecoded_V_q0),
    .patches_superpoints_address0(grp_solveNextColumn_fu_336_patches_superpoints_address0),
    .patches_superpoints_ce0(grp_solveNextColumn_fu_336_patches_superpoints_ce0),
    .patches_superpoints_we0(grp_solveNextColumn_fu_336_patches_superpoints_we0),
    .patches_superpoints_d0(grp_solveNextColumn_fu_336_patches_superpoints_d0),
    .patches_superpoints_q0(patches_superpoints_V_q0),
    .patches_superpoints_address1(grp_solveNextColumn_fu_336_patches_superpoints_address1),
    .patches_superpoints_ce1(grp_solveNextColumn_fu_336_patches_superpoints_ce1),
    .patches_superpoints_q1(patches_superpoints_V_q1),
    .patches_parameters_address0(grp_solveNextColumn_fu_336_patches_parameters_address0),
    .patches_parameters_ce0(grp_solveNextColumn_fu_336_patches_parameters_ce0),
    .patches_parameters_we0(grp_solveNextColumn_fu_336_patches_parameters_we0),
    .patches_parameters_d0(grp_solveNextColumn_fu_336_patches_parameters_d0),
    .patches_parameters_q0(patches_parameters_V_q0),
    .patches_parameters_address1(grp_solveNextColumn_fu_336_patches_parameters_address1),
    .patches_parameters_ce1(grp_solveNextColumn_fu_336_patches_parameters_ce1),
    .patches_parameters_we1(grp_solveNextColumn_fu_336_patches_parameters_we1),
    .patches_parameters_d1(grp_solveNextColumn_fu_336_patches_parameters_d1),
    .patches_parameters_q1(patches_parameters_V_q1),
    .ap_return(grp_solveNextColumn_fu_336_ap_return)
);

MPSQ_initializeArrays grp_initializeArrays_fu_354(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_initializeArrays_fu_354_ap_start),
    .ap_done(grp_initializeArrays_fu_354_ap_done),
    .ap_idle(grp_initializeArrays_fu_354_ap_idle),
    .ap_ready(grp_initializeArrays_fu_354_ap_ready),
    .patches_superpoints_V_address0(grp_initializeArrays_fu_354_patches_superpoints_V_address0),
    .patches_superpoints_V_ce0(grp_initializeArrays_fu_354_patches_superpoints_V_ce0),
    .patches_superpoints_V_we0(grp_initializeArrays_fu_354_patches_superpoints_V_we0),
    .patches_superpoints_V_d0(grp_initializeArrays_fu_354_patches_superpoints_V_d0),
    .patches_parameters_V_address0(grp_initializeArrays_fu_354_patches_parameters_V_address0),
    .patches_parameters_V_ce0(grp_initializeArrays_fu_354_patches_parameters_V_ce0),
    .patches_parameters_V_we0(grp_initializeArrays_fu_354_patches_parameters_V_we0),
    .patches_parameters_V_d0(grp_initializeArrays_fu_354_patches_parameters_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_initializeArrays_fu_354_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_initializeArrays_fu_354_ap_start_reg <= 1'b1;
        end else if ((grp_initializeArrays_fu_354_ap_ready == 1'b1)) begin
            grp_initializeArrays_fu_354_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_solveNextColumn_fu_336_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_solveNextColumn_fu_336_ap_start_reg <= 1'b1;
        end else if ((grp_solveNextColumn_fu_336_ap_ready == 1'b1)) begin
            grp_solveNextColumn_fu_336_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_reg_779 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        a_6_reg_292 <= select_ln662_1_reg_783;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
        a_6_reg_292 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_initializeArrays_fu_354_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_234 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_reg_234 <= add_ln623_reg_689;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln623_fu_368_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        apexZ0_V_2_reg_258 <= 32'd22000100;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln652_reg_765 == 1'd0) & (icmp_ln886_reg_756 == 1'd1) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        apexZ0_V_2_reg_258 <= grp_solveNextColumn_fu_336_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_reg_779 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_8_reg_314 <= select_ln665_1_reg_795;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
        b_8_reg_314 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_reg_246 <= 12'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln629_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_reg_246 <= add_ln629_reg_717;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_fu_538_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_reg_325 <= add_ln668_fu_618_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
        c_reg_325 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_fu_538_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten13_reg_281 <= add_ln662_1_fu_532_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
        indvar_flatten13_reg_281 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_fu_538_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_303 <= select_ln665_2_fu_630_p3;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
        indvar_flatten_reg_303 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln623_fu_368_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        loopCounter_reg_270 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln652_reg_765 == 1'd0) & (icmp_ln886_reg_756 == 1'd1) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        loopCounter_reg_270 <= loopCounter_3_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        GDn_points_load_reg_707 <= GDn_points_q0;
        shl_ln_reg_712[13 : 11] <= shl_ln_fu_391_p3[13 : 11];
        zext_ln623_1_reg_702[10 : 8] <= zext_ln623_1_fu_387_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln623_reg_689 <= add_ln623_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln629_reg_717 <= add_ln629_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln629_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln634_1_reg_731 <= add_ln634_1_fu_445_p2;
        trunc_ln634_reg_736 <= trunc_ln634_fu_450_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln634_1_reg_731_pp0_iter2_reg <= add_ln634_1_reg_731;
        icmp_ln629_reg_722_pp0_iter2_reg <= icmp_ln629_reg_722_pp0_iter1_reg;
        trunc_ln634_reg_736_pp0_iter2_reg <= trunc_ln634_reg_736;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_reg_779 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln670_2_reg_811 <= add_ln670_2_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln629_reg_722 <= icmp_ln629_fu_409_p2;
        icmp_ln629_reg_722_pp0_iter1_reg <= icmp_ln629_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln886_fu_514_p2 == 1'd1))) begin
        icmp_ln652_reg_765 <= icmp_ln652_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln662_reg_779 <= icmp_ln662_fu_538_p2;
        icmp_ln662_reg_779_pp1_iter1_reg <= icmp_ln662_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln662_reg_779_pp1_iter2_reg <= icmp_ln662_reg_779_pp1_iter1_reg;
        icmp_ln662_reg_779_pp1_iter3_reg <= icmp_ln662_reg_779_pp1_iter2_reg;
        zext_ln670_3_reg_816_pp1_iter3_reg[11 : 0] <= zext_ln670_3_reg_816[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln886_reg_756 <= icmp_ln886_fu_514_p2;
        loopCounter_3_reg_760 <= loopCounter_3_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln629_fu_409_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln_reg_726 <= {{add_ln634_fu_426_p2[13:11]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln662_reg_779_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_superpoints_V_load_reg_826 <= patches_superpoints_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_fu_538_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln662_1_reg_783 <= select_ln662_1_fu_564_p3;
        select_ln665_1_reg_795 <= select_ln665_1_fu_610_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_fu_538_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln665_reg_790 <= select_ln665_fu_602_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln629_reg_722_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln69_reg_751 <= trunc_ln69_fu_480_p1;
        trunc_ln_reg_746 <= {{GDarray_q0[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln662_reg_779_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln670_3_reg_816[11 : 0] <= zext_ln670_3_fu_680_p1[11 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        GDarrayDecoded_V_address0 = zext_ln635_fu_509_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        GDarrayDecoded_V_address0 = grp_solveNextColumn_fu_336_GDarrayDecoded_address0;
    end else begin
        GDarrayDecoded_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        GDarrayDecoded_V_ce0 = grp_solveNextColumn_fu_336_GDarrayDecoded_ce0;
    end else begin
        GDarrayDecoded_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_ce1 = 1'b1;
    end else begin
        GDarrayDecoded_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln629_reg_722_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_we0 = 1'b1;
    end else begin
        GDarrayDecoded_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln629_reg_722_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_we1 = 1'b1;
    end else begin
        GDarrayDecoded_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarray_ce0 = 1'b1;
    end else begin
        GDarray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GDn_points_address0 = zext_ln623_fu_374_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        GDn_points_address0 = grp_solveNextColumn_fu_336_GDn_points_address0;
    end else begin
        GDn_points_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GDn_points_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        GDn_points_ce0 = grp_solveNextColumn_fu_336_GDn_points_ce0;
    end else begin
        GDn_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln629_fu_409_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln662_fu_538_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_reg_779 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_a_6_phi_fu_296_p4 = select_ln662_1_reg_783;
    end else begin
        ap_phi_mux_a_6_phi_fu_296_p4 = a_6_reg_292;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln662_reg_779 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_b_8_phi_fu_318_p4 = select_ln665_1_reg_795;
    end else begin
        ap_phi_mux_b_8_phi_fu_318_p4 = b_8_reg_314;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln629_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_b_phi_fu_250_p4 = add_ln629_reg_717;
    end else begin
        ap_phi_mux_b_phi_fu_250_p4 = b_reg_246;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_solveNextColumn_fu_336_n_patches_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        n_patches_o = grp_solveNextColumn_fu_336_n_patches_o;
    end else begin
        n_patches_o = n_patches_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_address0 = grp_initializeArrays_fu_354_patches_parameters_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_parameters_V_address0 = grp_solveNextColumn_fu_336_patches_parameters_address0;
    end else begin
        patches_parameters_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_ce0 = grp_initializeArrays_fu_354_patches_parameters_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_parameters_V_ce0 = grp_solveNextColumn_fu_336_patches_parameters_ce0;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_parameters_V_ce1 = grp_solveNextColumn_fu_336_patches_parameters_ce1;
    end else begin
        patches_parameters_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_d0 = grp_initializeArrays_fu_354_patches_parameters_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_parameters_V_d0 = grp_solveNextColumn_fu_336_patches_parameters_d0;
    end else begin
        patches_parameters_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_we0 = grp_initializeArrays_fu_354_patches_parameters_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_parameters_V_we0 = grp_solveNextColumn_fu_336_patches_parameters_we0;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_parameters_V_we1 = grp_solveNextColumn_fu_336_patches_parameters_we1;
    end else begin
        patches_parameters_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_superpointsOUTPUT_ce0 = 1'b1;
    end else begin
        patches_superpointsOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln662_reg_779_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_superpointsOUTPUT_we0 = 1'b1;
    end else begin
        patches_superpointsOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_superpoints_V_address0 = zext_ln670_3_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_address0 = grp_initializeArrays_fu_354_patches_superpoints_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_superpoints_V_address0 = grp_solveNextColumn_fu_336_patches_superpoints_address0;
    end else begin
        patches_superpoints_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_superpoints_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_ce0 = grp_initializeArrays_fu_354_patches_superpoints_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_superpoints_V_ce0 = grp_solveNextColumn_fu_336_patches_superpoints_ce0;
    end else begin
        patches_superpoints_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_superpoints_V_ce1 = grp_solveNextColumn_fu_336_patches_superpoints_ce1;
    end else begin
        patches_superpoints_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_d0 = grp_initializeArrays_fu_354_patches_superpoints_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_superpoints_V_d0 = grp_solveNextColumn_fu_336_patches_superpoints_d0;
    end else begin
        patches_superpoints_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_we0 = grp_initializeArrays_fu_354_patches_superpoints_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln886_reg_756 == 1'd1))) begin
        patches_superpoints_V_we0 = grp_solveNextColumn_fu_336_patches_superpoints_we0;
    end else begin
        patches_superpoints_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_initializeArrays_fu_354_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln623_fu_368_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln629_fu_409_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln629_fu_409_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln886_fu_514_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done) & ((icmp_ln652_reg_765 == 1'd1) | (icmp_ln886_reg_756 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln652_reg_765 == 1'd0) & (icmp_ln886_reg_756 == 1'd1) & (1'b0 == ap_block_state12_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln662_fu_538_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln662_fu_538_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDarrayDecoded_V_address1 = zext_ln634_2_fu_491_p1;

assign GDarray_address0 = zext_ln634_1_fu_465_p1;

assign add_ln623_fu_362_p2 = (a_reg_234 + 3'd1);

assign add_ln629_fu_399_p2 = (ap_phi_mux_b_phi_fu_250_p4 + 12'd1);

assign add_ln634_1_fu_445_p2 = (zext_ln623_1_reg_702 + zext_ln634_fu_441_p1);

assign add_ln634_fu_426_p2 = (shl_ln634_1_fu_418_p3 + shl_ln_reg_712);

assign add_ln662_1_fu_532_p2 = (indvar_flatten13_reg_281 + 12'd1);

assign add_ln662_fu_544_p2 = (ap_phi_mux_a_6_phi_fu_296_p4 + 6'd1);

assign add_ln665_1_fu_624_p2 = (indvar_flatten_reg_303 + 8'd1);

assign add_ln665_fu_590_p2 = (select_ln662_fu_556_p3 + 3'd1);

assign add_ln668_fu_618_p2 = (select_ln665_fu_602_p3 + 5'd1);

assign add_ln670_1_fu_657_p2 = (add_ln670_fu_648_p2 + zext_ln670_1_fu_654_p1);

assign add_ln670_2_fu_674_p2 = (tmp_119_cast_fu_663_p3 + zext_ln670_2_fu_671_p1);

assign add_ln670_fu_648_p2 = (tmp_42_fu_641_p3 + zext_ln670_fu_638_p1);

assign and_ln662_fu_584_p2 = (xor_ln662_fu_572_p2 & icmp_ln668_fu_578_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_on_subcall_done = ((grp_solveNextColumn_fu_336_ap_done == 1'b0) & (icmp_ln886_reg_756 == 1'd1));
end

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b_cast_fu_405_p1 = ap_phi_mux_b_phi_fu_250_p4;

assign grp_initializeArrays_fu_354_ap_start = grp_initializeArrays_fu_354_ap_start_reg;

assign grp_solveNextColumn_fu_336_ap_start = grp_solveNextColumn_fu_336_ap_start_reg;

assign icmp_ln623_fu_368_p2 = ((a_reg_234 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln629_fu_409_p2 = ((b_cast_fu_405_p1 == GDn_points_load_reg_707) ? 1'b1 : 1'b0);

assign icmp_ln652_fu_526_p2 = (($signed(loopCounter_reg_270) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign icmp_ln662_fu_538_p2 = ((indvar_flatten13_reg_281 == 12'd2560) ? 1'b1 : 1'b0);

assign icmp_ln665_fu_550_p2 = ((indvar_flatten_reg_303 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln668_fu_578_p2 = ((c_reg_325 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_514_p2 = (($signed(apexZ0_V_2_reg_258) > $signed(32'd4272967196)) ? 1'b1 : 1'b0);

assign loopCounter_3_fu_520_p2 = (loopCounter_reg_270 + 32'd1);

assign n_patches_o_ap_vld = grp_solveNextColumn_fu_336_n_patches_o_ap_vld;

assign or_ln635_fu_503_p2 = (tmp_114_cast_fu_496_p3 | 12'd1);

assign or_ln665_fu_596_p2 = (icmp_ln665_fu_550_p2 | and_ln662_fu_584_p2);

assign patches_superpointsOUTPUT_address0 = zext_ln670_3_reg_816_pp1_iter3_reg;

assign patches_superpointsOUTPUT_d0 = patches_superpoints_V_load_reg_826;

assign select_ln662_1_fu_564_p3 = ((icmp_ln665_fu_550_p2[0:0] == 1'b1) ? add_ln662_fu_544_p2 : ap_phi_mux_a_6_phi_fu_296_p4);

assign select_ln662_fu_556_p3 = ((icmp_ln665_fu_550_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_8_phi_fu_318_p4);

assign select_ln665_1_fu_610_p3 = ((and_ln662_fu_584_p2[0:0] == 1'b1) ? add_ln665_fu_590_p2 : select_ln662_fu_556_p3);

assign select_ln665_2_fu_630_p3 = ((icmp_ln665_fu_550_p2[0:0] == 1'b1) ? 8'd1 : add_ln665_1_fu_624_p2);

assign select_ln665_fu_602_p3 = ((or_ln665_fu_596_p2[0:0] == 1'b1) ? 5'd0 : c_reg_325);

assign shl_ln634_1_fu_418_p3 = {{trunc_ln634_1_fu_414_p1}, {3'd0}};

assign shl_ln_fu_391_p3 = {{a_reg_234}, {11'd0}};

assign tmp_114_cast_fu_496_p3 = {{trunc_ln634_reg_736_pp0_iter2_reg}, {1'd0}};

assign tmp_119_cast_fu_663_p3 = {{add_ln670_1_fu_657_p2}, {4'd0}};

assign tmp_42_fu_641_p3 = {{select_ln662_1_reg_783}, {2'd0}};

assign tmp_43_fu_484_p3 = {{add_ln634_1_reg_731_pp0_iter2_reg}, {1'd0}};

assign tmp_fu_379_p3 = {{a_reg_234}, {8'd0}};

assign tmp_s_fu_458_p3 = {{lshr_ln_reg_726}, {trunc_ln634_2_fu_454_p1}};

assign trunc_ln634_1_fu_414_p1 = ap_phi_mux_b_phi_fu_250_p4[10:0];

assign trunc_ln634_2_fu_454_p1 = b_reg_246[7:0];

assign trunc_ln634_fu_450_p1 = add_ln634_1_fu_445_p2[10:0];

assign trunc_ln69_fu_480_p1 = GDarray_q0[31:0];

assign xor_ln662_fu_572_p2 = (icmp_ln665_fu_550_p2 ^ 1'd1);

assign zext_ln623_1_fu_387_p1 = tmp_fu_379_p3;

assign zext_ln623_fu_374_p1 = a_reg_234;

assign zext_ln634_1_fu_465_p1 = tmp_s_fu_458_p3;

assign zext_ln634_2_fu_491_p1 = tmp_43_fu_484_p3;

assign zext_ln634_fu_441_p1 = b_reg_246;

assign zext_ln635_fu_509_p1 = or_ln635_fu_503_p2;

assign zext_ln670_1_fu_654_p1 = select_ln665_1_reg_795;

assign zext_ln670_2_fu_671_p1 = select_ln665_reg_790;

assign zext_ln670_3_fu_680_p1 = add_ln670_2_reg_811;

assign zext_ln670_fu_638_p1 = select_ln662_1_reg_783;

always @ (posedge ap_clk) begin
    zext_ln623_1_reg_702[7:0] <= 8'b00000000;
    zext_ln623_1_reg_702[12:11] <= 2'b00;
    shl_ln_reg_712[10:0] <= 11'b00000000000;
    zext_ln670_3_reg_816[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln670_3_reg_816_pp1_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //MPSQ
