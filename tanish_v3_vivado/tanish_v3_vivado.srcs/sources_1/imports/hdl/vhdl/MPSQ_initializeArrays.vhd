-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_initializeArrays is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_V_ce0 : OUT STD_LOGIC;
    patches_superpoints_V_we0 : OUT STD_LOGIC;
    patches_superpoints_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_V_ce0 : OUT STD_LOGIC;
    patches_parameters_V_we0 : OUT STD_LOGIC;
    patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_initializeArrays is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F00 : STD_LOGIC_VECTOR (11 downto 0) := "111100000000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_118 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_reg_129 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten59_reg_173 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten35_reg_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_1_reg_195 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_3_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten21_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_3_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_1_fu_250_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln540_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln540_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln540_reg_680_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln540_1_fu_282_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln540_1_reg_684 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln544_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln544_reg_691 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln544_1_fu_328_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln544_1_reg_696 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln550_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln544_2_fu_348_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln555_2_fu_392_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln555_2_reg_712 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln561_1_fu_402_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln561_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln561_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln561_reg_722_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln561_reg_722_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln565_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln565_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln565_2_fu_426_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln561_1_fu_447_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln561_1_reg_741 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal select_ln565_1_fu_524_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln565_1_reg_746 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln582_1_fu_536_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln582_1_reg_751 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln571_fu_576_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln571_reg_756 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln571_1_fu_584_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln571_1_reg_761 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln577_fu_592_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln571_2_fu_604_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln582_3_fu_665_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln582_3_reg_777 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter1_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_a_phi_fu_133_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_155_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_1_phi_fu_199_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_3_phi_fu_210_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_3_phi_fu_232_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln555_3_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln582_5_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln544_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln540_fu_262_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln550_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln540_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln540_fu_274_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln540_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln544_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln544_fu_308_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln544_1_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln555_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_1_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln555_1_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_cast_fu_381_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln555_2_fu_389_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln565_1_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln561_fu_434_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln582_1_fu_466_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln582_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln577_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln561_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln561_fu_440_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln561_1_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln565_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln565_fu_505_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln582_fu_470_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln582_2_fu_532_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln565_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln561_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln565_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln565_fu_516_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln565_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln571_fu_559_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln571_1_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_fu_612_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln571_fu_619_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln582_3_fu_623_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln582_2_fu_626_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln582_fu_632_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln582_1_fu_644_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_636_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_648_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln582_fu_656_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln582_4_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter1_state7)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                a_1_reg_195 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then 
                a_1_reg_195 <= select_ln561_1_reg_741;
            end if; 
        end if;
    end process;

    a_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_129 <= select_ln540_1_reg_684;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_129 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    b_3_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                b_3_reg_206 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then 
                b_3_reg_206 <= select_ln565_1_reg_746;
            end if; 
        end if;
    end process;

    b_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_151 <= select_ln544_1_reg_696;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_151 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_3_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_3_reg_228 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then 
                c_3_reg_228 <= select_ln571_1_reg_761;
            end if; 
        end if;
    end process;

    c_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_162 <= add_ln550_fu_336_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_162 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_reg_239 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln561_reg_722 = ap_const_lv1_0))) then 
                d_reg_239 <= add_ln577_fu_592_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_118 <= add_ln540_1_fu_250_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_118 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten21_reg_217 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln561_reg_722 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_217 <= select_ln571_2_fu_604_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten35_reg_184 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln561_fu_408_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten35_reg_184 <= select_ln565_2_fu_426_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten59_reg_173 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln561_fu_408_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten59_reg_173 <= add_ln561_1_fu_402_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_140 <= select_ln544_2_fu_348_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_140 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln555_2_reg_712 <= add_ln555_2_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln561_reg_722 = ap_const_lv1_0))) then
                add_ln582_1_reg_751 <= add_ln582_1_fu_536_p2;
                select_ln571_reg_756 <= select_ln571_fu_576_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then
                add_ln582_3_reg_777 <= add_ln582_3_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln540_reg_680 <= icmp_ln540_fu_256_p2;
                icmp_ln540_reg_680_pp0_iter1_reg <= icmp_ln540_reg_680;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln561_reg_722 <= icmp_ln561_fu_408_p2;
                icmp_ln561_reg_722_pp1_iter1_reg <= icmp_ln561_reg_722;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln561_reg_722_pp1_iter2_reg <= icmp_ln561_reg_722_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln561_fu_408_p2 = ap_const_lv1_0))) then
                icmp_ln565_reg_726 <= icmp_ln565_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln540_1_reg_684 <= select_ln540_1_fu_282_p3;
                select_ln544_1_reg_696 <= select_ln544_1_fu_328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln544_reg_691 <= select_ln544_fu_320_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln561_reg_722 = ap_const_lv1_0))) then
                select_ln561_1_reg_741 <= select_ln561_1_fu_447_p3;
                select_ln565_1_reg_746 <= select_ln565_1_fu_524_p3;
                select_ln571_1_reg_761 <= select_ln571_1_fu_584_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln540_fu_256_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln540_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln540_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln540_1_fu_250_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_118) + unsigned(ap_const_lv12_1));
    add_ln540_fu_262_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_133_p4) + unsigned(ap_const_lv6_1));
    add_ln544_1_fu_342_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_140) + unsigned(ap_const_lv8_1));
    add_ln544_fu_308_p2 <= std_logic_vector(unsigned(select_ln540_fu_274_p3) + unsigned(ap_const_lv3_1));
    add_ln550_fu_336_p2 <= std_logic_vector(unsigned(select_ln544_fu_320_p3) + unsigned(ap_const_lv5_1));
    add_ln555_1_fu_375_p2 <= std_logic_vector(unsigned(add_ln555_fu_366_p2) + unsigned(zext_ln555_1_fu_372_p1));
    add_ln555_2_fu_392_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_381_p3) + unsigned(zext_ln555_2_fu_389_p1));
    add_ln555_fu_366_p2 <= std_logic_vector(unsigned(tmp_fu_359_p3) + unsigned(zext_ln555_fu_356_p1));
    add_ln561_1_fu_402_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_173) + unsigned(ap_const_lv12_1));
    add_ln561_fu_434_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_1_phi_fu_199_p4) + unsigned(ap_const_lv6_1));
    add_ln565_1_fu_420_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_184) + unsigned(ap_const_lv8_1));
    add_ln565_fu_505_p2 <= std_logic_vector(unsigned(select_ln561_fu_440_p3) + unsigned(ap_const_lv3_1));
    add_ln571_1_fu_598_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_217) + unsigned(ap_const_lv6_1));
    add_ln571_fu_559_p2 <= std_logic_vector(unsigned(select_ln565_fu_516_p3) + unsigned(ap_const_lv3_1));
    add_ln577_fu_592_p2 <= std_logic_vector(unsigned(select_ln571_fu_576_p3) + unsigned(ap_const_lv3_1));
    add_ln582_1_fu_536_p2 <= std_logic_vector(unsigned(add_ln582_fu_470_p2) + unsigned(zext_ln582_2_fu_532_p1));
    add_ln582_2_fu_626_p2 <= std_logic_vector(unsigned(zext_ln571_fu_619_p1) + unsigned(zext_ln582_3_fu_623_p1));
    add_ln582_3_fu_665_p2 <= std_logic_vector(unsigned(sub_ln582_fu_656_p2) + unsigned(zext_ln582_4_fu_662_p1));
    add_ln582_fu_470_p2 <= std_logic_vector(unsigned(zext_ln582_1_fu_466_p1) + unsigned(zext_ln582_fu_454_p1));
    and_ln540_fu_302_p2 <= (xor_ln540_fu_290_p2 and icmp_ln550_fu_296_p2);
    and_ln561_1_fu_499_p2 <= (xor_ln561_fu_476_p2 and icmp_ln571_fu_493_p2);
    and_ln561_fu_487_p2 <= (xor_ln561_fu_476_p2 and icmp_ln577_fu_481_p2);
    and_ln565_fu_553_p2 <= (or_ln565_1_fu_548_p2 and and_ln561_fu_487_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln540_fu_256_p2)
    begin
        if ((icmp_ln540_fu_256_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln561_fu_408_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln561_fu_408_p2 = ap_const_lv1_1))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_1_phi_fu_199_p4_assign_proc : process(a_1_reg_195, icmp_ln561_reg_722_pp1_iter1_reg, select_ln561_1_reg_741, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_a_1_phi_fu_199_p4 <= select_ln561_1_reg_741;
        else 
            ap_phi_mux_a_1_phi_fu_199_p4 <= a_1_reg_195;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_133_p4_assign_proc : process(a_reg_129, ap_CS_fsm_pp0_stage0, icmp_ln540_reg_680, select_ln540_1_reg_684, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln540_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_133_p4 <= select_ln540_1_reg_684;
        else 
            ap_phi_mux_a_phi_fu_133_p4 <= a_reg_129;
        end if; 
    end process;


    ap_phi_mux_b_3_phi_fu_210_p4_assign_proc : process(b_3_reg_206, icmp_ln561_reg_722_pp1_iter1_reg, select_ln565_1_reg_746, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_b_3_phi_fu_210_p4 <= select_ln565_1_reg_746;
        else 
            ap_phi_mux_b_3_phi_fu_210_p4 <= b_3_reg_206;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_155_p4_assign_proc : process(b_reg_151, ap_CS_fsm_pp0_stage0, icmp_ln540_reg_680, select_ln544_1_reg_696, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln540_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_155_p4 <= select_ln544_1_reg_696;
        else 
            ap_phi_mux_b_phi_fu_155_p4 <= b_reg_151;
        end if; 
    end process;


    ap_phi_mux_c_3_phi_fu_232_p4_assign_proc : process(c_3_reg_228, icmp_ln561_reg_722_pp1_iter1_reg, select_ln571_1_reg_761, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c_3_phi_fu_232_p4 <= select_ln571_1_reg_761;
        else 
            ap_phi_mux_c_3_phi_fu_232_p4 <= c_3_reg_228;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln540_fu_256_p2 <= "1" when (indvar_flatten13_reg_118 = ap_const_lv12_A00) else "0";
    icmp_ln544_fu_268_p2 <= "1" when (indvar_flatten_reg_140 = ap_const_lv8_50) else "0";
    icmp_ln550_fu_296_p2 <= "1" when (c_reg_162 = ap_const_lv5_10) else "0";
    icmp_ln561_fu_408_p2 <= "1" when (indvar_flatten59_reg_173 = ap_const_lv12_F00) else "0";
    icmp_ln565_fu_414_p2 <= "1" when (indvar_flatten35_reg_184 = ap_const_lv8_78) else "0";
    icmp_ln571_fu_493_p2 <= "1" when (indvar_flatten21_reg_217 = ap_const_lv6_18) else "0";
    icmp_ln577_fu_481_p2 <= "1" when (d_reg_239 = ap_const_lv3_6) else "0";
    or_ln544_fu_314_p2 <= (icmp_ln544_fu_268_p2 or and_ln540_fu_302_p2);
    or_ln565_1_fu_548_p2 <= (xor_ln565_fu_542_p2 or icmp_ln565_reg_726);
    or_ln565_fu_511_p2 <= (icmp_ln565_reg_726 or and_ln561_1_fu_499_p2);
    or_ln571_1_fu_571_p2 <= (or_ln571_fu_565_p2 or icmp_ln565_reg_726);
    or_ln571_fu_565_p2 <= (and_ln565_fu_553_p2 or and_ln561_1_fu_499_p2);
    p_shl2_cast_fu_636_p3 <= (trunc_ln582_fu_632_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_648_p3 <= (trunc_ln582_1_fu_644_p1 & ap_const_lv1_0);
    patches_parameters_V_address0 <= zext_ln582_5_fu_671_p1(12 - 1 downto 0);

    patches_parameters_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            patches_parameters_V_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_V_d0 <= ap_const_lv32_0;

    patches_parameters_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln561_reg_722_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln561_reg_722_pp1_iter2_reg = ap_const_lv1_0))) then 
            patches_parameters_V_we0 <= ap_const_logic_1;
        else 
            patches_parameters_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_V_address0 <= zext_ln555_3_fu_398_p1(12 - 1 downto 0);

    patches_superpoints_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_superpoints_V_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_V_d0 <= ap_const_lv64_0;

    patches_superpoints_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln540_reg_680_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln540_reg_680_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_superpoints_V_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln540_1_fu_282_p3 <= 
        add_ln540_fu_262_p2 when (icmp_ln544_fu_268_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_133_p4;
    select_ln540_fu_274_p3 <= 
        ap_const_lv3_0 when (icmp_ln544_fu_268_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_155_p4;
    select_ln544_1_fu_328_p3 <= 
        add_ln544_fu_308_p2 when (and_ln540_fu_302_p2(0) = '1') else 
        select_ln540_fu_274_p3;
    select_ln544_2_fu_348_p3 <= 
        ap_const_lv8_1 when (icmp_ln544_fu_268_p2(0) = '1') else 
        add_ln544_1_fu_342_p2;
    select_ln544_fu_320_p3 <= 
        ap_const_lv5_0 when (or_ln544_fu_314_p2(0) = '1') else 
        c_reg_162;
    select_ln561_1_fu_447_p3 <= 
        add_ln561_fu_434_p2 when (icmp_ln565_reg_726(0) = '1') else 
        ap_phi_mux_a_1_phi_fu_199_p4;
    select_ln561_fu_440_p3 <= 
        ap_const_lv3_0 when (icmp_ln565_reg_726(0) = '1') else 
        ap_phi_mux_b_3_phi_fu_210_p4;
    select_ln565_1_fu_524_p3 <= 
        add_ln565_fu_505_p2 when (and_ln561_1_fu_499_p2(0) = '1') else 
        select_ln561_fu_440_p3;
    select_ln565_2_fu_426_p3 <= 
        ap_const_lv8_1 when (icmp_ln565_fu_414_p2(0) = '1') else 
        add_ln565_1_fu_420_p2;
    select_ln565_fu_516_p3 <= 
        ap_const_lv3_0 when (or_ln565_fu_511_p2(0) = '1') else 
        ap_phi_mux_c_3_phi_fu_232_p4;
    select_ln571_1_fu_584_p3 <= 
        add_ln571_fu_559_p2 when (and_ln565_fu_553_p2(0) = '1') else 
        select_ln565_fu_516_p3;
    select_ln571_2_fu_604_p3 <= 
        ap_const_lv6_1 when (or_ln565_fu_511_p2(0) = '1') else 
        add_ln571_1_fu_598_p2;
    select_ln571_fu_576_p3 <= 
        ap_const_lv3_0 when (or_ln571_1_fu_571_p2(0) = '1') else 
        d_reg_239;
    sub_ln582_fu_656_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_636_p3) - unsigned(p_shl3_cast_fu_648_p3));
    tmp_23_fu_612_p3 <= (add_ln582_1_reg_751 & ap_const_lv2_0);
    tmp_42_cast_fu_381_p3 <= (add_ln555_1_fu_375_p2 & ap_const_lv4_0);
    tmp_fu_359_p3 <= (select_ln540_1_reg_684 & ap_const_lv2_0);
    tmp_s_fu_458_p3 <= (select_ln561_1_fu_447_p3 & ap_const_lv2_0);
    trunc_ln582_1_fu_644_p1 <= add_ln582_2_fu_626_p2(11 - 1 downto 0);
    trunc_ln582_fu_632_p1 <= add_ln582_2_fu_626_p2(9 - 1 downto 0);
    xor_ln540_fu_290_p2 <= (icmp_ln544_fu_268_p2 xor ap_const_lv1_1);
    xor_ln561_fu_476_p2 <= (icmp_ln565_reg_726 xor ap_const_lv1_1);
    xor_ln565_fu_542_p2 <= (icmp_ln571_fu_493_p2 xor ap_const_lv1_1);
    zext_ln555_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_1_reg_696),8));
    zext_ln555_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_reg_691),12));
    zext_ln555_3_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln555_2_reg_712),64));
    zext_ln555_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln540_1_reg_684),8));
    zext_ln571_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_612_p3),63));
    zext_ln582_1_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_458_p3),9));
    zext_ln582_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln565_1_fu_524_p3),9));
    zext_ln582_3_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln571_1_reg_761),63));
    zext_ln582_4_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln571_reg_756),12));
    zext_ln582_5_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln582_3_reg_777),64));
    zext_ln582_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln561_1_fu_447_p3),9));
end behav;
