-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_add_patch9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce0 : OUT STD_LOGIC;
    wp_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce1 : OUT STD_LOGIC;
    wp_superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_add_patch9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv12_66 : STD_LOGIC_VECTOR (11 downto 0) := "000001100110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv51_0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_1F : STD_LOGIC_VECTOR (12 downto 0) := "0000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten29_reg_318 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_4_reg_329 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_6_reg_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten51_reg_351 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_5_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_373 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_7_reg_384 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_395 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_406 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_417 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_439 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_3_reg_450 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_461 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_5_reg_472 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_483 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln378_1_reg_1452 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln874_reg_1496 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln394_reg_1523 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln394_reg_1523_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_state23_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state26_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln329_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_1618_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state17_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln410_reg_1565 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln410_reg_1565_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_state28_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state31_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln345_reg_1658 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln345_reg_1658_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln322_fu_518_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln322_reg_1407 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln325_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln325_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_532_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_reg_1416 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_101_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_101_reg_1422 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal patches_parameters_load_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln380_fu_588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_reg_1438 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln380_cast_fu_594_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln380_cast_reg_1443 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln378_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln378_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln378_1_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_13_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_13_reg_1456 : STD_LOGIC_VECTOR (7 downto 0);
    signal wp_superpoints_addr_7_reg_1466 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_2_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_2_reg_1471 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_1_fu_665_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln380_1_reg_1476 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln69_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln874_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_2_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_2_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln391_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln391_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln405_fu_747_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln405_reg_1512 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln394_1_fu_753_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln394_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln394_reg_1523_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln394_fu_777_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln394_reg_1527 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln394_reg_1527_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln394_1_fu_785_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln394_1_reg_1533 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln394_1_reg_1533_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln400_fu_793_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln405_3_fu_872_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln405_3_reg_1555 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln410_1_fu_882_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln410_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln410_reg_1565_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln410_1_fu_914_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln410_1_reg_1569 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln427_fu_926_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln427_reg_1575 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln416_fu_961_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_reg_1580 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_1_fu_969_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_1_reg_1586 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln422_fu_977_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_2_fu_989_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln427_4_fu_1110_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln427_4_reg_1608 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln427_4_reg_1608_pp2_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln329_1_fu_1130_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln329_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_1618_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln329_fu_1154_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln329_reg_1622 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln329_1_fu_1162_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln329_1_reg_1627 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln335_fu_1170_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln340_fu_1190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln340_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln340_reg_1638_pp3_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln345_1_fu_1230_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln345_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln345_reg_1658_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln345_1_fu_1262_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_1_reg_1662 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_fu_1300_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_reg_1668 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_1_fu_1308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_1_reg_1673 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln357_fu_1316_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_2_fu_1328_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln362_4_fu_1395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_4_reg_1689 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_4_reg_1689_pp4_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal grp_encodeCoordinates_fu_494_ap_ready : STD_LOGIC;
    signal grp_encodeCoordinates_fu_494_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln874_4_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_a_4_phi_fu_333_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_a_5_phi_fu_366_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_b_7_phi_fu_388_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_phi_fu_421_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_a_3_phi_fu_454_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_b_5_phi_fu_476_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_636_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_651_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln380_2_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln381_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln405_6_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln405_7_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln405_8_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_6_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_7_fu_1116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln340_2_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln340_3_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln340_1_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln435_fu_1125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal trunc_ln325_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_fu_546_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_538_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_cast_fu_554_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_100_fu_558_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_577_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln380_1_fu_584_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln380_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln378_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_622_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln874_fu_630_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln874_1_fu_645_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln874_fu_618_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_35_fu_670_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_96_cast_fu_686_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln381_fu_693_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_38_fu_718_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_fu_736_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln405_1_fu_743_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln405_fu_733_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln400_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_fu_765_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_fu_799_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln405_2_fu_806_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln405_5_fu_810_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln405_2_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_819_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln405_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln405_fu_838_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln405_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln405_3_fu_852_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln405_1_fu_855_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_cast_fu_861_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln405_4_fu_869_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln416_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln410_fu_894_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln427_fu_922_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln422_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln410_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln410_fu_906_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln410_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_fu_949_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln416_1_fu_983_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_997_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_fu_1008_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln427_1_fu_1004_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln427_3_fu_1022_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln427_1_fu_1025_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln427_fu_1031_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_1035_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_cast_fu_1043_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln416_fu_1015_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln427_2_fu_1019_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln427_2_fu_1057_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln427_1_fu_1063_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln427_2_fu_1075_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_1067_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_1079_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln427_fu_1051_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln427_5_fu_1096_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln427_3_fu_1099_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln427_1_fu_1087_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln427_4_fu_1093_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln435_fu_1120_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln335_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln329_fu_1142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_fu_1176_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_89_cast_fu_1183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln340_fu_1187_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1196_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln340_fu_1209_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln340_fu_1215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln351_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln345_fu_1242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln357_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln345_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln345_fu_1254_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln345_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln351_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln351_fu_1288_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln351_1_fu_1322_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_fu_1336_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln351_fu_1343_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln362_fu_1347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln362_fu_1350_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_1356_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_1368_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln362_1_fu_1364_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln362_2_fu_1376_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln362_fu_1380_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln362_3_fu_1386_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln362_1_fu_1389_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_encodeCoordinates IS
    port (
        ap_ready : OUT STD_LOGIC;
        phi : IN STD_LOGIC_VECTOR (31 downto 0);
        z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_encodeCoordinates_fu_494 : component MPSQ_encodeCoordinates
    port map (
        ap_ready => grp_encodeCoordinates_fu_494_ap_ready,
        phi => reg_501,
        z => reg_507,
        ap_return => grp_encodeCoordinates_fu_494_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state17)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state23)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state28)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_3_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                a_3_reg_450 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln345_reg_1658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                a_3_reg_450 <= select_ln345_1_reg_1662;
            end if; 
        end if;
    end process;

    a_4_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_4_reg_329 <= select_ln394_1_reg_1533;
            elsif (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                a_4_reg_329 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    a_5_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                a_5_reg_362 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln410_reg_1565 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                a_5_reg_362 <= select_ln410_1_reg_1569;
            end if; 
        end if;
    end process;

    a_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_1))) then 
                a_reg_417 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln329_reg_1618 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                a_reg_417 <= select_ln329_1_reg_1627;
            end if; 
        end if;
    end process;

    b_5_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                b_5_reg_472 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln345_reg_1658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                b_5_reg_472 <= select_ln351_1_reg_1673;
            end if; 
        end if;
    end process;

    b_6_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_fu_759_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_6_reg_340 <= add_ln400_fu_793_p2;
            elsif (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                b_6_reg_340 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    b_7_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                b_7_reg_384 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln410_reg_1565 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                b_7_reg_384 <= select_ln416_1_reg_1586;
            end if; 
        end if;
    end process;

    b_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_1))) then 
                b_reg_428 <= ap_const_lv5_0;
            elsif (((icmp_ln329_fu_1136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                b_reg_428 <= add_ln335_fu_1170_p2;
            end if; 
        end if;
    end process;

    c_4_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                c_4_reg_395 <= ap_const_lv3_0;
            elsif (((icmp_ln410_fu_888_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                c_4_reg_395 <= add_ln422_fu_977_p2;
            end if; 
        end if;
    end process;

    c_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                c_reg_483 <= ap_const_lv3_0;
            elsif (((icmp_ln345_fu_1236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                c_reg_483 <= add_ln357_fu_1316_p2;
            end if; 
        end if;
    end process;

    i_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln378_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_307 <= ap_const_lv8_0;
            elsif (((icmp_ln874_4_fu_713_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln874_reg_1496 = ap_const_lv1_1) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1))) then 
                i_reg_307 <= i_13_reg_1456;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                indvar_flatten21_reg_439 <= ap_const_lv7_0;
            elsif (((icmp_ln345_fu_1236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                indvar_flatten21_reg_439 <= add_ln345_1_fu_1230_p2;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_fu_759_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten29_reg_318 <= add_ln394_1_fu_753_p2;
            elsif (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                indvar_flatten29_reg_318 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten37_reg_373 <= ap_const_lv6_0;
            elsif (((icmp_ln410_fu_888_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten37_reg_373 <= select_ln416_2_fu_989_p3;
            end if; 
        end if;
    end process;

    indvar_flatten51_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten51_reg_351 <= ap_const_lv7_0;
            elsif (((icmp_ln410_fu_888_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten51_reg_351 <= add_ln410_1_fu_882_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                indvar_flatten7_reg_461 <= ap_const_lv6_0;
            elsif (((icmp_ln345_fu_1236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                indvar_flatten7_reg_461 <= select_ln351_2_fu_1328_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_406 <= ap_const_lv7_0;
            elsif (((icmp_ln329_fu_1136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten_reg_406 <= add_ln329_1_fu_1130_p2;
            end if; 
        end if;
    end process;

    reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_reg_1523_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                reg_501 <= wp_superpoints_q1;
            elsif ((((icmp_ln329_reg_1618_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln874_reg_1496 = ap_const_lv1_1) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1)))) then 
                reg_501 <= wp_superpoints_q0;
            end if; 
        end if;
    end process;

    reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_reg_1618_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                reg_507 <= wp_superpoints_q1;
            elsif (((icmp_ln394_reg_1523_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                reg_507 <= wp_superpoints_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln329_reg_1618 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln340_reg_1638 <= add_ln340_fu_1190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                add_ln340_reg_1638_pp3_iter2_reg <= add_ln340_reg_1638;
                icmp_ln329_reg_1618_pp3_iter2_reg <= icmp_ln329_reg_1618_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln378_1_fu_607_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln380_1_reg_1476 <= add_ln380_1_fu_665_p2;
                add_ln380_2_reg_1471 <= add_ln380_2_fu_660_p2;
                    wp_superpoints_addr_7_reg_1466(7 downto 5) <= tmp_31_fu_651_p3(8 - 1 downto 0)(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    add_ln380_cast_reg_1443(7 downto 0) <= add_ln380_cast_fu_594_p1(7 downto 0);
                add_ln380_reg_1438 <= add_ln380_fu_588_p2;
                icmp_ln378_reg_1448 <= icmp_ln378_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_reg_1523_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln405_3_reg_1555 <= add_ln405_3_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln405_reg_1512 <= add_ln405_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln410_reg_1565 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln427_4_reg_1608 <= add_ln427_4_fu_1110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln427_4_reg_1608_pp2_iter2_reg <= add_ln427_4_reg_1608;
                icmp_ln410_reg_1565_pp2_iter2_reg <= icmp_ln410_reg_1565_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_888_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln427_reg_1575 <= add_ln427_fu_926_p2;
                select_ln416_reg_1580 <= select_ln416_fu_961_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_0))) then
                    empty_101_reg_1422(11 downto 3) <= empty_101_fu_564_p2(11 downto 3);
                sub_reg_1416 <= sub_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_13_reg_1456 <= i_13_fu_612_p2;
                icmp_ln378_1_reg_1452 <= icmp_ln378_1_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln325_reg_1412 <= icmp_ln325_fu_526_p2;
                trunc_ln322_reg_1407 <= trunc_ln322_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln329_reg_1618 <= icmp_ln329_fu_1136_p2;
                icmp_ln329_reg_1618_pp3_iter1_reg <= icmp_ln329_reg_1618;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln345_reg_1658 <= icmp_ln345_fu_1236_p2;
                icmp_ln345_reg_1658_pp4_iter1_reg <= icmp_ln345_reg_1658;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln345_reg_1658_pp4_iter2_reg <= icmp_ln345_reg_1658_pp4_iter1_reg;
                    zext_ln362_4_reg_1689_pp4_iter2_reg(11 downto 0) <= zext_ln362_4_reg_1689(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln391_reg_1508 <= icmp_ln391_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln394_reg_1523 <= icmp_ln394_fu_759_p2;
                icmp_ln394_reg_1523_pp1_iter1_reg <= icmp_ln394_reg_1523;
                select_ln394_1_reg_1533_pp1_iter1_reg <= select_ln394_1_reg_1533;
                select_ln394_reg_1527_pp1_iter1_reg <= select_ln394_reg_1527;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln394_reg_1523_pp1_iter2_reg <= icmp_ln394_reg_1523_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln410_reg_1565 <= icmp_ln410_fu_888_p2;
                icmp_ln410_reg_1565_pp2_iter1_reg <= icmp_ln410_reg_1565;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1))) then
                icmp_ln874_reg_1496 <= icmp_ln874_fu_704_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                patches_parameters_load_reg_1432 <= patches_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln345_reg_1658_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln410_reg_1565_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_513 <= wp_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln329_1_reg_1627 <= select_ln329_1_fu_1162_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln329_reg_1622 <= select_ln329_fu_1154_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln345_fu_1236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                select_ln345_1_reg_1662 <= select_ln345_1_fu_1262_p3;
                select_ln351_1_reg_1673 <= select_ln351_1_fu_1308_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln345_fu_1236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                select_ln351_reg_1668 <= select_ln351_fu_1300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_fu_759_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln394_1_reg_1533 <= select_ln394_1_fu_785_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_fu_759_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln394_reg_1527 <= select_ln394_fu_777_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_888_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln410_1_reg_1569 <= select_ln410_1_fu_914_p3;
                select_ln416_1_reg_1586 <= select_ln416_1_fu_969_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln874_reg_1496 = ap_const_lv1_1) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1))) then
                trunc_ln69_2_reg_1500 <= trunc_ln69_2_fu_709_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1))) then
                trunc_ln69_reg_1486 <= trunc_ln69_fu_682_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln345_reg_1658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    zext_ln362_4_reg_1689(11 downto 0) <= zext_ln362_4_fu_1395_p1(11 downto 0);
            end if;
        end if;
    end process;
    empty_101_reg_1422(2 downto 0) <= "110";
    add_ln380_cast_reg_1443(8) <= '0';
    wp_superpoints_addr_7_reg_1466(4 downto 0) <= "11111";
    zext_ln362_4_reg_1689(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln362_4_reg_1689_pp4_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln378_1_reg_1452, icmp_ln874_reg_1496, ap_enable_reg_pp1_iter2, ap_enable_reg_pp3_iter2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, icmp_ln325_fu_526_p2, ap_CS_fsm_state4, icmp_ln378_fu_598_p2, icmp_ln391_fu_727_p2, ap_CS_fsm_state11, ap_enable_reg_pp1_iter0, icmp_ln394_fu_759_p2, ap_enable_reg_pp2_iter0, icmp_ln410_fu_888_p2, ap_enable_reg_pp3_iter0, icmp_ln329_fu_1136_p2, ap_enable_reg_pp4_iter0, icmp_ln345_fu_1236_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter3, ap_CS_fsm_state10, icmp_ln874_4_fu_713_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_526_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln378_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln874_4_fu_713_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln874_reg_1496 = ap_const_lv1_1) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln378_1_reg_1452 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln391_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln394_fu_759_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln394_fu_759_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln410_fu_888_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln410_fu_888_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln329_fu_1136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln329_fu_1136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln345_fu_1236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln345_fu_1236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln329_1_fu_1130_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_406) + unsigned(ap_const_lv7_1));
    add_ln329_fu_1142_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_421_p4) + unsigned(ap_const_lv3_1));
    add_ln335_fu_1170_p2 <= std_logic_vector(unsigned(select_ln329_fu_1154_p3) + unsigned(ap_const_lv5_1));
    add_ln340_fu_1190_p2 <= std_logic_vector(unsigned(tmp_89_cast_fu_1183_p1) + unsigned(zext_ln340_fu_1187_p1));
    add_ln345_1_fu_1230_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_439) + unsigned(ap_const_lv7_1));
    add_ln345_fu_1242_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_3_phi_fu_454_p4) + unsigned(ap_const_lv3_1));
    add_ln351_1_fu_1322_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_461) + unsigned(ap_const_lv6_1));
    add_ln351_fu_1288_p2 <= std_logic_vector(unsigned(select_ln345_fu_1254_p3) + unsigned(ap_const_lv3_1));
    add_ln357_fu_1316_p2 <= std_logic_vector(unsigned(select_ln351_fu_1300_p3) + unsigned(ap_const_lv3_1));
    add_ln362_1_fu_1389_p2 <= std_logic_vector(unsigned(sub_ln362_fu_1380_p2) + unsigned(zext_ln362_3_fu_1386_p1));
    add_ln362_fu_1350_p2 <= std_logic_vector(unsigned(zext_ln351_fu_1343_p1) + unsigned(zext_ln362_fu_1347_p1));
    add_ln380_1_fu_665_p2 <= std_logic_vector(unsigned(add_ln380_cast_reg_1443) + unsigned(zext_ln874_fu_618_p1));
    add_ln380_2_fu_660_p2 <= std_logic_vector(unsigned(add_ln380_reg_1438) + unsigned(i_reg_307));
    add_ln380_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln380_fu_588_p2),9));
    add_ln380_fu_588_p2 <= std_logic_vector(unsigned(zext_ln380_1_fu_584_p1) + unsigned(zext_ln380_fu_574_p1));
    add_ln394_1_fu_753_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_318) + unsigned(ap_const_lv7_1));
    add_ln394_fu_765_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_4_phi_fu_333_p4) + unsigned(ap_const_lv3_1));
    add_ln400_fu_793_p2 <= std_logic_vector(unsigned(select_ln394_fu_777_p3) + unsigned(ap_const_lv5_1));
    add_ln405_1_fu_855_p2 <= std_logic_vector(unsigned(trunc_ln405_fu_849_p1) + unsigned(zext_ln405_3_fu_852_p1));
    add_ln405_2_fu_813_p2 <= std_logic_vector(unsigned(zext_ln405_2_fu_806_p1) + unsigned(zext_ln405_5_fu_810_p1));
    add_ln405_3_fu_872_p2 <= std_logic_vector(unsigned(tmp_103_cast_fu_861_p3) + unsigned(zext_ln405_4_fu_869_p1));
    add_ln405_fu_747_p2 <= std_logic_vector(unsigned(zext_ln405_1_fu_743_p1) + unsigned(zext_ln405_fu_733_p1));
    add_ln410_1_fu_882_p2 <= std_logic_vector(unsigned(indvar_flatten51_reg_351) + unsigned(ap_const_lv7_1));
    add_ln410_fu_894_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_5_phi_fu_366_p4) + unsigned(ap_const_lv3_1));
    add_ln416_1_fu_983_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_373) + unsigned(ap_const_lv6_1));
    add_ln416_fu_949_p2 <= std_logic_vector(unsigned(select_ln410_fu_906_p3) + unsigned(ap_const_lv3_1));
    add_ln422_fu_977_p2 <= std_logic_vector(unsigned(select_ln416_fu_961_p3) + unsigned(ap_const_lv3_1));
    add_ln427_1_fu_1025_p2 <= std_logic_vector(unsigned(zext_ln427_1_fu_1004_p1) + unsigned(zext_ln427_3_fu_1022_p1));
    add_ln427_2_fu_1057_p2 <= std_logic_vector(unsigned(zext_ln416_fu_1015_p1) + unsigned(zext_ln427_2_fu_1019_p1));
    add_ln427_3_fu_1099_p2 <= std_logic_vector(unsigned(sub_ln427_fu_1051_p2) + unsigned(zext_ln427_5_fu_1096_p1));
    add_ln427_4_fu_1110_p2 <= std_logic_vector(unsigned(sub_ln427_1_fu_1087_p2) + unsigned(zext_ln427_4_fu_1093_p1));
    add_ln427_fu_926_p2 <= std_logic_vector(unsigned(add_ln405_reg_1512) + unsigned(zext_ln427_fu_922_p1));
    add_ln435_fu_1120_p2 <= std_logic_vector(unsigned(trunc_ln322_reg_1407) + unsigned(ap_const_lv6_1));
    and_ln345_fu_1282_p2 <= (xor_ln345_fu_1270_p2 and icmp_ln357_fu_1276_p2);
    and_ln410_fu_943_p2 <= (xor_ln410_fu_931_p2 and icmp_ln422_fu_937_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(14);
    ap_CS_fsm_state27 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(19);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln394_fu_759_p2)
    begin
        if ((icmp_ln394_fu_759_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state17_assign_proc : process(icmp_ln410_fu_888_p2)
    begin
        if ((icmp_ln410_fu_888_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state23_assign_proc : process(icmp_ln329_fu_1136_p2)
    begin
        if ((icmp_ln329_fu_1136_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state28_assign_proc : process(icmp_ln345_fu_1236_p2)
    begin
        if ((icmp_ln345_fu_1236_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_3_phi_fu_454_p4_assign_proc : process(a_3_reg_450, icmp_ln345_reg_1658, ap_CS_fsm_pp4_stage0, select_ln345_1_reg_1662, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln345_reg_1658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_a_3_phi_fu_454_p4 <= select_ln345_1_reg_1662;
        else 
            ap_phi_mux_a_3_phi_fu_454_p4 <= a_3_reg_450;
        end if; 
    end process;


    ap_phi_mux_a_4_phi_fu_333_p4_assign_proc : process(a_4_reg_329, icmp_ln394_reg_1523, ap_CS_fsm_pp1_stage0, select_ln394_1_reg_1533, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_4_phi_fu_333_p4 <= select_ln394_1_reg_1533;
        else 
            ap_phi_mux_a_4_phi_fu_333_p4 <= a_4_reg_329;
        end if; 
    end process;


    ap_phi_mux_a_5_phi_fu_366_p4_assign_proc : process(a_5_reg_362, icmp_ln410_reg_1565, ap_CS_fsm_pp2_stage0, select_ln410_1_reg_1569, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln410_reg_1565 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_a_5_phi_fu_366_p4 <= select_ln410_1_reg_1569;
        else 
            ap_phi_mux_a_5_phi_fu_366_p4 <= a_5_reg_362;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_421_p4_assign_proc : process(a_reg_417, icmp_ln329_reg_1618, ap_CS_fsm_pp3_stage0, select_ln329_1_reg_1627, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln329_reg_1618 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_a_phi_fu_421_p4 <= select_ln329_1_reg_1627;
        else 
            ap_phi_mux_a_phi_fu_421_p4 <= a_reg_417;
        end if; 
    end process;


    ap_phi_mux_b_5_phi_fu_476_p4_assign_proc : process(b_5_reg_472, icmp_ln345_reg_1658, ap_CS_fsm_pp4_stage0, select_ln351_1_reg_1673, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln345_reg_1658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_b_5_phi_fu_476_p4 <= select_ln351_1_reg_1673;
        else 
            ap_phi_mux_b_5_phi_fu_476_p4 <= b_5_reg_472;
        end if; 
    end process;


    ap_phi_mux_b_7_phi_fu_388_p4_assign_proc : process(b_7_reg_384, icmp_ln410_reg_1565, ap_CS_fsm_pp2_stage0, select_ln416_1_reg_1586, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln410_reg_1565 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_b_7_phi_fu_388_p4 <= select_ln416_1_reg_1586;
        else 
            ap_phi_mux_b_7_phi_fu_388_p4 <= b_7_reg_384;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_558_p2 <= std_logic_vector(unsigned(tmp_s_fu_538_p3) - unsigned(tmp_88_cast_fu_554_p1));
    empty_101_fu_564_p2 <= std_logic_vector(unsigned(empty_100_fu_558_p2) + unsigned(ap_const_lv12_66));
    i_13_fu_612_p2 <= std_logic_vector(unsigned(i_reg_307) + unsigned(ap_const_lv8_1));
    icmp_ln325_fu_526_p2 <= "1" when (n_patches_read = ap_const_lv8_0) else "0";
    icmp_ln329_fu_1136_p2 <= "1" when (indvar_flatten_reg_406 = ap_const_lv7_50) else "0";
    icmp_ln335_fu_1148_p2 <= "1" when (b_reg_428 = ap_const_lv5_10) else "0";
    icmp_ln345_fu_1236_p2 <= "1" when (indvar_flatten21_reg_439 = ap_const_lv7_78) else "0";
    icmp_ln351_fu_1248_p2 <= "1" when (indvar_flatten7_reg_461 = ap_const_lv6_18) else "0";
    icmp_ln357_fu_1276_p2 <= "1" when (c_reg_483 = ap_const_lv3_6) else "0";
    icmp_ln378_1_fu_607_p2 <= "1" when (signed(zext_ln378_fu_603_p1) < signed(patches_parameters_load_reg_1432)) else "0";
    icmp_ln378_fu_598_p2 <= "1" when (signed(patches_parameters_load_reg_1432) > signed(ap_const_lv32_0)) else "0";
    icmp_ln391_fu_727_p2 <= "1" when (tmp_38_fu_718_p4 = ap_const_lv3_0) else "0";
    icmp_ln394_fu_759_p2 <= "1" when (indvar_flatten29_reg_318 = ap_const_lv7_50) else "0";
    icmp_ln400_fu_771_p2 <= "1" when (b_6_reg_340 = ap_const_lv5_10) else "0";
    icmp_ln410_fu_888_p2 <= "1" when (indvar_flatten51_reg_351 = ap_const_lv7_78) else "0";
    icmp_ln416_fu_900_p2 <= "1" when (indvar_flatten37_reg_373 = ap_const_lv6_18) else "0";
    icmp_ln422_fu_937_p2 <= "1" when (c_4_reg_395 = ap_const_lv3_6) else "0";
    icmp_ln874_4_fu_713_p2 <= "1" when (trunc_ln69_2_reg_1500 = reg_501) else "0";
    icmp_ln874_fu_704_p2 <= "1" when (trunc_ln69_reg_1486 = reg_501) else "0";

    n_patches_assign_proc : process(icmp_ln378_1_reg_1452, icmp_ln325_reg_1412, icmp_ln378_reg_1448, icmp_ln391_reg_1508, zext_ln435_fu_1125_p1, ap_CS_fsm_state21, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            n_patches <= ap_const_lv8_1;
        elsif (((icmp_ln391_reg_1508 = ap_const_lv1_1) and (icmp_ln378_reg_1448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln325_reg_1412 = ap_const_lv1_0) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1))) then 
            n_patches <= zext_ln435_fu_1125_p1;
        else 
            n_patches <= "XXXXXXXX";
        end if; 
    end process;


    n_patches_ap_vld_assign_proc : process(icmp_ln378_1_reg_1452, icmp_ln325_reg_1412, icmp_ln378_reg_1448, icmp_ln391_reg_1508, ap_CS_fsm_state21, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or ((icmp_ln391_reg_1508 = ap_const_lv1_1) and (icmp_ln378_reg_1448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln325_reg_1412 = ap_const_lv1_0) and (icmp_ln378_1_reg_1452 = ap_const_lv1_1)))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_fu_1215_p2 <= (shl_ln340_fu_1209_p2 or ap_const_lv8_1);
    or_ln351_fu_1294_p2 <= (icmp_ln351_fu_1248_p2 or and_ln345_fu_1282_p2);
    or_ln381_fu_693_p2 <= (tmp_96_cast_fu_686_p3 or ap_const_lv12_F);
    or_ln405_fu_838_p2 <= (shl_ln405_fu_832_p2 or ap_const_lv8_1);
    or_ln416_fu_955_p2 <= (icmp_ln416_fu_900_p2 or and_ln410_fu_943_p2);
    or_ln874_1_fu_645_p2 <= (tmp_29_fu_622_p3 or ap_const_lv13_1F);
    or_ln874_fu_630_p2 <= (tmp_29_fu_622_p3 or ap_const_lv13_1);
    p_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_101_reg_1422),64));
    p_shl6_cast_fu_1067_p3 <= (trunc_ln427_1_fu_1063_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_1079_p3 <= (trunc_ln427_2_fu_1075_p1 & ap_const_lv1_0);
    p_shl8_cast_fu_1035_p3 <= (trunc_ln427_fu_1031_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_1043_p3 <= (add_ln427_1_fu_1025_p2 & ap_const_lv1_0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln362_4_reg_1689_pp4_iter2_reg, ap_enable_reg_pp2_iter3, ap_enable_reg_pp4_iter3, ap_block_pp2_stage0, ap_block_pp4_stage0, p_cast_fu_570_p1, zext_ln427_7_fu_1116_p1)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            patches_parameters_address0 <= zext_ln362_4_reg_1689_pp4_iter2_reg(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_parameters_address0 <= zext_ln427_7_fu_1116_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_address0 <= p_cast_fu_570_p1(12 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_state2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= reg_513;

    patches_parameters_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp4_stage0_11001, icmp_ln410_reg_1565_pp2_iter2_reg, icmp_ln345_reg_1658_pp4_iter2_reg, ap_enable_reg_pp2_iter3, ap_enable_reg_pp4_iter3)
    begin
        if ((((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (icmp_ln345_reg_1658_pp4_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln410_reg_1565_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_enable_reg_pp1_iter3, ap_enable_reg_pp3_iter3, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln380_2_fu_677_p1, zext_ln381_fu_699_p1, zext_ln405_8_fu_878_p1, zext_ln340_1_fu_1226_p1)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            patches_superpoints_address0 <= zext_ln340_1_fu_1226_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_superpoints_address0 <= zext_ln405_8_fu_878_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            patches_superpoints_address0 <= zext_ln381_fu_699_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_superpoints_address0 <= zext_ln380_2_fu_677_p1(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state6, ap_block_pp1_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter3, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= grp_encodeCoordinates_fu_494_ap_return;

    patches_superpoints_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp3_stage0_11001, icmp_ln394_reg_1523_pp1_iter2_reg, icmp_ln329_reg_1618_pp3_iter2_reg, ap_enable_reg_pp1_iter3, ap_enable_reg_pp3_iter3)
    begin
        if ((((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (icmp_ln329_reg_1618_pp3_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln394_reg_1523_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln329_1_fu_1162_p3 <= 
        add_ln329_fu_1142_p2 when (icmp_ln335_fu_1148_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_421_p4;
    select_ln329_fu_1154_p3 <= 
        ap_const_lv5_0 when (icmp_ln335_fu_1148_p2(0) = '1') else 
        b_reg_428;
    select_ln345_1_fu_1262_p3 <= 
        add_ln345_fu_1242_p2 when (icmp_ln351_fu_1248_p2(0) = '1') else 
        ap_phi_mux_a_3_phi_fu_454_p4;
    select_ln345_fu_1254_p3 <= 
        ap_const_lv3_0 when (icmp_ln351_fu_1248_p2(0) = '1') else 
        ap_phi_mux_b_5_phi_fu_476_p4;
    select_ln351_1_fu_1308_p3 <= 
        add_ln351_fu_1288_p2 when (and_ln345_fu_1282_p2(0) = '1') else 
        select_ln345_fu_1254_p3;
    select_ln351_2_fu_1328_p3 <= 
        ap_const_lv6_1 when (icmp_ln351_fu_1248_p2(0) = '1') else 
        add_ln351_1_fu_1322_p2;
    select_ln351_fu_1300_p3 <= 
        ap_const_lv3_0 when (or_ln351_fu_1294_p2(0) = '1') else 
        c_reg_483;
    select_ln394_1_fu_785_p3 <= 
        add_ln394_fu_765_p2 when (icmp_ln400_fu_771_p2(0) = '1') else 
        ap_phi_mux_a_4_phi_fu_333_p4;
    select_ln394_fu_777_p3 <= 
        ap_const_lv5_0 when (icmp_ln400_fu_771_p2(0) = '1') else 
        b_6_reg_340;
    select_ln410_1_fu_914_p3 <= 
        add_ln410_fu_894_p2 when (icmp_ln416_fu_900_p2(0) = '1') else 
        ap_phi_mux_a_5_phi_fu_366_p4;
    select_ln410_fu_906_p3 <= 
        ap_const_lv3_0 when (icmp_ln416_fu_900_p2(0) = '1') else 
        ap_phi_mux_b_7_phi_fu_388_p4;
    select_ln416_1_fu_969_p3 <= 
        add_ln416_fu_949_p2 when (and_ln410_fu_943_p2(0) = '1') else 
        select_ln410_fu_906_p3;
    select_ln416_2_fu_989_p3 <= 
        ap_const_lv6_1 when (icmp_ln416_fu_900_p2(0) = '1') else 
        add_ln416_1_fu_983_p2;
    select_ln416_fu_961_p3 <= 
        ap_const_lv3_0 when (or_ln416_fu_955_p2(0) = '1') else 
        c_4_reg_395;
    shl_ln340_fu_1209_p2 <= std_logic_vector(shift_left(unsigned(add_ln340_fu_1190_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln405_fu_832_p2 <= std_logic_vector(shift_left(unsigned(add_ln405_2_fu_813_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    sub_fu_532_p2 <= std_logic_vector(unsigned(trunc_ln325_fu_522_p1) + unsigned(ap_const_lv5_1F));
    sub_ln362_fu_1380_p2 <= std_logic_vector(unsigned(zext_ln362_1_fu_1364_p1) - unsigned(zext_ln362_2_fu_1376_p1));
    sub_ln427_1_fu_1087_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1067_p3) - unsigned(p_shl7_cast_fu_1079_p3));
    sub_ln427_fu_1051_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1035_p3) - unsigned(p_shl9_cast_fu_1043_p3));
    tmp_103_cast_fu_861_p3 <= (add_ln405_1_fu_855_p2 & ap_const_lv4_0);
    tmp_27_fu_546_p3 <= (sub_fu_532_p2 & ap_const_lv3_0);
    tmp_28_fu_1176_p3 <= (select_ln329_1_reg_1627 & ap_const_lv4_0);
    tmp_29_fu_622_p3 <= (i_reg_307 & ap_const_lv5_0);
    tmp_30_fu_636_p3 <= (ap_const_lv51_0 & or_ln874_fu_630_p2);
    tmp_31_fu_651_p3 <= (ap_const_lv51_0 & or_ln874_1_fu_645_p2);
    tmp_32_fu_1336_p3 <= (select_ln345_1_reg_1662 & ap_const_lv2_0);
    tmp_33_fu_736_p3 <= (n_patches_read & ap_const_lv2_0);
    tmp_34_fu_1196_p3 <= (add_ln340_fu_1190_p2 & ap_const_lv1_0);
    tmp_35_fu_670_p3 <= (add_ln380_1_reg_1476 & ap_const_lv4_0);
    tmp_36_fu_1356_p3 <= (add_ln362_fu_1350_p2 & ap_const_lv3_0);
    tmp_37_fu_1368_p3 <= (add_ln362_fu_1350_p2 & ap_const_lv1_0);
    tmp_38_fu_718_p4 <= n_patches_read(7 downto 5);
    tmp_39_fu_799_p3 <= (select_ln394_1_reg_1533 & ap_const_lv4_0);
    tmp_40_fu_819_p3 <= (add_ln405_2_fu_813_p2 & ap_const_lv1_0);
    tmp_41_fu_997_p3 <= (select_ln410_1_reg_1569 & ap_const_lv2_0);
    tmp_42_fu_1008_p3 <= (add_ln427_reg_1575 & ap_const_lv2_0);
    tmp_88_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_546_p3),12));
    tmp_89_cast_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1176_p3),8));
    tmp_96_cast_fu_686_p3 <= (add_ln380_2_reg_1471 & ap_const_lv4_0);
    tmp_fu_577_p3 <= (sub_reg_1416 & ap_const_lv2_0);
    tmp_s_fu_538_p3 <= (sub_fu_532_p2 & ap_const_lv7_0);
    trunc_ln322_fu_518_p1 <= n_patches_read(6 - 1 downto 0);
    trunc_ln325_fu_522_p1 <= n_patches_read(5 - 1 downto 0);
    trunc_ln405_fu_849_p1 <= add_ln405_reg_1512(8 - 1 downto 0);
    trunc_ln427_1_fu_1063_p1 <= add_ln427_2_fu_1057_p2(9 - 1 downto 0);
    trunc_ln427_2_fu_1075_p1 <= add_ln427_2_fu_1057_p2(11 - 1 downto 0);
    trunc_ln427_fu_1031_p1 <= add_ln427_1_fu_1025_p2(4 - 1 downto 0);
    trunc_ln69_2_fu_709_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    trunc_ln69_fu_682_p1 <= patches_superpoints_q0(32 - 1 downto 0);

    wp_parameters_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, zext_ln362_4_fu_1395_p1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln427_6_fu_1105_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            wp_parameters_address0 <= zext_ln362_4_fu_1395_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wp_parameters_address0 <= zext_ln427_6_fu_1105_p1(7 - 1 downto 0);
        else 
            wp_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_address0_assign_proc : process(ap_CS_fsm_state5, wp_superpoints_addr_7_reg_1466, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_30_fu_636_p3, zext_ln405_7_fu_844_p1, zext_ln340_2_fu_1204_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            wp_superpoints_address0 <= zext_ln340_2_fu_1204_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            wp_superpoints_address0 <= zext_ln405_7_fu_844_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            wp_superpoints_address0 <= wp_superpoints_addr_7_reg_1466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wp_superpoints_address0 <= tmp_30_fu_636_p3(8 - 1 downto 0);
        else 
            wp_superpoints_address0 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln405_6_fu_827_p1, zext_ln340_3_fu_1221_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            wp_superpoints_address1 <= zext_ln340_3_fu_1221_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            wp_superpoints_address1 <= zext_ln405_6_fu_827_p1(8 - 1 downto 0);
        else 
            wp_superpoints_address1 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            wp_superpoints_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            wp_superpoints_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln345_fu_1270_p2 <= (icmp_ln351_fu_1248_p2 xor ap_const_lv1_1);
    xor_ln410_fu_931_p2 <= (icmp_ln416_fu_900_p2 xor ap_const_lv1_1);
    zext_ln340_1_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln340_reg_1638_pp3_iter2_reg),64));
    zext_ln340_2_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1196_p3),64));
    zext_ln340_3_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln340_fu_1215_p2),64));
    zext_ln340_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln329_reg_1622),8));
    zext_ln351_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1336_p3),6));
    zext_ln362_1_fu_1364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_1356_p3),12));
    zext_ln362_2_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1368_p3),12));
    zext_ln362_3_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln351_reg_1668),12));
    zext_ln362_4_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_1_fu_1389_p2),64));
    zext_ln362_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln351_1_reg_1673),6));
    zext_ln378_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_307),32));
    zext_ln380_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_577_p3),8));
    zext_ln380_2_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_670_p3),64));
    zext_ln380_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_reg_1416),8));
    zext_ln381_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln381_fu_693_p2),64));
    zext_ln405_1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_736_p3),11));
    zext_ln405_2_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_799_p3),8));
    zext_ln405_3_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_1_reg_1533_pp1_iter1_reg),8));
    zext_ln405_4_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_reg_1527_pp1_iter1_reg),12));
    zext_ln405_5_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_reg_1527),8));
    zext_ln405_6_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_819_p3),64));
    zext_ln405_7_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln405_fu_838_p2),64));
    zext_ln405_8_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln405_3_reg_1555),64));
    zext_ln405_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),11));
    zext_ln416_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1008_p3),63));
    zext_ln427_1_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_997_p3),6));
    zext_ln427_2_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_1_reg_1586),63));
    zext_ln427_3_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_1_reg_1586),6));
    zext_ln427_4_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_reg_1580),12));
    zext_ln427_5_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_reg_1580),7));
    zext_ln427_6_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln427_3_fu_1099_p2),64));
    zext_ln427_7_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln427_4_reg_1608_pp2_iter2_reg),64));
    zext_ln427_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln410_1_fu_914_p3),11));
    zext_ln435_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln435_fu_1120_p2),8));
    zext_ln874_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_307),9));
end behav;
