-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_getSolveNextPatchPairWhileCondition is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    repeat_original : IN STD_LOGIC_VECTOR (0 downto 0);
    white_space_height : IN STD_LOGIC_VECTOR (63 downto 0);
    previous_white_space_height : IN STD_LOGIC_VECTOR (63 downto 0);
    current_z_top_index : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MPSQ_getSolveNextPatchPairWhileCondition is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_FD050F1D : STD_LOGIC_VECTOR (31 downto 0) := "11111101000001010000111100011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_ln180_fu_68_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln180_reg_179 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_79_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1025_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1025_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_99_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln180_fu_106_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1031_2_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_1_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1031_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1031_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1025_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1031_1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1031_2_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp4_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1031_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1031_1_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= and_ln1031_1_fu_165_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln180_reg_179 <= sub_ln180_fu_68_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln1025_fu_93_p2 <= (xor_ln1025_fu_87_p2 and icmp_ln1025_fu_74_p2);
    and_ln1031_1_fu_165_p2 <= (xor_ln1031_fu_159_p2 and exp4_fu_112_p2);
    and_ln1031_fu_135_p2 <= (icmp_ln1031_2_fu_130_p2 and icmp_ln1031_1_fu_124_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, and_ln1031_1_fu_165_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= and_ln1031_1_fu_165_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exp4_fu_112_p2 <= "1" when (signed(p_read) > signed(current_z_top_index)) else "0";
    icmp_ln1025_fu_74_p2 <= "1" when (signed(white_space_height) < signed(ap_const_lv64_1)) else "0";
    icmp_ln1031_1_fu_124_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FD050F1D)) else "0";
    icmp_ln1031_2_fu_130_p2 <= "1" when (signed(white_space_height) < signed(ap_const_lv64_6)) else "0";
    icmp_ln1031_fu_118_p2 <= "1" when (signed(select_ln180_fu_106_p3) < signed(ap_const_lv64_6)) else "0";
    or_ln1031_1_fu_147_p2 <= (or_ln1031_fu_141_p2 or and_ln1025_fu_93_p2);
    or_ln1031_2_fu_153_p2 <= (repeat_original or or_ln1031_1_fu_147_p2);
    or_ln1031_fu_141_p2 <= (icmp_ln1031_fu_118_p2 or and_ln1031_fu_135_p2);
    select_ln180_fu_106_p3 <= 
        sub_ln180_reg_179 when (tmp_30_fu_99_p3(0) = '1') else 
        white_space_height;
    sub_ln180_fu_68_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(white_space_height));
    tmp_30_fu_99_p3 <= white_space_height(63 downto 63);
    tmp_fu_79_p3 <= previous_white_space_height(63 downto 63);
    xor_ln1025_fu_87_p2 <= (tmp_fu_79_p3 xor ap_const_lv1_1);
    xor_ln1031_fu_159_p2 <= (or_ln1031_2_fu_153_p2 xor ap_const_lv1_1);
end behav;
