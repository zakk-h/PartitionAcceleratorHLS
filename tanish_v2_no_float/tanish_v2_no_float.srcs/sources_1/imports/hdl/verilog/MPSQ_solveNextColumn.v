// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_solveNextColumn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n_patches_i,
        n_patches_o,
        n_patches_o_ap_vld,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_superpoints_q0,
        patches_superpoints_address1,
        patches_superpoints_ce1,
        patches_superpoints_q1,
        apexZ0,
        ppl,
        GDarrayDecoded_address0,
        GDarrayDecoded_ce0,
        GDarrayDecoded_q0,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0,
        patches_parameters_q0,
        patches_parameters_address1,
        patches_parameters_ce1,
        patches_parameters_we1,
        patches_parameters_d1,
        patches_parameters_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 68'd1;
parameter    ap_ST_fsm_state2 = 68'd2;
parameter    ap_ST_fsm_state3 = 68'd4;
parameter    ap_ST_fsm_state4 = 68'd8;
parameter    ap_ST_fsm_state5 = 68'd16;
parameter    ap_ST_fsm_state6 = 68'd32;
parameter    ap_ST_fsm_state7 = 68'd64;
parameter    ap_ST_fsm_state8 = 68'd128;
parameter    ap_ST_fsm_state9 = 68'd256;
parameter    ap_ST_fsm_state10 = 68'd512;
parameter    ap_ST_fsm_state11 = 68'd1024;
parameter    ap_ST_fsm_state12 = 68'd2048;
parameter    ap_ST_fsm_state13 = 68'd4096;
parameter    ap_ST_fsm_state14 = 68'd8192;
parameter    ap_ST_fsm_state15 = 68'd16384;
parameter    ap_ST_fsm_state16 = 68'd32768;
parameter    ap_ST_fsm_state17 = 68'd65536;
parameter    ap_ST_fsm_state18 = 68'd131072;
parameter    ap_ST_fsm_state19 = 68'd262144;
parameter    ap_ST_fsm_state20 = 68'd524288;
parameter    ap_ST_fsm_state21 = 68'd1048576;
parameter    ap_ST_fsm_state22 = 68'd2097152;
parameter    ap_ST_fsm_state23 = 68'd4194304;
parameter    ap_ST_fsm_state24 = 68'd8388608;
parameter    ap_ST_fsm_state25 = 68'd16777216;
parameter    ap_ST_fsm_state26 = 68'd33554432;
parameter    ap_ST_fsm_state27 = 68'd67108864;
parameter    ap_ST_fsm_state28 = 68'd134217728;
parameter    ap_ST_fsm_state29 = 68'd268435456;
parameter    ap_ST_fsm_state30 = 68'd536870912;
parameter    ap_ST_fsm_state31 = 68'd1073741824;
parameter    ap_ST_fsm_state32 = 68'd2147483648;
parameter    ap_ST_fsm_state33 = 68'd4294967296;
parameter    ap_ST_fsm_state34 = 68'd8589934592;
parameter    ap_ST_fsm_state35 = 68'd17179869184;
parameter    ap_ST_fsm_state36 = 68'd34359738368;
parameter    ap_ST_fsm_state37 = 68'd68719476736;
parameter    ap_ST_fsm_state38 = 68'd137438953472;
parameter    ap_ST_fsm_state39 = 68'd274877906944;
parameter    ap_ST_fsm_state40 = 68'd549755813888;
parameter    ap_ST_fsm_state41 = 68'd1099511627776;
parameter    ap_ST_fsm_state42 = 68'd2199023255552;
parameter    ap_ST_fsm_state43 = 68'd4398046511104;
parameter    ap_ST_fsm_state44 = 68'd8796093022208;
parameter    ap_ST_fsm_state45 = 68'd17592186044416;
parameter    ap_ST_fsm_state46 = 68'd35184372088832;
parameter    ap_ST_fsm_state47 = 68'd70368744177664;
parameter    ap_ST_fsm_state48 = 68'd140737488355328;
parameter    ap_ST_fsm_state49 = 68'd281474976710656;
parameter    ap_ST_fsm_state50 = 68'd562949953421312;
parameter    ap_ST_fsm_state51 = 68'd1125899906842624;
parameter    ap_ST_fsm_state52 = 68'd2251799813685248;
parameter    ap_ST_fsm_state53 = 68'd4503599627370496;
parameter    ap_ST_fsm_state54 = 68'd9007199254740992;
parameter    ap_ST_fsm_state55 = 68'd18014398509481984;
parameter    ap_ST_fsm_state56 = 68'd36028797018963968;
parameter    ap_ST_fsm_state57 = 68'd72057594037927936;
parameter    ap_ST_fsm_state58 = 68'd144115188075855872;
parameter    ap_ST_fsm_state59 = 68'd288230376151711744;
parameter    ap_ST_fsm_state60 = 68'd576460752303423488;
parameter    ap_ST_fsm_state61 = 68'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 68'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 68'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 68'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 68'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 68'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 68'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 68'd147573952589676412928;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] n_patches_i;
output  [7:0] n_patches_o;
output   n_patches_o_ap_vld;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
output  [11:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
input  [63:0] patches_superpoints_q0;
output  [11:0] patches_superpoints_address1;
output   patches_superpoints_ce1;
input  [63:0] patches_superpoints_q1;
input  [31:0] apexZ0;
input  [31:0] ppl;
output  [11:0] GDarrayDecoded_address0;
output   GDarrayDecoded_ce0;
input  [31:0] GDarrayDecoded_q0;
output  [11:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;
input  [31:0] patches_parameters_q0;
output  [11:0] patches_parameters_address1;
output   patches_parameters_ce1;
output   patches_parameters_we1;
output  [31:0] patches_parameters_d1;
input  [31:0] patches_parameters_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] n_patches_o;
reg n_patches_o_ap_vld;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [67:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln668_fu_242_p2;
reg   [0:0] icmp_ln668_reg_303;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln670_fu_254_p3;
wire    ap_CS_fsm_state65;
wire   [0:0] tmp_getSolveNextColumnWhileConditional_fu_232_ap_return;
reg   [0:0] tmp_reg_324;
wire    ap_CS_fsm_state67;
wire   [31:0] loopCounter_1_fu_262_p2;
reg   [31:0] loopCounter_1_reg_328;
wire   [0:0] icmp_ln688_fu_268_p2;
reg   [0:0] icmp_ln688_reg_333;
wire    ap_CS_fsm_state68;
wire    grp_solveNextPatchPair_fu_188_ap_start;
wire    grp_solveNextPatchPair_fu_188_ap_done;
wire    grp_solveNextPatchPair_fu_188_ap_idle;
wire    grp_solveNextPatchPair_fu_188_ap_ready;
wire   [7:0] grp_solveNextPatchPair_fu_188_n_patches_o;
wire    grp_solveNextPatchPair_fu_188_n_patches_o_ap_vld;
wire   [2:0] grp_solveNextPatchPair_fu_188_GDn_points_address0;
wire    grp_solveNextPatchPair_fu_188_GDn_points_ce0;
wire   [11:0] grp_solveNextPatchPair_fu_188_patches_superpoints_address0;
wire    grp_solveNextPatchPair_fu_188_patches_superpoints_ce0;
wire    grp_solveNextPatchPair_fu_188_patches_superpoints_we0;
wire   [63:0] grp_solveNextPatchPair_fu_188_patches_superpoints_d0;
wire   [11:0] grp_solveNextPatchPair_fu_188_patches_superpoints_address1;
wire    grp_solveNextPatchPair_fu_188_patches_superpoints_ce1;
wire   [11:0] grp_solveNextPatchPair_fu_188_GDarrayDecoded_address0;
wire    grp_solveNextPatchPair_fu_188_GDarrayDecoded_ce0;
wire   [11:0] grp_solveNextPatchPair_fu_188_patches_parameters_address0;
wire    grp_solveNextPatchPair_fu_188_patches_parameters_ce0;
wire    grp_solveNextPatchPair_fu_188_patches_parameters_we0;
wire   [31:0] grp_solveNextPatchPair_fu_188_patches_parameters_d0;
wire   [11:0] grp_solveNextPatchPair_fu_188_patches_parameters_address1;
wire    grp_solveNextPatchPair_fu_188_patches_parameters_ce1;
wire    grp_solveNextPatchPair_fu_188_patches_parameters_we1;
wire   [31:0] grp_solveNextPatchPair_fu_188_patches_parameters_d1;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_0;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_1;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_2;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_3;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_4;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_5;
wire   [31:0] grp_solveNextPatchPair_fu_188_ap_return_6;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_done;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_idle;
wire    grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_ready;
wire   [31:0] grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_return;
wire    tmp_getSolveNextColumnWhileConditional_fu_232_ap_ready;
reg   [31:0] z_top_max_V_16_ph_reg_76;
reg   [31:0] z_top_max_V_16_reg_88;
reg    ap_block_state68_on_subcall_done;
wire    ap_CS_fsm_state66;
reg   [31:0] c_corner_V_0_reg_99;
reg   [31:0] complementary_apexZ0_V_0_reg_110;
reg   [31:0] z_top_min_V_0_reg_122;
reg   [31:0] nPatchesInColumn_0_reg_134;
reg   [31:0] projectionOfCornerToBeam_V_0_reg_146;
reg   [31:0] saved_apexZ0_buf_0_reg_157;
reg   [31:0] loopCounter_reg_167;
reg   [31:0] ap_phi_mux_saved_apexZ0_buf_1_phi_fu_181_p4;
reg   [31:0] saved_apexZ0_buf_1_reg_178;
reg    grp_solveNextPatchPair_fu_188_ap_start_reg;
reg    grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start_reg;
reg   [67:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire   [0:0] icmp_ln878_fu_248_p2;
reg   [31:0] ap_return_preg;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 68'd1;
#0 grp_solveNextPatchPair_fu_188_ap_start_reg = 1'b0;
#0 grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

MPSQ_solveNextPatchPair grp_solveNextPatchPair_fu_188(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_solveNextPatchPair_fu_188_ap_start),
    .ap_done(grp_solveNextPatchPair_fu_188_ap_done),
    .ap_idle(grp_solveNextPatchPair_fu_188_ap_idle),
    .ap_ready(grp_solveNextPatchPair_fu_188_ap_ready),
    .n_patches_i(n_patches_i),
    .n_patches_o(grp_solveNextPatchPair_fu_188_n_patches_o),
    .n_patches_o_ap_vld(grp_solveNextPatchPair_fu_188_n_patches_o_ap_vld),
    .GDn_points_address0(grp_solveNextPatchPair_fu_188_GDn_points_address0),
    .GDn_points_ce0(grp_solveNextPatchPair_fu_188_GDn_points_ce0),
    .GDn_points_q0(GDn_points_q0),
    .patches_superpoints_address0(grp_solveNextPatchPair_fu_188_patches_superpoints_address0),
    .patches_superpoints_ce0(grp_solveNextPatchPair_fu_188_patches_superpoints_ce0),
    .patches_superpoints_we0(grp_solveNextPatchPair_fu_188_patches_superpoints_we0),
    .patches_superpoints_d0(grp_solveNextPatchPair_fu_188_patches_superpoints_d0),
    .patches_superpoints_q0(patches_superpoints_q0),
    .patches_superpoints_address1(grp_solveNextPatchPair_fu_188_patches_superpoints_address1),
    .patches_superpoints_ce1(grp_solveNextPatchPair_fu_188_patches_superpoints_ce1),
    .patches_superpoints_q1(patches_superpoints_q1),
    .apexZ0(apexZ0),
    .ppl(ppl),
    .p_read1(nPatchesInColumn_0_reg_134),
    .p_read4(z_top_min_V_0_reg_122),
    .z_top_max_read(z_top_max_V_16_reg_88),
    .p_read7(complementary_apexZ0_V_0_reg_110),
    .GDarrayDecoded_address0(grp_solveNextPatchPair_fu_188_GDarrayDecoded_address0),
    .GDarrayDecoded_ce0(grp_solveNextPatchPair_fu_188_GDarrayDecoded_ce0),
    .GDarrayDecoded_q0(GDarrayDecoded_q0),
    .patches_parameters_address0(grp_solveNextPatchPair_fu_188_patches_parameters_address0),
    .patches_parameters_ce0(grp_solveNextPatchPair_fu_188_patches_parameters_ce0),
    .patches_parameters_we0(grp_solveNextPatchPair_fu_188_patches_parameters_we0),
    .patches_parameters_d0(grp_solveNextPatchPair_fu_188_patches_parameters_d0),
    .patches_parameters_q0(patches_parameters_q0),
    .patches_parameters_address1(grp_solveNextPatchPair_fu_188_patches_parameters_address1),
    .patches_parameters_ce1(grp_solveNextPatchPair_fu_188_patches_parameters_ce1),
    .patches_parameters_we1(grp_solveNextPatchPair_fu_188_patches_parameters_we1),
    .patches_parameters_d1(grp_solveNextPatchPair_fu_188_patches_parameters_d1),
    .patches_parameters_q1(patches_parameters_q1),
    .ap_return_0(grp_solveNextPatchPair_fu_188_ap_return_0),
    .ap_return_1(grp_solveNextPatchPair_fu_188_ap_return_1),
    .ap_return_2(grp_solveNextPatchPair_fu_188_ap_return_2),
    .ap_return_3(grp_solveNextPatchPair_fu_188_ap_return_3),
    .ap_return_4(grp_solveNextPatchPair_fu_188_ap_return_4),
    .ap_return_5(grp_solveNextPatchPair_fu_188_ap_return_5),
    .ap_return_6(grp_solveNextPatchPair_fu_188_ap_return_6)
);

MPSQ_straightLineProjectorFromLayerIJtoK grp_straightLineProjectorFromLayerIJtoK_fu_216(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start),
    .ap_done(grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_done),
    .ap_idle(grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_idle),
    .ap_ready(grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_ready),
    .ap_ce(1'b1),
    .z_i(32'd4279967296),
    .z_j(apexZ0),
    .i(3'd0),
    .j(32'd1),
    .k(3'd5),
    .ap_return(grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_return)
);

MPSQ_getSolveNextColumnWhileConditional tmp_getSolveNextColumnWhileConditional_fu_232(
    .ap_ready(tmp_getSolveNextColumnWhileConditional_fu_232_ap_ready),
    .c_corner(c_corner_V_0_reg_99),
    .nPatchesInColumn(nPatchesInColumn_0_reg_134),
    .projectionOfCornerToBeam(projectionOfCornerToBeam_V_0_reg_146),
    .ap_return(tmp_getSolveNextColumnWhileConditional_fu_232_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & ((icmp_ln688_reg_333 == 1'd1) | (tmp_reg_324 == 1'd0)))) begin
            ap_return_preg <= ap_phi_mux_saved_apexZ0_buf_1_phi_fu_181_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_solveNextPatchPair_fu_188_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state67) & (tmp_getSolveNextColumnWhileConditional_fu_232_ap_return == 1'd1))) begin
            grp_solveNextPatchPair_fu_188_ap_start_reg <= 1'b1;
        end else if ((grp_solveNextPatchPair_fu_188_ap_ready == 1'b1)) begin
            grp_solveNextPatchPair_fu_188_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2) & (icmp_ln668_fu_242_p2 == 1'd0))) begin
            grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start_reg <= 1'b1;
        end else if ((grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_ready == 1'b1)) begin
            grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        c_corner_V_0_reg_99 <= 32'd4294967295;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        c_corner_V_0_reg_99 <= grp_solveNextPatchPair_fu_188_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        complementary_apexZ0_V_0_reg_110 <= 32'd0;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        complementary_apexZ0_V_0_reg_110 <= grp_solveNextPatchPair_fu_188_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        loopCounter_reg_167 <= 32'd0;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        loopCounter_reg_167 <= loopCounter_1_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        nPatchesInColumn_0_reg_134 <= 32'd0;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        nPatchesInColumn_0_reg_134 <= grp_solveNextPatchPair_fu_188_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        projectionOfCornerToBeam_V_0_reg_146 <= 32'd0;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        projectionOfCornerToBeam_V_0_reg_146 <= grp_solveNextPatchPair_fu_188_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        saved_apexZ0_buf_0_reg_157 <= apexZ0;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        saved_apexZ0_buf_0_reg_157 <= grp_solveNextPatchPair_fu_188_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (tmp_getSolveNextColumnWhileConditional_fu_232_ap_return == 1'd0))) begin
        saved_apexZ0_buf_1_reg_178 <= saved_apexZ0_buf_0_reg_157;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd1) & (tmp_reg_324 == 1'd1))) begin
        saved_apexZ0_buf_1_reg_178 <= grp_solveNextPatchPair_fu_188_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        z_top_max_V_16_ph_reg_76 <= select_ln670_fu_254_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln668_reg_303 == 1'd1))) begin
        z_top_max_V_16_ph_reg_76 <= 32'd50000000;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        z_top_max_V_16_reg_88 <= z_top_max_V_16_ph_reg_76;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        z_top_max_V_16_reg_88 <= grp_solveNextPatchPair_fu_188_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        z_top_min_V_0_reg_122 <= 32'd4244967296;
    end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
        z_top_min_V_0_reg_122 <= grp_solveNextPatchPair_fu_188_ap_return_6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln668_reg_303 <= icmp_ln668_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (tmp_getSolveNextColumnWhileConditional_fu_232_ap_return == 1'd1))) begin
        icmp_ln688_reg_333 <= icmp_ln688_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        loopCounter_1_reg_328 <= loopCounter_1_fu_262_p2;
        tmp_reg_324 <= tmp_getSolveNextColumnWhileConditional_fu_232_ap_return;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & ((icmp_ln688_reg_333 == 1'd1) | (tmp_reg_324 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd1) & (tmp_reg_324 == 1'd1))) begin
        ap_phi_mux_saved_apexZ0_buf_1_phi_fu_181_p4 = grp_solveNextPatchPair_fu_188_ap_return_0;
    end else begin
        ap_phi_mux_saved_apexZ0_buf_1_phi_fu_181_p4 = saved_apexZ0_buf_1_reg_178;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & ((icmp_ln688_reg_333 == 1'd1) | (tmp_reg_324 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & ((icmp_ln688_reg_333 == 1'd1) | (tmp_reg_324 == 1'd0)))) begin
        ap_return = ap_phi_mux_saved_apexZ0_buf_1_phi_fu_181_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) & (grp_solveNextPatchPair_fu_188_n_patches_o_ap_vld == 1'b1) & (tmp_reg_324 == 1'd1))) begin
        n_patches_o = grp_solveNextPatchPair_fu_188_n_patches_o;
    end else begin
        n_patches_o = n_patches_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) & (tmp_reg_324 == 1'd1))) begin
        n_patches_o_ap_vld = grp_solveNextPatchPair_fu_188_n_patches_o_ap_vld;
    end else begin
        n_patches_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln668_reg_303 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & ((icmp_ln688_reg_333 == 1'd1) | (tmp_reg_324 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln688_reg_333 == 1'd0) & (tmp_reg_324 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDarrayDecoded_address0 = grp_solveNextPatchPair_fu_188_GDarrayDecoded_address0;

assign GDarrayDecoded_ce0 = grp_solveNextPatchPair_fu_188_GDarrayDecoded_ce0;

assign GDn_points_address0 = grp_solveNextPatchPair_fu_188_GDn_points_address0;

assign GDn_points_ce0 = grp_solveNextPatchPair_fu_188_GDn_points_ce0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state68_on_subcall_done = ((grp_solveNextPatchPair_fu_188_ap_done == 1'b0) & (tmp_reg_324 == 1'd1));
end

assign grp_solveNextPatchPair_fu_188_ap_start = grp_solveNextPatchPair_fu_188_ap_start_reg;

assign grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start = grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_start_reg;

assign icmp_ln668_fu_242_p2 = ((n_patches_i == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln688_fu_268_p2 = (($signed(loopCounter_reg_167) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_248_p2 = (($signed(grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_return) > $signed(32'd50000000)) ? 1'b1 : 1'b0);

assign loopCounter_1_fu_262_p2 = (loopCounter_reg_167 + 32'd1);

assign patches_parameters_address0 = grp_solveNextPatchPair_fu_188_patches_parameters_address0;

assign patches_parameters_address1 = grp_solveNextPatchPair_fu_188_patches_parameters_address1;

assign patches_parameters_ce0 = grp_solveNextPatchPair_fu_188_patches_parameters_ce0;

assign patches_parameters_ce1 = grp_solveNextPatchPair_fu_188_patches_parameters_ce1;

assign patches_parameters_d0 = grp_solveNextPatchPair_fu_188_patches_parameters_d0;

assign patches_parameters_d1 = grp_solveNextPatchPair_fu_188_patches_parameters_d1;

assign patches_parameters_we0 = grp_solveNextPatchPair_fu_188_patches_parameters_we0;

assign patches_parameters_we1 = grp_solveNextPatchPair_fu_188_patches_parameters_we1;

assign patches_superpoints_address0 = grp_solveNextPatchPair_fu_188_patches_superpoints_address0;

assign patches_superpoints_address1 = grp_solveNextPatchPair_fu_188_patches_superpoints_address1;

assign patches_superpoints_ce0 = grp_solveNextPatchPair_fu_188_patches_superpoints_ce0;

assign patches_superpoints_ce1 = grp_solveNextPatchPair_fu_188_patches_superpoints_ce1;

assign patches_superpoints_d0 = grp_solveNextPatchPair_fu_188_patches_superpoints_d0;

assign patches_superpoints_we0 = grp_solveNextPatchPair_fu_188_patches_superpoints_we0;

assign select_ln670_fu_254_p3 = ((icmp_ln878_fu_248_p2[0:0] == 1'b1) ? 32'd50000000 : grp_straightLineProjectorFromLayerIJtoK_fu_216_ap_return);

endmodule //MPSQ_solveNextColumn
