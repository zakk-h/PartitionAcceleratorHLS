// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_mSP_findLRBounds (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i,
        row_list_address0,
        row_list_ce0,
        row_list_q0,
        row_list_size,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] i;
output  [7:0] row_list_address0;
output   row_list_ce0;
input  [31:0] row_list_q0;
input  [31:0] row_list_size;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_list_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] trapezoid_edges_V_address0;
reg    trapezoid_edges_V_ce0;
wire   [25:0] trapezoid_edges_V_q0;
reg   [31:0] j_reg_76;
reg   [31:0] j_reg_76_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] left_bound_write_assign_reg_88;
reg   [31:0] right_bound_write_assign_reg_100;
reg   [63:0] rbVal_reg_112;
reg   [63:0] lbVal_reg_124;
wire    ap_CS_fsm_state2;
wire   [32:0] rhs_fu_141_p1;
reg   [32:0] rhs_reg_292;
wire   [31:0] add_ln1622_fu_145_p2;
reg   [31:0] add_ln1622_reg_298;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln1622_fu_151_p2;
reg   [0:0] icmp_ln1622_reg_303;
reg   [0:0] icmp_ln1622_reg_303_pp0_iter1_reg;
reg   [31:0] lhs_reg_312;
wire   [31:0] select_ln1624_fu_201_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] lbVal_2_fu_209_p3;
wire   [31:0] select_ln1630_fu_254_p3;
wire   [63:0] rbVal_2_fu_262_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter1_state4;
reg   [31:0] ap_phi_mux_j_phi_fu_80_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom1_fu_136_p1;
wire   [63:0] trunc_ln1626_cast_fu_156_p1;
wire  signed [32:0] sext_ln215_fu_161_p1;
wire   [32:0] ret_fu_164_p2;
wire   [0:0] tmp_fu_175_p3;
wire   [32:0] sub_ln180_fu_169_p2;
wire   [32:0] lbVal_1_fu_183_p3;
wire  signed [63:0] sext_ln1618_fu_191_p1;
wire   [0:0] icmp_ln1624_fu_195_p2;
wire   [32:0] ret_25_fu_217_p2;
wire   [0:0] tmp_45_fu_228_p3;
wire   [32:0] sub_ln180_1_fu_222_p2;
wire   [32:0] rbVal_1_fu_236_p3;
wire  signed [63:0] sext_ln1630_fu_244_p1;
wire   [0:0] icmp_ln1630_fu_248_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

MPSQ_mSP_findLRBounds_trapezoid_edges_V #(
    .DataWidth( 26 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
trapezoid_edges_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(trapezoid_edges_V_address0),
    .ce0(trapezoid_edges_V_ce0),
    .q0(trapezoid_edges_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1622_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_76 <= add_ln1622_reg_298;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_76 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1622_reg_303_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lbVal_reg_124 <= lbVal_2_fu_209_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        lbVal_reg_124 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1622_reg_303_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        left_bound_write_assign_reg_88 <= select_ln1624_fu_201_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        left_bound_write_assign_reg_88 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1622_reg_303_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rbVal_reg_112 <= rbVal_2_fu_262_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rbVal_reg_112 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1622_reg_303_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        right_bound_write_assign_reg_100 <= select_ln1630_fu_254_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        right_bound_write_assign_reg_100 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1622_reg_298 <= add_ln1622_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1622_reg_303 <= icmp_ln1622_fu_151_p2;
        icmp_ln1622_reg_303_pp0_iter1_reg <= icmp_ln1622_reg_303;
        j_reg_76_pp0_iter1_reg <= j_reg_76;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1622_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_reg_312 <= row_list_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rhs_reg_292[25 : 0] <= rhs_fu_141_p1[25 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1622_fu_151_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1622_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_80_p4 = add_ln1622_reg_298;
    end else begin
        ap_phi_mux_j_phi_fu_80_p4 = j_reg_76;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_list_ce0 = 1'b1;
    end else begin
        row_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trapezoid_edges_V_ce0 = 1'b1;
    end else begin
        trapezoid_edges_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1622_fu_145_p2 = (ap_phi_mux_j_phi_fu_80_p4 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = left_bound_write_assign_reg_88;

assign ap_return_1 = right_bound_write_assign_reg_100;

assign icmp_ln1622_fu_151_p2 = ((ap_phi_mux_j_phi_fu_80_p4 == row_list_size) ? 1'b1 : 1'b0);

assign icmp_ln1624_fu_195_p2 = (($signed(sext_ln1618_fu_191_p1) < $signed(lbVal_reg_124)) ? 1'b1 : 1'b0);

assign icmp_ln1630_fu_248_p2 = (($signed(sext_ln1630_fu_244_p1) < $signed(rbVal_reg_112)) ? 1'b1 : 1'b0);

assign idxprom1_fu_136_p1 = i;

assign lbVal_1_fu_183_p3 = ((tmp_fu_175_p3[0:0] == 1'b1) ? sub_ln180_fu_169_p2 : ret_fu_164_p2);

assign lbVal_2_fu_209_p3 = ((icmp_ln1624_fu_195_p2[0:0] == 1'b1) ? sext_ln1618_fu_191_p1 : lbVal_reg_124);

assign rbVal_1_fu_236_p3 = ((tmp_45_fu_228_p3[0:0] == 1'b1) ? sub_ln180_1_fu_222_p2 : ret_25_fu_217_p2);

assign rbVal_2_fu_262_p3 = ((icmp_ln1630_fu_248_p2[0:0] == 1'b1) ? sext_ln1630_fu_244_p1 : rbVal_reg_112);

assign ret_25_fu_217_p2 = ($signed(sext_ln215_fu_161_p1) - $signed(rhs_reg_292));

assign ret_fu_164_p2 = ($signed(sext_ln215_fu_161_p1) + $signed(rhs_reg_292));

assign rhs_fu_141_p1 = trapezoid_edges_V_q0;

assign row_list_address0 = trunc_ln1626_cast_fu_156_p1;

assign select_ln1624_fu_201_p3 = ((icmp_ln1624_fu_195_p2[0:0] == 1'b1) ? j_reg_76_pp0_iter1_reg : left_bound_write_assign_reg_88);

assign select_ln1630_fu_254_p3 = ((icmp_ln1630_fu_248_p2[0:0] == 1'b1) ? j_reg_76_pp0_iter1_reg : right_bound_write_assign_reg_100);

assign sext_ln1618_fu_191_p1 = $signed(lbVal_1_fu_183_p3);

assign sext_ln1630_fu_244_p1 = $signed(rbVal_1_fu_236_p3);

assign sext_ln215_fu_161_p1 = $signed(lhs_reg_312);

assign sub_ln180_1_fu_222_p2 = (33'd0 - ret_25_fu_217_p2);

assign sub_ln180_fu_169_p2 = (33'd0 - ret_fu_164_p2);

assign tmp_45_fu_228_p3 = ret_25_fu_217_p2[32'd32];

assign tmp_fu_175_p3 = ret_fu_164_p2[32'd32];

assign trapezoid_edges_V_address0 = idxprom1_fu_136_p1;

assign trunc_ln1626_cast_fu_156_p1 = ap_phi_mux_j_phi_fu_80_p4;

always @ (posedge ap_clk) begin
    rhs_reg_292[32:26] <= 7'b0000000;
end

endmodule //MPSQ_mSP_findLRBounds
