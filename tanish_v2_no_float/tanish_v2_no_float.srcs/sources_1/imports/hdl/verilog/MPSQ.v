// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MPSQ_MPSQ,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=162541,HLS_SYN_LUT=154034,HLS_VERSION=2020_2}" *)

module MPSQ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stop,
        ppl,
        leftRight,
        n_patches_i,
        n_patches_o,
        n_patches_o_ap_vld,
        GDarray_address0,
        GDarray_ce0,
        GDarray_q0,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_superpoints_q0,
        patches_superpoints_address1,
        patches_superpoints_ce1,
        patches_superpoints_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp0_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] stop;
input  [31:0] ppl;
input   leftRight;
input  [7:0] n_patches_i;
output  [7:0] n_patches_o;
output   n_patches_o_ap_vld;
output  [10:0] GDarray_address0;
output   GDarray_ce0;
input  [63:0] GDarray_q0;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
output  [11:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
input  [63:0] patches_superpoints_q0;
output  [11:0] patches_superpoints_address1;
output   patches_superpoints_ce1;
input  [63:0] patches_superpoints_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] n_patches_o;
reg GDarray_ce0;
reg[2:0] GDn_points_address0;
reg GDn_points_ce0;
reg[11:0] patches_superpoints_address0;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg[63:0] patches_superpoints_d0;
reg patches_superpoints_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] b_reg_183;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln618_fu_244_p2;
reg   [2:0] add_ln618_reg_422;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln618_fu_250_p2;
wire   [12:0] zext_ln618_1_fu_269_p1;
reg   [12:0] zext_ln618_1_reg_435;
wire    ap_CS_fsm_state4;
reg   [31:0] GDn_points_load_reg_440;
wire   [13:0] shl_ln_fu_273_p3;
reg   [13:0] shl_ln_reg_445;
wire   [11:0] add_ln624_fu_281_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln624_fu_291_p2;
reg   [0:0] icmp_ln624_reg_455;
wire   [12:0] add_ln629_1_fu_300_p2;
reg   [12:0] add_ln629_1_reg_459;
wire   [10:0] trunc_ln629_fu_305_p1;
reg   [10:0] trunc_ln629_reg_464;
wire   [0:0] icmp_ln886_fu_399_p2;
reg   [0:0] icmp_ln886_reg_474;
wire    ap_CS_fsm_state8;
wire   [31:0] loopCounter_3_fu_405_p2;
reg   [31:0] loopCounter_3_reg_478;
wire   [0:0] icmp_ln647_fu_411_p2;
reg   [0:0] icmp_ln647_reg_483;
wire   [31:0] grp_solveNextColumn_fu_217_ap_return;
wire    ap_CS_fsm_state9;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg   [11:0] patches_parameters_V_address0;
reg    patches_parameters_V_ce0;
reg    patches_parameters_V_we0;
reg   [31:0] patches_parameters_V_d0;
wire   [31:0] patches_parameters_V_q0;
reg    patches_parameters_V_ce1;
reg    patches_parameters_V_we1;
wire   [31:0] patches_parameters_V_q1;
reg   [11:0] GDarrayDecoded_V_address0;
reg    GDarrayDecoded_V_ce0;
reg    GDarrayDecoded_V_we0;
wire   [31:0] GDarrayDecoded_V_d0;
wire   [31:0] GDarrayDecoded_V_q0;
wire   [11:0] GDarrayDecoded_V_address1;
reg    GDarrayDecoded_V_ce1;
reg    GDarrayDecoded_V_we1;
wire   [31:0] GDarrayDecoded_V_d1;
wire    grp_solveNextColumn_fu_217_ap_start;
wire    grp_solveNextColumn_fu_217_ap_done;
wire    grp_solveNextColumn_fu_217_ap_idle;
wire    grp_solveNextColumn_fu_217_ap_ready;
wire   [7:0] grp_solveNextColumn_fu_217_n_patches_o;
wire    grp_solveNextColumn_fu_217_n_patches_o_ap_vld;
wire   [2:0] grp_solveNextColumn_fu_217_GDn_points_address0;
wire    grp_solveNextColumn_fu_217_GDn_points_ce0;
wire   [11:0] grp_solveNextColumn_fu_217_patches_superpoints_address0;
wire    grp_solveNextColumn_fu_217_patches_superpoints_ce0;
wire    grp_solveNextColumn_fu_217_patches_superpoints_we0;
wire   [63:0] grp_solveNextColumn_fu_217_patches_superpoints_d0;
wire   [11:0] grp_solveNextColumn_fu_217_patches_superpoints_address1;
wire    grp_solveNextColumn_fu_217_patches_superpoints_ce1;
wire   [11:0] grp_solveNextColumn_fu_217_GDarrayDecoded_address0;
wire    grp_solveNextColumn_fu_217_GDarrayDecoded_ce0;
wire   [11:0] grp_solveNextColumn_fu_217_patches_parameters_address0;
wire    grp_solveNextColumn_fu_217_patches_parameters_ce0;
wire    grp_solveNextColumn_fu_217_patches_parameters_we0;
wire   [31:0] grp_solveNextColumn_fu_217_patches_parameters_d0;
wire   [11:0] grp_solveNextColumn_fu_217_patches_parameters_address1;
wire    grp_solveNextColumn_fu_217_patches_parameters_ce1;
wire    grp_solveNextColumn_fu_217_patches_parameters_we1;
wire   [31:0] grp_solveNextColumn_fu_217_patches_parameters_d1;
wire    grp_initializeArrays_fu_236_ap_start;
wire    grp_initializeArrays_fu_236_ap_done;
wire    grp_initializeArrays_fu_236_ap_idle;
wire    grp_initializeArrays_fu_236_ap_ready;
wire   [11:0] grp_initializeArrays_fu_236_patches_superpoints_address0;
wire    grp_initializeArrays_fu_236_patches_superpoints_ce0;
wire    grp_initializeArrays_fu_236_patches_superpoints_we0;
wire   [63:0] grp_initializeArrays_fu_236_patches_superpoints_d0;
wire   [11:0] grp_initializeArrays_fu_236_patches_parameters_V_address0;
wire    grp_initializeArrays_fu_236_patches_parameters_V_ce0;
wire    grp_initializeArrays_fu_236_patches_parameters_V_we0;
wire   [31:0] grp_initializeArrays_fu_236_patches_parameters_V_d0;
reg   [2:0] a_reg_171;
wire    ap_CS_fsm_state7;
reg   [31:0] apexZ0_V_2_reg_194;
reg    ap_block_state9_on_subcall_done;
reg   [31:0] loopCounter_reg_206;
reg    grp_solveNextColumn_fu_217_ap_start_reg;
reg    grp_initializeArrays_fu_236_ap_start_reg;
wire   [63:0] zext_ln618_fu_256_p1;
wire   [63:0] zext_ln629_1_fu_348_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln629_2_fu_360_p1;
wire   [63:0] zext_ln630_fu_378_p1;
wire   [10:0] tmp_fu_261_p3;
wire   [31:0] b_cast_fu_287_p1;
wire   [12:0] zext_ln629_fu_296_p1;
wire   [10:0] trunc_ln629_1_fu_309_p1;
wire   [13:0] shl_ln629_1_fu_313_p3;
wire   [13:0] add_ln629_fu_321_p2;
wire   [2:0] lshr_ln_fu_326_p4;
wire   [7:0] trunc_ln629_2_fu_336_p1;
wire   [10:0] tmp_s_fu_340_p3;
wire   [13:0] tmp_68_fu_353_p3;
wire   [11:0] tmp_165_cast_fu_365_p3;
wire   [11:0] or_ln630_fu_372_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_solveNextColumn_fu_217_ap_start_reg = 1'b0;
#0 grp_initializeArrays_fu_236_ap_start_reg = 1'b0;
end

MPSQ_patches_parameters_V #(
    .DataWidth( 32 ),
    .AddressRange( 3840 ),
    .AddressWidth( 12 ))
patches_parameters_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(patches_parameters_V_address0),
    .ce0(patches_parameters_V_ce0),
    .we0(patches_parameters_V_we0),
    .d0(patches_parameters_V_d0),
    .q0(patches_parameters_V_q0),
    .address1(grp_solveNextColumn_fu_217_patches_parameters_address1),
    .ce1(patches_parameters_V_ce1),
    .we1(patches_parameters_V_we1),
    .d1(grp_solveNextColumn_fu_217_patches_parameters_d1),
    .q1(patches_parameters_V_q1)
);

MPSQ_GDarrayDecoded_V #(
    .DataWidth( 32 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
GDarrayDecoded_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GDarrayDecoded_V_address0),
    .ce0(GDarrayDecoded_V_ce0),
    .we0(GDarrayDecoded_V_we0),
    .d0(GDarrayDecoded_V_d0),
    .q0(GDarrayDecoded_V_q0),
    .address1(GDarrayDecoded_V_address1),
    .ce1(GDarrayDecoded_V_ce1),
    .we1(GDarrayDecoded_V_we1),
    .d1(GDarrayDecoded_V_d1)
);

MPSQ_solveNextColumn grp_solveNextColumn_fu_217(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_solveNextColumn_fu_217_ap_start),
    .ap_done(grp_solveNextColumn_fu_217_ap_done),
    .ap_idle(grp_solveNextColumn_fu_217_ap_idle),
    .ap_ready(grp_solveNextColumn_fu_217_ap_ready),
    .n_patches_i(n_patches_i),
    .n_patches_o(grp_solveNextColumn_fu_217_n_patches_o),
    .n_patches_o_ap_vld(grp_solveNextColumn_fu_217_n_patches_o_ap_vld),
    .GDn_points_address0(grp_solveNextColumn_fu_217_GDn_points_address0),
    .GDn_points_ce0(grp_solveNextColumn_fu_217_GDn_points_ce0),
    .GDn_points_q0(GDn_points_q0),
    .patches_superpoints_address0(grp_solveNextColumn_fu_217_patches_superpoints_address0),
    .patches_superpoints_ce0(grp_solveNextColumn_fu_217_patches_superpoints_ce0),
    .patches_superpoints_we0(grp_solveNextColumn_fu_217_patches_superpoints_we0),
    .patches_superpoints_d0(grp_solveNextColumn_fu_217_patches_superpoints_d0),
    .patches_superpoints_q0(patches_superpoints_q0),
    .patches_superpoints_address1(grp_solveNextColumn_fu_217_patches_superpoints_address1),
    .patches_superpoints_ce1(grp_solveNextColumn_fu_217_patches_superpoints_ce1),
    .patches_superpoints_q1(patches_superpoints_q1),
    .apexZ0(apexZ0_V_2_reg_194),
    .ppl(ppl),
    .GDarrayDecoded_address0(grp_solveNextColumn_fu_217_GDarrayDecoded_address0),
    .GDarrayDecoded_ce0(grp_solveNextColumn_fu_217_GDarrayDecoded_ce0),
    .GDarrayDecoded_q0(GDarrayDecoded_V_q0),
    .patches_parameters_address0(grp_solveNextColumn_fu_217_patches_parameters_address0),
    .patches_parameters_ce0(grp_solveNextColumn_fu_217_patches_parameters_ce0),
    .patches_parameters_we0(grp_solveNextColumn_fu_217_patches_parameters_we0),
    .patches_parameters_d0(grp_solveNextColumn_fu_217_patches_parameters_d0),
    .patches_parameters_q0(patches_parameters_V_q0),
    .patches_parameters_address1(grp_solveNextColumn_fu_217_patches_parameters_address1),
    .patches_parameters_ce1(grp_solveNextColumn_fu_217_patches_parameters_ce1),
    .patches_parameters_we1(grp_solveNextColumn_fu_217_patches_parameters_we1),
    .patches_parameters_d1(grp_solveNextColumn_fu_217_patches_parameters_d1),
    .patches_parameters_q1(patches_parameters_V_q1),
    .ap_return(grp_solveNextColumn_fu_217_ap_return)
);

MPSQ_initializeArrays grp_initializeArrays_fu_236(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_initializeArrays_fu_236_ap_start),
    .ap_done(grp_initializeArrays_fu_236_ap_done),
    .ap_idle(grp_initializeArrays_fu_236_ap_idle),
    .ap_ready(grp_initializeArrays_fu_236_ap_ready),
    .patches_superpoints_address0(grp_initializeArrays_fu_236_patches_superpoints_address0),
    .patches_superpoints_ce0(grp_initializeArrays_fu_236_patches_superpoints_ce0),
    .patches_superpoints_we0(grp_initializeArrays_fu_236_patches_superpoints_we0),
    .patches_superpoints_d0(grp_initializeArrays_fu_236_patches_superpoints_d0),
    .patches_parameters_V_address0(grp_initializeArrays_fu_236_patches_parameters_V_address0),
    .patches_parameters_V_ce0(grp_initializeArrays_fu_236_patches_parameters_V_ce0),
    .patches_parameters_V_we0(grp_initializeArrays_fu_236_patches_parameters_V_we0),
    .patches_parameters_V_d0(grp_initializeArrays_fu_236_patches_parameters_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_initializeArrays_fu_236_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_initializeArrays_fu_236_ap_start_reg <= 1'b1;
        end else if ((grp_initializeArrays_fu_236_ap_ready == 1'b1)) begin
            grp_initializeArrays_fu_236_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_solveNextColumn_fu_217_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln886_fu_399_p2 == 1'd1))) begin
            grp_solveNextColumn_fu_217_ap_start_reg <= 1'b1;
        end else if ((grp_solveNextColumn_fu_217_ap_ready == 1'b1)) begin
            grp_solveNextColumn_fu_217_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_initializeArrays_fu_236_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_171 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_reg_171 <= add_ln618_reg_422;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln618_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        apexZ0_V_2_reg_194 <= 32'd22000100;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln647_reg_483 == 1'd0) & (icmp_ln886_reg_474 == 1'd1) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        apexZ0_V_2_reg_194 <= grp_solveNextColumn_fu_217_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_reg_183 <= 12'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln624_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_reg_183 <= add_ln624_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln618_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        loopCounter_reg_206 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln647_reg_483 == 1'd0) & (icmp_ln886_reg_474 == 1'd1) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        loopCounter_reg_206 <= loopCounter_3_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        GDn_points_load_reg_440 <= GDn_points_q0;
        shl_ln_reg_445[13 : 11] <= shl_ln_fu_273_p3[13 : 11];
        zext_ln618_1_reg_435[10 : 8] <= zext_ln618_1_fu_269_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln618_reg_422 <= add_ln618_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln624_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln629_1_reg_459 <= add_ln629_1_fu_300_p2;
        trunc_ln629_reg_464 <= trunc_ln629_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln624_reg_455 <= icmp_ln624_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln886_fu_399_p2 == 1'd1))) begin
        icmp_ln647_reg_483 <= icmp_ln647_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln886_reg_474 <= icmp_ln886_fu_399_p2;
        loopCounter_3_reg_478 <= loopCounter_3_fu_405_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        GDarrayDecoded_V_address0 = zext_ln630_fu_378_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        GDarrayDecoded_V_address0 = grp_solveNextColumn_fu_217_GDarrayDecoded_address0;
    end else begin
        GDarrayDecoded_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        GDarrayDecoded_V_ce0 = grp_solveNextColumn_fu_217_GDarrayDecoded_ce0;
    end else begin
        GDarrayDecoded_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_ce1 = 1'b1;
    end else begin
        GDarrayDecoded_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln624_reg_455 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_we0 = 1'b1;
    end else begin
        GDarrayDecoded_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln624_reg_455 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarrayDecoded_V_we1 = 1'b1;
    end else begin
        GDarrayDecoded_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GDarray_ce0 = 1'b1;
    end else begin
        GDarray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GDn_points_address0 = zext_ln618_fu_256_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        GDn_points_address0 = grp_solveNextColumn_fu_217_GDn_points_address0;
    end else begin
        GDn_points_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GDn_points_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        GDn_points_ce0 = grp_solveNextColumn_fu_217_GDn_points_ce0;
    end else begin
        GDn_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln624_fu_291_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done) & ((icmp_ln647_reg_483 == 1'd1) | (icmp_ln886_reg_474 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done) & ((icmp_ln647_reg_483 == 1'd1) | (icmp_ln886_reg_474 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_solveNextColumn_fu_217_n_patches_o_ap_vld == 1'b1) & (icmp_ln886_reg_474 == 1'd1))) begin
        n_patches_o = grp_solveNextColumn_fu_217_n_patches_o;
    end else begin
        n_patches_o = n_patches_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_address0 = grp_initializeArrays_fu_236_patches_parameters_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_parameters_V_address0 = grp_solveNextColumn_fu_217_patches_parameters_address0;
    end else begin
        patches_parameters_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_ce0 = grp_initializeArrays_fu_236_patches_parameters_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_parameters_V_ce0 = grp_solveNextColumn_fu_217_patches_parameters_ce0;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_parameters_V_ce1 = grp_solveNextColumn_fu_217_patches_parameters_ce1;
    end else begin
        patches_parameters_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_d0 = grp_initializeArrays_fu_236_patches_parameters_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_parameters_V_d0 = grp_solveNextColumn_fu_217_patches_parameters_d0;
    end else begin
        patches_parameters_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_we0 = grp_initializeArrays_fu_236_patches_parameters_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_parameters_V_we0 = grp_solveNextColumn_fu_217_patches_parameters_we0;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_parameters_V_we1 = grp_solveNextColumn_fu_217_patches_parameters_we1;
    end else begin
        patches_parameters_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_address0 = grp_initializeArrays_fu_236_patches_superpoints_address0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_superpoints_address0 = grp_solveNextColumn_fu_217_patches_superpoints_address0;
    end else begin
        patches_superpoints_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_ce0 = grp_initializeArrays_fu_236_patches_superpoints_ce0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_superpoints_ce0 = grp_solveNextColumn_fu_217_patches_superpoints_ce0;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_superpoints_ce1 = grp_solveNextColumn_fu_217_patches_superpoints_ce1;
    end else begin
        patches_superpoints_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_d0 = grp_initializeArrays_fu_236_patches_superpoints_d0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_superpoints_d0 = grp_solveNextColumn_fu_217_patches_superpoints_d0;
    end else begin
        patches_superpoints_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_we0 = grp_initializeArrays_fu_236_patches_superpoints_we0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln886_reg_474 == 1'd1))) begin
        patches_superpoints_we0 = grp_solveNextColumn_fu_217_patches_superpoints_we0;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_initializeArrays_fu_236_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln618_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln624_fu_291_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln624_fu_291_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done) & ((icmp_ln647_reg_483 == 1'd1) | (icmp_ln886_reg_474 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln647_reg_483 == 1'd0) & (icmp_ln886_reg_474 == 1'd1) & (1'b0 == ap_block_state9_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDarrayDecoded_V_address1 = zext_ln629_2_fu_360_p1;

assign GDarrayDecoded_V_d0 = GDarray_q0[31:0];

assign GDarrayDecoded_V_d1 = {{GDarray_q0[63:32]}};

assign GDarray_address0 = zext_ln629_1_fu_348_p1;

assign add_ln618_fu_244_p2 = (a_reg_171 + 3'd1);

assign add_ln624_fu_281_p2 = (b_reg_183 + 12'd1);

assign add_ln629_1_fu_300_p2 = (zext_ln618_1_reg_435 + zext_ln629_fu_296_p1);

assign add_ln629_fu_321_p2 = (shl_ln629_1_fu_313_p3 + shl_ln_reg_445);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_on_subcall_done = ((grp_solveNextColumn_fu_217_ap_done == 1'b0) & (icmp_ln886_reg_474 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_cast_fu_287_p1 = b_reg_183;

assign grp_initializeArrays_fu_236_ap_start = grp_initializeArrays_fu_236_ap_start_reg;

assign grp_solveNextColumn_fu_217_ap_start = grp_solveNextColumn_fu_217_ap_start_reg;

assign icmp_ln618_fu_250_p2 = ((a_reg_171 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln624_fu_291_p2 = ((b_cast_fu_287_p1 == GDn_points_load_reg_440) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_411_p2 = (($signed(loopCounter_reg_206) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_399_p2 = (($signed(apexZ0_V_2_reg_194) > $signed(32'd4272967196)) ? 1'b1 : 1'b0);

assign loopCounter_3_fu_405_p2 = (loopCounter_reg_206 + 32'd1);

assign lshr_ln_fu_326_p4 = {{add_ln629_fu_321_p2[13:11]}};

assign n_patches_o_ap_vld = grp_solveNextColumn_fu_217_n_patches_o_ap_vld;

assign or_ln630_fu_372_p2 = (tmp_165_cast_fu_365_p3 | 12'd1);

assign patches_superpoints_address1 = grp_solveNextColumn_fu_217_patches_superpoints_address1;

assign shl_ln629_1_fu_313_p3 = {{trunc_ln629_1_fu_309_p1}, {3'd0}};

assign shl_ln_fu_273_p3 = {{a_reg_171}, {11'd0}};

assign tmp_165_cast_fu_365_p3 = {{trunc_ln629_reg_464}, {1'd0}};

assign tmp_68_fu_353_p3 = {{add_ln629_1_reg_459}, {1'd0}};

assign tmp_fu_261_p3 = {{a_reg_171}, {8'd0}};

assign tmp_s_fu_340_p3 = {{lshr_ln_fu_326_p4}, {trunc_ln629_2_fu_336_p1}};

assign trunc_ln629_1_fu_309_p1 = b_reg_183[10:0];

assign trunc_ln629_2_fu_336_p1 = b_reg_183[7:0];

assign trunc_ln629_fu_305_p1 = add_ln629_1_fu_300_p2[10:0];

assign zext_ln618_1_fu_269_p1 = tmp_fu_261_p3;

assign zext_ln618_fu_256_p1 = a_reg_171;

assign zext_ln629_1_fu_348_p1 = tmp_s_fu_340_p3;

assign zext_ln629_2_fu_360_p1 = tmp_68_fu_353_p3;

assign zext_ln629_fu_296_p1 = b_reg_183;

assign zext_ln630_fu_378_p1 = or_ln630_fu_372_p2;

always @ (posedge ap_clk) begin
    zext_ln618_1_reg_435[7:0] <= 8'b00000000;
    zext_ln618_1_reg_435[12:11] <= 2'b00;
    shl_ln_reg_445[10:0] <= 11'b00000000000;
end

endmodule //MPSQ
