-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stop : IN STD_LOGIC_VECTOR (31 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight : IN STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of MPSQ is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MPSQ_MPSQ,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=162541,HLS_SYN_LUT=154034,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_14FB1E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000001010011111011000111100100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FEB04E1C : STD_LOGIC_VECTOR (31 downto 0) := "11111110101100000100111000011100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_reg_183 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln618_fu_244_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln618_reg_422 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln618_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln618_1_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln618_1_reg_435 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal GDn_points_load_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_273_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_445 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln624_fu_281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln624_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln624_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln629_1_fu_300_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln629_1_reg_459 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln629_fu_305_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln629_reg_464 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln886_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal loopCounter_3_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loopCounter_3_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln647_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solveNextColumn_fu_217_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal patches_parameters_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_parameters_V_ce0 : STD_LOGIC;
    signal patches_parameters_V_we0 : STD_LOGIC;
    signal patches_parameters_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patches_parameters_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patches_parameters_V_ce1 : STD_LOGIC;
    signal patches_parameters_V_we1 : STD_LOGIC;
    signal patches_parameters_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal GDarrayDecoded_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal GDarrayDecoded_V_ce0 : STD_LOGIC;
    signal GDarrayDecoded_V_we0 : STD_LOGIC;
    signal GDarrayDecoded_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal GDarrayDecoded_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal GDarrayDecoded_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal GDarrayDecoded_V_ce1 : STD_LOGIC;
    signal GDarrayDecoded_V_we1 : STD_LOGIC;
    signal GDarrayDecoded_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextColumn_fu_217_ap_start : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_ap_done : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_ap_idle : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_ap_ready : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveNextColumn_fu_217_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveNextColumn_fu_217_GDn_points_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_217_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_superpoints_we0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextColumn_fu_217_patches_superpoints_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_217_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_217_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_217_patches_parameters_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_parameters_we0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextColumn_fu_217_patches_parameters_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_217_patches_parameters_ce1 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_parameters_we1 : STD_LOGIC;
    signal grp_solveNextColumn_fu_217_patches_parameters_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeArrays_fu_236_ap_start : STD_LOGIC;
    signal grp_initializeArrays_fu_236_ap_done : STD_LOGIC;
    signal grp_initializeArrays_fu_236_ap_idle : STD_LOGIC;
    signal grp_initializeArrays_fu_236_ap_ready : STD_LOGIC;
    signal grp_initializeArrays_fu_236_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_initializeArrays_fu_236_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_initializeArrays_fu_236_patches_superpoints_we0 : STD_LOGIC;
    signal grp_initializeArrays_fu_236_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_initializeArrays_fu_236_patches_parameters_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_initializeArrays_fu_236_patches_parameters_V_ce0 : STD_LOGIC;
    signal grp_initializeArrays_fu_236_patches_parameters_V_we0 : STD_LOGIC;
    signal grp_initializeArrays_fu_236_patches_parameters_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_171 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal apexZ0_V_2_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal loopCounter_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextColumn_fu_217_ap_start_reg : STD_LOGIC := '0';
    signal grp_initializeArrays_fu_236_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln618_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln629_1_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln629_2_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln630_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_261_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_cast_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln629_fu_296_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln629_1_fu_309_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln629_1_fu_313_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln629_fu_321_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_326_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln629_2_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_340_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_353_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_165_cast_fu_365_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln630_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_solveNextColumn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ppl : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_we1 : OUT STD_LOGIC;
        patches_parameters_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_initializeArrays IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce0 : OUT STD_LOGIC;
        patches_parameters_V_we0 : OUT STD_LOGIC;
        patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_patches_parameters_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_GDarrayDecoded_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    patches_parameters_V_U : component MPSQ_patches_parameters_V
    generic map (
        DataWidth => 32,
        AddressRange => 3840,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => patches_parameters_V_address0,
        ce0 => patches_parameters_V_ce0,
        we0 => patches_parameters_V_we0,
        d0 => patches_parameters_V_d0,
        q0 => patches_parameters_V_q0,
        address1 => grp_solveNextColumn_fu_217_patches_parameters_address1,
        ce1 => patches_parameters_V_ce1,
        we1 => patches_parameters_V_we1,
        d1 => grp_solveNextColumn_fu_217_patches_parameters_d1,
        q1 => patches_parameters_V_q1);

    GDarrayDecoded_V_U : component MPSQ_GDarrayDecoded_V
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GDarrayDecoded_V_address0,
        ce0 => GDarrayDecoded_V_ce0,
        we0 => GDarrayDecoded_V_we0,
        d0 => GDarrayDecoded_V_d0,
        q0 => GDarrayDecoded_V_q0,
        address1 => GDarrayDecoded_V_address1,
        ce1 => GDarrayDecoded_V_ce1,
        we1 => GDarrayDecoded_V_we1,
        d1 => GDarrayDecoded_V_d1);

    grp_solveNextColumn_fu_217 : component MPSQ_solveNextColumn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_solveNextColumn_fu_217_ap_start,
        ap_done => grp_solveNextColumn_fu_217_ap_done,
        ap_idle => grp_solveNextColumn_fu_217_ap_idle,
        ap_ready => grp_solveNextColumn_fu_217_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_solveNextColumn_fu_217_n_patches_o,
        n_patches_o_ap_vld => grp_solveNextColumn_fu_217_n_patches_o_ap_vld,
        GDn_points_address0 => grp_solveNextColumn_fu_217_GDn_points_address0,
        GDn_points_ce0 => grp_solveNextColumn_fu_217_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        patches_superpoints_address0 => grp_solveNextColumn_fu_217_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_solveNextColumn_fu_217_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_solveNextColumn_fu_217_patches_superpoints_we0,
        patches_superpoints_d0 => grp_solveNextColumn_fu_217_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        patches_superpoints_address1 => grp_solveNextColumn_fu_217_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_solveNextColumn_fu_217_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        apexZ0 => apexZ0_V_2_reg_194,
        ppl => ppl,
        GDarrayDecoded_address0 => grp_solveNextColumn_fu_217_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_solveNextColumn_fu_217_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_V_q0,
        patches_parameters_address0 => grp_solveNextColumn_fu_217_patches_parameters_address0,
        patches_parameters_ce0 => grp_solveNextColumn_fu_217_patches_parameters_ce0,
        patches_parameters_we0 => grp_solveNextColumn_fu_217_patches_parameters_we0,
        patches_parameters_d0 => grp_solveNextColumn_fu_217_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_V_q0,
        patches_parameters_address1 => grp_solveNextColumn_fu_217_patches_parameters_address1,
        patches_parameters_ce1 => grp_solveNextColumn_fu_217_patches_parameters_ce1,
        patches_parameters_we1 => grp_solveNextColumn_fu_217_patches_parameters_we1,
        patches_parameters_d1 => grp_solveNextColumn_fu_217_patches_parameters_d1,
        patches_parameters_q1 => patches_parameters_V_q1,
        ap_return => grp_solveNextColumn_fu_217_ap_return);

    grp_initializeArrays_fu_236 : component MPSQ_initializeArrays
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initializeArrays_fu_236_ap_start,
        ap_done => grp_initializeArrays_fu_236_ap_done,
        ap_idle => grp_initializeArrays_fu_236_ap_idle,
        ap_ready => grp_initializeArrays_fu_236_ap_ready,
        patches_superpoints_address0 => grp_initializeArrays_fu_236_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_initializeArrays_fu_236_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_initializeArrays_fu_236_patches_superpoints_we0,
        patches_superpoints_d0 => grp_initializeArrays_fu_236_patches_superpoints_d0,
        patches_parameters_V_address0 => grp_initializeArrays_fu_236_patches_parameters_V_address0,
        patches_parameters_V_ce0 => grp_initializeArrays_fu_236_patches_parameters_V_ce0,
        patches_parameters_V_we0 => grp_initializeArrays_fu_236_patches_parameters_V_we0,
        patches_parameters_V_d0 => grp_initializeArrays_fu_236_patches_parameters_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_initializeArrays_fu_236_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initializeArrays_fu_236_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_initializeArrays_fu_236_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initializeArrays_fu_236_ap_ready = ap_const_logic_1)) then 
                    grp_initializeArrays_fu_236_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveNextColumn_fu_217_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_solveNextColumn_fu_217_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln886_fu_399_p2 = ap_const_lv1_1))) then 
                    grp_solveNextColumn_fu_217_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveNextColumn_fu_217_ap_ready = ap_const_logic_1)) then 
                    grp_solveNextColumn_fu_217_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_initializeArrays_fu_236_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_171 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                a_reg_171 <= add_ln618_reg_422;
            end if; 
        end if;
    end process;

    apexZ0_V_2_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln618_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                apexZ0_V_2_reg_194 <= ap_const_lv32_14FB1E4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln647_reg_483 = ap_const_lv1_0) and (icmp_ln886_reg_474 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                apexZ0_V_2_reg_194 <= grp_solveNextColumn_fu_217_ap_return;
            end if; 
        end if;
    end process;

    b_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_reg_183 <= ap_const_lv12_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln624_fu_291_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                b_reg_183 <= add_ln624_fu_281_p2;
            end if; 
        end if;
    end process;

    loopCounter_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln618_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                loopCounter_reg_206 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln647_reg_483 = ap_const_lv1_0) and (icmp_ln886_reg_474 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                loopCounter_reg_206 <= loopCounter_3_reg_478;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                GDn_points_load_reg_440 <= GDn_points_q0;
                    shl_ln_reg_445(13 downto 11) <= shl_ln_fu_273_p3(13 downto 11);
                    zext_ln618_1_reg_435(10 downto 8) <= zext_ln618_1_fu_269_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln618_reg_422 <= add_ln618_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln624_fu_291_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln629_1_reg_459 <= add_ln629_1_fu_300_p2;
                trunc_ln629_reg_464 <= trunc_ln629_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln624_reg_455 <= icmp_ln624_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln886_fu_399_p2 = ap_const_lv1_1))) then
                icmp_ln647_reg_483 <= icmp_ln647_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln886_reg_474 <= icmp_ln886_fu_399_p2;
                loopCounter_3_reg_478 <= loopCounter_3_fu_405_p2;
            end if;
        end if;
    end process;
    zext_ln618_1_reg_435(7 downto 0) <= "00000000";
    zext_ln618_1_reg_435(12 downto 11) <= "00";
    shl_ln_reg_445(10 downto 0) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln618_fu_250_p2, ap_enable_reg_pp0_iter0, icmp_ln624_fu_291_p2, icmp_ln886_reg_474, icmp_ln647_reg_483, ap_CS_fsm_state9, ap_block_pp0_stage0_subdone, grp_initializeArrays_fu_236_ap_done, ap_block_state9_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_initializeArrays_fu_236_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln618_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln624_fu_291_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln624_fu_291_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done) and ((icmp_ln647_reg_483 = ap_const_lv1_1) or (icmp_ln886_reg_474 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln647_reg_483 = ap_const_lv1_0) and (icmp_ln886_reg_474 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln886_reg_474, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, grp_solveNextColumn_fu_217_GDarrayDecoded_address0, ap_block_pp0_stage0, zext_ln630_fu_378_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            GDarrayDecoded_V_address0 <= zext_ln630_fu_378_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            GDarrayDecoded_V_address0 <= grp_solveNextColumn_fu_217_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    GDarrayDecoded_V_address1 <= zext_ln629_2_fu_360_p1(12 - 1 downto 0);

    GDarrayDecoded_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln886_reg_474, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, grp_solveNextColumn_fu_217_GDarrayDecoded_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            GDarrayDecoded_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            GDarrayDecoded_V_ce0 <= grp_solveNextColumn_fu_217_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDarrayDecoded_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            GDarrayDecoded_V_ce1 <= ap_const_logic_1;
        else 
            GDarrayDecoded_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    GDarrayDecoded_V_d0 <= GDarray_q0(32 - 1 downto 0);
    GDarrayDecoded_V_d1 <= GDarray_q0(63 downto 32);

    GDarrayDecoded_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln624_reg_455, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln624_reg_455 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            GDarrayDecoded_V_we0 <= ap_const_logic_1;
        else 
            GDarrayDecoded_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    GDarrayDecoded_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln624_reg_455, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln624_reg_455 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            GDarrayDecoded_V_we1 <= ap_const_logic_1;
        else 
            GDarrayDecoded_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    GDarray_address0 <= zext_ln629_1_fu_348_p1(11 - 1 downto 0);

    GDarray_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            GDarray_ce0 <= ap_const_logic_1;
        else 
            GDarray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state3, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_GDn_points_address0, zext_ln618_fu_256_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            GDn_points_address0 <= zext_ln618_fu_256_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            GDn_points_address0 <= grp_solveNextColumn_fu_217_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_GDn_points_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            GDn_points_ce0 <= grp_solveNextColumn_fu_217_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln618_fu_244_p2 <= std_logic_vector(unsigned(a_reg_171) + unsigned(ap_const_lv3_1));
    add_ln624_fu_281_p2 <= std_logic_vector(unsigned(b_reg_183) + unsigned(ap_const_lv12_1));
    add_ln629_1_fu_300_p2 <= std_logic_vector(unsigned(zext_ln618_1_reg_435) + unsigned(zext_ln629_fu_296_p1));
    add_ln629_fu_321_p2 <= std_logic_vector(unsigned(shl_ln629_1_fu_313_p3) + unsigned(shl_ln_reg_445));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_on_subcall_done_assign_proc : process(icmp_ln886_reg_474, grp_solveNextColumn_fu_217_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_solveNextColumn_fu_217_ap_done = ap_const_logic_0) and (icmp_ln886_reg_474 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln624_fu_291_p2)
    begin
        if ((icmp_ln624_fu_291_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln886_reg_474, icmp_ln647_reg_483, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done) and ((icmp_ln647_reg_483 = ap_const_lv1_1) or (icmp_ln886_reg_474 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln886_reg_474, icmp_ln647_reg_483, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done) and ((icmp_ln647_reg_483 = ap_const_lv1_1) or (icmp_ln886_reg_474 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_183),32));
    grp_initializeArrays_fu_236_ap_start <= grp_initializeArrays_fu_236_ap_start_reg;
    grp_solveNextColumn_fu_217_ap_start <= grp_solveNextColumn_fu_217_ap_start_reg;
    icmp_ln618_fu_250_p2 <= "1" when (a_reg_171 = ap_const_lv3_5) else "0";
    icmp_ln624_fu_291_p2 <= "1" when (b_cast_fu_287_p1 = GDn_points_load_reg_440) else "0";
    icmp_ln647_fu_411_p2 <= "1" when (signed(loopCounter_reg_206) > signed(ap_const_lv32_19)) else "0";
    icmp_ln886_fu_399_p2 <= "1" when (signed(apexZ0_V_2_reg_194) > signed(ap_const_lv32_FEB04E1C)) else "0";
    loopCounter_3_fu_405_p2 <= std_logic_vector(unsigned(loopCounter_reg_206) + unsigned(ap_const_lv32_1));
    lshr_ln_fu_326_p4 <= add_ln629_fu_321_p2(13 downto 11);

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_n_patches_o, grp_solveNextColumn_fu_217_n_patches_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_solveNextColumn_fu_217_n_patches_o_ap_vld = ap_const_logic_1) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            n_patches_o <= grp_solveNextColumn_fu_217_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;

    n_patches_o_ap_vld <= grp_solveNextColumn_fu_217_n_patches_o_ap_vld;
    or_ln630_fu_372_p2 <= (tmp_165_cast_fu_365_p3 or ap_const_lv12_1);

    patches_parameters_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_parameters_address0, grp_initializeArrays_fu_236_patches_parameters_V_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_address0 <= grp_initializeArrays_fu_236_patches_parameters_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_parameters_V_address0 <= grp_solveNextColumn_fu_217_patches_parameters_address0;
        else 
            patches_parameters_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_parameters_ce0, grp_initializeArrays_fu_236_patches_parameters_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_ce0 <= grp_initializeArrays_fu_236_patches_parameters_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_parameters_V_ce0 <= grp_solveNextColumn_fu_217_patches_parameters_ce0;
        else 
            patches_parameters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_ce1_assign_proc : process(icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_parameters_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_parameters_V_ce1 <= grp_solveNextColumn_fu_217_patches_parameters_ce1;
        else 
            patches_parameters_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_d0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_parameters_d0, grp_initializeArrays_fu_236_patches_parameters_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_d0 <= grp_initializeArrays_fu_236_patches_parameters_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_parameters_V_d0 <= grp_solveNextColumn_fu_217_patches_parameters_d0;
        else 
            patches_parameters_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_parameters_we0, grp_initializeArrays_fu_236_patches_parameters_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_we0 <= grp_initializeArrays_fu_236_patches_parameters_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_parameters_V_we0 <= grp_solveNextColumn_fu_217_patches_parameters_we0;
        else 
            patches_parameters_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_we1_assign_proc : process(icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_parameters_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_parameters_V_we1 <= grp_solveNextColumn_fu_217_patches_parameters_we1;
        else 
            patches_parameters_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_superpoints_address0, grp_initializeArrays_fu_236_patches_superpoints_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_address0 <= grp_initializeArrays_fu_236_patches_superpoints_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_superpoints_address0 <= grp_solveNextColumn_fu_217_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_superpoints_address1 <= grp_solveNextColumn_fu_217_patches_superpoints_address1;

    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_superpoints_ce0, grp_initializeArrays_fu_236_patches_superpoints_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_ce0 <= grp_initializeArrays_fu_236_patches_superpoints_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_superpoints_ce0 <= grp_solveNextColumn_fu_217_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_superpoints_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_superpoints_ce1 <= grp_solveNextColumn_fu_217_patches_superpoints_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_superpoints_d0, grp_initializeArrays_fu_236_patches_superpoints_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_d0 <= grp_initializeArrays_fu_236_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_superpoints_d0 <= grp_solveNextColumn_fu_217_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln886_reg_474, ap_CS_fsm_state9, grp_solveNextColumn_fu_217_patches_superpoints_we0, grp_initializeArrays_fu_236_patches_superpoints_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_we0 <= grp_initializeArrays_fu_236_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_reg_474 = ap_const_lv1_1))) then 
            patches_superpoints_we0 <= grp_solveNextColumn_fu_217_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln629_1_fu_313_p3 <= (trunc_ln629_1_fu_309_p1 & ap_const_lv3_0);
    shl_ln_fu_273_p3 <= (a_reg_171 & ap_const_lv11_0);
    tmp_165_cast_fu_365_p3 <= (trunc_ln629_reg_464 & ap_const_lv1_0);
    tmp_68_fu_353_p3 <= (add_ln629_1_reg_459 & ap_const_lv1_0);
    tmp_fu_261_p3 <= (a_reg_171 & ap_const_lv8_0);
    tmp_s_fu_340_p3 <= (lshr_ln_fu_326_p4 & trunc_ln629_2_fu_336_p1);
    trunc_ln629_1_fu_309_p1 <= b_reg_183(11 - 1 downto 0);
    trunc_ln629_2_fu_336_p1 <= b_reg_183(8 - 1 downto 0);
    trunc_ln629_fu_305_p1 <= add_ln629_1_fu_300_p2(11 - 1 downto 0);
    zext_ln618_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_261_p3),13));
    zext_ln618_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_171),64));
    zext_ln629_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_340_p3),64));
    zext_ln629_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_353_p3),64));
    zext_ln629_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_183),13));
    zext_ln630_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln630_fu_372_p2),64));
end behav;
