-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_solveComplmentaryPatch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    nPatchesAtOriginal : IN STD_LOGIC_VECTOR (7 downto 0);
    previous_z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    complementary_apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
    white_space_height_read : IN STD_LOGIC_VECTOR (63 downto 0);
    original_c : IN STD_LOGIC_VECTOR (31 downto 0);
    original_d : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_ce : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_start : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_ready : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_done : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_idle : IN STD_LOGIC;
    grp_fu_1628_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1628_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1628_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1628_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1628_p_ce : OUT STD_LOGIC;
    grp_fu_1635_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1635_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1635_p_ce : OUT STD_LOGIC;
    grp_fu_1638_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_1638_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1638_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1638_p_ce : OUT STD_LOGIC );
end;


architecture behav of MPSQ_solveComplmentaryPatch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state177 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state178 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state179 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state180 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state181 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state182 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state183 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state184 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state185 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state186 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state187 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state188 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state189 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state190 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state191 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state192 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state193 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state194 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state195 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state196 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state197 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state198 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state199 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state200 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state201 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state202 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state203 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state204 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state205 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state206 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state207 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state208 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state209 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state210 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state211 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state212 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state213 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state214 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state215 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state216 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state217 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state218 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state219 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state220 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state221 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state222 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state223 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state224 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state225 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state226 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state227 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state228 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state229 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state230 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state231 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state232 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state233 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state234 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state235 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state236 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state237 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state238 : STD_LOGIC_VECTOR (154 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state239 : STD_LOGIC_VECTOR (154 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state240 : STD_LOGIC_VECTOR (154 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state241 : STD_LOGIC_VECTOR (154 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state242 : STD_LOGIC_VECTOR (154 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state243 : STD_LOGIC_VECTOR (154 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state244 : STD_LOGIC_VECTOR (154 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state245 : STD_LOGIC_VECTOR (154 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state246 : STD_LOGIC_VECTOR (154 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state247 : STD_LOGIC_VECTOR (154 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state248 : STD_LOGIC_VECTOR (154 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";
    constant ap_const_lv12_601 : STD_LOGIC_VECTOR (11 downto 0) := "011000000001";
    constant ap_const_lv12_401 : STD_LOGIC_VECTOR (11 downto 0) := "010000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_30 : STD_LOGIC_VECTOR (11 downto 0) := "000000110000";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_reg_537 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_557 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_608 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_619 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_630 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_642 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_653 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerSMin_reg_664 : STD_LOGIC_VECTOR (63 downto 0);
    signal layerWithSmallestShift_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_block_state78_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state79_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state80_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state81_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state82_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state83_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state84_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state85_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state86_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state87_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state88_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state89_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state90_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln1145_reg_2416 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_841_pp4_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state92_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state93_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state94_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state95_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state96_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state97_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state98_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state99_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal icmp_ln1151_reg_2471 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1151_reg_2471_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal icmp_ln1145_reg_2416_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal grp_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state181 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state181 : signal is "none";
    signal ap_CS_fsm_state187 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state187 : signal is "none";
    signal ap_CS_fsm_state193 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state193 : signal is "none";
    signal reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state197 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state197 : signal is "none";
    signal ap_CS_fsm_state202 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state202 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1100_fu_861_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1100_reg_2282 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1106_fu_865_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1106_reg_2288 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1104_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1104_reg_2294 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1104_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_2303 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1111_fu_885_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1111_reg_2307 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_tmp7_reg_2312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal add_ln1113_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state69_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1113_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1113_reg_2322 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_2326 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_907_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_2336 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal add_ln1133_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1133_reg_2340 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1136_fu_925_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1136_reg_2345 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1123_fu_929_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1123_reg_2350 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1126_fu_940_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1126_reg_2355 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1136_fu_944_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state72_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state73_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln1136_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_2365 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_cast_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_2369 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal add_ln1126_fu_961_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state75_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state76_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln1126_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1126_reg_2389 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_2393 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1142_fu_1001_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1142_reg_2403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal add_ln1145_fu_1009_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln1145_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_2416_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_3_reg_2420 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2420_pp3_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal GDn_points_load_1_reg_2431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal grp_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2441 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2441_pp3_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_2448 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_2448_pp3_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_2455 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1134_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_34_reg_2461 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1151_fu_1236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln1151_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1151_reg_2471_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1151_reg_2471_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1151_reg_2471_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1151_reg_2471_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1151_reg_2471_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_4_reg_2475 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2475_pp4_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2475_pp4_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2475_pp4_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2475_pp4_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2475_pp4_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2475_pp4_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1153_fu_1253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_2486 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_1322_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_36_reg_2492 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1158_fu_1424_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1158_reg_2497 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state101_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state102_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state103_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln1158_fu_1430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1158_reg_2502 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1158_reg_2502_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_cast_fu_1436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_2506 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_2506_pp5_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1166_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1166_reg_2551 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state105_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state106_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state107_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state108_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state109_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state110_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_state111_pp6_stage0_iter6 : BOOLEAN;
    signal ap_block_state112_pp6_stage0_iter7 : BOOLEAN;
    signal ap_block_state113_pp6_stage0_iter8 : BOOLEAN;
    signal ap_block_state114_pp6_stage0_iter9 : BOOLEAN;
    signal ap_block_state115_pp6_stage0_iter10 : BOOLEAN;
    signal ap_block_state116_pp6_stage0_iter11 : BOOLEAN;
    signal ap_block_state117_pp6_stage0_iter12 : BOOLEAN;
    signal ap_block_state118_pp6_stage0_iter13 : BOOLEAN;
    signal ap_block_state119_pp6_stage0_iter14 : BOOLEAN;
    signal ap_block_state120_pp6_stage0_iter15 : BOOLEAN;
    signal ap_block_state121_pp6_stage0_iter16 : BOOLEAN;
    signal ap_block_state122_pp6_stage0_iter17 : BOOLEAN;
    signal ap_block_state123_pp6_stage0_iter18 : BOOLEAN;
    signal ap_block_state124_pp6_stage0_iter19 : BOOLEAN;
    signal ap_block_state125_pp6_stage0_iter20 : BOOLEAN;
    signal ap_block_state126_pp6_stage0_iter21 : BOOLEAN;
    signal ap_block_state127_pp6_stage0_iter22 : BOOLEAN;
    signal ap_block_state128_pp6_stage0_iter23 : BOOLEAN;
    signal ap_block_state129_pp6_stage0_iter24 : BOOLEAN;
    signal ap_block_state130_pp6_stage0_iter25 : BOOLEAN;
    signal ap_block_state131_pp6_stage0_iter26 : BOOLEAN;
    signal ap_block_state132_pp6_stage0_iter27 : BOOLEAN;
    signal ap_block_state133_pp6_stage0_iter28 : BOOLEAN;
    signal ap_block_state134_pp6_stage0_iter29 : BOOLEAN;
    signal ap_block_state135_pp6_stage0_iter30 : BOOLEAN;
    signal ap_block_state136_pp6_stage0_iter31 : BOOLEAN;
    signal ap_block_state137_pp6_stage0_iter32 : BOOLEAN;
    signal ap_block_state138_pp6_stage0_iter33 : BOOLEAN;
    signal ap_block_state139_pp6_stage0_iter34 : BOOLEAN;
    signal ap_block_state140_pp6_stage0_iter35 : BOOLEAN;
    signal ap_block_state141_pp6_stage0_iter36 : BOOLEAN;
    signal ap_block_state142_pp6_stage0_iter37 : BOOLEAN;
    signal ap_block_state143_pp6_stage0_iter38 : BOOLEAN;
    signal ap_block_state144_pp6_stage0_iter39 : BOOLEAN;
    signal ap_block_state145_pp6_stage0_iter40 : BOOLEAN;
    signal ap_block_state146_pp6_stage0_iter41 : BOOLEAN;
    signal ap_block_state147_pp6_stage0_iter42 : BOOLEAN;
    signal ap_block_state148_pp6_stage0_iter43 : BOOLEAN;
    signal ap_block_state149_pp6_stage0_iter44 : BOOLEAN;
    signal ap_block_state150_pp6_stage0_iter45 : BOOLEAN;
    signal ap_block_state151_pp6_stage0_iter46 : BOOLEAN;
    signal ap_block_state152_pp6_stage0_iter47 : BOOLEAN;
    signal ap_block_state153_pp6_stage0_iter48 : BOOLEAN;
    signal ap_block_state154_pp6_stage0_iter49 : BOOLEAN;
    signal ap_block_state155_pp6_stage0_iter50 : BOOLEAN;
    signal ap_block_state156_pp6_stage0_iter51 : BOOLEAN;
    signal ap_block_state157_pp6_stage0_iter52 : BOOLEAN;
    signal ap_block_state158_pp6_stage0_iter53 : BOOLEAN;
    signal ap_block_state159_pp6_stage0_iter54 : BOOLEAN;
    signal ap_block_state160_pp6_stage0_iter55 : BOOLEAN;
    signal ap_block_state161_pp6_stage0_iter56 : BOOLEAN;
    signal ap_block_state162_pp6_stage0_iter57 : BOOLEAN;
    signal ap_block_state163_pp6_stage0_iter58 : BOOLEAN;
    signal ap_block_state164_pp6_stage0_iter59 : BOOLEAN;
    signal ap_block_state165_pp6_stage0_iter60 : BOOLEAN;
    signal ap_block_state166_pp6_stage0_iter61 : BOOLEAN;
    signal ap_block_state167_pp6_stage0_iter62 : BOOLEAN;
    signal ap_block_state168_pp6_stage0_iter63 : BOOLEAN;
    signal ap_block_state169_pp6_stage0_iter64 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal add_ln1171_fu_1472_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1171_reg_2555 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal trunc_ln1168_fu_1483_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter37_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter38_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter39_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter40_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter41_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter42_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter43_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter44_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter45_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter46_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter47_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter48_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter49_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter50_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter51_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter52_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter53_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter54_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter55_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter56_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter57_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter58_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter59_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter60_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter61_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter62_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1168_reg_2566_pp6_iter63_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1179_fu_1516_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1179_reg_2570 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal add_ln1179_fu_1519_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state171_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state172_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state173_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state174_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state175_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_state176_pp7_stage0_iter5 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln1179_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1179_reg_2584 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1179_reg_2584_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1179_reg_2584_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1179_reg_2584_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1179_reg_2584_pp7_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln534_fu_1531_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2588 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2588_pp7_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2588_pp7_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2588_pp7_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2588_pp7_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_1535_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_2593 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln277_3_fu_1557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_reg_2603 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_fu_1576_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_38_reg_2609 : STD_LOGIC_VECTOR (51 downto 0);
    signal layerWithSmallestShift_1_fu_1686_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp7_iter5 : STD_LOGIC := '0';
    signal layerSMin_1_fu_1694_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_1706_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_reg_2624 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state177 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state177 : signal is "none";
    signal sext_ln277_fu_1728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state178 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state178 : signal is "none";
    signal bitcast_ln521_fu_1745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state182 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state182 : signal is "none";
    signal icmp_ln1201_fu_1764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1201_reg_2642 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1201_1_fu_1770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1201_1_reg_2647 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_1779_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_cast_reg_2652 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_2_fu_1808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_reg_2663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state183 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state183 : signal is "none";
    signal sext_ln277_1_fu_1823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state184 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state184 : signal is "none";
    signal ap_CS_fsm_state188 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state188 : signal is "none";
    signal bitcast_ln521_1_fu_1850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1206_fu_1869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1206_reg_2684 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1206_1_fu_1875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1206_1_reg_2689 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_3_fu_1891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_reg_2694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state189 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state189 : signal is "none";
    signal sext_ln277_2_fu_1906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state190 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state190 : signal is "none";
    signal ap_CS_fsm_state194 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state194 : signal is "none";
    signal bitcast_ln521_2_fu_1933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1211_fu_1952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1211_reg_2715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1211_1_fu_1958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1211_1_reg_2720 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_4_fu_1974_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_4_reg_2725 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state195 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state195 : signal is "none";
    signal ret_10_fu_1985_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_10_reg_2730 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln534_fu_1990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state196 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state196 : signal is "none";
    signal tmp_27_reg_2740 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1233_fu_2006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1233_reg_2745 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1216_fu_2014_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1216_reg_2749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state198 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state198 : signal is "none";
    signal zext_ln1252_fu_2026_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1252_reg_2756 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ppl_assign2_reg_2761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state201 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state201 : signal is "none";
    signal lastPatchIdx_fu_2031_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastPatchIdx_reg_2766 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1264_fu_2037_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1264_reg_2774 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1286_fu_2051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1286_reg_2779 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state203 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state203 : signal is "none";
    signal sext_ln534_1_fu_2149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_1_reg_2793 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state204 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state204 : signal is "none";
    signal zext_ln1289_fu_2153_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1289_reg_2798 : STD_LOGIC_VECTOR (8 downto 0);
    signal thirdLastPatchIdx_fu_2156_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal thirdLastPatchIdx_reg_2803 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1296_fu_2162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1296_reg_2808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state205 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state205 : signal is "none";
    signal add_ln1296_fu_2168_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1296_reg_2812 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1316_fu_2174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state247 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state247 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state69 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state72 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state75 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state78 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state92 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state101 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state105 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter64 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal current_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_ce0 : STD_LOGIC;
    signal current_z_i_index_we0 : STD_LOGIC;
    signal current_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce0 : STD_LOGIC;
    signal new_z_i_index_we0 : STD_LOGIC;
    signal new_z_i_index_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce1 : STD_LOGIC;
    signal new_z_i_index_we1 : STD_LOGIC;
    signal new_z_i_index_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_V_ce0 : STD_LOGIC;
    signal new_z_i_V_we0 : STD_LOGIC;
    signal new_z_i_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_z_top : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_721_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_ce : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_k : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_759_ap_start : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_759_ap_done : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_759_ap_idle : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_759_ap_ready : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce0 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce1 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_759_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_delete_patch_fu_771_ap_start : STD_LOGIC;
    signal grp_delete_patch_fu_771_ap_done : STD_LOGIC;
    signal grp_delete_patch_fu_771_ap_idle : STD_LOGIC;
    signal grp_delete_patch_fu_771_ap_ready : STD_LOGIC;
    signal grp_delete_patch_fu_771_n_patches : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_771_n_patches_ap_vld : STD_LOGIC;
    signal grp_delete_patch_fu_771_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_771_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_771_patches_superpoints_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_771_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_771_patches_superpoints_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_771_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_delete_patch_fu_771_index : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_delete_patch_fu_771_patches_parameters_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_771_patches_parameters_V_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_771_patches_parameters_V_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_771_patches_parameters_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_771_patches_parameters_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_771_patches_parameters_V_ce1 : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_ap_start : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_ap_done : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_ap_idle : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_ap_ready : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_783_GDn_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_layer : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_783_z_value : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_index_from_z_fu_783_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_get_index_from_z_fu_783_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_783_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_phi_mux_empty_74_phi_fu_551_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_74_reg_548 : STD_LOGIC_VECTOR (8 downto 0);
    signal counter_0_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal counterUpshift_0_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_reg_599 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_7_phi_fu_634_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_phi_mux_i_8_phi_fu_646_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal i_10_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state225 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state225 : signal is "none";
    signal current_z_top_index_0_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state226 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state226 : signal is "none";
    signal z_top_min_4_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_721_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state200 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state200 : signal is "none";
    signal ap_CS_fsm_state229 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state229 : signal is "none";
    signal ap_CS_fsm_state230 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state230 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (154 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln1168_fu_1487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_759_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state206 : STD_LOGIC;
    signal ap_CS_fsm_state206 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state206 : signal is "none";
    signal ap_CS_fsm_state207 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state207 : signal is "none";
    signal ap_CS_fsm_state223 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state223 : signal is "none";
    signal ap_CS_fsm_state224 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state224 : signal is "none";
    signal grp_delete_patch_fu_771_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state227 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state227 : signal is "none";
    signal ap_CS_fsm_state199 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state199 : signal is "none";
    signal ap_CS_fsm_state228 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state228 : signal is "none";
    signal grp_get_index_from_z_fu_783_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_5_cast_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal i_6_cast_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal tmp_24_fu_1457_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1171_cast_fu_1478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1203_fu_1793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1208_fu_1833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1213_fu_1916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1264_1_fu_2093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_fu_2104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_V_3_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_1_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal new_z_i_atTop_V_3_2_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_3_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_4_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1128_fu_978_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_fu_1227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_803_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_806_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_809_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_819_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln870_fu_881_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1134_fu_919_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1124_fu_934_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1142_fu_985_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1142_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1142_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1147_fu_1032_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1147_1_fu_1049_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1035_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1147_fu_1045_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1147_1_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1147_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1052_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1147_1_fu_1062_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1147_3_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1147_2_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1147_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1147_1_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1147_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1147_1_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dc_fu_1114_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_1120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_fu_1138_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln341_fu_1151_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_1154_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1168_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1177_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_1185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_1147_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1189_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_1193_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_21_fu_1205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1199_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_fu_1213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1217_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln1153_fu_1258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1153_fu_1272_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1153_1_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1153_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1153_fu_1288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1153_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln312_fu_1300_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_1_fu_1304_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mantissa_1_fu_1326_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln341_1_fu_1339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_1_fu_1342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_1356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_1348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_1361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_1365_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i48_cast_cast_cast_fu_1373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_1_fu_1335_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i48_cast_cast_cast_cast_fu_1377_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_2_fu_1381_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_26_fu_1393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1387_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_1_fu_1401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1405_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1441_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1160_fu_1451_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1179_fu_1516_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1535_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1181_fu_1549_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1181_fu_1552_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal data_V_2_fu_1562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_2_fu_1580_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_1593_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_1596_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_2_fu_1610_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_1602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_1615_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_1619_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i75_cast_cast_cast_fu_1627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1589_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1631_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_4_fu_1635_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_31_fu_1647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1641_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_2_fu_1655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1659_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_2_fu_1669_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1181_fu_1677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1181_fu_1683_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_fu_1706_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln215_fu_1720_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_4_fu_1723_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal data_V_3_fu_1733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_1737_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_fu_1741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1750_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1201_fu_1760_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln1203_fu_1776_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1203_fu_1787_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1201_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1201_fu_1802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_4_fu_1815_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_6_fu_1818_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1208_fu_1828_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_4_fu_1838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_1842_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_1_fu_1846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1855_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1206_fu_1865_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1206_fu_1881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1206_fu_1885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_5_fu_1898_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_8_fu_1901_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1213_fu_1911_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_5_fu_1921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_1925_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_2_fu_1929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_1938_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1211_fu_1948_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1211_fu_1964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1211_fu_1968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_6_fu_1981_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1993_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1993_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1232_fu_2020_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_2041_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_29_fu_2064_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_37_cast_fu_2057_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1264_fu_2071_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1264_fu_2075_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1264_fu_2081_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1264_fu_2087_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1265_fu_2098_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln215_7_fu_2109_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_8_fu_2112_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_9_fu_2122_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_10_fu_2125_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_13_fu_2116_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_14_fu_2129_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln878_fu_2135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1270_fu_2141_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state248 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state248 : signal is "none";
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_block_pp4_stage0_00001 : BOOLEAN;
    signal grp_fu_814_ce : STD_LOGIC;
    signal grp_fu_814_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_819_ce : STD_LOGIC;
    signal grp_fu_1993_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state199_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (31 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_areWedgeSuperPointsEqual IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wsp1_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp1_2_ce0 : OUT STD_LOGIC;
        wsp1_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp1_2_ce1 : OUT STD_LOGIC;
        wsp1_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
        wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
        wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
        wsp23 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_delete_patch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_ap_vld : OUT STD_LOGIC;
        n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        index : IN STD_LOGIC_VECTOR (8 downto 0);
        patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce0 : OUT STD_LOGIC;
        patches_parameters_V_we0 : OUT STD_LOGIC;
        patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce1 : OUT STD_LOGIC;
        patches_parameters_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_get_index_from_z IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        z_value : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_sitofp_32ns_32_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_sitodp_64s_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_33s_64s_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_current_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_z_i_index_U : component MPSQ_solveComplmentaryPatch_current_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_address0,
        ce0 => current_z_i_index_ce0,
        we0 => current_z_i_index_we0,
        d0 => grp_get_index_from_z_fu_783_ap_return,
        q0 => current_z_i_index_q0);

    new_z_i_index_U : component MPSQ_solveComplmentaryPatch_new_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_address0,
        ce0 => new_z_i_index_ce0,
        we0 => new_z_i_index_we0,
        d0 => new_z_i_index_d0,
        q0 => new_z_i_index_q0,
        address1 => new_z_i_index_address1,
        ce1 => new_z_i_index_ce1,
        we1 => new_z_i_index_we1,
        d1 => new_z_i_index_d1,
        q1 => new_z_i_index_q1);

    new_z_i_V_U : component MPSQ_solveComplmentaryPatch_new_z_i_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_V_address0,
        ce0 => new_z_i_V_ce0,
        we0 => new_z_i_V_we0,
        d0 => GDarrayDecoded_q0,
        q0 => new_z_i_V_q0);

    grp_makePatch_alignedToLine_fu_721 : component MPSQ_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_721_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_721_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_721_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_721_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_721_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_721_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_721_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_721_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_721_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_721_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_721_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        apexZ0 => complementary_apexZ0,
        z_top => grp_makePatch_alignedToLine_fu_721_z_top,
        p_read => grp_makePatch_alignedToLine_fu_721_p_read,
        leftRight => ap_const_lv1_1,
        GDarrayDecoded_address0 => grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_721_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_721_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_721_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_721_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        ap_return => grp_makePatch_alignedToLine_fu_721_ap_return);

    grp_areWedgeSuperPointsEqual_fu_759 : component MPSQ_areWedgeSuperPointsEqual
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_areWedgeSuperPointsEqual_fu_759_ap_start,
        ap_done => grp_areWedgeSuperPointsEqual_fu_759_ap_done,
        ap_idle => grp_areWedgeSuperPointsEqual_fu_759_ap_idle,
        ap_ready => grp_areWedgeSuperPointsEqual_fu_759_ap_ready,
        wsp1_2_address0 => grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address0,
        wsp1_2_ce0 => grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce0,
        wsp1_2_q0 => patches_superpoints_q0,
        wsp1_2_address1 => grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address1,
        wsp1_2_ce1 => grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce1,
        wsp1_2_q1 => patches_superpoints_q1,
        wsp1 => lastPatchIdx_reg_2766,
        wsp11 => i_10_reg_687,
        wsp2 => thirdLastPatchIdx_reg_2803,
        wsp23 => i_10_reg_687,
        ap_return => grp_areWedgeSuperPointsEqual_fu_759_ap_return);

    grp_delete_patch_fu_771 : component MPSQ_delete_patch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delete_patch_fu_771_ap_start,
        ap_done => grp_delete_patch_fu_771_ap_done,
        ap_idle => grp_delete_patch_fu_771_ap_idle,
        ap_ready => grp_delete_patch_fu_771_ap_ready,
        n_patches => grp_delete_patch_fu_771_n_patches,
        n_patches_ap_vld => grp_delete_patch_fu_771_n_patches_ap_vld,
        n_patches_read => reg_856,
        patches_superpoints_address0 => grp_delete_patch_fu_771_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_delete_patch_fu_771_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_delete_patch_fu_771_patches_superpoints_we0,
        patches_superpoints_d0 => grp_delete_patch_fu_771_patches_superpoints_d0,
        patches_superpoints_address1 => grp_delete_patch_fu_771_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_delete_patch_fu_771_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        index => grp_delete_patch_fu_771_index,
        patches_parameters_V_address0 => grp_delete_patch_fu_771_patches_parameters_V_address0,
        patches_parameters_V_ce0 => grp_delete_patch_fu_771_patches_parameters_V_ce0,
        patches_parameters_V_we0 => grp_delete_patch_fu_771_patches_parameters_V_we0,
        patches_parameters_V_d0 => grp_delete_patch_fu_771_patches_parameters_V_d0,
        patches_parameters_V_address1 => grp_delete_patch_fu_771_patches_parameters_V_address1,
        patches_parameters_V_ce1 => grp_delete_patch_fu_771_patches_parameters_V_ce1,
        patches_parameters_V_q1 => patches_parameters_q1);

    grp_get_index_from_z_fu_783 : component MPSQ_get_index_from_z
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_index_from_z_fu_783_ap_start,
        ap_done => grp_get_index_from_z_fu_783_ap_done,
        ap_idle => grp_get_index_from_z_fu_783_ap_idle,
        ap_ready => grp_get_index_from_z_fu_783_ap_ready,
        GDn_points_address0 => grp_get_index_from_z_fu_783_GDn_points_address0,
        GDn_points_ce0 => grp_get_index_from_z_fu_783_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        layer => grp_get_index_from_z_fu_783_layer,
        z_value => grp_get_index_from_z_fu_783_z_value,
        GDarrayDecoded_address0 => grp_get_index_from_z_fu_783_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_get_index_from_z_fu_783_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        ap_return => grp_get_index_from_z_fu_783_ap_return);

    fadd_32ns_32ns_32_5_full_dsp_1_U108 : component MPSQ_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_841,
        din1 => ap_const_lv32_BF800000,
        ce => ap_const_logic_1,
        dout => grp_fu_798_p2);

    sitofp_32ns_32_3_no_dsp_1_U109 : component MPSQ_sitofp_32ns_32_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_803_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_803_p1);

    sitofp_32ns_32_3_no_dsp_1_U110 : component MPSQ_sitofp_32ns_32_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_806_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_806_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U111 : component MPSQ_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_809_p0,
        din1 => grp_fu_809_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_809_p2);

    mux_42_32_1_1_U114 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_256,
        din1 => new_z_i_atTop_V_3_2_fu_260,
        din2 => new_z_i_atTop_V_3_3_fu_264,
        din3 => new_z_i_atTop_V_3_4_fu_268,
        din4 => tmp_20_fu_1535_p5,
        dout => tmp_20_fu_1535_p6);

    mux_42_32_1_1_U115 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_256,
        din1 => new_z_i_atTop_V_3_2_fu_260,
        din2 => new_z_i_atTop_V_3_3_fu_264,
        din3 => new_z_i_atTop_V_3_4_fu_268,
        din4 => lhs_fu_1706_p5,
        dout => lhs_fu_1706_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state69))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln870_fu_881_p2 = ap_const_lv1_1) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state69))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state69);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln870_fu_881_p2 = ap_const_lv1_1) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state72))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_907_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state72))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state72);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_fu_907_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state75))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_907_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state75))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state75);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((tmp_fu_907_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state78))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state78)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state78);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state92))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state92)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state92);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                    ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state101))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state101)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state101);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state105))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state105)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state105);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter10 <= ap_enable_reg_pp6_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter11 <= ap_enable_reg_pp6_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter12 <= ap_enable_reg_pp6_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter13 <= ap_enable_reg_pp6_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter14 <= ap_enable_reg_pp6_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter15 <= ap_enable_reg_pp6_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter16 <= ap_enable_reg_pp6_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter17 <= ap_enable_reg_pp6_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter18 <= ap_enable_reg_pp6_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter19 <= ap_enable_reg_pp6_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter20 <= ap_enable_reg_pp6_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter21 <= ap_enable_reg_pp6_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter22 <= ap_enable_reg_pp6_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter23 <= ap_enable_reg_pp6_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter24 <= ap_enable_reg_pp6_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter25 <= ap_enable_reg_pp6_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter26 <= ap_enable_reg_pp6_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter27 <= ap_enable_reg_pp6_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter28 <= ap_enable_reg_pp6_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter29 <= ap_enable_reg_pp6_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter30 <= ap_enable_reg_pp6_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter31 <= ap_enable_reg_pp6_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter32 <= ap_enable_reg_pp6_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter33 <= ap_enable_reg_pp6_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter34 <= ap_enable_reg_pp6_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter35 <= ap_enable_reg_pp6_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter36 <= ap_enable_reg_pp6_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter37 <= ap_enable_reg_pp6_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter38 <= ap_enable_reg_pp6_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter39 <= ap_enable_reg_pp6_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter40 <= ap_enable_reg_pp6_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter41 <= ap_enable_reg_pp6_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter42 <= ap_enable_reg_pp6_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter43 <= ap_enable_reg_pp6_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter44 <= ap_enable_reg_pp6_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter45 <= ap_enable_reg_pp6_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter46 <= ap_enable_reg_pp6_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter47 <= ap_enable_reg_pp6_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter48 <= ap_enable_reg_pp6_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter49 <= ap_enable_reg_pp6_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter50 <= ap_enable_reg_pp6_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter51 <= ap_enable_reg_pp6_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter52 <= ap_enable_reg_pp6_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter53 <= ap_enable_reg_pp6_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter54 <= ap_enable_reg_pp6_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter55 <= ap_enable_reg_pp6_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter56 <= ap_enable_reg_pp6_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter57 <= ap_enable_reg_pp6_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter58 <= ap_enable_reg_pp6_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter59 <= ap_enable_reg_pp6_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter60 <= ap_enable_reg_pp6_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter61 <= ap_enable_reg_pp6_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter62 <= ap_enable_reg_pp6_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter63 <= ap_enable_reg_pp6_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter64 <= ap_enable_reg_pp6_iter63;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                    ap_enable_reg_pp6_iter64 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter8 <= ap_enable_reg_pp6_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter9 <= ap_enable_reg_pp6_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp7_flush_enable)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
                    ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_0_preg <= white_space_height_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_1_preg <= lastPatchIdx_reg_2766;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_2_preg <= current_z_top_index_0_reg_699;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_3_preg <= counter_0_reg_579;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_4_preg <= counterUpshift_0_reg_589;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_5_preg <= z_top_min_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_6_preg <= sext_ln534_1_reg_2793;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
                    ap_return_7_preg <= z_top_min_4_reg_710;
                end if; 
            end if;
        end if;
    end process;


    grp_areWedgeSuperPointsEqual_fu_759_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_areWedgeSuperPointsEqual_fu_759_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state206) and (ap_const_logic_1 = ap_CS_fsm_state205) and (icmp_ln1296_fu_2162_p2 = ap_const_lv1_1))) then 
                    grp_areWedgeSuperPointsEqual_fu_759_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_areWedgeSuperPointsEqual_fu_759_ap_ready = ap_const_logic_1)) then 
                    grp_areWedgeSuperPointsEqual_fu_759_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_delete_patch_fu_771_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delete_patch_fu_771_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state227) or ((ap_const_logic_1 = ap_CS_fsm_state198) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
                    grp_delete_patch_fu_771_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delete_patch_fu_771_ap_ready = ap_const_logic_1)) then 
                    grp_delete_patch_fu_771_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_index_from_z_fu_783_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_index_from_z_fu_783_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state67) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_get_index_from_z_fu_783_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_index_from_z_fu_783_ap_ready = ap_const_logic_1)) then 
                    grp_get_index_from_z_fu_783_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_721_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_721_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state229) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
                    grp_makePatch_alignedToLine_fu_721_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_721_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_721_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1166_fu_1466_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counterUpshift_0_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                if ((tmp_reg_2336 = ap_const_lv1_1)) then 
                    counterUpshift_0_reg_589 <= p_read13;
                elsif ((tmp_reg_2336 = ap_const_lv1_0)) then 
                    counterUpshift_0_reg_589 <= add_ln1133_reg_2340;
                end if;
            end if; 
        end if;
    end process;

    counter_0_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                if ((tmp_reg_2336 = ap_const_lv1_1)) then 
                    counter_0_reg_579 <= add_ln1123_reg_2350;
                elsif ((tmp_reg_2336 = ap_const_lv1_0)) then 
                    counter_0_reg_579 <= p_read12;
                end if;
            end if; 
        end if;
    end process;

    current_z_top_index_0_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state226) or ((ap_const_logic_1 = ap_CS_fsm_state204) and (icmp_ln1286_reg_2779 = ap_const_lv1_1)))) then 
                current_z_top_index_0_reg_699 <= select_ln1142_reg_2403;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state247)) then 
                current_z_top_index_0_reg_699 <= add_ln1316_fu_2174_p2;
            end if; 
        end if;
    end process;

    empty_74_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_reg_2303 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                empty_74_reg_548 <= add_ln1111_reg_2307;
            elsif (((icmp_ln870_fu_881_p2 = ap_const_lv1_0) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_74_reg_548 <= zext_ln1100_reg_2282;
            end if; 
        end if;
    end process;

    empty_77_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                if ((tmp_reg_2336 = ap_const_lv1_1)) then 
                    empty_77_reg_599 <= sext_ln1126_reg_2355;
                elsif ((tmp_reg_2336 = ap_const_lv1_0)) then 
                    empty_77_reg_599 <= zext_ln1136_reg_2345;
                end if;
            end if; 
        end if;
    end process;

    i_10_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state225) and (grp_areWedgeSuperPointsEqual_fu_759_ap_return = ap_const_lv1_1) and (icmp_ln1296_reg_2808 = ap_const_lv1_1))) then 
                i_10_reg_687 <= add_ln1296_reg_2812;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state204) and (icmp_ln1286_reg_2779 = ap_const_lv1_0))) then 
                i_10_reg_687 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_2_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_881_p2 = ap_const_lv1_1) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_537 <= ap_const_lv3_0;
            elsif (((icmp_ln1113_fu_896_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_537 <= add_ln1113_fu_890_p2;
            end if; 
        end if;
    end process;

    i_3_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_907_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                i_3_reg_568 <= ap_const_lv3_0;
            elsif (((icmp_ln1126_fu_967_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_3_reg_568 <= add_ln1126_fu_961_p2;
            end if; 
        end if;
    end process;

    i_4_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_907_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                i_4_reg_557 <= ap_const_lv3_0;
            elsif (((icmp_ln1136_fu_950_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_4_reg_557 <= add_ln1136_fu_944_p2;
            end if; 
        end if;
    end process;

    i_5_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_fu_1015_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_5_reg_608 <= add_ln1145_fu_1009_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_5_reg_608 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_6_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                i_6_reg_619 <= ap_const_lv3_0;
            elsif (((icmp_ln1151_fu_1242_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_6_reg_619 <= add_ln1151_fu_1236_p2;
            end if; 
        end if;
    end process;

    i_7_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                i_7_reg_630 <= ap_const_lv3_0;
            elsif (((icmp_ln1158_reg_2502 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
                i_7_reg_630 <= add_ln1158_reg_2497;
            end if; 
        end if;
    end process;

    i_8_reg_642_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                i_8_reg_642 <= ap_const_lv3_1;
            elsif (((icmp_ln1166_reg_2551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
                i_8_reg_642 <= add_ln1171_reg_2555;
            end if; 
        end if;
    end process;

    i_9_reg_653_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1179_fu_1525_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_9_reg_653 <= add_ln1179_fu_1519_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
                i_9_reg_653 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_get_index_from_z_fu_783_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                    i_reg_525 <= add_ln1106_reg_2288;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    i_reg_525 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    layerSMin_reg_664_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (icmp_ln1179_reg_2584_pp7_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                layerSMin_reg_664 <= layerSMin_1_fu_1694_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
                layerSMin_reg_664 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_675_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (icmp_ln1179_reg_2584_pp7_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                layerWithSmallestShift_reg_675 <= layerWithSmallestShift_1_fu_1686_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
                layerWithSmallestShift_reg_675 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    reg_847_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln1151_reg_2471 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                reg_847 <= new_z_i_index_q0;
            elsif (((icmp_ln1145_reg_2416_pp3_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                reg_847 <= new_z_i_index_q1;
            end if; 
        end if;
    end process;

    z_top_min_4_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state226) or ((ap_const_logic_1 = ap_CS_fsm_state204) and (icmp_ln1286_reg_2779 = ap_const_lv1_1)))) then 
                z_top_min_4_reg_710 <= select_ln1216_reg_2749;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state247)) then 
                z_top_min_4_reg_710 <= lhs_reg_2624;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln1145_reg_2416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                GDn_points_load_1_reg_2431 <= GDn_points_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln1106_reg_2288 <= add_ln1106_fu_865_p2;
                    zext_ln1104_reg_2294(2 downto 0) <= zext_ln1104_fu_871_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_881_p2 = ap_const_lv1_1) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln1111_reg_2307 <= add_ln1111_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_907_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                add_ln1123_reg_2350 <= add_ln1123_fu_929_p2;
                sext_ln1126_reg_2355 <= sext_ln1126_fu_940_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_907_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                add_ln1133_reg_2340 <= add_ln1133_fu_914_p2;
                    zext_ln1136_reg_2345(8 downto 0) <= zext_ln1136_fu_925_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln1158_reg_2497 <= add_ln1158_fu_1424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1166_fu_1466_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln1171_reg_2555 <= add_ln1171_fu_1472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state205)) then
                add_ln1296_reg_2812 <= add_ln1296_fu_2168_p2;
                icmp_ln1296_reg_2808 <= icmp_ln1296_fu_2162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                agg_tmp7_reg_2312 <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_reg_2416_pp3_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                conv_reg_2441 <= grp_fu_806_p1;
                sub_reg_2448 <= grp_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                conv_reg_2441_pp3_iter10_reg <= conv_reg_2441;
                icmp_ln1145_reg_2416_pp3_iter10_reg <= icmp_ln1145_reg_2416_pp3_iter9_reg;
                icmp_ln1145_reg_2416_pp3_iter11_reg <= icmp_ln1145_reg_2416_pp3_iter10_reg;
                icmp_ln1145_reg_2416_pp3_iter2_reg <= icmp_ln1145_reg_2416_pp3_iter1_reg;
                icmp_ln1145_reg_2416_pp3_iter3_reg <= icmp_ln1145_reg_2416_pp3_iter2_reg;
                icmp_ln1145_reg_2416_pp3_iter4_reg <= icmp_ln1145_reg_2416_pp3_iter3_reg;
                icmp_ln1145_reg_2416_pp3_iter5_reg <= icmp_ln1145_reg_2416_pp3_iter4_reg;
                icmp_ln1145_reg_2416_pp3_iter6_reg <= icmp_ln1145_reg_2416_pp3_iter5_reg;
                icmp_ln1145_reg_2416_pp3_iter7_reg <= icmp_ln1145_reg_2416_pp3_iter6_reg;
                icmp_ln1145_reg_2416_pp3_iter8_reg <= icmp_ln1145_reg_2416_pp3_iter7_reg;
                icmp_ln1145_reg_2416_pp3_iter9_reg <= icmp_ln1145_reg_2416_pp3_iter8_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter10_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter9_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter11_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter10_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter2_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter1_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter3_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter2_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter4_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter3_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter5_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter4_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter6_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter5_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter7_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter6_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter8_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter7_reg;
                new_z_i_index_addr_3_reg_2420_pp3_iter9_reg <= new_z_i_index_addr_3_reg_2420_pp3_iter8_reg;
                sub_reg_2448_pp3_iter10_reg <= sub_reg_2448;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1113_fu_896_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_2_cast_reg_2326(2 downto 0) <= i_2_cast_fu_902_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1126_fu_967_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    i_3_cast_reg_2393(2 downto 0) <= i_3_cast_fu_973_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1136_fu_950_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    i_4_cast_reg_2369(2 downto 0) <= i_4_cast_fu_956_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1158_fu_1430_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    i_7_cast_reg_2506(2 downto 0) <= i_7_cast_fu_1436_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    i_7_cast_reg_2506_pp5_iter1_reg(2 downto 0) <= i_7_cast_reg_2506(2 downto 0);
                icmp_ln1158_reg_2502 <= icmp_ln1158_fu_1430_p2;
                icmp_ln1158_reg_2502_pp5_iter1_reg <= icmp_ln1158_reg_2502;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1113_reg_2322 <= icmp_ln1113_fu_896_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln1126_reg_2389 <= icmp_ln1126_fu_967_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln1136_reg_2365 <= icmp_ln1136_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln1145_reg_2416 <= icmp_ln1145_fu_1015_p2;
                icmp_ln1145_reg_2416_pp3_iter1_reg <= icmp_ln1145_reg_2416;
                new_z_i_index_addr_3_reg_2420_pp3_iter1_reg <= new_z_i_index_addr_3_reg_2420;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln1151_reg_2471 <= icmp_ln1151_fu_1242_p2;
                icmp_ln1151_reg_2471_pp4_iter1_reg <= icmp_ln1151_reg_2471;
                new_z_i_index_addr_4_reg_2475_pp4_iter1_reg <= new_z_i_index_addr_4_reg_2475;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln1151_reg_2471_pp4_iter2_reg <= icmp_ln1151_reg_2471_pp4_iter1_reg;
                icmp_ln1151_reg_2471_pp4_iter3_reg <= icmp_ln1151_reg_2471_pp4_iter2_reg;
                icmp_ln1151_reg_2471_pp4_iter4_reg <= icmp_ln1151_reg_2471_pp4_iter3_reg;
                icmp_ln1151_reg_2471_pp4_iter5_reg <= icmp_ln1151_reg_2471_pp4_iter4_reg;
                icmp_ln1151_reg_2471_pp4_iter6_reg <= icmp_ln1151_reg_2471_pp4_iter5_reg;
                new_z_i_index_addr_4_reg_2475_pp4_iter2_reg <= new_z_i_index_addr_4_reg_2475_pp4_iter1_reg;
                new_z_i_index_addr_4_reg_2475_pp4_iter3_reg <= new_z_i_index_addr_4_reg_2475_pp4_iter2_reg;
                new_z_i_index_addr_4_reg_2475_pp4_iter4_reg <= new_z_i_index_addr_4_reg_2475_pp4_iter3_reg;
                new_z_i_index_addr_4_reg_2475_pp4_iter5_reg <= new_z_i_index_addr_4_reg_2475_pp4_iter4_reg;
                new_z_i_index_addr_4_reg_2475_pp4_iter6_reg <= new_z_i_index_addr_4_reg_2475_pp4_iter5_reg;
                reg_841_pp4_iter5_reg <= reg_841;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln1166_reg_2551 <= icmp_ln1166_fu_1466_p2;
                trunc_ln1168_reg_2566_pp6_iter1_reg <= trunc_ln1168_reg_2566;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln1179_reg_2584 <= icmp_ln1179_fu_1525_p2;
                icmp_ln1179_reg_2584_pp7_iter1_reg <= icmp_ln1179_reg_2584;
                trunc_ln534_reg_2588_pp7_iter1_reg <= trunc_ln534_reg_2588;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp7_stage0_11001)) then
                icmp_ln1179_reg_2584_pp7_iter2_reg <= icmp_ln1179_reg_2584_pp7_iter1_reg;
                icmp_ln1179_reg_2584_pp7_iter3_reg <= icmp_ln1179_reg_2584_pp7_iter2_reg;
                icmp_ln1179_reg_2584_pp7_iter4_reg <= icmp_ln1179_reg_2584_pp7_iter3_reg;
                trunc_ln534_reg_2588_pp7_iter2_reg <= trunc_ln534_reg_2588_pp7_iter1_reg;
                trunc_ln534_reg_2588_pp7_iter3_reg <= trunc_ln534_reg_2588_pp7_iter2_reg;
                trunc_ln534_reg_2588_pp7_iter4_reg <= trunc_ln534_reg_2588_pp7_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state182)) then
                icmp_ln1201_1_reg_2647 <= icmp_ln1201_1_fu_1770_p2;
                icmp_ln1201_reg_2642 <= icmp_ln1201_fu_1764_p2;
                    tmp_32_cast_reg_2652(11 downto 1) <= tmp_32_cast_fu_1779_p3(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state188)) then
                icmp_ln1206_1_reg_2689 <= icmp_ln1206_1_fu_1875_p2;
                icmp_ln1206_reg_2684 <= icmp_ln1206_fu_1869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state194)) then
                icmp_ln1211_1_reg_2720 <= icmp_ln1211_1_fu_1958_p2;
                icmp_ln1211_reg_2715 <= icmp_ln1211_fu_1952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state197)) then
                icmp_ln1233_reg_2745 <= icmp_ln1233_fu_2006_p2;
                tmp_27_reg_2740 <= grp_fu_1638_p_dout0(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state202)) then
                icmp_ln1286_reg_2779 <= icmp_ln1286_fu_2051_p2;
                lastPatchIdx_reg_2766 <= lastPatchIdx_fu_2031_p2;
                trunc_ln1264_reg_2774 <= trunc_ln1264_fu_2037_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln870_reg_2303 <= icmp_ln870_fu_881_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state183)) then
                lhs_2_reg_2663 <= lhs_2_fu_1808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state189)) then
                lhs_3_reg_2694 <= lhs_3_fu_1891_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state195)) then
                lhs_4_reg_2725 <= lhs_4_fu_1974_p3;
                ret_10_reg_2730 <= ret_10_fu_1985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state177)) then
                lhs_reg_2624 <= lhs_fu_1706_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1168_reg_2566_pp6_iter63_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter64 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_1_fu_256 <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1168_reg_2566_pp6_iter63_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter64 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_2_fu_260 <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1168_reg_2566_pp6_iter63_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter64 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_3_fu_264 <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1168_reg_2566_pp6_iter63_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter64 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_4_fu_268 <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
                new_z_i_atTop_V_3_fu_252 <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_fu_1015_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                new_z_i_index_addr_3_reg_2420 <= i_5_cast_fu_1021_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1151_fu_1242_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                new_z_i_index_addr_4_reg_2475 <= i_6_cast_fu_1248_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state201)) then
                ppl_assign2_reg_2761 <= grp_makePatch_alignedToLine_fu_721_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1151_reg_2471_pp4_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln1145_reg_2416_pp3_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1)))) then
                reg_841 <= grp_fu_803_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state193) or (ap_const_logic_1 = ap_CS_fsm_state187) or (ap_const_logic_1 = ap_CS_fsm_state181))) then
                reg_852 <= grp_fu_1635_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state202) or (ap_const_logic_1 = ap_CS_fsm_state197))) then
                reg_856 <= n_patches_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                select_ln1142_reg_2403 <= select_ln1142_fu_1001_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state198)) then
                select_ln1216_reg_2749 <= select_ln1216_fu_2014_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state170)) then
                sext_ln1179_reg_2570 <= sext_ln1179_fu_1516_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state204)) then
                sext_ln534_1_reg_2793 <= sext_ln534_1_fu_2149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state204) and (icmp_ln1286_reg_2779 = ap_const_lv1_0))) then
                thirdLastPatchIdx_reg_2803 <= thirdLastPatchIdx_fu_2156_p2;
                    zext_ln1289_reg_2798(7 downto 0) <= zext_ln1289_fu_2153_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1179_fu_1525_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                tmp_20_reg_2593 <= tmp_20_fu_1535_p6;
                trunc_ln534_reg_2588 <= trunc_ln534_fu_1531_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_reg_2416_pp3_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                tmp_33_reg_2455 <= data_V_fu_1120_p1(30 downto 23);
                tmp_34_reg_2461 <= tmp_34_fu_1134_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1151_reg_2471_pp4_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                tmp_35_reg_2486 <= data_V_1_fu_1304_p3(30 downto 23);
                tmp_36_reg_2492 <= tmp_36_fu_1322_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1179_reg_2584_pp7_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                tmp_37_reg_2603 <= data_V_2_fu_1562_p1(62 downto 52);
                tmp_38_reg_2609 <= tmp_38_fu_1576_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                tmp_reg_2336 <= tmp_fu_907_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1166_fu_1466_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                trunc_ln1168_reg_2566 <= trunc_ln1168_fu_1483_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                trunc_ln1168_reg_2566_pp6_iter10_reg <= trunc_ln1168_reg_2566_pp6_iter9_reg;
                trunc_ln1168_reg_2566_pp6_iter11_reg <= trunc_ln1168_reg_2566_pp6_iter10_reg;
                trunc_ln1168_reg_2566_pp6_iter12_reg <= trunc_ln1168_reg_2566_pp6_iter11_reg;
                trunc_ln1168_reg_2566_pp6_iter13_reg <= trunc_ln1168_reg_2566_pp6_iter12_reg;
                trunc_ln1168_reg_2566_pp6_iter14_reg <= trunc_ln1168_reg_2566_pp6_iter13_reg;
                trunc_ln1168_reg_2566_pp6_iter15_reg <= trunc_ln1168_reg_2566_pp6_iter14_reg;
                trunc_ln1168_reg_2566_pp6_iter16_reg <= trunc_ln1168_reg_2566_pp6_iter15_reg;
                trunc_ln1168_reg_2566_pp6_iter17_reg <= trunc_ln1168_reg_2566_pp6_iter16_reg;
                trunc_ln1168_reg_2566_pp6_iter18_reg <= trunc_ln1168_reg_2566_pp6_iter17_reg;
                trunc_ln1168_reg_2566_pp6_iter19_reg <= trunc_ln1168_reg_2566_pp6_iter18_reg;
                trunc_ln1168_reg_2566_pp6_iter20_reg <= trunc_ln1168_reg_2566_pp6_iter19_reg;
                trunc_ln1168_reg_2566_pp6_iter21_reg <= trunc_ln1168_reg_2566_pp6_iter20_reg;
                trunc_ln1168_reg_2566_pp6_iter22_reg <= trunc_ln1168_reg_2566_pp6_iter21_reg;
                trunc_ln1168_reg_2566_pp6_iter23_reg <= trunc_ln1168_reg_2566_pp6_iter22_reg;
                trunc_ln1168_reg_2566_pp6_iter24_reg <= trunc_ln1168_reg_2566_pp6_iter23_reg;
                trunc_ln1168_reg_2566_pp6_iter25_reg <= trunc_ln1168_reg_2566_pp6_iter24_reg;
                trunc_ln1168_reg_2566_pp6_iter26_reg <= trunc_ln1168_reg_2566_pp6_iter25_reg;
                trunc_ln1168_reg_2566_pp6_iter27_reg <= trunc_ln1168_reg_2566_pp6_iter26_reg;
                trunc_ln1168_reg_2566_pp6_iter28_reg <= trunc_ln1168_reg_2566_pp6_iter27_reg;
                trunc_ln1168_reg_2566_pp6_iter29_reg <= trunc_ln1168_reg_2566_pp6_iter28_reg;
                trunc_ln1168_reg_2566_pp6_iter2_reg <= trunc_ln1168_reg_2566_pp6_iter1_reg;
                trunc_ln1168_reg_2566_pp6_iter30_reg <= trunc_ln1168_reg_2566_pp6_iter29_reg;
                trunc_ln1168_reg_2566_pp6_iter31_reg <= trunc_ln1168_reg_2566_pp6_iter30_reg;
                trunc_ln1168_reg_2566_pp6_iter32_reg <= trunc_ln1168_reg_2566_pp6_iter31_reg;
                trunc_ln1168_reg_2566_pp6_iter33_reg <= trunc_ln1168_reg_2566_pp6_iter32_reg;
                trunc_ln1168_reg_2566_pp6_iter34_reg <= trunc_ln1168_reg_2566_pp6_iter33_reg;
                trunc_ln1168_reg_2566_pp6_iter35_reg <= trunc_ln1168_reg_2566_pp6_iter34_reg;
                trunc_ln1168_reg_2566_pp6_iter36_reg <= trunc_ln1168_reg_2566_pp6_iter35_reg;
                trunc_ln1168_reg_2566_pp6_iter37_reg <= trunc_ln1168_reg_2566_pp6_iter36_reg;
                trunc_ln1168_reg_2566_pp6_iter38_reg <= trunc_ln1168_reg_2566_pp6_iter37_reg;
                trunc_ln1168_reg_2566_pp6_iter39_reg <= trunc_ln1168_reg_2566_pp6_iter38_reg;
                trunc_ln1168_reg_2566_pp6_iter3_reg <= trunc_ln1168_reg_2566_pp6_iter2_reg;
                trunc_ln1168_reg_2566_pp6_iter40_reg <= trunc_ln1168_reg_2566_pp6_iter39_reg;
                trunc_ln1168_reg_2566_pp6_iter41_reg <= trunc_ln1168_reg_2566_pp6_iter40_reg;
                trunc_ln1168_reg_2566_pp6_iter42_reg <= trunc_ln1168_reg_2566_pp6_iter41_reg;
                trunc_ln1168_reg_2566_pp6_iter43_reg <= trunc_ln1168_reg_2566_pp6_iter42_reg;
                trunc_ln1168_reg_2566_pp6_iter44_reg <= trunc_ln1168_reg_2566_pp6_iter43_reg;
                trunc_ln1168_reg_2566_pp6_iter45_reg <= trunc_ln1168_reg_2566_pp6_iter44_reg;
                trunc_ln1168_reg_2566_pp6_iter46_reg <= trunc_ln1168_reg_2566_pp6_iter45_reg;
                trunc_ln1168_reg_2566_pp6_iter47_reg <= trunc_ln1168_reg_2566_pp6_iter46_reg;
                trunc_ln1168_reg_2566_pp6_iter48_reg <= trunc_ln1168_reg_2566_pp6_iter47_reg;
                trunc_ln1168_reg_2566_pp6_iter49_reg <= trunc_ln1168_reg_2566_pp6_iter48_reg;
                trunc_ln1168_reg_2566_pp6_iter4_reg <= trunc_ln1168_reg_2566_pp6_iter3_reg;
                trunc_ln1168_reg_2566_pp6_iter50_reg <= trunc_ln1168_reg_2566_pp6_iter49_reg;
                trunc_ln1168_reg_2566_pp6_iter51_reg <= trunc_ln1168_reg_2566_pp6_iter50_reg;
                trunc_ln1168_reg_2566_pp6_iter52_reg <= trunc_ln1168_reg_2566_pp6_iter51_reg;
                trunc_ln1168_reg_2566_pp6_iter53_reg <= trunc_ln1168_reg_2566_pp6_iter52_reg;
                trunc_ln1168_reg_2566_pp6_iter54_reg <= trunc_ln1168_reg_2566_pp6_iter53_reg;
                trunc_ln1168_reg_2566_pp6_iter55_reg <= trunc_ln1168_reg_2566_pp6_iter54_reg;
                trunc_ln1168_reg_2566_pp6_iter56_reg <= trunc_ln1168_reg_2566_pp6_iter55_reg;
                trunc_ln1168_reg_2566_pp6_iter57_reg <= trunc_ln1168_reg_2566_pp6_iter56_reg;
                trunc_ln1168_reg_2566_pp6_iter58_reg <= trunc_ln1168_reg_2566_pp6_iter57_reg;
                trunc_ln1168_reg_2566_pp6_iter59_reg <= trunc_ln1168_reg_2566_pp6_iter58_reg;
                trunc_ln1168_reg_2566_pp6_iter5_reg <= trunc_ln1168_reg_2566_pp6_iter4_reg;
                trunc_ln1168_reg_2566_pp6_iter60_reg <= trunc_ln1168_reg_2566_pp6_iter59_reg;
                trunc_ln1168_reg_2566_pp6_iter61_reg <= trunc_ln1168_reg_2566_pp6_iter60_reg;
                trunc_ln1168_reg_2566_pp6_iter62_reg <= trunc_ln1168_reg_2566_pp6_iter61_reg;
                trunc_ln1168_reg_2566_pp6_iter63_reg <= trunc_ln1168_reg_2566_pp6_iter62_reg;
                trunc_ln1168_reg_2566_pp6_iter6_reg <= trunc_ln1168_reg_2566_pp6_iter5_reg;
                trunc_ln1168_reg_2566_pp6_iter7_reg <= trunc_ln1168_reg_2566_pp6_iter6_reg;
                trunc_ln1168_reg_2566_pp6_iter8_reg <= trunc_ln1168_reg_2566_pp6_iter7_reg;
                trunc_ln1168_reg_2566_pp6_iter9_reg <= trunc_ln1168_reg_2566_pp6_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln1100_reg_2282(7 downto 0) <= zext_ln1100_fu_861_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state198) and (icmp_ln1233_reg_2745 = ap_const_lv1_1))) then
                    zext_ln1252_reg_2756(7 downto 0) <= zext_ln1252_fu_2026_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln1100_reg_2282(8) <= '0';
    zext_ln1104_reg_2294(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_2326(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln1136_reg_2345(9) <= '0';
    i_4_cast_reg_2369(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_2393(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_2506(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_2506_pp5_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_32_cast_reg_2652(0) <= '0';
    zext_ln1252_reg_2756(8) <= '0';
    zext_ln1289_reg_2798(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp4_iter1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln1104_fu_875_p2, icmp_ln870_fu_881_p2, ap_enable_reg_pp0_iter0, icmp_ln1113_fu_896_p2, tmp_fu_907_p3, ap_CS_fsm_state71, ap_enable_reg_pp1_iter0, icmp_ln1136_fu_950_p2, ap_enable_reg_pp2_iter0, icmp_ln1126_fu_967_p2, ap_enable_reg_pp3_iter0, icmp_ln1145_fu_1015_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, icmp_ln1151_fu_1242_p2, ap_enable_reg_pp5_iter0, icmp_ln1158_fu_1430_p2, icmp_ln1166_fu_1466_p2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp7_iter5, ap_CS_fsm_state201, icmp_ln1286_reg_2779, ap_CS_fsm_state204, icmp_ln1296_reg_2808, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter7, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter63, ap_enable_reg_pp6_iter64, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter4, grp_makePatch_alignedToLine_fu_721_ap_done, grp_areWedgeSuperPointsEqual_fu_759_ap_return, grp_delete_patch_fu_771_ap_done, grp_get_index_from_z_fu_783_ap_done, ap_CS_fsm_state68, ap_CS_fsm_state225, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228, ap_block_state199_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_get_index_from_z_fu_783_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln870_fu_881_p2 = ap_const_lv1_1) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln870_fu_881_p2 = ap_const_lv1_0) and (icmp_ln1104_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_get_index_from_z_fu_783_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln1113_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln1113_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                if (((tmp_fu_907_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln1136_fu_950_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln1136_fu_950_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln1126_fu_967_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln1126_fu_967_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1145_fu_1015_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1145_fu_1015_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln1151_fu_1242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((icmp_ln1151_fu_1242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln1158_fu_1430_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((icmp_ln1158_fu_1430_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1166_fu_1466_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter64 = ap_const_logic_1) and (ap_enable_reg_pp6_iter63 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1166_fu_1466_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter64 = ap_const_logic_1) and (ap_enable_reg_pp6_iter63 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state170;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state177;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state177 => 
                ap_NS_fsm <= ap_ST_fsm_state178;
            when ap_ST_fsm_state178 => 
                ap_NS_fsm <= ap_ST_fsm_state179;
            when ap_ST_fsm_state179 => 
                ap_NS_fsm <= ap_ST_fsm_state180;
            when ap_ST_fsm_state180 => 
                ap_NS_fsm <= ap_ST_fsm_state181;
            when ap_ST_fsm_state181 => 
                ap_NS_fsm <= ap_ST_fsm_state182;
            when ap_ST_fsm_state182 => 
                ap_NS_fsm <= ap_ST_fsm_state183;
            when ap_ST_fsm_state183 => 
                ap_NS_fsm <= ap_ST_fsm_state184;
            when ap_ST_fsm_state184 => 
                ap_NS_fsm <= ap_ST_fsm_state185;
            when ap_ST_fsm_state185 => 
                ap_NS_fsm <= ap_ST_fsm_state186;
            when ap_ST_fsm_state186 => 
                ap_NS_fsm <= ap_ST_fsm_state187;
            when ap_ST_fsm_state187 => 
                ap_NS_fsm <= ap_ST_fsm_state188;
            when ap_ST_fsm_state188 => 
                ap_NS_fsm <= ap_ST_fsm_state189;
            when ap_ST_fsm_state189 => 
                ap_NS_fsm <= ap_ST_fsm_state190;
            when ap_ST_fsm_state190 => 
                ap_NS_fsm <= ap_ST_fsm_state191;
            when ap_ST_fsm_state191 => 
                ap_NS_fsm <= ap_ST_fsm_state192;
            when ap_ST_fsm_state192 => 
                ap_NS_fsm <= ap_ST_fsm_state193;
            when ap_ST_fsm_state193 => 
                ap_NS_fsm <= ap_ST_fsm_state194;
            when ap_ST_fsm_state194 => 
                ap_NS_fsm <= ap_ST_fsm_state195;
            when ap_ST_fsm_state195 => 
                ap_NS_fsm <= ap_ST_fsm_state196;
            when ap_ST_fsm_state196 => 
                ap_NS_fsm <= ap_ST_fsm_state197;
            when ap_ST_fsm_state197 => 
                ap_NS_fsm <= ap_ST_fsm_state198;
            when ap_ST_fsm_state198 => 
                ap_NS_fsm <= ap_ST_fsm_state199;
            when ap_ST_fsm_state199 => 
                if (((ap_const_boolean_0 = ap_block_state199_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state199))) then
                    ap_NS_fsm <= ap_ST_fsm_state200;
                else
                    ap_NS_fsm <= ap_ST_fsm_state199;
                end if;
            when ap_ST_fsm_state200 => 
                ap_NS_fsm <= ap_ST_fsm_state201;
            when ap_ST_fsm_state201 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state201) and (grp_makePatch_alignedToLine_fu_721_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state202;
                else
                    ap_NS_fsm <= ap_ST_fsm_state201;
                end if;
            when ap_ST_fsm_state202 => 
                ap_NS_fsm <= ap_ST_fsm_state203;
            when ap_ST_fsm_state203 => 
                ap_NS_fsm <= ap_ST_fsm_state204;
            when ap_ST_fsm_state204 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state204) and (icmp_ln1286_reg_2779 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state205;
                else
                    ap_NS_fsm <= ap_ST_fsm_state248;
                end if;
            when ap_ST_fsm_state205 => 
                ap_NS_fsm <= ap_ST_fsm_state206;
            when ap_ST_fsm_state206 => 
                ap_NS_fsm <= ap_ST_fsm_state207;
            when ap_ST_fsm_state207 => 
                ap_NS_fsm <= ap_ST_fsm_state208;
            when ap_ST_fsm_state208 => 
                ap_NS_fsm <= ap_ST_fsm_state209;
            when ap_ST_fsm_state209 => 
                ap_NS_fsm <= ap_ST_fsm_state210;
            when ap_ST_fsm_state210 => 
                ap_NS_fsm <= ap_ST_fsm_state211;
            when ap_ST_fsm_state211 => 
                ap_NS_fsm <= ap_ST_fsm_state212;
            when ap_ST_fsm_state212 => 
                ap_NS_fsm <= ap_ST_fsm_state213;
            when ap_ST_fsm_state213 => 
                ap_NS_fsm <= ap_ST_fsm_state214;
            when ap_ST_fsm_state214 => 
                ap_NS_fsm <= ap_ST_fsm_state215;
            when ap_ST_fsm_state215 => 
                ap_NS_fsm <= ap_ST_fsm_state216;
            when ap_ST_fsm_state216 => 
                ap_NS_fsm <= ap_ST_fsm_state217;
            when ap_ST_fsm_state217 => 
                ap_NS_fsm <= ap_ST_fsm_state218;
            when ap_ST_fsm_state218 => 
                ap_NS_fsm <= ap_ST_fsm_state219;
            when ap_ST_fsm_state219 => 
                ap_NS_fsm <= ap_ST_fsm_state220;
            when ap_ST_fsm_state220 => 
                ap_NS_fsm <= ap_ST_fsm_state221;
            when ap_ST_fsm_state221 => 
                ap_NS_fsm <= ap_ST_fsm_state222;
            when ap_ST_fsm_state222 => 
                ap_NS_fsm <= ap_ST_fsm_state223;
            when ap_ST_fsm_state223 => 
                ap_NS_fsm <= ap_ST_fsm_state224;
            when ap_ST_fsm_state224 => 
                ap_NS_fsm <= ap_ST_fsm_state225;
            when ap_ST_fsm_state225 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state225) and (grp_areWedgeSuperPointsEqual_fu_759_ap_return = ap_const_lv1_1) and (icmp_ln1296_reg_2808 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state205;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state225) and (icmp_ln1296_reg_2808 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state227;
                else
                    ap_NS_fsm <= ap_ST_fsm_state226;
                end if;
            when ap_ST_fsm_state226 => 
                ap_NS_fsm <= ap_ST_fsm_state248;
            when ap_ST_fsm_state227 => 
                ap_NS_fsm <= ap_ST_fsm_state228;
            when ap_ST_fsm_state228 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state228) and (grp_delete_patch_fu_771_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state229;
                else
                    ap_NS_fsm <= ap_ST_fsm_state228;
                end if;
            when ap_ST_fsm_state229 => 
                ap_NS_fsm <= ap_ST_fsm_state230;
            when ap_ST_fsm_state230 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state230) and (grp_makePatch_alignedToLine_fu_721_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state231;
                else
                    ap_NS_fsm <= ap_ST_fsm_state230;
                end if;
            when ap_ST_fsm_state231 => 
                ap_NS_fsm <= ap_ST_fsm_state232;
            when ap_ST_fsm_state232 => 
                ap_NS_fsm <= ap_ST_fsm_state233;
            when ap_ST_fsm_state233 => 
                ap_NS_fsm <= ap_ST_fsm_state234;
            when ap_ST_fsm_state234 => 
                ap_NS_fsm <= ap_ST_fsm_state235;
            when ap_ST_fsm_state235 => 
                ap_NS_fsm <= ap_ST_fsm_state236;
            when ap_ST_fsm_state236 => 
                ap_NS_fsm <= ap_ST_fsm_state237;
            when ap_ST_fsm_state237 => 
                ap_NS_fsm <= ap_ST_fsm_state238;
            when ap_ST_fsm_state238 => 
                ap_NS_fsm <= ap_ST_fsm_state239;
            when ap_ST_fsm_state239 => 
                ap_NS_fsm <= ap_ST_fsm_state240;
            when ap_ST_fsm_state240 => 
                ap_NS_fsm <= ap_ST_fsm_state241;
            when ap_ST_fsm_state241 => 
                ap_NS_fsm <= ap_ST_fsm_state242;
            when ap_ST_fsm_state242 => 
                ap_NS_fsm <= ap_ST_fsm_state243;
            when ap_ST_fsm_state243 => 
                ap_NS_fsm <= ap_ST_fsm_state244;
            when ap_ST_fsm_state244 => 
                ap_NS_fsm <= ap_ST_fsm_state245;
            when ap_ST_fsm_state245 => 
                ap_NS_fsm <= ap_ST_fsm_state246;
            when ap_ST_fsm_state246 => 
                ap_NS_fsm <= ap_ST_fsm_state247;
            when ap_ST_fsm_state247 => 
                ap_NS_fsm <= ap_ST_fsm_state248;
            when ap_ST_fsm_state248 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state182, ap_CS_fsm_state188, ap_CS_fsm_state194, ap_CS_fsm_state201, ap_enable_reg_pp5_iter1, grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_address0, grp_get_index_from_z_fu_783_GDarrayDecoded_address0, ap_CS_fsm_state68, ap_block_pp5_stage0, ap_CS_fsm_state230, tmp_24_fu_1457_p3, zext_ln1203_fu_1793_p1, zext_ln1208_fu_1833_p1, zext_ln1213_fu_1916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state194)) then 
            GDarrayDecoded_address0 <= zext_ln1213_fu_1916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state188)) then 
            GDarrayDecoded_address0 <= zext_ln1208_fu_1833_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state182)) then 
            GDarrayDecoded_address0 <= zext_ln1203_fu_1793_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            GDarrayDecoded_address0 <= tmp_24_fu_1457_p3(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            GDarrayDecoded_address0 <= grp_get_index_from_z_fu_783_GDarrayDecoded_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            GDarrayDecoded_address0 <= grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    GDarrayDecoded_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state182, ap_CS_fsm_state188, ap_CS_fsm_state194, ap_CS_fsm_state201, ap_enable_reg_pp5_iter1, grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_ce0, grp_get_index_from_z_fu_783_GDarrayDecoded_ce0, ap_CS_fsm_state68, ap_CS_fsm_state230)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state188) or (ap_const_logic_1 = ap_CS_fsm_state182) or (ap_const_logic_1 = ap_CS_fsm_state194) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            GDarrayDecoded_ce0 <= grp_get_index_from_z_fu_783_GDarrayDecoded_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            GDarrayDecoded_ce0 <= grp_makePatch_alignedToLine_fu_721_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state74, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_GDn_points_address0, grp_get_index_from_z_fu_783_GDn_points_address0, ap_CS_fsm_state68, ap_CS_fsm_state230, i_5_cast_fu_1021_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            GDn_points_address0 <= i_5_cast_fu_1021_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            GDn_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            GDn_points_address0 <= grp_get_index_from_z_fu_783_GDn_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            GDn_points_address0 <= grp_makePatch_alignedToLine_fu_721_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state74, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_GDn_points_ce0, grp_get_index_from_z_fu_783_GDn_points_ce0, ap_CS_fsm_state68, ap_CS_fsm_state230)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            GDn_points_ce0 <= grp_get_index_from_z_fu_783_GDn_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_721_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1106_fu_865_p2 <= std_logic_vector(unsigned(i_reg_525) + unsigned(ap_const_lv3_1));
    add_ln1111_fu_885_p2 <= std_logic_vector(unsigned(zext_ln1100_reg_2282) + unsigned(ap_const_lv9_1));
    add_ln1113_fu_890_p2 <= std_logic_vector(unsigned(i_2_reg_537) + unsigned(ap_const_lv3_1));
    add_ln1123_fu_929_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(ap_const_lv32_1));
    add_ln1124_fu_934_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_74_phi_fu_551_p4) + unsigned(ap_const_lv9_1FF));
    add_ln1126_fu_961_p2 <= std_logic_vector(unsigned(i_3_reg_568) + unsigned(ap_const_lv3_1));
    add_ln1128_fu_978_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_FF));
    add_ln1133_fu_914_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(ap_const_lv32_1));
    add_ln1134_fu_919_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_74_phi_fu_551_p4) + unsigned(ap_const_lv9_1));
    add_ln1136_fu_944_p2 <= std_logic_vector(unsigned(i_4_reg_557) + unsigned(ap_const_lv3_1));
    add_ln1142_fu_989_p2 <= std_logic_vector(unsigned(GDn_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1145_fu_1009_p2 <= std_logic_vector(unsigned(i_5_reg_608) + unsigned(ap_const_lv3_1));
    add_ln1151_fu_1236_p2 <= std_logic_vector(unsigned(i_6_reg_619) + unsigned(ap_const_lv3_1));
    add_ln1158_fu_1424_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_7_phi_fu_634_p4) + unsigned(ap_const_lv3_1));
    add_ln1171_fu_1472_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_8_phi_fu_646_p4) + unsigned(ap_const_lv3_1));
    add_ln1179_fu_1519_p2 <= std_logic_vector(unsigned(i_9_reg_653) + unsigned(ap_const_lv3_1));
    add_ln1203_fu_1787_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_1779_p3) + unsigned(ap_const_lv12_801));
    add_ln1208_fu_1828_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_2652) + unsigned(ap_const_lv12_601));
    add_ln1213_fu_1911_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_2652) + unsigned(ap_const_lv12_401));
    add_ln1232_fu_2020_p2 <= std_logic_vector(unsigned(reg_856) + unsigned(ap_const_lv8_FF));
    add_ln1264_fu_2081_p2 <= std_logic_vector(unsigned(sub_ln1264_fu_2075_p2) + unsigned(ap_const_lv12_30));
    add_ln1265_fu_2098_p2 <= std_logic_vector(unsigned(sub_ln1264_fu_2075_p2) + unsigned(ap_const_lv12_37));
    add_ln1296_fu_2168_p2 <= std_logic_vector(unsigned(i_10_reg_687) + unsigned(ap_const_lv3_1));
    add_ln1316_fu_2174_p2 <= std_logic_vector(unsigned(select_ln1142_reg_2403) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln341_1_fu_1342_p2 <= std_logic_vector(unsigned(zext_ln341_1_fu_1339_p1) + unsigned(ap_const_lv9_181));
    add_ln341_fu_1154_p2 <= std_logic_vector(unsigned(zext_ln341_fu_1151_p1) + unsigned(ap_const_lv9_181));
    add_ln510_fu_1596_p2 <= std_logic_vector(unsigned(zext_ln510_fu_1593_p1) + unsigned(ap_const_lv12_C01));
    and_ln1147_1_fu_1108_p2 <= (grp_fu_809_p2 and and_ln1147_fu_1102_p2);
    and_ln1147_fu_1102_p2 <= (or_ln1147_fu_1078_p2 and or_ln1147_1_fu_1096_p2);
    and_ln1153_fu_1294_p2 <= (or_ln1153_fu_1288_p2 and grp_fu_809_p2);
    and_ln1201_fu_1802_p2 <= (or_ln1201_fu_1798_p2 and grp_fu_1628_p_dout0);
    and_ln1206_fu_1885_p2 <= (or_ln1206_fu_1881_p2 and grp_fu_1628_p_dout0);
    and_ln1211_fu_1968_p2 <= (or_ln1211_fu_1964_p2 and grp_fu_1628_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(68);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(70);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(72);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(76);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(78);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(80);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(82);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(77);
    ap_CS_fsm_state104 <= ap_CS_fsm(79);
    ap_CS_fsm_state170 <= ap_CS_fsm(81);
    ap_CS_fsm_state177 <= ap_CS_fsm(83);
    ap_CS_fsm_state178 <= ap_CS_fsm(84);
    ap_CS_fsm_state181 <= ap_CS_fsm(87);
    ap_CS_fsm_state182 <= ap_CS_fsm(88);
    ap_CS_fsm_state183 <= ap_CS_fsm(89);
    ap_CS_fsm_state184 <= ap_CS_fsm(90);
    ap_CS_fsm_state187 <= ap_CS_fsm(93);
    ap_CS_fsm_state188 <= ap_CS_fsm(94);
    ap_CS_fsm_state189 <= ap_CS_fsm(95);
    ap_CS_fsm_state190 <= ap_CS_fsm(96);
    ap_CS_fsm_state193 <= ap_CS_fsm(99);
    ap_CS_fsm_state194 <= ap_CS_fsm(100);
    ap_CS_fsm_state195 <= ap_CS_fsm(101);
    ap_CS_fsm_state196 <= ap_CS_fsm(102);
    ap_CS_fsm_state197 <= ap_CS_fsm(103);
    ap_CS_fsm_state198 <= ap_CS_fsm(104);
    ap_CS_fsm_state199 <= ap_CS_fsm(105);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state200 <= ap_CS_fsm(106);
    ap_CS_fsm_state201 <= ap_CS_fsm(107);
    ap_CS_fsm_state202 <= ap_CS_fsm(108);
    ap_CS_fsm_state203 <= ap_CS_fsm(109);
    ap_CS_fsm_state204 <= ap_CS_fsm(110);
    ap_CS_fsm_state205 <= ap_CS_fsm(111);
    ap_CS_fsm_state206 <= ap_CS_fsm(112);
    ap_CS_fsm_state207 <= ap_CS_fsm(113);
    ap_CS_fsm_state223 <= ap_CS_fsm(129);
    ap_CS_fsm_state224 <= ap_CS_fsm(130);
    ap_CS_fsm_state225 <= ap_CS_fsm(131);
    ap_CS_fsm_state226 <= ap_CS_fsm(132);
    ap_CS_fsm_state227 <= ap_CS_fsm(133);
    ap_CS_fsm_state228 <= ap_CS_fsm(134);
    ap_CS_fsm_state229 <= ap_CS_fsm(135);
    ap_CS_fsm_state230 <= ap_CS_fsm(136);
    ap_CS_fsm_state247 <= ap_CS_fsm(153);
    ap_CS_fsm_state248 <= ap_CS_fsm(154);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state71 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(71);
    ap_CS_fsm_state77 <= ap_CS_fsm(73);
    ap_CS_fsm_state91 <= ap_CS_fsm(75);
    ap_NS_fsm_state206 <= ap_NS_fsm(112);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp6_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp6_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp6_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp6_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp6_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp6_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp6_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp6_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp6_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp6_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp6_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp6_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp6_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp6_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp6_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp6_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp6_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp6_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp6_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp6_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp6_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp6_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp6_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp6_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp6_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp6_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp6_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp6_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp6_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp6_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp6_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp6_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp6_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp6_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp6_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp6_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state147_pp6_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp6_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp6_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp6_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state151_pp6_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp6_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state153_pp6_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state154_pp6_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state155_pp6_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state156_pp6_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state157_pp6_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state158_pp6_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state159_pp6_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state160_pp6_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state161_pp6_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state162_pp6_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state163_pp6_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state164_pp6_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state165_pp6_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state166_pp6_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state167_pp6_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state168_pp6_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state169_pp6_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state171_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state172_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state173_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state174_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state175_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state176_pp7_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state199_on_subcall_done_assign_proc : process(icmp_ln1233_reg_2745, grp_delete_patch_fu_771_ap_done)
    begin
                ap_block_state199_on_subcall_done <= ((grp_delete_patch_fu_771_ap_done = ap_const_logic_0) and (icmp_ln1233_reg_2745 = ap_const_lv1_1));
    end process;

        ap_block_state69_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state69_assign_proc : process(icmp_ln1113_fu_896_p2)
    begin
        if ((icmp_ln1113_fu_896_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state69 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state69 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state72_assign_proc : process(icmp_ln1136_fu_950_p2)
    begin
        if ((icmp_ln1136_fu_950_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state72 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state72 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state75_assign_proc : process(icmp_ln1126_fu_967_p2)
    begin
        if ((icmp_ln1126_fu_967_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state75 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state75 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state78_assign_proc : process(icmp_ln1145_fu_1015_p2)
    begin
        if ((icmp_ln1145_fu_1015_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state78 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state78 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state92_assign_proc : process(icmp_ln1151_fu_1242_p2)
    begin
        if ((icmp_ln1151_fu_1242_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state92 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state92 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state101_assign_proc : process(icmp_ln1158_fu_1430_p2)
    begin
        if ((icmp_ln1158_fu_1430_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state101 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state101 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state105_assign_proc : process(icmp_ln1166_fu_1466_p2)
    begin
        if ((icmp_ln1166_fu_1466_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state105 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state105 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_flush_enable_assign_proc : process(ap_CS_fsm_pp7_stage0, icmp_ln1179_fu_1525_p2, ap_block_pp7_stage0_subdone)
    begin
        if (((icmp_ln1179_fu_1525_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            ap_condition_pp7_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp7_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state248)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state248) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter7)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4, ap_enable_reg_pp6_iter5, ap_enable_reg_pp6_iter6, ap_enable_reg_pp6_iter7, ap_enable_reg_pp6_iter8, ap_enable_reg_pp6_iter9, ap_enable_reg_pp6_iter10, ap_enable_reg_pp6_iter11, ap_enable_reg_pp6_iter12, ap_enable_reg_pp6_iter13, ap_enable_reg_pp6_iter14, ap_enable_reg_pp6_iter15, ap_enable_reg_pp6_iter16, ap_enable_reg_pp6_iter17, ap_enable_reg_pp6_iter18, ap_enable_reg_pp6_iter19, ap_enable_reg_pp6_iter20, ap_enable_reg_pp6_iter21, ap_enable_reg_pp6_iter22, ap_enable_reg_pp6_iter23, ap_enable_reg_pp6_iter24, ap_enable_reg_pp6_iter25, ap_enable_reg_pp6_iter26, ap_enable_reg_pp6_iter27, ap_enable_reg_pp6_iter28, ap_enable_reg_pp6_iter29, ap_enable_reg_pp6_iter30, ap_enable_reg_pp6_iter31, ap_enable_reg_pp6_iter32, ap_enable_reg_pp6_iter33, ap_enable_reg_pp6_iter34, ap_enable_reg_pp6_iter35, ap_enable_reg_pp6_iter36, ap_enable_reg_pp6_iter37, ap_enable_reg_pp6_iter38, ap_enable_reg_pp6_iter39, ap_enable_reg_pp6_iter40, ap_enable_reg_pp6_iter41, ap_enable_reg_pp6_iter42, ap_enable_reg_pp6_iter43, ap_enable_reg_pp6_iter44, ap_enable_reg_pp6_iter45, ap_enable_reg_pp6_iter46, ap_enable_reg_pp6_iter47, ap_enable_reg_pp6_iter48, ap_enable_reg_pp6_iter49, ap_enable_reg_pp6_iter50, ap_enable_reg_pp6_iter51, ap_enable_reg_pp6_iter52, ap_enable_reg_pp6_iter53, ap_enable_reg_pp6_iter54, ap_enable_reg_pp6_iter55, ap_enable_reg_pp6_iter56, ap_enable_reg_pp6_iter57, ap_enable_reg_pp6_iter58, ap_enable_reg_pp6_iter59, ap_enable_reg_pp6_iter60, ap_enable_reg_pp6_iter61, ap_enable_reg_pp6_iter62, ap_enable_reg_pp6_iter63, ap_enable_reg_pp6_iter64)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter64 = ap_const_logic_0) and (ap_enable_reg_pp6_iter63 = ap_const_logic_0) and (ap_enable_reg_pp6_iter62 = ap_const_logic_0) and (ap_enable_reg_pp6_iter61 = ap_const_logic_0) and (ap_enable_reg_pp6_iter60 = ap_const_logic_0) and (ap_enable_reg_pp6_iter59 = ap_const_logic_0) and (ap_enable_reg_pp6_iter58 = ap_const_logic_0) and (ap_enable_reg_pp6_iter57 = ap_const_logic_0) and (ap_enable_reg_pp6_iter56 = ap_const_logic_0) and (ap_enable_reg_pp6_iter55 = ap_const_logic_0) and (ap_enable_reg_pp6_iter54 = ap_const_logic_0) and (ap_enable_reg_pp6_iter53 = ap_const_logic_0) and (ap_enable_reg_pp6_iter52 = ap_const_logic_0) and (ap_enable_reg_pp6_iter51 = ap_const_logic_0) and (ap_enable_reg_pp6_iter50 = ap_const_logic_0) and (ap_enable_reg_pp6_iter49 = ap_const_logic_0) and (ap_enable_reg_pp6_iter48 = ap_const_logic_0) and (ap_enable_reg_pp6_iter47 = ap_const_logic_0) and (ap_enable_reg_pp6_iter46 = ap_const_logic_0) and (ap_enable_reg_pp6_iter45 = ap_const_logic_0) and (ap_enable_reg_pp6_iter44 = ap_const_logic_0) and (ap_enable_reg_pp6_iter43 = ap_const_logic_0) and (ap_enable_reg_pp6_iter42 = ap_const_logic_0) and (ap_enable_reg_pp6_iter41 = ap_const_logic_0) and (ap_enable_reg_pp6_iter40 = ap_const_logic_0) and (ap_enable_reg_pp6_iter39 = ap_const_logic_0) and (ap_enable_reg_pp6_iter38 = ap_const_logic_0) and (ap_enable_reg_pp6_iter37 = ap_const_logic_0) and (ap_enable_reg_pp6_iter36 = ap_const_logic_0) and (ap_enable_reg_pp6_iter35 = ap_const_logic_0) and (ap_enable_reg_pp6_iter34 = ap_const_logic_0) and (ap_enable_reg_pp6_iter33 = ap_const_logic_0) and (ap_enable_reg_pp6_iter32 = ap_const_logic_0) and (ap_enable_reg_pp6_iter31 = ap_const_logic_0) and (ap_enable_reg_pp6_iter30 = ap_const_logic_0) and (ap_enable_reg_pp6_iter29 = ap_const_logic_0) and (ap_enable_reg_pp6_iter28 = ap_const_logic_0) and (ap_enable_reg_pp6_iter27 = ap_const_logic_0) and (ap_enable_reg_pp6_iter26 = ap_const_logic_0) and (ap_enable_reg_pp6_iter25 = ap_const_logic_0) and (ap_enable_reg_pp6_iter24 = ap_const_logic_0) and (ap_enable_reg_pp6_iter23 = ap_const_logic_0) and (ap_enable_reg_pp6_iter22 = ap_const_logic_0) and (ap_enable_reg_pp6_iter21 = ap_const_logic_0) and (ap_enable_reg_pp6_iter20 = ap_const_logic_0) and (ap_enable_reg_pp6_iter19 = ap_const_logic_0) and (ap_enable_reg_pp6_iter18 = ap_const_logic_0) and (ap_enable_reg_pp6_iter17 = ap_const_logic_0) and (ap_enable_reg_pp6_iter16 = ap_const_logic_0) and (ap_enable_reg_pp6_iter15 = ap_const_logic_0) and (ap_enable_reg_pp6_iter14 = ap_const_logic_0) and (ap_enable_reg_pp6_iter13 = ap_const_logic_0) and (ap_enable_reg_pp6_iter12 = ap_const_logic_0) and (ap_enable_reg_pp6_iter11 = ap_const_logic_0) and (ap_enable_reg_pp6_iter10 = ap_const_logic_0) and (ap_enable_reg_pp6_iter9 = ap_const_logic_0) and (ap_enable_reg_pp6_iter8 = ap_const_logic_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_0) and (ap_enable_reg_pp6_iter6 = ap_const_logic_0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter5, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter4)
    begin
        if (((ap_enable_reg_pp7_iter5 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_74_phi_fu_551_p4_assign_proc : process(icmp_ln870_reg_2303, add_ln1111_reg_2307, ap_CS_fsm_state71, empty_74_reg_548)
    begin
        if (((icmp_ln870_reg_2303 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_phi_mux_empty_74_phi_fu_551_p4 <= add_ln1111_reg_2307;
        else 
            ap_phi_mux_empty_74_phi_fu_551_p4 <= empty_74_reg_548;
        end if; 
    end process;


    ap_phi_mux_i_7_phi_fu_634_p4_assign_proc : process(i_7_reg_630, add_ln1158_reg_2497, ap_CS_fsm_pp5_stage0, icmp_ln1158_reg_2502, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((icmp_ln1158_reg_2502 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_7_phi_fu_634_p4 <= add_ln1158_reg_2497;
        else 
            ap_phi_mux_i_7_phi_fu_634_p4 <= i_7_reg_630;
        end if; 
    end process;


    ap_phi_mux_i_8_phi_fu_646_p4_assign_proc : process(i_8_reg_642, icmp_ln1166_reg_2551, ap_CS_fsm_pp6_stage0, add_ln1171_reg_2555, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0)
    begin
        if (((icmp_ln1166_reg_2551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_8_phi_fu_646_p4 <= add_ln1171_reg_2555;
        else 
            ap_phi_mux_i_8_phi_fu_646_p4 <= i_8_reg_642;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state248)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(white_space_height_read, ap_CS_fsm_state248, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_0 <= white_space_height_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(lastPatchIdx_reg_2766, ap_CS_fsm_state248, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_1 <= lastPatchIdx_reg_2766;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(current_z_top_index_0_reg_699, ap_CS_fsm_state248, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_2 <= current_z_top_index_0_reg_699;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(counter_0_reg_579, ap_CS_fsm_state248, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_3 <= counter_0_reg_579;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(counterUpshift_0_reg_589, ap_CS_fsm_state248, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_4 <= counterUpshift_0_reg_589;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(z_top_min_read, ap_CS_fsm_state248, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_5 <= z_top_min_read;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(sext_ln534_1_reg_2793, ap_CS_fsm_state248, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_6 <= sext_ln534_1_reg_2793;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(z_top_min_4_reg_710, ap_CS_fsm_state248, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state248)) then 
            ap_return_7 <= z_top_min_4_reg_710;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;

    bitcast_ln1147_1_fu_1049_p1 <= sub_reg_2448_pp3_iter10_reg;
    bitcast_ln1147_fu_1032_p1 <= conv_reg_2441_pp3_iter10_reg;
    bitcast_ln1153_fu_1258_p1 <= reg_841_pp4_iter5_reg;
    bitcast_ln521_1_fu_1850_p1 <= zext_ln368_1_fu_1846_p1;
    bitcast_ln521_2_fu_1933_p1 <= zext_ln368_2_fu_1929_p1;
    bitcast_ln521_fu_1745_p1 <= zext_ln368_fu_1741_p1;

    current_z_i_index_address0_assign_proc : process(zext_ln1104_reg_2294, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, i_2_cast_fu_902_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_4_cast_fu_956_p1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_3_cast_fu_973_p1, ap_CS_fsm_state68, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            current_z_i_index_address0 <= i_3_cast_fu_973_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            current_z_i_index_address0 <= i_4_cast_fu_956_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_z_i_index_address0 <= i_2_cast_fu_902_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            current_z_i_index_address0 <= zext_ln1104_reg_2294(3 - 1 downto 0);
        else 
            current_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, grp_get_index_from_z_fu_783_ap_done, ap_CS_fsm_state68)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_get_index_from_z_fu_783_ap_done = ap_const_logic_1)))) then 
            current_z_i_index_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_we0_assign_proc : process(grp_get_index_from_z_fu_783_ap_done, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_get_index_from_z_fu_783_ap_done = ap_const_logic_1))) then 
            current_z_i_index_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_1304_p3 <= 
        ap_const_lv31_0 when (and_ln1153_fu_1294_p2(0) = '1') else 
        trunc_ln312_fu_1300_p1;
    data_V_2_fu_1562_p1 <= grp_fu_1635_p_dout0;
    data_V_3_fu_1733_p1 <= reg_852;
    data_V_4_fu_1838_p1 <= reg_852;
    data_V_5_fu_1921_p1 <= reg_852;
    data_V_fu_1120_p1 <= dc_fu_1114_p3;
    dc_fu_1114_p3 <= 
        conv_reg_2441_pp3_iter10_reg when (and_ln1147_1_fu_1108_p2(0) = '1') else 
        sub_reg_2448_pp3_iter10_reg;
    grp_areWedgeSuperPointsEqual_fu_759_ap_start <= grp_areWedgeSuperPointsEqual_fu_759_ap_start_reg;
    grp_delete_patch_fu_771_ap_start <= grp_delete_patch_fu_771_ap_start_reg;

    grp_delete_patch_fu_771_index_assign_proc : process(icmp_ln1233_reg_2745, zext_ln1252_reg_2756, zext_ln1289_reg_2798, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state228)) then 
            grp_delete_patch_fu_771_index <= zext_ln1289_reg_2798;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1))) then 
            grp_delete_patch_fu_771_index <= zext_ln1252_reg_2756;
        else 
            grp_delete_patch_fu_771_index <= "XXXXXXXXX";
        end if; 
    end process;

    grp_fu_1628_p_ce <= ap_const_logic_1;
    grp_fu_1628_p_din0 <= grp_fu_814_p0;
    grp_fu_1628_p_din1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_1628_p_opcode <= ap_const_lv5_4;
    grp_fu_1635_p_ce <= ap_const_logic_1;
    grp_fu_1635_p_din0 <= grp_fu_819_p0;
    grp_fu_1638_p_ce <= ap_const_logic_1;
    grp_fu_1638_p_din0 <= sext_ln534_fu_1990_p1(33 - 1 downto 0);
    grp_fu_1638_p_din1 <= white_space_height_read;
    grp_fu_1993_ce <= ap_const_logic_1;
    grp_fu_1993_p0 <= sext_ln534_fu_1990_p1(33 - 1 downto 0);
    grp_fu_1993_p1 <= white_space_height_read;
    grp_fu_1993_p2 <= grp_fu_1638_p_dout0;

    grp_fu_803_p0_assign_proc : process(GDn_points_load_1_reg_2431, zext_ln1153_fu_1253_p1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter2, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            grp_fu_803_p0 <= zext_ln1153_fu_1253_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            grp_fu_803_p0 <= GDn_points_load_1_reg_2431;
        else 
            grp_fu_803_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_806_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_847),32));

    grp_fu_809_p0_assign_proc : process(reg_841, conv_reg_2441, ap_enable_reg_pp3_iter10, ap_enable_reg_pp4_iter5, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then 
            grp_fu_809_p0 <= reg_841;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_1))) then 
            grp_fu_809_p0 <= conv_reg_2441;
        else 
            grp_fu_809_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_809_p1_assign_proc : process(sub_reg_2448, ap_enable_reg_pp3_iter10, ap_enable_reg_pp4_iter5, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then 
            grp_fu_809_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_1))) then 
            grp_fu_809_p1 <= sub_reg_2448;
        else 
            grp_fu_809_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_814_ce <= ap_const_logic_1;
    grp_fu_814_opcode <= ap_const_lv5_4;

    grp_fu_814_p0_assign_proc : process(bitcast_ln521_fu_1745_p1, ap_CS_fsm_state182, ap_CS_fsm_state188, bitcast_ln521_1_fu_1850_p1, ap_CS_fsm_state194, bitcast_ln521_2_fu_1933_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state194)) then 
            grp_fu_814_p0 <= bitcast_ln521_2_fu_1933_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state188)) then 
            grp_fu_814_p0 <= bitcast_ln521_1_fu_1850_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state182)) then 
            grp_fu_814_p0 <= bitcast_ln521_fu_1745_p1;
        else 
            grp_fu_814_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_814_p1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_814_p2 <= grp_fu_1628_p_dout0;
    grp_fu_819_ce <= ap_const_logic_1;

    grp_fu_819_p0_assign_proc : process(ap_CS_fsm_pp7_stage0, sext_ln277_3_fu_1557_p1, sext_ln277_fu_1728_p1, ap_CS_fsm_state178, sext_ln277_1_fu_1823_p1, ap_CS_fsm_state184, sext_ln277_2_fu_1906_p1, ap_CS_fsm_state190, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
            grp_fu_819_p0 <= sext_ln277_2_fu_1906_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state184)) then 
            grp_fu_819_p0 <= sext_ln277_1_fu_1823_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state178)) then 
            grp_fu_819_p0 <= sext_ln277_fu_1728_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            grp_fu_819_p0 <= sext_ln277_3_fu_1557_p1;
        else 
            grp_fu_819_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_819_p1 <= grp_fu_1635_p_dout0;
    grp_fu_822_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_1));
    grp_get_index_from_z_fu_783_ap_start <= grp_get_index_from_z_fu_783_ap_start_reg;

    grp_get_index_from_z_fu_783_layer_assign_proc : process(ap_CS_fsm_state2, i_reg_525, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_get_index_from_z_fu_783_layer <= i_reg_525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_783_layer <= ap_const_lv3_4;
        else 
            grp_get_index_from_z_fu_783_layer <= "XXX";
        end if; 
    end process;


    grp_get_index_from_z_fu_783_z_value_assign_proc : process(z_top_min_read, ap_CS_fsm_state2, agg_tmp7_reg_2312, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_get_index_from_z_fu_783_z_value <= agg_tmp7_reg_2312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_783_z_value <= z_top_min_read;
        else 
            grp_get_index_from_z_fu_783_z_value <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_makePatch_alignedToLine_fu_721_ap_start <= grp_makePatch_alignedToLine_fu_721_ap_start_reg;

    grp_makePatch_alignedToLine_fu_721_p_read_assign_proc : process(ppl, ppl_assign2_reg_2761, ap_CS_fsm_state201, ap_CS_fsm_state230)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state230)) then 
            grp_makePatch_alignedToLine_fu_721_p_read <= ppl_assign2_reg_2761;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state201)) then 
            grp_makePatch_alignedToLine_fu_721_p_read <= ppl;
        else 
            grp_makePatch_alignedToLine_fu_721_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_makePatch_alignedToLine_fu_721_z_top_assign_proc : process(lhs_reg_2624, select_ln1216_reg_2749, ap_CS_fsm_state201, ap_CS_fsm_state230)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state230)) then 
            grp_makePatch_alignedToLine_fu_721_z_top <= lhs_reg_2624;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state201)) then 
            grp_makePatch_alignedToLine_fu_721_z_top <= select_ln1216_reg_2749;
        else 
            grp_makePatch_alignedToLine_fu_721_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din1 <= complementary_apexZ0;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din2 <= grp_straightLineProjectorFromLayerIJtoK_fu_744_z_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din3 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din4 <= grp_straightLineProjectorFromLayerIJtoK_fu_744_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_din5 <= grp_straightLineProjectorFromLayerIJtoK_fu_744_k;
    grp_straightLineProjectorFromLayerIJtoK_fu_600_p_start <= grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_done <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_done;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_idle <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_idle;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_ready <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_ready;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_600_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_744_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_744_i <= ap_const_lv3_1;

    grp_straightLineProjectorFromLayerIJtoK_fu_744_j_assign_proc : process(icmp_ln1166_reg_2551, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, ap_CS_fsm_state4, zext_ln1168_fu_1487_p1)
    begin
        if (((icmp_ln1166_reg_2551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_j <= zext_ln1168_fu_1487_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_j <= ap_const_lv32_5;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_744_k_assign_proc : process(add_ln1106_reg_2288, icmp_ln1166_reg_2551, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((icmp_ln1166_reg_2551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_k <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_k <= add_ln1106_reg_2288;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_k <= "XXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_744_z_i <= complementary_apexZ0;

    grp_straightLineProjectorFromLayerIJtoK_fu_744_z_j_assign_proc : process(z_top_min_read, icmp_ln1166_reg_2551, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, new_z_i_V_q0, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((icmp_ln1166_reg_2551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_z_j <= new_z_i_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_z_j <= z_top_min_read;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_744_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_537),64));
    i_3_cast_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_568),64));
    i_4_cast_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_557),64));
    i_5_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_608),64));
    i_6_cast_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_619),64));
    i_7_cast_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_7_phi_fu_634_p4),64));
    icmp_ln1104_fu_875_p2 <= "1" when (i_reg_525 = ap_const_lv3_5) else "0";
    icmp_ln1113_fu_896_p2 <= "1" when (i_2_reg_537 = ap_const_lv3_5) else "0";
    icmp_ln1126_fu_967_p2 <= "1" when (i_3_reg_568 = ap_const_lv3_5) else "0";
    icmp_ln1136_fu_950_p2 <= "1" when (i_4_reg_557 = ap_const_lv3_5) else "0";
    icmp_ln1142_fu_995_p2 <= "1" when (signed(sext_ln1142_fu_985_p1) < signed(add_ln1142_fu_989_p2)) else "0";
    icmp_ln1145_fu_1015_p2 <= "1" when (i_5_reg_608 = ap_const_lv3_5) else "0";
    icmp_ln1147_1_fu_1072_p2 <= "1" when (trunc_ln1147_fu_1045_p1 = ap_const_lv23_0) else "0";
    icmp_ln1147_2_fu_1084_p2 <= "0" when (tmp_2_fu_1052_p4 = ap_const_lv8_FF) else "1";
    icmp_ln1147_3_fu_1090_p2 <= "1" when (trunc_ln1147_1_fu_1062_p1 = ap_const_lv23_0) else "0";
    icmp_ln1147_fu_1066_p2 <= "0" when (tmp_1_fu_1035_p4 = ap_const_lv8_FF) else "1";
    icmp_ln1151_fu_1242_p2 <= "1" when (i_6_reg_619 = ap_const_lv3_5) else "0";
    icmp_ln1153_1_fu_1282_p2 <= "1" when (trunc_ln1153_fu_1272_p1 = ap_const_lv23_0) else "0";
    icmp_ln1153_fu_1276_p2 <= "0" when (tmp_9_fu_1262_p4 = ap_const_lv8_FF) else "1";
    icmp_ln1158_fu_1430_p2 <= "1" when (ap_phi_mux_i_7_phi_fu_634_p4 = ap_const_lv3_5) else "0";
    icmp_ln1166_fu_1466_p2 <= "1" when (ap_phi_mux_i_8_phi_fu_646_p4 = ap_const_lv3_5) else "0";
    icmp_ln1179_fu_1525_p2 <= "1" when (i_9_reg_653 = ap_const_lv3_4) else "0";
    icmp_ln1181_fu_1677_p2 <= "1" when (signed(val_2_fu_1669_p3) < signed(layerSMin_reg_664)) else "0";
    icmp_ln1201_1_fu_1770_p2 <= "1" when (trunc_ln1201_fu_1760_p1 = ap_const_lv52_0) else "0";
    icmp_ln1201_fu_1764_p2 <= "0" when (tmp_10_fu_1750_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1206_1_fu_1875_p2 <= "1" when (trunc_ln1206_fu_1865_p1 = ap_const_lv52_0) else "0";
    icmp_ln1206_fu_1869_p2 <= "0" when (tmp_13_fu_1855_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1211_1_fu_1958_p2 <= "1" when (trunc_ln1211_fu_1948_p1 = ap_const_lv52_0) else "0";
    icmp_ln1211_fu_1952_p2 <= "0" when (tmp_17_fu_1938_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1233_fu_2006_p2 <= "1" when (unsigned(n_patches_i) > unsigned(nPatchesAtOriginal)) else "0";
    icmp_ln1286_fu_2051_p2 <= "1" when (tmp_32_fu_2041_p4 = ap_const_lv6_0) else "0";
    icmp_ln1296_fu_2162_p2 <= "1" when (unsigned(i_10_reg_687) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln870_fu_881_p0 <= z_top_min_read;
    icmp_ln870_fu_881_p2 <= "1" when (icmp_ln870_fu_881_p0 = previous_z_top_min_read) else "0";
    icmp_ln878_fu_2135_p2 <= "1" when (signed(ret_13_fu_2116_p2) < signed(ret_14_fu_2129_p2)) else "0";
    isNeg_1_fu_1348_p3 <= add_ln341_1_fu_1342_p2(8 downto 8);
    isNeg_2_fu_1602_p3 <= add_ln510_fu_1596_p2(11 downto 11);
    isNeg_fu_1160_p3 <= add_ln341_fu_1154_p2(8 downto 8);
    lastPatchIdx_fu_2031_p2 <= std_logic_vector(unsigned(n_patches_i) + unsigned(ap_const_lv8_FF));
    layerSMin_1_fu_1694_p3 <= 
        val_2_fu_1669_p3 when (icmp_ln1181_fu_1677_p2(0) = '1') else 
        layerSMin_reg_664;
    layerWithSmallestShift_1_fu_1686_p3 <= 
        zext_ln1181_fu_1683_p1 when (icmp_ln1181_fu_1677_p2(0) = '1') else 
        layerWithSmallestShift_reg_675;
    lhs_2_fu_1808_p3 <= 
        GDarrayDecoded_q0 when (and_ln1201_fu_1802_p2(0) = '1') else 
        lhs_reg_2624;
    lhs_3_fu_1891_p3 <= 
        GDarrayDecoded_q0 when (and_ln1206_fu_1885_p2(0) = '1') else 
        lhs_2_reg_2663;
    lhs_4_fu_1974_p3 <= 
        GDarrayDecoded_q0 when (and_ln1211_fu_1968_p2(0) = '1') else 
        lhs_3_reg_2694;
    lhs_fu_1706_p5 <= layerWithSmallestShift_reg_675(2 - 1 downto 0);
    mantissa_1_fu_1326_p4 <= ((ap_const_lv1_1 & tmp_36_reg_2492) & ap_const_lv1_0);
    mantissa_2_fu_1580_p4 <= ((ap_const_lv1_1 & tmp_38_reg_2609) & ap_const_lv1_0);
    mantissa_fu_1138_p4 <= ((ap_const_lv1_1 & tmp_34_reg_2461) & ap_const_lv1_0);

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln1233_reg_2745, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_n_patches_o, grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld, grp_delete_patch_fu_771_n_patches, grp_delete_patch_fu_771_n_patches_ap_vld, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state228) and (grp_delete_patch_fu_771_n_patches_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (grp_delete_patch_fu_771_n_patches_ap_vld = ap_const_logic_1) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            n_patches_o <= grp_delete_patch_fu_771_n_patches;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state230) and (grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state201) and (grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_721_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld, grp_delete_patch_fu_771_n_patches_ap_vld, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            n_patches_o_ap_vld <= grp_delete_patch_fu_771_n_patches_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_721_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_address0_assign_proc : process(i_7_cast_reg_2506_pp5_iter1_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, ap_block_pp6_stage0, trunc_ln1171_cast_fu_1478_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            new_z_i_V_address0 <= trunc_ln1171_cast_fu_1478_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            new_z_i_V_address0 <= i_7_cast_reg_2506_pp5_iter1_reg(3 - 1 downto 0);
        else 
            new_z_i_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_V_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter2)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)))) then 
            new_z_i_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln1158_reg_2502_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((icmp_ln1158_reg_2502_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            new_z_i_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp0_stage0, i_2_cast_reg_2326, ap_CS_fsm_pp1_stage0, i_4_cast_reg_2369, ap_CS_fsm_pp2_stage0, i_3_cast_reg_2393, new_z_i_index_addr_3_reg_2420_pp3_iter11_reg, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter12, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, i_6_cast_fu_1248_p1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            new_z_i_index_address0 <= i_6_cast_fu_1248_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1))) then 
            new_z_i_index_address0 <= new_z_i_index_addr_3_reg_2420_pp3_iter11_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            new_z_i_index_address0 <= i_3_cast_reg_2393(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            new_z_i_index_address0 <= i_4_cast_reg_2369(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            new_z_i_index_address0 <= i_2_cast_reg_2326(3 - 1 downto 0);
        else 
            new_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_address1_assign_proc : process(new_z_i_index_addr_3_reg_2420_pp3_iter4_reg, new_z_i_index_addr_4_reg_2475_pp4_iter6_reg, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, i_7_cast_fu_1436_p1, ap_enable_reg_pp3_iter5, ap_enable_reg_pp4_iter7, ap_block_pp5_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            new_z_i_index_address1 <= i_7_cast_fu_1436_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_4_reg_2475_pp4_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_3_reg_2420_pp3_iter4_reg;
        else 
            new_z_i_index_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter12)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1)))) then 
            new_z_i_index_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_ce1_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp3_iter5, ap_enable_reg_pp4_iter7)
    begin
        if ((((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1)))) then 
            new_z_i_index_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter12, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, grp_fu_822_p2, add_ln1128_fu_978_p2, val_fu_1227_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1))) then 
            new_z_i_index_d0 <= val_fu_1227_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            new_z_i_index_d0 <= add_ln1128_fu_978_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            new_z_i_index_d0 <= grp_fu_822_p2;
        else 
            new_z_i_index_d0 <= "XXXXXXXX";
        end if; 
    end process;

    new_z_i_index_d1 <= 
        zext_ln662_1_fu_1401_p1 when (isNeg_1_fu_1348_p3(0) = '1') else 
        tmp_18_fu_1405_p4;

    new_z_i_index_we0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1113_reg_2322, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln1136_reg_2365, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln1126_reg_2389, icmp_ln1145_reg_2416_pp3_iter11_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter12)
    begin
        if ((((icmp_ln1145_reg_2416_pp3_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter12 = ap_const_logic_1)) or ((icmp_ln1126_reg_2389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((icmp_ln1136_reg_2365 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((icmp_ln1113_reg_2322 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            new_z_i_index_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_we1_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln1151_reg_2471_pp4_iter6_reg, ap_enable_reg_pp4_iter7)
    begin
        if (((icmp_ln1151_reg_2471_pp4_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1))) then 
            new_z_i_index_we1 <= ap_const_logic_1;
        else 
            new_z_i_index_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1147_1_fu_1096_p2 <= (icmp_ln1147_3_fu_1090_p2 or icmp_ln1147_2_fu_1084_p2);
    or_ln1147_fu_1078_p2 <= (icmp_ln1147_fu_1066_p2 or icmp_ln1147_1_fu_1072_p2);
    or_ln1153_fu_1288_p2 <= (icmp_ln1153_fu_1276_p2 or icmp_ln1153_1_fu_1282_p2);
    or_ln1160_fu_1451_p2 <= (tmp_22_fu_1441_p4 or ap_const_lv12_1);
    or_ln1201_fu_1798_p2 <= (icmp_ln1201_reg_2642 or icmp_ln1201_1_reg_2647);
    or_ln1206_fu_1881_p2 <= (icmp_ln1206_reg_2684 or icmp_ln1206_1_reg_2689);
    or_ln1211_fu_1964_p2 <= (icmp_ln1211_reg_2715 or icmp_ln1211_1_reg_2720);
    or_ln1264_fu_2087_p2 <= (ap_const_lv12_1 or add_ln1264_fu_2081_p2);
    p_Result_1_fu_1842_p1 <= data_V_4_fu_1838_p1(63 - 1 downto 0);
    p_Result_2_fu_1925_p1 <= data_V_5_fu_1921_p1(63 - 1 downto 0);
    p_Result_s_fu_1737_p1 <= data_V_3_fu_1733_p1(63 - 1 downto 0);

    patches_parameters_address0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, ap_CS_fsm_state203, grp_makePatch_alignedToLine_fu_721_patches_parameters_address0, grp_delete_patch_fu_771_patches_parameters_V_address0, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228, zext_ln1265_fu_2104_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            patches_parameters_address0 <= zext_ln1265_fu_2104_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_parameters_address0 <= grp_delete_patch_fu_771_patches_parameters_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_721_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state203, grp_delete_patch_fu_771_patches_parameters_V_address1, ap_CS_fsm_state199, ap_CS_fsm_state228, zext_ln1264_1_fu_2093_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            patches_parameters_address1 <= zext_ln1264_1_fu_2093_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_parameters_address1 <= grp_delete_patch_fu_771_patches_parameters_V_address1;
        else 
            patches_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, ap_CS_fsm_state203, grp_makePatch_alignedToLine_fu_721_patches_parameters_ce0, grp_delete_patch_fu_771_patches_parameters_V_ce0, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_parameters_ce0 <= grp_delete_patch_fu_771_patches_parameters_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_721_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state203, grp_delete_patch_fu_771_patches_parameters_V_ce1, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_parameters_ce1 <= grp_delete_patch_fu_771_patches_parameters_V_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_patches_parameters_d0, grp_delete_patch_fu_771_patches_parameters_V_d0, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_parameters_d0 <= grp_delete_patch_fu_771_patches_parameters_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_721_patches_parameters_d0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_patches_parameters_we0, grp_delete_patch_fu_771_patches_parameters_V_we0, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_parameters_we0 <= grp_delete_patch_fu_771_patches_parameters_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_721_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, icmp_ln1296_reg_2808, grp_makePatch_alignedToLine_fu_721_patches_superpoints_address0, grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address0, grp_delete_patch_fu_771_patches_superpoints_address0, ap_CS_fsm_state230, ap_CS_fsm_state206, ap_CS_fsm_state207, ap_CS_fsm_state223, ap_CS_fsm_state224, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_superpoints_address0 <= grp_delete_patch_fu_771_patches_superpoints_address0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state224) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state223) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state207) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state206) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)))) then 
            patches_superpoints_address0 <= grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_721_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_address1_assign_proc : process(icmp_ln1233_reg_2745, icmp_ln1296_reg_2808, grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address1, grp_delete_patch_fu_771_patches_superpoints_address1, ap_CS_fsm_state206, ap_CS_fsm_state207, ap_CS_fsm_state223, ap_CS_fsm_state224, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_superpoints_address1 <= grp_delete_patch_fu_771_patches_superpoints_address1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state224) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state223) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state207) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state206) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)))) then 
            patches_superpoints_address1 <= grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_address1;
        else 
            patches_superpoints_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, icmp_ln1296_reg_2808, grp_makePatch_alignedToLine_fu_721_patches_superpoints_ce0, grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce0, grp_delete_patch_fu_771_patches_superpoints_ce0, ap_CS_fsm_state230, ap_CS_fsm_state206, ap_CS_fsm_state207, ap_CS_fsm_state223, ap_CS_fsm_state224, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_superpoints_ce0 <= grp_delete_patch_fu_771_patches_superpoints_ce0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state224) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state223) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state207) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state206) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)))) then 
            patches_superpoints_ce0 <= grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_721_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln1233_reg_2745, icmp_ln1296_reg_2808, grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce1, grp_delete_patch_fu_771_patches_superpoints_ce1, ap_CS_fsm_state206, ap_CS_fsm_state207, ap_CS_fsm_state223, ap_CS_fsm_state224, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_superpoints_ce1 <= grp_delete_patch_fu_771_patches_superpoints_ce1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state224) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state223) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state207) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state206) and (icmp_ln1296_reg_2808 = ap_const_lv1_1)))) then 
            patches_superpoints_ce1 <= grp_areWedgeSuperPointsEqual_fu_759_wsp1_2_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_patches_superpoints_d0, grp_delete_patch_fu_771_patches_superpoints_d0, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_superpoints_d0 <= grp_delete_patch_fu_771_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_721_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(icmp_ln1233_reg_2745, ap_CS_fsm_state201, grp_makePatch_alignedToLine_fu_721_patches_superpoints_we0, grp_delete_patch_fu_771_patches_superpoints_we0, ap_CS_fsm_state230, ap_CS_fsm_state199, ap_CS_fsm_state228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state228) or ((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln1233_reg_2745 = ap_const_lv1_1)))) then 
            patches_superpoints_we0 <= grp_delete_patch_fu_771_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_721_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_1199_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_1147_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1189_p1(31-1 downto 0)))));
    r_V_2_fu_1381_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_1_fu_1335_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i48_cast_cast_cast_cast_fu_1377_p1(31-1 downto 0)))));
    r_V_3_fu_1387_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_1_fu_1335_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i48_cast_cast_cast_cast_fu_1377_p1(31-1 downto 0)))));
    r_V_4_fu_1635_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1589_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1631_p1(31-1 downto 0)))));
    r_V_5_fu_1641_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1589_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1631_p1(31-1 downto 0)))));
    r_V_fu_1193_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_1147_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1189_p1(31-1 downto 0)))));
    ret_10_fu_1985_p2 <= std_logic_vector(signed(sext_ln215_6_fu_1981_p1) - signed(sext_ln1179_reg_2570));
    ret_13_fu_2116_p2 <= std_logic_vector(signed(sext_ln215_7_fu_2109_p1) - signed(sext_ln215_8_fu_2112_p1));
    ret_14_fu_2129_p2 <= std_logic_vector(signed(sext_ln215_9_fu_2122_p1) - signed(sext_ln215_10_fu_2125_p1));
    ret_4_fu_1723_p2 <= std_logic_vector(signed(sext_ln215_fu_1720_p1) - signed(sext_ln1179_reg_2570));
    ret_6_fu_1818_p2 <= std_logic_vector(signed(sext_ln215_4_fu_1815_p1) - signed(sext_ln1179_reg_2570));
    ret_8_fu_1901_p2 <= std_logic_vector(signed(sext_ln215_5_fu_1898_p1) - signed(sext_ln1179_reg_2570));
    select_ln1142_fu_1001_p3 <= 
        sext_ln1142_fu_985_p1 when (icmp_ln1142_fu_995_p2(0) = '1') else 
        add_ln1142_fu_989_p2;
    select_ln1216_fu_2014_p3 <= 
        new_z_i_atTop_V_3_fu_252 when (tmp_27_reg_2740(0) = '1') else 
        lhs_4_reg_2725;
    select_ln1270_fu_2141_p3 <= 
        ret_14_fu_2129_p2 when (icmp_ln878_fu_2135_p2(0) = '1') else 
        ret_13_fu_2116_p2;
        sext_ln1126_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1124_fu_934_p2),10));

        sext_ln1142_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_77_reg_599),32));

    sext_ln1179_fu_1516_p0 <= z_top_min_read;
        sext_ln1179_fu_1516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1179_fu_1516_p0),33));

        sext_ln1181_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_reg_2593),33));

        sext_ln1311_1_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_1356_p2),9));

        sext_ln1311_2_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_1610_p2),12));

        sext_ln1311_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1168_p2),9));

        sext_ln215_10_fu_2125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q0),33));

        sext_ln215_4_fu_1815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_2_reg_2663),33));

        sext_ln215_5_fu_1898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_reg_2694),33));

        sext_ln215_6_fu_1981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_4_fu_1974_p3),33));

        sext_ln215_7_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_c),33));

        sext_ln215_8_fu_2112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q1),33));

        sext_ln215_9_fu_2122_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_d),33));

        sext_ln215_fu_1720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_reg_2624),33));

        sext_ln277_1_fu_1823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_6_fu_1818_p2),64));

        sext_ln277_2_fu_1906_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_8_fu_1901_p2),64));

        sext_ln277_3_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1181_fu_1552_p2),64));

        sext_ln277_fu_1728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_4_fu_1723_p2),64));

        sext_ln534_1_fu_2149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1270_fu_2141_p3),64));

        sext_ln534_fu_1990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_10_reg_2730),64));

    sh_prom_i_i_i_i_i48_cast_cast_cast_cast_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i48_cast_cast_cast_fu_1373_p1),55));
        sh_prom_i_i_i_i_i48_cast_cast_cast_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_1365_p3),32));

    sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i75_cast_cast_cast_fu_1627_p1),169));
        sh_prom_i_i_i_i_i75_cast_cast_cast_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1619_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1185_p1),55));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1177_p3),32));

    sub_ln1181_fu_1552_p2 <= std_logic_vector(signed(sext_ln1181_fu_1549_p1) - signed(sext_ln1179_reg_2570));
    sub_ln1264_fu_2075_p2 <= std_logic_vector(unsigned(tmp_37_cast_fu_2057_p3) - unsigned(zext_ln1264_fu_2071_p1));
    sub_ln1311_1_fu_1356_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_35_reg_2486));
    sub_ln1311_2_fu_1610_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_37_reg_2603));
    sub_ln1311_fu_1168_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_33_reg_2455));
    thirdLastPatchIdx_fu_2156_p2 <= std_logic_vector(unsigned(reg_856) + unsigned(ap_const_lv8_FD));
    tmp_10_fu_1750_p4 <= data_V_3_fu_1733_p1(62 downto 52);
    tmp_13_fu_1855_p4 <= data_V_4_fu_1838_p1(62 downto 52);
    tmp_14_fu_1217_p4 <= r_V_1_fu_1199_p2(31 downto 24);
    tmp_17_fu_1938_p4 <= data_V_5_fu_1921_p1(62 downto 52);
    tmp_18_fu_1405_p4 <= r_V_3_fu_1387_p2(31 downto 24);
    tmp_1_fu_1035_p4 <= bitcast_ln1147_fu_1032_p1(30 downto 23);
    tmp_20_fu_1535_p5 <= i_9_reg_653(2 - 1 downto 0);
    tmp_21_fu_1205_p3 <= r_V_fu_1193_p2(24 downto 24);
    tmp_22_fu_1441_p4 <= ((i_7_reg_630 & new_z_i_index_q1) & ap_const_lv1_0);
    tmp_24_fu_1457_p3 <= (ap_const_lv52_0 & or_ln1160_fu_1451_p2);
    tmp_26_fu_1393_p3 <= r_V_2_fu_1381_p2(24 downto 24);
    tmp_28_fu_1659_p4 <= r_V_5_fu_1641_p2(116 downto 53);
    tmp_29_fu_2064_p3 <= (lastPatchIdx_reg_2766 & ap_const_lv3_0);
    tmp_2_fu_1052_p4 <= bitcast_ln1147_1_fu_1049_p1(30 downto 23);
    tmp_31_fu_1647_p3 <= r_V_4_fu_1635_p2(53 downto 53);
    tmp_32_cast_fu_1779_p3 <= (trunc_ln1203_fu_1776_p1 & ap_const_lv1_0);
    tmp_32_fu_2041_p4 <= n_patches_i(7 downto 2);
    tmp_34_fu_1134_p1 <= data_V_fu_1120_p1(23 - 1 downto 0);
    tmp_36_fu_1322_p1 <= data_V_1_fu_1304_p3(23 - 1 downto 0);
    tmp_37_cast_fu_2057_p3 <= (trunc_ln1264_reg_2774 & ap_const_lv7_0);
    tmp_38_fu_1576_p1 <= data_V_2_fu_1562_p1(52 - 1 downto 0);
    tmp_9_fu_1262_p4 <= bitcast_ln1153_fu_1258_p1(30 downto 23);
    tmp_fu_907_p1 <= white_space_height_read;
    tmp_fu_907_p3 <= tmp_fu_907_p1(63 downto 63);
    trunc_ln1147_1_fu_1062_p1 <= bitcast_ln1147_1_fu_1049_p1(23 - 1 downto 0);
    trunc_ln1147_fu_1045_p1 <= bitcast_ln1147_fu_1032_p1(23 - 1 downto 0);
    trunc_ln1153_fu_1272_p1 <= bitcast_ln1153_fu_1258_p1(23 - 1 downto 0);
    trunc_ln1168_fu_1483_p1 <= ap_phi_mux_i_8_phi_fu_646_p4(2 - 1 downto 0);
    trunc_ln1171_cast_fu_1478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_8_phi_fu_646_p4),64));
    trunc_ln1201_fu_1760_p1 <= data_V_3_fu_1733_p1(52 - 1 downto 0);
    trunc_ln1203_fu_1776_p1 <= select_ln1142_reg_2403(11 - 1 downto 0);
    trunc_ln1206_fu_1865_p1 <= data_V_4_fu_1838_p1(52 - 1 downto 0);
    trunc_ln1211_fu_1948_p1 <= data_V_5_fu_1921_p1(52 - 1 downto 0);
    trunc_ln1264_fu_2037_p1 <= lastPatchIdx_fu_2031_p2(5 - 1 downto 0);
    trunc_ln312_fu_1300_p1 <= bitcast_ln1153_fu_1258_p1(31 - 1 downto 0);
    trunc_ln534_fu_1531_p1 <= i_9_reg_653(2 - 1 downto 0);
    ush_1_fu_1365_p3 <= 
        sext_ln1311_1_fu_1361_p1 when (isNeg_1_fu_1348_p3(0) = '1') else 
        add_ln341_1_fu_1342_p2;
    ush_2_fu_1619_p3 <= 
        sext_ln1311_2_fu_1615_p1 when (isNeg_2_fu_1602_p3(0) = '1') else 
        add_ln510_fu_1596_p2;
    ush_fu_1177_p3 <= 
        sext_ln1311_fu_1173_p1 when (isNeg_fu_1160_p3(0) = '1') else 
        add_ln341_fu_1154_p2;
    val_2_fu_1669_p3 <= 
        zext_ln662_2_fu_1655_p1 when (isNeg_2_fu_1602_p3(0) = '1') else 
        tmp_28_fu_1659_p4;
    val_fu_1227_p3 <= 
        zext_ln662_fu_1213_p1 when (isNeg_fu_1160_p3(0) = '1') else 
        tmp_14_fu_1217_p4;
    zext_ln1100_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_get_index_from_z_fu_783_ap_return),9));
    zext_ln1104_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_525),64));
    zext_ln1136_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1134_fu_919_p2),10));
    zext_ln1153_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_847),32));
    zext_ln1168_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_reg_2555),32));
    zext_ln1181_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln534_reg_2588_pp7_iter4_reg),8));
    zext_ln1203_fu_1793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1203_fu_1787_p2),64));
    zext_ln1208_fu_1833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1208_fu_1828_p2),64));
    zext_ln1213_fu_1916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1213_fu_1911_p2),64));
    zext_ln1252_fu_2026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1232_fu_2020_p2),9));
    zext_ln1264_1_fu_2093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1264_fu_2087_p2),64));
    zext_ln1264_fu_2071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_2064_p3),12));
    zext_ln1265_fu_2104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1265_fu_2098_p2),64));
    zext_ln1289_fu_2153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lastPatchIdx_reg_2766),9));
    zext_ln15_fu_1589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1580_p4),169));
    zext_ln341_1_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_reg_2486),9));
    zext_ln341_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_2455),9));
    zext_ln368_1_fu_1846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_1842_p1),64));
    zext_ln368_2_fu_1929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_1925_p1),64));
    zext_ln368_fu_1741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_1737_p1),64));
    zext_ln510_fu_1593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_2603),12));
    zext_ln662_1_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1393_p3),8));
    zext_ln662_2_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1647_p3),64));
    zext_ln662_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1205_p3),8));
    zext_ln68_1_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_1326_p4),55));
    zext_ln68_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1138_p4),55));
end behav;
